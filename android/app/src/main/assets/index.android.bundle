(function(global) {

global.__DEV__ = true;

global.__BUNDLE_START_TIME__ = Date.now();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

'use strict';

global.require = _require;
global.__d = define;

var modules = Object.create(null);
if (__DEV__) {
  var verboseNamesToModuleIds = Object.create(null);
}

function define(factory, moduleId, dependencyMap) {
  if (moduleId in modules) {
    return;
  }
  modules[moduleId] = {
    dependencyMap: dependencyMap,
    exports: undefined,
    factory: factory,
    hasError: false,
    isInitialized: false
  };
  if (__DEV__) {
    modules[moduleId].hot = createHotReloadingObject();

    var _verboseName = arguments[3];
    if (_verboseName) {
      modules[moduleId].verboseName = _verboseName;
      verboseNamesToModuleIds[_verboseName] = moduleId;
    }
  }
}

function _require(moduleId) {
  if (__DEV__ && typeof moduleId === 'string') {
    var _verboseName2 = moduleId;
    moduleId = verboseNamesToModuleIds[moduleId];
    if (moduleId == null) {
      throw new Error('Unknown named module: \'' + _verboseName2 + '\'');
    } else {
      console.warn('Requiring module \'' + _verboseName2 + '\' by name is only supported for ' + 'debugging purposes and will BREAK IN PRODUCTION!');
    }
  }

  var moduleIdReallyIsNumber = moduleId;
  var module = modules[moduleIdReallyIsNumber];
  return module && module.isInitialized ? module.exports : guardedLoadModule(moduleIdReallyIsNumber, module);
}

var inGuard = false;
function guardedLoadModule(moduleId, module) {
  if (!inGuard && global.ErrorUtils) {
    inGuard = true;
    var returnValue = void 0;
    try {
      returnValue = loadModuleImplementation(moduleId, module);
    } catch (e) {
      global.ErrorUtils.reportFatalError(e);
    }
    inGuard = false;
    return returnValue;
  } else {
    return loadModuleImplementation(moduleId, module);
  }
}

function loadModuleImplementation(moduleId, module) {
  var nativeRequire = global.nativeRequire;
  if (!module && nativeRequire) {
    nativeRequire(moduleId);
    module = modules[moduleId];
  }

  if (!module) {
    throw unknownModuleError(moduleId);
  }

  if (module.hasError) {
    throw moduleThrewError(moduleId);
  }

  if (__DEV__) {
    var Systrace = _require.Systrace;
  }

  module.isInitialized = true;
  var exports = module.exports = {};
  var _module = module,
      factory = _module.factory,
      dependencyMap = _module.dependencyMap;

  try {
    if (__DEV__) {
      Systrace.beginEvent('JS_require_' + (module.verboseName || moduleId));
    }

    var _moduleObject = { exports: exports };
    if (__DEV__ && module.hot) {
      _moduleObject.hot = module.hot;
    }

    factory(global, _require, _moduleObject, exports, dependencyMap);

    if (!__DEV__) {
      module.factory = undefined;
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
    return module.exports = _moduleObject.exports;
  } catch (e) {
    module.hasError = true;
    module.isInitialized = false;
    module.exports = undefined;
    throw e;
  }
}

function unknownModuleError(id) {
  var message = 'Requiring unknown module "' + id + '".';
  if (__DEV__) {
    message += 'If you are sure the module is there, try restarting the packager or running "npm install".';
  }
  return Error(message);
}

function moduleThrewError(id) {
  return Error('Requiring module "' + id + '", which threw an exception.');
}

if (__DEV__) {
  _require.Systrace = { beginEvent: function beginEvent() {}, endEvent: function endEvent() {} };

  var createHotReloadingObject = function createHotReloadingObject() {
    var hot = {
      acceptCallback: null,
      accept: function accept(callback) {
        hot.acceptCallback = callback;
      }
    };
    return hot;
  };

  var acceptAll = function acceptAll(dependentModules, inverseDependencies) {
    if (!dependentModules || dependentModules.length === 0) {
      return true;
    }

    var notAccepted = dependentModules.filter(function (module) {
      return !_accept(module, undefined, inverseDependencies);
    });

    var parents = [];
    for (var i = 0; i < notAccepted.length; i++) {
      if (inverseDependencies[notAccepted[i]].length === 0) {
        return false;
      }

      parents.push.apply(parents, babelHelpers.toConsumableArray(inverseDependencies[notAccepted[i]]));
    }

    return acceptAll(parents, inverseDependencies);
  };

  var _accept = function _accept(id, factory, inverseDependencies) {
    var mod = modules[id];

    if (!mod && factory) {
      define(factory, id);
      return true;
    }

    var hot = mod.hot;

    if (!hot) {
      console.warn('Cannot accept module because Hot Module Replacement ' + 'API was not installed.');
      return false;
    }

    if (factory) {
      mod.factory = factory;
    }
    mod.hasError = false;
    mod.isInitialized = false;
    _require(id);

    if (hot.acceptCallback) {
      hot.acceptCallback();
      return true;
    } else {
      if (!inverseDependencies) {
        throw new Error('Undefined `inverseDependencies`');
      }

      return acceptAll(inverseDependencies[id], inverseDependencies);
    }
  };

  global.__accept = _accept;
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

Object.assign = function (target, sources) {
  if (__DEV__) {
    if (target == null) {
      throw new TypeError('Object.assign target cannot be null or undefined');
    }
    if (typeof target !== 'object' && typeof target !== 'function') {
      throw new TypeError('In this environment the target of assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
    }
  }

  for (var nextIndex = 1; nextIndex < arguments.length; nextIndex++) {
    var nextSource = arguments[nextIndex];
    if (nextSource == null) {
      continue;
    }

    if (__DEV__) {
      if (typeof nextSource !== 'object' && typeof nextSource !== 'function') {
        throw new TypeError('In this environment the sources for assign MUST be an object.' + 'This error is a performance optimization and not spec compliant.');
      }
    }

    for (var key in nextSource) {
      if (__DEV__) {
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        if (!hasOwnProperty.call(nextSource, key)) {
          throw new TypeError('One of the sources for assign has an enumerable key on the ' + 'prototype chain. Are you trying to assign a prototype property? ' + 'We don\'t allow it, as this is an edge case that we do not support. ' + 'This error is a performance optimization and not spec compliant.');
        }
      }
      target[key] = nextSource[key];
    }
  }

  return target;
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
var inspect = function () {

  function inspect(obj, opts) {
    var ctx = {
      seen: [],
      stylize: stylizeNoColor
    };
    return formatValue(ctx, obj, opts.depth);
  }

  function stylizeNoColor(str, styleType) {
    return str;
  }

  function arrayToHash(array) {
    var hash = {};

    array.forEach(function (val, idx) {
      hash[val] = true;
    });

    return hash;
  }

  function formatValue(ctx, value, recurseTimes) {
    var primitive = formatPrimitive(ctx, value);
    if (primitive) {
      return primitive;
    }

    var keys = Object.keys(value);
    var visibleKeys = arrayToHash(keys);

    if (isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
      return formatError(value);
    }

    if (keys.length === 0) {
      if (isFunction(value)) {
        var name = value.name ? ': ' + value.name : '';
        return ctx.stylize('[Function' + name + ']', 'special');
      }
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      }
      if (isDate(value)) {
        return ctx.stylize(Date.prototype.toString.call(value), 'date');
      }
      if (isError(value)) {
        return formatError(value);
      }
    }

    var base = '',
        array = false,
        braces = ['{', '}'];

    if (isArray(value)) {
      array = true;
      braces = ['[', ']'];
    }

    if (isFunction(value)) {
      var n = value.name ? ': ' + value.name : '';
      base = ' [Function' + n + ']';
    }

    if (isRegExp(value)) {
      base = ' ' + RegExp.prototype.toString.call(value);
    }

    if (isDate(value)) {
      base = ' ' + Date.prototype.toUTCString.call(value);
    }

    if (isError(value)) {
      base = ' ' + formatError(value);
    }

    if (keys.length === 0 && (!array || value.length == 0)) {
      return braces[0] + base + braces[1];
    }

    if (recurseTimes < 0) {
      if (isRegExp(value)) {
        return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
      } else {
        return ctx.stylize('[Object]', 'special');
      }
    }

    ctx.seen.push(value);

    var output;
    if (array) {
      output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    } else {
      output = keys.map(function (key) {
        return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
      });
    }

    ctx.seen.pop();

    return reduceToSingleString(output, base, braces);
  }

  function formatPrimitive(ctx, value) {
    if (isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if (isString(value)) {
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');
    }
    if (isNumber(value)) return ctx.stylize('' + value, 'number');
    if (isBoolean(value)) return ctx.stylize('' + value, 'boolean');

    if (isNull(value)) return ctx.stylize('null', 'null');
  }

  function formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
  }

  function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for (var i = 0, l = value.length; i < l; ++i) {
      if (hasOwnProperty(value, String(i))) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
      } else {
        output.push('');
      }
    }
    keys.forEach(function (key) {
      if (!key.match(/^\d+$/)) {
        output.push(formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
      }
    });
    return output;
  }

  function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
    if (desc.get) {
      if (desc.set) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (desc.set) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
    if (!hasOwnProperty(visibleKeys, key)) {
      name = '[' + key + ']';
    }
    if (!str) {
      if (ctx.seen.indexOf(desc.value) < 0) {
        if (isNull(recurseTimes)) {
          str = formatValue(ctx, desc.value, null);
        } else {
          str = formatValue(ctx, desc.value, recurseTimes - 1);
        }
        if (str.indexOf('\n') > -1) {
          if (array) {
            str = str.split('\n').map(function (line) {
              return '  ' + line;
            }).join('\n').substr(2);
          } else {
            str = '\n' + str.split('\n').map(function (line) {
              return '   ' + line;
            }).join('\n');
          }
        }
      } else {
        str = ctx.stylize('[Circular]', 'special');
      }
    }
    if (isUndefined(name)) {
      if (array && key.match(/^\d+$/)) {
        return str;
      }
      name = JSON.stringify('' + key);
      if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
        name = name.substr(1, name.length - 2);
        name = ctx.stylize(name, 'name');
      } else {
        name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
        name = ctx.stylize(name, 'string');
      }
    }

    return name + ': ' + str;
  }

  function reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function (prev, cur) {
      numLinesEst++;
      if (cur.indexOf('\n') >= 0) numLinesEst++;
      return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);

    if (length > 60) {
      return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    }

    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
  }

  function isArray(ar) {
    return Array.isArray(ar);
  }

  function isBoolean(arg) {
    return typeof arg === 'boolean';
  }

  function isNull(arg) {
    return arg === null;
  }

  function isNullOrUndefined(arg) {
    return arg == null;
  }

  function isNumber(arg) {
    return typeof arg === 'number';
  }

  function isString(arg) {
    return typeof arg === 'string';
  }

  function isSymbol(arg) {
    return typeof arg === 'symbol';
  }

  function isUndefined(arg) {
    return arg === void 0;
  }

  function isRegExp(re) {
    return isObject(re) && objectToString(re) === '[object RegExp]';
  }

  function isObject(arg) {
    return typeof arg === 'object' && arg !== null;
  }

  function isDate(d) {
    return isObject(d) && objectToString(d) === '[object Date]';
  }

  function isError(e) {
    return isObject(e) && (objectToString(e) === '[object Error]' || e instanceof Error);
  }

  function isFunction(arg) {
    return typeof arg === 'function';
  }

  function isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
  }

  function objectToString(o) {
    return Object.prototype.toString.call(o);
  }

  function hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
  }

  return inspect;
}();

var OBJECT_COLUMN_NAME = '(index)';
var LOG_LEVELS = {
  trace: 0,
  info: 1,
  warn: 2,
  error: 3
};
var INSPECTOR_LEVELS = [];
INSPECTOR_LEVELS[LOG_LEVELS.trace] = 'debug';
INSPECTOR_LEVELS[LOG_LEVELS.info] = 'log';
INSPECTOR_LEVELS[LOG_LEVELS.warn] = 'warning';
INSPECTOR_LEVELS[LOG_LEVELS.error] = 'error';

var INSPECTOR_FRAMES_TO_SKIP = __DEV__ ? 2 : 1;

function setupConsole(global) {
  if (!global.nativeLoggingHook) {
    return;
  }

  function getNativeLogFunction(level) {
    return function () {
      var str = void 0;
      if (arguments.length === 1 && typeof arguments[0] === 'string') {
        str = arguments[0];
      } else {
        str = Array.prototype.map.call(arguments, function (arg) {
          return inspect(arg, { depth: 10 });
        }).join(', ');
      }

      var logLevel = level;
      if (str.slice(0, 9) === 'Warning: ' && logLevel >= LOG_LEVELS.error) {
        logLevel = LOG_LEVELS.warn;
      }
      if (global.__inspectorLog) {
        global.__inspectorLog(INSPECTOR_LEVELS[logLevel], str, [].slice.call(arguments), INSPECTOR_FRAMES_TO_SKIP);
      }
      global.nativeLoggingHook(str, logLevel);
    };
  }

  function repeat(element, n) {
    return Array.apply(null, Array(n)).map(function () {
      return element;
    });
  };

  function consoleTablePolyfill(rows) {
    if (!Array.isArray(rows)) {
      var data = rows;
      rows = [];
      for (var key in data) {
        if (data.hasOwnProperty(key)) {
          var row = data[key];
          row[OBJECT_COLUMN_NAME] = key;
          rows.push(row);
        }
      }
    }
    if (rows.length === 0) {
      global.nativeLoggingHook('', LOG_LEVELS.info);
      return;
    }

    var columns = Object.keys(rows[0]).sort();
    var stringRows = [];
    var columnWidths = [];

    columns.forEach(function (k, i) {
      columnWidths[i] = k.length;
      for (var j = 0; j < rows.length; j++) {
        var cellStr = (rows[j][k] || '?').toString();
        stringRows[j] = stringRows[j] || [];
        stringRows[j][i] = cellStr;
        columnWidths[i] = Math.max(columnWidths[i], cellStr.length);
      }
    });

    function joinRow(row, space) {
      var cells = row.map(function (cell, i) {
        var extraSpaces = repeat(' ', columnWidths[i] - cell.length).join('');
        return cell + extraSpaces;
      });
      space = space || ' ';
      return cells.join(space + '|' + space);
    };

    var separators = columnWidths.map(function (columnWidth) {
      return repeat('-', columnWidth).join('');
    });
    var separatorRow = joinRow(separators, '-');
    var header = joinRow(columns);
    var table = [header, separatorRow];

    for (var i = 0; i < rows.length; i++) {
      table.push(joinRow(stringRows[i]));
    }

    global.nativeLoggingHook('\n' + table.join('\n'), LOG_LEVELS.info);
  }

  var originalConsole = global.console;
  var descriptor = Object.getOwnPropertyDescriptor(global, 'console');
  if (descriptor) {
    Object.defineProperty(global, 'originalConsole', descriptor);
  }

  global.console = {
    error: getNativeLogFunction(LOG_LEVELS.error),
    info: getNativeLogFunction(LOG_LEVELS.info),
    log: getNativeLogFunction(LOG_LEVELS.info),
    warn: getNativeLogFunction(LOG_LEVELS.warn),
    trace: getNativeLogFunction(LOG_LEVELS.trace),
    debug: getNativeLogFunction(LOG_LEVELS.trace),
    table: consoleTablePolyfill
  };

  if (__DEV__ && originalConsole) {
    Object.keys(console).forEach(function (methodName) {
      var reactNativeMethod = console[methodName];
      if (originalConsole[methodName]) {
        console[methodName] = function () {
          originalConsole[methodName].apply(originalConsole, arguments);
          reactNativeMethod.apply(console, arguments);
        };
      }
    });
  }
}

if (typeof module !== 'undefined') {
  module.exports = setupConsole;
} else {
  setupConsole(global);
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var _inGuard = 0;

var _globalHandler = function onError(e) {
  throw e;
};

var ErrorUtils = {
  setGlobalHandler: function setGlobalHandler(fun) {
    _globalHandler = fun;
  },
  getGlobalHandler: function getGlobalHandler() {
    return _globalHandler;
  },
  reportError: function reportError(error) {
    _globalHandler && _globalHandler(error);
  },
  reportFatalError: function reportFatalError(error) {
    _globalHandler && _globalHandler(error, true);
  },
  applyWithGuard: function applyWithGuard(fun, context, args) {
    try {
      _inGuard++;
      return fun.apply(context, args);
    } catch (e) {
      ErrorUtils.reportError(e);
    } finally {
      _inGuard--;
    }
  },
  applyWithGuardIfNeeded: function applyWithGuardIfNeeded(fun, context, args) {
    if (ErrorUtils.inGuard()) {
      return fun.apply(context, args);
    } else {
      ErrorUtils.applyWithGuard(fun, context, args);
    }
  },
  inGuard: function inGuard() {
    return _inGuard;
  },
  guard: function guard(fun, name, context) {
    if (typeof fun !== 'function') {
      console.warn('A function must be passed to ErrorUtils.guard, got ', fun);
      return null;
    }
    name = name || fun.name || '<generated guard>';
    function guarded() {
      return ErrorUtils.applyWithGuard(fun, context || this, arguments, null, name);
    }

    return guarded;
  }
};

global.ErrorUtils = ErrorUtils;
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (Number.EPSILON === undefined) {
  Object.defineProperty(Number, 'EPSILON', {
    value: Math.pow(2, -52)
  });
}
if (Number.MAX_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MAX_SAFE_INTEGER', {
    value: Math.pow(2, 53) - 1
  });
}
if (Number.MIN_SAFE_INTEGER === undefined) {
  Object.defineProperty(Number, 'MIN_SAFE_INTEGER', {
    value: -(Math.pow(2, 53) - 1)
  });
}
if (!Number.isNaN) {
  var globalIsNaN = global.isNaN;
  Object.defineProperty(Number, 'isNaN', {
    configurable: true,
    enumerable: false,
    value: function isNaN(value) {
      return typeof value === 'number' && globalIsNaN(value);
    },
    writable: true
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

if (!String.prototype.startsWith) {
  String.prototype.startsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : 0;
    var start = Math.min(Math.max(pos, 0), string.length);
    return string.indexOf(String(search), pos) === start;
  };
}

if (!String.prototype.endsWith) {
  String.prototype.endsWith = function (search) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    var stringLength = string.length;
    var searchString = String(search);
    var pos = arguments.length > 1 ? Number(arguments[1]) || 0 : stringLength;
    var end = Math.min(Math.max(pos, 0), stringLength);
    var start = end - searchString.length;
    if (start < 0) {
      return false;
    }
    return string.lastIndexOf(searchString, start) === start;
  };
}

if (!String.prototype.repeat) {
  String.prototype.repeat = function (count) {
    'use strict';

    if (this == null) {
      throw TypeError();
    }
    var string = String(this);
    count = Number(count) || 0;
    if (count < 0 || count === Infinity) {
      throw RangeError();
    }
    if (count === 1) {
      return string;
    }
    var result = '';
    while (count) {
      if (count & 1) {
        result += string;
      }
      if (count >>= 1) {
        string += string;
      }
    }
    return result;
  };
}

if (!String.prototype.includes) {
  String.prototype.includes = function (search, start) {
    'use strict';

    if (typeof start !== 'number') {
      start = 0;
    }

    if (start + search.length > this.length) {
      return false;
    } else {
      return this.indexOf(search, start) !== -1;
    }
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
function findIndex(predicate, context) {
  if (this == null) {
    throw new TypeError('Array.prototype.findIndex called on null or undefined');
  }
  if (typeof predicate !== 'function') {
    throw new TypeError('predicate must be a function');
  }
  var list = Object(this);
  var length = list.length >>> 0;
  for (var i = 0; i < length; i++) {
    if (predicate.call(context, list[i], i, list)) {
      return i;
    }
  }
  return -1;
}

if (!Array.prototype.findIndex) {
  Object.defineProperty(Array.prototype, 'findIndex', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: findIndex
  });
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(predicate, context) {
      if (this == null) {
        throw new TypeError('Array.prototype.find called on null or undefined');
      }
      var index = findIndex.call(this, predicate, context);
      return index === -1 ? undefined : this[index];
    }
  });
}

if (!Array.prototype.includes) {
  Object.defineProperty(Array.prototype, 'includes', {
    enumerable: false,
    writable: true,
    configurable: true,
    value: function value(searchElement) {
      var O = Object(this);
      var len = parseInt(O.length) || 0;
      if (len === 0) {
        return false;
      }
      var n = parseInt(arguments[1]) || 0;
      var k;
      if (n >= 0) {
        k = n;
      } else {
        k = len + n;
        if (k < 0) {
          k = 0;
        }
      }
      var currentElement;
      while (k < len) {
        currentElement = O[k];
        if (searchElement === currentElement || searchElement !== searchElement && currentElement !== currentElement) {
          return true;
        }
        k++;
      }
      return false;
    }
  });
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {
if (!Array.from) {
  Array.from = function (arrayLike) {
    if (arrayLike == null) {
      throw new TypeError('Object is null or undefined');
    }

    var mapFn = arguments[1];
    var thisArg = arguments[2];

    var C = this;
    var items = Object(arrayLike);
    var symbolIterator = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';
    var mapping = typeof mapFn === 'function';
    var usingIterator = typeof items[symbolIterator] === 'function';
    var key = 0;
    var ret;
    var value;

    if (usingIterator) {
      ret = typeof C === 'function' ? new C() : [];
      var it = items[symbolIterator]();
      var next;

      while (!(next = it.next()).done) {
        value = next.value;

        if (mapping) {
          value = mapFn.call(thisArg, value, key);
        }

        ret[key] = value;
        key += 1;
      }

      ret.length = key;
      return ret;
    }

    var len = items.length;
    if (isNaN(len) || len < 0) {
      len = 0;
    }

    ret = typeof C === 'function' ? new C(len) : new Array(len);

    while (key < len) {
      value = items[key];

      if (mapping) {
        value = mapFn.call(thisArg, value, key);
      }

      ret[key] = value;

      key += 1;
    }

    ret.length = key;
    return ret;
  };
}
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

(function () {
  'use strict';

  var hasOwnProperty = Object.prototype.hasOwnProperty;

  if (typeof Object.entries !== 'function') {
    Object.entries = function (object) {
      if (object == null) {
        throw new TypeError('Object.entries called on non-object');
      }

      var entries = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          entries.push([key, object[key]]);
        }
      }
      return entries;
    };
  }

  if (typeof Object.values !== 'function') {
    Object.values = function (object) {
      if (object == null) {
        throw new TypeError('Object.values called on non-object');
      }

      var values = [];
      for (var key in object) {
        if (hasOwnProperty.call(object, key)) {
          values.push(object[key]);
        }
      }
      return values;
    };
  }
})();
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
(function(global) {

var babelHelpers = global.babelHelpers = {};

babelHelpers.typeof = typeof Symbol === "function" && typeof (typeof Symbol === "function" ? Symbol.iterator : "@@iterator") === "symbol" ? function (obj) {
  return typeof obj;
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== (typeof Symbol === "function" ? Symbol.prototype : "@@prototype") ? "symbol" : typeof obj;
};

babelHelpers.createRawReactElement = function () {
  var REACT_ELEMENT_TYPE = typeof Symbol === "function" && (typeof Symbol === "function" ? Symbol.for : "@@for") && (typeof Symbol === "function" ? Symbol.for : "@@for")("react.element") || 0xeac7;
  return function createRawReactElement(type, key, props) {
    return {
      $$typeof: REACT_ELEMENT_TYPE,
      type: type,
      key: key,
      ref: null,
      props: props,
      _owner: null
    };
  };
}();

babelHelpers.classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

babelHelpers.createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

babelHelpers.defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

babelHelpers._extends = babelHelpers.extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

babelHelpers.get = function get(object, property, receiver) {
  if (object === null) object = Function.prototype;
  var desc = Object.getOwnPropertyDescriptor(object, property);

  if (desc === undefined) {
    var parent = Object.getPrototypeOf(object);

    if (parent === null) {
      return undefined;
    } else {
      return get(parent, property, receiver);
    }
  } else if ("value" in desc) {
    return desc.value;
  } else {
    var getter = desc.get;

    if (getter === undefined) {
      return undefined;
    }

    return getter.call(receiver);
  }
};

babelHelpers.inherits = function (subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      enumerable: false,
      writable: true,
      configurable: true
    }
  });
  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
};

babelHelpers.interopRequireDefault = function (obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
};

babelHelpers.interopRequireWildcard = function (obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};

    if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }

    newObj.default = obj;
    return newObj;
  }
};

babelHelpers.objectWithoutProperties = function (obj, keys) {
  var target = {};

  for (var i in obj) {
    if (keys.indexOf(i) >= 0) continue;
    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
    target[i] = obj[i];
  }

  return target;
};

babelHelpers.possibleConstructorReturn = function (self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return call && (typeof call === "object" || typeof call === "function") ? call : self;
};

babelHelpers.slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((typeof Symbol === "function" ? Symbol.iterator : "@@iterator") in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

babelHelpers.taggedTemplateLiteral = function (strings, raw) {
  return Object.freeze(Object.defineProperties(strings, {
    raw: {
      value: Object.freeze(raw)
    }
  }));
};

babelHelpers.toArray = function (arr) {
  return Array.isArray(arr) ? arr : Array.from(arr);
};

babelHelpers.toConsumableArray = function (arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
};
})(typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : this);
__d(/* YrcnAppProject/index.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/index.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNativeSplashScreen = require(405                         ); // 405 = react-native-splash-screen

var _reactNativeSplashScreen2 = babelHelpers.interopRequireDefault(_reactNativeSplashScreen);

var _reactNavigation = require(406               ); // 406 = react-navigation

var _reactNativeCodePush = require(466                     ); // 466 = react-native-code-push

var _reactNativeCodePush2 = babelHelpers.interopRequireDefault(_reactNativeCodePush);

var _YrcnApp = require(474                      ); // 474 = ./src/common/YrcnApp.js

var _YrcnApp2 = babelHelpers.interopRequireDefault(_YrcnApp);

var _ViewRoot = require(488                     ); // 488 = ./src/view/ViewRoot.js

var _ViewRoot2 = babelHelpers.interopRequireDefault(_ViewRoot);

var _navigator = require(489              ); // 489 = ./src/navigator

console.log("2======" + _react.XMLHttpRequest);
console.log("3======" + fetch);

var YrcnAppProject = function (_Component) {
    babelHelpers.inherits(YrcnAppProject, _Component);

    function YrcnAppProject() {
        babelHelpers.classCallCheck(this, YrcnAppProject);
        return babelHelpers.possibleConstructorReturn(this, (YrcnAppProject.__proto__ || Object.getPrototypeOf(YrcnAppProject)).apply(this, arguments));
    }

    babelHelpers.createClass(YrcnAppProject, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            _reactNativeCodePush2.default.sync();
            _reactNativeSplashScreen2.default.hide();
        }
    }, {
        key: 'render',
        value: function render() {
            return _react2.default.createElement(_ViewRoot2.default, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            });
        }
    }]);
    return YrcnAppProject;
}(_react.Component);

_reactNative.AppRegistry.registerComponent('YrcnAppProject', function () {
    return YrcnAppProject;
});
}, 0, null, "YrcnAppProject/index.android.js");
__d(/* react/react.js */function(global, require, module, exports) {'use strict';

module.exports = require(13           ); // 13 = ./lib/React
}, 12, null, "react/react.js");
__d(/* react/lib/React.js */function(global, require, module, exports) {

'use strict';

var _assign = require(14             ); // 14 = object-assign

var ReactChildren = require(15               ); // 15 = ./ReactChildren
var ReactComponent = require(28                ); // 28 = ./ReactComponent
var ReactPureComponent = require(31                    ); // 31 = ./ReactPureComponent
var ReactClass = require(32            ); // 32 = ./ReactClass
var ReactDOMFactories = require(34                   ); // 34 = ./ReactDOMFactories
var ReactElement = require(19              ); // 19 = ./ReactElement
var ReactPropTypes = require(39                ); // 39 = ./ReactPropTypes
var ReactVersion = require(44              ); // 44 = ./ReactVersion

var onlyChild = require(45           ); // 45 = ./onlyChild
var warning = require(21                ); // 21 = fbjs/lib/warning

var createElement = ReactElement.createElement;
var createFactory = ReactElement.createFactory;
var cloneElement = ReactElement.cloneElement;

if (process.env.NODE_ENV !== 'production') {
  var canDefineProperty = require(23                   ); // 23 = ./canDefineProperty
  var ReactElementValidator = require(35                       ); // 35 = ./ReactElementValidator
  var didWarnPropTypesDeprecated = false;
  createElement = ReactElementValidator.createElement;
  createFactory = ReactElementValidator.createFactory;
  cloneElement = ReactElementValidator.cloneElement;
}

var __spread = _assign;

if (process.env.NODE_ENV !== 'production') {
  var warned = false;
  __spread = function __spread() {
    process.env.NODE_ENV !== 'production' ? warning(warned, 'React.__spread is deprecated and should not be used. Use ' + 'Object.assign directly or another helper function with similar ' + 'semantics. You may be seeing this warning due to your compiler. ' + 'See https://fb.me/react-spread-deprecation for more details.') : void 0;
    warned = true;
    return _assign.apply(null, arguments);
  };
}

var React = {

  Children: {
    map: ReactChildren.map,
    forEach: ReactChildren.forEach,
    count: ReactChildren.count,
    toArray: ReactChildren.toArray,
    only: onlyChild
  },

  Component: ReactComponent,
  PureComponent: ReactPureComponent,

  createElement: createElement,
  cloneElement: cloneElement,
  isValidElement: ReactElement.isValidElement,

  PropTypes: ReactPropTypes,
  createClass: ReactClass.createClass,
  createFactory: createFactory,
  createMixin: function createMixin(mixin) {
    return mixin;
  },

  DOM: ReactDOMFactories,

  version: ReactVersion,

  __spread: __spread
};

if (process.env.NODE_ENV !== 'production') {
  if (canDefineProperty) {
    Object.defineProperty(React, 'PropTypes', {
      get: function get() {
        process.env.NODE_ENV !== 'production' ? warning(didWarnPropTypesDeprecated, 'Accessing PropTypes via the main React package is deprecated. Use ' + 'the prop-types package from npm instead.') : void 0;
        didWarnPropTypesDeprecated = true;
        return ReactPropTypes;
      }
    });
  }
}

module.exports = React;
}, 13, null, "react/lib/React.js");
__d(/* object-assign/index.js */function(global, require, module, exports) {/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

'use strict';

var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		var test1 = new String('abc');
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(babelHelpers.extends({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};
}, 14, null, "object-assign/index.js");
__d(/* react/lib/ReactChildren.js */function(global, require, module, exports) {

'use strict';

var PooledClass = require(16             ); // 16 = ./PooledClass
var ReactElement = require(19              ); // 19 = ./ReactElement

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var traverseAllChildren = require(25                     ); // 25 = ./traverseAllChildren

var twoArgumentPooler = PooledClass.twoArgumentPooler;
var fourArgumentPooler = PooledClass.fourArgumentPooler;

var userProvidedKeyEscapeRegex = /\/+/g;
function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

function ForEachBookKeeping(forEachFunction, forEachContext) {
  this.func = forEachFunction;
  this.context = forEachContext;
  this.count = 0;
}
ForEachBookKeeping.prototype.destructor = function () {
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(ForEachBookKeeping, twoArgumentPooler);

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;

  func.call(context, child, bookKeeping.count++);
}

function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }
  var traverseContext = ForEachBookKeeping.getPooled(forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  ForEachBookKeeping.release(traverseContext);
}

function MapBookKeeping(mapResult, keyPrefix, mapFunction, mapContext) {
  this.result = mapResult;
  this.keyPrefix = keyPrefix;
  this.func = mapFunction;
  this.context = mapContext;
  this.count = 0;
}
MapBookKeeping.prototype.destructor = function () {
  this.result = null;
  this.keyPrefix = null;
  this.func = null;
  this.context = null;
  this.count = 0;
};
PooledClass.addPoolingTo(MapBookKeeping, fourArgumentPooler);

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;

  var mappedChild = func.call(context, child, bookKeeping.count++);
  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, emptyFunction.thatReturnsArgument);
  } else if (mappedChild != null) {
    if (ReactElement.isValidElement(mappedChild)) {
      mappedChild = ReactElement.cloneAndReplaceKey(mappedChild, keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }
    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';
  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }
  var traverseContext = MapBookKeeping.getPooled(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  MapBookKeeping.release(traverseContext);
}

function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}

function forEachSingleChildDummy(traverseContext, child, name) {
  return null;
}

function countChildren(children, context) {
  return traverseAllChildren(children, forEachSingleChildDummy, null);
}

function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, emptyFunction.thatReturnsArgument);
  return result;
}

var ReactChildren = {
  forEach: forEachChildren,
  map: mapChildren,
  mapIntoWithKeyPrefixInternal: mapIntoWithKeyPrefixInternal,
  count: countChildren,
  toArray: toArray
};

module.exports = ReactChildren;
}, 15, null, "react/lib/ReactChildren.js");
__d(/* react/lib/PooledClass.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ); // 17 = ./reactProdInvariant

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  !(instance instanceof Klass) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Trying to release an instance into a pool of a different type.') : _prodInvariant('25') : void 0;
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler
};

module.exports = PooledClass;
}, 16, null, "react/lib/PooledClass.js");
__d(/* react/lib/reactProdInvariant.js */function(global, require, module, exports) {
'use strict';

function reactProdInvariant(code) {
  var argCount = arguments.length - 1;

  var message = 'Minified React error #' + code + '; visit ' + 'http://facebook.github.io/react/docs/error-decoder.html?invariant=' + code;

  for (var argIdx = 0; argIdx < argCount; argIdx++) {
    message += '&args[]=' + encodeURIComponent(arguments[argIdx + 1]);
  }

  message += ' for the full message or use the non-minified dev environment' + ' for full errors and additional helpful warnings.';

  var error = new Error(message);
  error.name = 'Invariant Violation';
  error.framesToPop = 1;

  throw error;
}

module.exports = reactProdInvariant;
}, 17, null, "react/lib/reactProdInvariant.js");
__d(/* fbjs/lib/invariant.js */function(global, require, module, exports) {

'use strict';

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1;
    throw error;
  }
}

module.exports = invariant;
}, 18, null, "fbjs/lib/invariant.js");
__d(/* react/lib/ReactElement.js */function(global, require, module, exports) {

'use strict';

var _assign = require(14             ); // 14 = object-assign

var ReactCurrentOwner = require(20                   ); // 20 = ./ReactCurrentOwner

var warning = require(21                ); // 21 = fbjs/lib/warning
var canDefineProperty = require(23                   ); // 23 = ./canDefineProperty
var hasOwnProperty = Object.prototype.hasOwnProperty;

var REACT_ELEMENT_TYPE = require(24                    ); // 24 = ./ReactElementSymbol

var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};

var specialPropKeyWarningShown, specialPropRefWarningShown;

function hasValidRef(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.ref !== undefined;
}

function hasValidKey(config) {
  if (process.env.NODE_ENV !== 'production') {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;
      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }
  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function warnAboutAccessingKey() {
    if (!specialPropKeyWarningShown) {
      specialPropKeyWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function warnAboutAccessingRef() {
    if (!specialPropRefWarningShown) {
      specialPropRefWarningShown = true;
      process.env.NODE_ENV !== 'production' ? warning(false, '%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName) : void 0;
    }
  };
  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

var ReactElement = function ReactElement(type, key, ref, self, source, owner, props) {
  var element = {
    $$typeof: REACT_ELEMENT_TYPE,

    type: type,
    key: key,
    ref: ref,
    props: props,

    _owner: owner
  };

  if (process.env.NODE_ENV !== 'production') {
    element._store = {};

    if (canDefineProperty) {
      Object.defineProperty(element._store, 'validated', {
        configurable: false,
        enumerable: false,
        writable: true,
        value: false
      });

      Object.defineProperty(element, '_self', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: self
      });

      Object.defineProperty(element, '_source', {
        configurable: false,
        enumerable: false,
        writable: false,
        value: source
      });
    } else {
      element._store.validated = false;
      element._self = self;
      element._source = source;
    }
    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};

ReactElement.createElement = function (type, config, children) {
  var propName;

  var props = {};

  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source;

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    if (process.env.NODE_ENV !== 'production') {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }
    props.children = childArray;
  }

  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;
    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }
  if (process.env.NODE_ENV !== 'production') {
    if (key || ref) {
      if (typeof props.$$typeof === 'undefined' || props.$$typeof !== REACT_ELEMENT_TYPE) {
        var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
        if (key) {
          defineKeyPropWarningGetter(props, displayName);
        }
        if (ref) {
          defineRefPropWarningGetter(props, displayName);
        }
      }
    }
  }
  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
};

ReactElement.createFactory = function (type) {
  var factory = ReactElement.createElement.bind(null, type);

  factory.type = type;
  return factory;
};

ReactElement.cloneAndReplaceKey = function (oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);

  return newElement;
};

ReactElement.cloneElement = function (element, config, children) {
  var propName;

  var props = _assign({}, element.props);

  var key = element.key;
  var ref = element.ref;

  var self = element._self;

  var source = element._source;

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }
    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    var defaultProps;
    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }
    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  }

  var childrenLength = arguments.length - 2;
  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);
    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }
    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
};

ReactElement.isValidElement = function (object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
};

module.exports = ReactElement;
}, 19, null, "react/lib/ReactElement.js");
__d(/* react/lib/ReactCurrentOwner.js */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = {
  current: null

};

module.exports = ReactCurrentOwner;
}, 20, null, "react/lib/ReactCurrentOwner.js");
__d(/* fbjs/lib/warning.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(22               ); // 22 = ./emptyFunction

var warning = emptyFunction;

if (process.env.NODE_ENV !== 'production') {
  (function () {
    var printWarning = function printWarning(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        throw new Error(message);
      } catch (x) {}
    };

    warning = function warning(condition, format) {
      if (format === undefined) {
        throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
      }

      if (format.indexOf('Failed Composite propType: ') === 0) {
        return;
      }

      if (!condition) {
        for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
          args[_key2 - 2] = arguments[_key2];
        }

        printWarning.apply(undefined, [format].concat(args));
      }
    };
  })();
}

module.exports = warning;
}, 21, null, "fbjs/lib/warning.js");
__d(/* fbjs/lib/emptyFunction.js */function(global, require, module, exports) {"use strict";

function makeEmptyFunction(arg) {
  return function () {
    return arg;
  };
}

var emptyFunction = function emptyFunction() {};

emptyFunction.thatReturns = makeEmptyFunction;
emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
emptyFunction.thatReturnsNull = makeEmptyFunction(null);
emptyFunction.thatReturnsThis = function () {
  return this;
};
emptyFunction.thatReturnsArgument = function (arg) {
  return arg;
};

module.exports = emptyFunction;
}, 22, null, "fbjs/lib/emptyFunction.js");
__d(/* react/lib/canDefineProperty.js */function(global, require, module, exports) {

'use strict';

var canDefineProperty = false;
if (process.env.NODE_ENV !== 'production') {
  try {
    Object.defineProperty({}, 'x', { get: function get() {} });
    canDefineProperty = true;
  } catch (x) {}
}

module.exports = canDefineProperty;
}, 23, null, "react/lib/canDefineProperty.js");
__d(/* react/lib/ReactElementSymbol.js */function(global, require, module, exports) {

'use strict';

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && Symbol['for'] && Symbol['for']('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
}, 24, null, "react/lib/ReactElementSymbol.js");
__d(/* react/lib/traverseAllChildren.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ); // 17 = ./reactProdInvariant

var ReactCurrentOwner = require(20                   ); // 20 = ./ReactCurrentOwner
var REACT_ELEMENT_TYPE = require(24                    ); // 24 = ./ReactElementSymbol

var getIteratorFn = require(26               ); // 26 = ./getIteratorFn
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var KeyEscapeUtils = require(27                ); // 27 = ./KeyEscapeUtils
var warning = require(21                ); // 21 = fbjs/lib/warning

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

var didWarnAboutMaps = false;

function getComponentKey(component, index) {
  if (component && typeof component === 'object' && component.key != null) {
    return KeyEscapeUtils.escape(component.key);
  }

  return index.toString(36);
}

function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0;
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (process.env.NODE_ENV !== 'production') {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          process.env.NODE_ENV !== 'production' ? warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum) : void 0;
          didWarnAboutMaps = true;
        }

        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (process.env.NODE_ENV !== 'production') {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      !false ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : _prodInvariant('31', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum) : void 0;
    }
  }

  return subtreeCount;
}

function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}, 25, null, "react/lib/traverseAllChildren.js");
__d(/* react/lib/getIteratorFn.js */function(global, require, module, exports) {

'use strict';

var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
}, 26, null, "react/lib/getIteratorFn.js");
__d(/* react/lib/KeyEscapeUtils.js */function(global, require, module, exports) {

'use strict';

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
}, 27, null, "react/lib/KeyEscapeUtils.js");
__d(/* react/lib/ReactComponent.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ); // 17 = ./reactProdInvariant

var ReactNoopUpdateQueue = require(29                      ); // 29 = ./ReactNoopUpdateQueue

var canDefineProperty = require(23                   ); // 23 = ./canDefineProperty
var emptyObject = require(30                    ); // 30 = fbjs/lib/emptyObject
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

function ReactComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue;
}

ReactComponent.prototype.isReactComponent = {};

ReactComponent.prototype.setState = function (partialState, callback) {
  !(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'setState(...): takes an object of state variables to update or a function which returns an object of state variables.') : _prodInvariant('85') : void 0;
  this.updater.enqueueSetState(this, partialState);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'setState');
  }
};

ReactComponent.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this);
  if (callback) {
    this.updater.enqueueCallback(this, callback, 'forceUpdate');
  }
};

if (process.env.NODE_ENV !== 'production') {
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };
  var defineDeprecationWarning = function defineDeprecationWarning(methodName, info) {
    if (canDefineProperty) {
      Object.defineProperty(ReactComponent.prototype, methodName, {
        get: function get() {
          process.env.NODE_ENV !== 'production' ? warning(false, '%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]) : void 0;
          return undefined;
        }
      });
    }
  };
  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

module.exports = ReactComponent;
}, 28, null, "react/lib/ReactComponent.js");
__d(/* react/lib/ReactNoopUpdateQueue.js */function(global, require, module, exports) {

'use strict';

var warning = require(21                ); // 21 = fbjs/lib/warning

function warnNoop(publicInstance, callerName) {
  if (process.env.NODE_ENV !== 'production') {
    var constructor = publicInstance.constructor;
    process.env.NODE_ENV !== 'production' ? warning(false, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, constructor && (constructor.displayName || constructor.name) || 'ReactClass') : void 0;
  }
}

var ReactNoopUpdateQueue = {
  isMounted: function isMounted(publicInstance) {
    return false;
  },

  enqueueCallback: function enqueueCallback(publicInstance, callback) {},

  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
    warnNoop(publicInstance, 'replaceState');
  },

  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    warnNoop(publicInstance, 'setState');
  }
};

module.exports = ReactNoopUpdateQueue;
}, 29, null, "react/lib/ReactNoopUpdateQueue.js");
__d(/* fbjs/lib/emptyObject.js */function(global, require, module, exports) {

'use strict';

var emptyObject = {};

if (process.env.NODE_ENV !== 'production') {
  Object.freeze(emptyObject);
}

module.exports = emptyObject;
}, 30, null, "fbjs/lib/emptyObject.js");
__d(/* react/lib/ReactPureComponent.js */function(global, require, module, exports) {

'use strict';

var _assign = require(14             ); // 14 = object-assign

var ReactComponent = require(28                ); // 28 = ./ReactComponent
var ReactNoopUpdateQueue = require(29                      ); // 29 = ./ReactNoopUpdateQueue

var emptyObject = require(30                    ); // 30 = fbjs/lib/emptyObject

function ReactPureComponent(props, context, updater) {
  this.props = props;
  this.context = context;
  this.refs = emptyObject;

  this.updater = updater || ReactNoopUpdateQueue;
}

function ComponentDummy() {}
ComponentDummy.prototype = ReactComponent.prototype;
ReactPureComponent.prototype = new ComponentDummy();
ReactPureComponent.prototype.constructor = ReactPureComponent;

_assign(ReactPureComponent.prototype, ReactComponent.prototype);
ReactPureComponent.prototype.isPureReactComponent = true;

module.exports = ReactPureComponent;
}, 31, null, "react/lib/ReactPureComponent.js");
__d(/* react/lib/ReactClass.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ), // 17 = ./reactProdInvariant
    _assign = require(14             ); // 14 = object-assign

var ReactComponent = require(28                ); // 28 = ./ReactComponent
var ReactElement = require(19              ); // 19 = ./ReactElement
var ReactPropTypeLocationNames = require(33                            ); // 33 = ./ReactPropTypeLocationNames
var ReactNoopUpdateQueue = require(29                      ); // 29 = ./ReactNoopUpdateQueue

var emptyObject = require(30                    ); // 30 = fbjs/lib/emptyObject
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var MIXINS_KEY = 'mixins';

function identity(fn) {
  return fn;
}

var injectedMixins = [];

var ReactClassInterface = {
  mixins: 'DEFINE_MANY',

  statics: 'DEFINE_MANY',

  propTypes: 'DEFINE_MANY',

  contextTypes: 'DEFINE_MANY',

  childContextTypes: 'DEFINE_MANY',

  getDefaultProps: 'DEFINE_MANY_MERGED',

  getInitialState: 'DEFINE_MANY_MERGED',

  getChildContext: 'DEFINE_MANY_MERGED',

  render: 'DEFINE_ONCE',

  componentWillMount: 'DEFINE_MANY',

  componentDidMount: 'DEFINE_MANY',

  componentWillReceiveProps: 'DEFINE_MANY',

  shouldComponentUpdate: 'DEFINE_ONCE',

  componentWillUpdate: 'DEFINE_MANY',

  componentDidUpdate: 'DEFINE_MANY',

  componentWillUnmount: 'DEFINE_MANY',

  updateComponent: 'OVERRIDE_BASE'

};

var RESERVED_SPEC_KEYS = {
  displayName: function displayName(Constructor, _displayName) {
    Constructor.displayName = _displayName;
  },
  mixins: function mixins(Constructor, _mixins) {
    if (_mixins) {
      for (var i = 0; i < _mixins.length; i++) {
        mixSpecIntoComponent(Constructor, _mixins[i]);
      }
    }
  },
  childContextTypes: function childContextTypes(Constructor, _childContextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, _childContextTypes, 'childContext');
    }
    Constructor.childContextTypes = _assign({}, Constructor.childContextTypes, _childContextTypes);
  },
  contextTypes: function contextTypes(Constructor, _contextTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, _contextTypes, 'context');
    }
    Constructor.contextTypes = _assign({}, Constructor.contextTypes, _contextTypes);
  },

  getDefaultProps: function getDefaultProps(Constructor, _getDefaultProps) {
    if (Constructor.getDefaultProps) {
      Constructor.getDefaultProps = createMergedResultFunction(Constructor.getDefaultProps, _getDefaultProps);
    } else {
      Constructor.getDefaultProps = _getDefaultProps;
    }
  },
  propTypes: function propTypes(Constructor, _propTypes) {
    if (process.env.NODE_ENV !== 'production') {
      validateTypeDef(Constructor, _propTypes, 'prop');
    }
    Constructor.propTypes = _assign({}, Constructor.propTypes, _propTypes);
  },
  statics: function statics(Constructor, _statics) {
    mixStaticSpecIntoComponent(Constructor, _statics);
  },
  autobind: function autobind() {} };

function validateTypeDef(Constructor, typeDef, location) {
  for (var propName in typeDef) {
    if (typeDef.hasOwnProperty(propName)) {
      process.env.NODE_ENV !== 'production' ? warning(typeof typeDef[propName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', Constructor.displayName || 'ReactClass', ReactPropTypeLocationNames[location], propName) : void 0;
    }
  }
}

function validateMethodOverride(isAlreadyDefined, name) {
  var specPolicy = ReactClassInterface.hasOwnProperty(name) ? ReactClassInterface[name] : null;

  if (ReactClassMixin.hasOwnProperty(name)) {
    !(specPolicy === 'OVERRIDE_BASE') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to override `%s` from your class specification. Ensure that your method names do not overlap with React methods.', name) : _prodInvariant('73', name) : void 0;
  }

  if (isAlreadyDefined) {
    !(specPolicy === 'DEFINE_MANY' || specPolicy === 'DEFINE_MANY_MERGED') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClassInterface: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('74', name) : void 0;
  }
}

function mixSpecIntoComponent(Constructor, spec) {
  if (!spec) {
    if (process.env.NODE_ENV !== 'production') {
      var typeofSpec = typeof spec;
      var isMixinValid = typeofSpec === 'object' && spec !== null;

      process.env.NODE_ENV !== 'production' ? warning(isMixinValid, '%s: You\'re attempting to include a mixin that is either null ' + 'or not an object. Check the mixins included by the component, ' + 'as well as any mixins they include themselves. ' + 'Expected object but got %s.', Constructor.displayName || 'ReactClass', spec === null ? null : typeofSpec) : void 0;
    }

    return;
  }

  !(typeof spec !== 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component class or function as a mixin. Instead, just use a regular object.') : _prodInvariant('75') : void 0;
  !!ReactElement.isValidElement(spec) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You\'re attempting to use a component as a mixin. Instead, just use a regular object.') : _prodInvariant('76') : void 0;

  var proto = Constructor.prototype;
  var autoBindPairs = proto.__reactAutoBindPairs;

  if (spec.hasOwnProperty(MIXINS_KEY)) {
    RESERVED_SPEC_KEYS.mixins(Constructor, spec.mixins);
  }

  for (var name in spec) {
    if (!spec.hasOwnProperty(name)) {
      continue;
    }

    if (name === MIXINS_KEY) {
      continue;
    }

    var property = spec[name];
    var isAlreadyDefined = proto.hasOwnProperty(name);
    validateMethodOverride(isAlreadyDefined, name);

    if (RESERVED_SPEC_KEYS.hasOwnProperty(name)) {
      RESERVED_SPEC_KEYS[name](Constructor, property);
    } else {
      var isReactClassMethod = ReactClassInterface.hasOwnProperty(name);
      var isFunction = typeof property === 'function';
      var shouldAutoBind = isFunction && !isReactClassMethod && !isAlreadyDefined && spec.autobind !== false;

      if (shouldAutoBind) {
        autoBindPairs.push(name, property);
        proto[name] = property;
      } else {
        if (isAlreadyDefined) {
          var specPolicy = ReactClassInterface[name];

          !(isReactClassMethod && (specPolicy === 'DEFINE_MANY_MERGED' || specPolicy === 'DEFINE_MANY')) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: Unexpected spec policy %s for key %s when mixing in component specs.', specPolicy, name) : _prodInvariant('77', specPolicy, name) : void 0;

          if (specPolicy === 'DEFINE_MANY_MERGED') {
            proto[name] = createMergedResultFunction(proto[name], property);
          } else if (specPolicy === 'DEFINE_MANY') {
            proto[name] = createChainedFunction(proto[name], property);
          }
        } else {
          proto[name] = property;
          if (process.env.NODE_ENV !== 'production') {
            if (typeof property === 'function' && spec.displayName) {
              proto[name].displayName = spec.displayName + '_' + name;
            }
          }
        }
      }
    }
  }
}

function mixStaticSpecIntoComponent(Constructor, statics) {
  if (!statics) {
    return;
  }
  for (var name in statics) {
    var property = statics[name];
    if (!statics.hasOwnProperty(name)) {
      continue;
    }

    var isReserved = name in RESERVED_SPEC_KEYS;
    !!isReserved ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define a reserved property, `%s`, that shouldn\'t be on the "statics" key. Define it as an instance property instead; it will still be accessible on the constructor.', name) : _prodInvariant('78', name) : void 0;

    var isInherited = name in Constructor;
    !!isInherited ? process.env.NODE_ENV !== 'production' ? invariant(false, 'ReactClass: You are attempting to define `%s` on your component more than once. This conflict may be due to a mixin.', name) : _prodInvariant('79', name) : void 0;
    Constructor[name] = property;
  }
}

function mergeIntoWithNoDuplicateKeys(one, two) {
  !(one && two && typeof one === 'object' && typeof two === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Cannot merge non-objects.') : _prodInvariant('80') : void 0;

  for (var key in two) {
    if (two.hasOwnProperty(key)) {
      !(one[key] === undefined) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'mergeIntoWithNoDuplicateKeys(): Tried to merge two objects with the same key: `%s`. This conflict may be due to a mixin; in particular, this may be caused by two getInitialState() or getDefaultProps() methods returning objects with clashing keys.', key) : _prodInvariant('81', key) : void 0;
      one[key] = two[key];
    }
  }
  return one;
}

function createMergedResultFunction(one, two) {
  return function mergedResult() {
    var a = one.apply(this, arguments);
    var b = two.apply(this, arguments);
    if (a == null) {
      return b;
    } else if (b == null) {
      return a;
    }
    var c = {};
    mergeIntoWithNoDuplicateKeys(c, a);
    mergeIntoWithNoDuplicateKeys(c, b);
    return c;
  };
}

function createChainedFunction(one, two) {
  return function chainedFunction() {
    one.apply(this, arguments);
    two.apply(this, arguments);
  };
}

function bindAutoBindMethod(component, method) {
  var boundMethod = method.bind(component);
  if (process.env.NODE_ENV !== 'production') {
    boundMethod.__reactBoundContext = component;
    boundMethod.__reactBoundMethod = method;
    boundMethod.__reactBoundArguments = null;
    var componentName = component.constructor.displayName;
    var _bind = boundMethod.bind;
    boundMethod.bind = function (newThis) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      if (newThis !== component && newThis !== null) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): React component methods may only be bound to the ' + 'component instance. See %s', componentName) : void 0;
      } else if (!args.length) {
        process.env.NODE_ENV !== 'production' ? warning(false, 'bind(): You are binding a component method to the component. ' + 'React does this for you automatically in a high-performance ' + 'way, so you can safely remove this call. See %s', componentName) : void 0;
        return boundMethod;
      }
      var reboundMethod = _bind.apply(boundMethod, arguments);
      reboundMethod.__reactBoundContext = component;
      reboundMethod.__reactBoundMethod = method;
      reboundMethod.__reactBoundArguments = args;
      return reboundMethod;
    };
  }
  return boundMethod;
}

function bindAutoBindMethods(component) {
  var pairs = component.__reactAutoBindPairs;
  for (var i = 0; i < pairs.length; i += 2) {
    var autoBindKey = pairs[i];
    var method = pairs[i + 1];
    component[autoBindKey] = bindAutoBindMethod(component, method);
  }
}

var ReactClassMixin = {
  replaceState: function replaceState(newState, callback) {
    this.updater.enqueueReplaceState(this, newState);
    if (callback) {
      this.updater.enqueueCallback(this, callback, 'replaceState');
    }
  },

  isMounted: function isMounted() {
    return this.updater.isMounted(this);
  }
};

var ReactClassComponent = function ReactClassComponent() {};
_assign(ReactClassComponent.prototype, ReactComponent.prototype, ReactClassMixin);

var didWarnDeprecated = false;

var ReactClass = {
  createClass: function createClass(spec) {
    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(didWarnDeprecated, '%s: React.createClass is deprecated and will be removed in version 16. ' + 'Use plain JavaScript classes instead. If you\'re not yet ready to ' + 'migrate, create-react-class is available on npm as a ' + 'drop-in replacement.', spec && spec.displayName || 'A Component') : void 0;
      didWarnDeprecated = true;
    }

    var Constructor = identity(function (props, context, updater) {

      if (process.env.NODE_ENV !== 'production') {
        process.env.NODE_ENV !== 'production' ? warning(this instanceof Constructor, 'Something is calling a React component directly. Use a factory or ' + 'JSX instead. See: https://fb.me/react-legacyfactory') : void 0;
      }

      if (this.__reactAutoBindPairs.length) {
        bindAutoBindMethods(this);
      }

      this.props = props;
      this.context = context;
      this.refs = emptyObject;
      this.updater = updater || ReactNoopUpdateQueue;

      this.state = null;

      var initialState = this.getInitialState ? this.getInitialState() : null;
      if (process.env.NODE_ENV !== 'production') {
        if (initialState === undefined && this.getInitialState._isMockFunction) {
          initialState = null;
        }
      }
      !(typeof initialState === 'object' && !Array.isArray(initialState)) ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s.getInitialState(): must return an object or null', Constructor.displayName || 'ReactCompositeComponent') : _prodInvariant('82', Constructor.displayName || 'ReactCompositeComponent') : void 0;

      this.state = initialState;
    });
    Constructor.prototype = new ReactClassComponent();
    Constructor.prototype.constructor = Constructor;
    Constructor.prototype.__reactAutoBindPairs = [];

    injectedMixins.forEach(mixSpecIntoComponent.bind(null, Constructor));

    mixSpecIntoComponent(Constructor, spec);

    if (Constructor.getDefaultProps) {
      Constructor.defaultProps = Constructor.getDefaultProps();
    }

    if (process.env.NODE_ENV !== 'production') {
      if (Constructor.getDefaultProps) {
        Constructor.getDefaultProps.isReactClassApproved = {};
      }
      if (Constructor.prototype.getInitialState) {
        Constructor.prototype.getInitialState.isReactClassApproved = {};
      }
    }

    !Constructor.prototype.render ? process.env.NODE_ENV !== 'production' ? invariant(false, 'createClass(...): Class specification must implement a `render` method.') : _prodInvariant('83') : void 0;

    if (process.env.NODE_ENV !== 'production') {
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentShouldUpdate, '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', spec.displayName || 'A component') : void 0;
      process.env.NODE_ENV !== 'production' ? warning(!Constructor.prototype.componentWillRecieveProps, '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', spec.displayName || 'A component') : void 0;
    }

    for (var methodName in ReactClassInterface) {
      if (!Constructor.prototype[methodName]) {
        Constructor.prototype[methodName] = null;
      }
    }

    return Constructor;
  },

  injection: {
    injectMixin: function injectMixin(mixin) {
      injectedMixins.push(mixin);
    }
  }

};

module.exports = ReactClass;
}, 32, null, "react/lib/ReactClass.js");
__d(/* react/lib/ReactPropTypeLocationNames.js */function(global, require, module, exports) {

'use strict';

var ReactPropTypeLocationNames = {};

if (process.env.NODE_ENV !== 'production') {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}, 33, null, "react/lib/ReactPropTypeLocationNames.js");
__d(/* react/lib/ReactDOMFactories.js */function(global, require, module, exports) {

'use strict';

var ReactElement = require(19              ); // 19 = ./ReactElement

var createDOMFactory = ReactElement.createFactory;
if (process.env.NODE_ENV !== 'production') {
  var ReactElementValidator = require(35                       ); // 35 = ./ReactElementValidator
  createDOMFactory = ReactElementValidator.createFactory;
}

var ReactDOMFactories = {
  a: createDOMFactory('a'),
  abbr: createDOMFactory('abbr'),
  address: createDOMFactory('address'),
  area: createDOMFactory('area'),
  article: createDOMFactory('article'),
  aside: createDOMFactory('aside'),
  audio: createDOMFactory('audio'),
  b: createDOMFactory('b'),
  base: createDOMFactory('base'),
  bdi: createDOMFactory('bdi'),
  bdo: createDOMFactory('bdo'),
  big: createDOMFactory('big'),
  blockquote: createDOMFactory('blockquote'),
  body: createDOMFactory('body'),
  br: createDOMFactory('br'),
  button: createDOMFactory('button'),
  canvas: createDOMFactory('canvas'),
  caption: createDOMFactory('caption'),
  cite: createDOMFactory('cite'),
  code: createDOMFactory('code'),
  col: createDOMFactory('col'),
  colgroup: createDOMFactory('colgroup'),
  data: createDOMFactory('data'),
  datalist: createDOMFactory('datalist'),
  dd: createDOMFactory('dd'),
  del: createDOMFactory('del'),
  details: createDOMFactory('details'),
  dfn: createDOMFactory('dfn'),
  dialog: createDOMFactory('dialog'),
  div: createDOMFactory('div'),
  dl: createDOMFactory('dl'),
  dt: createDOMFactory('dt'),
  em: createDOMFactory('em'),
  embed: createDOMFactory('embed'),
  fieldset: createDOMFactory('fieldset'),
  figcaption: createDOMFactory('figcaption'),
  figure: createDOMFactory('figure'),
  footer: createDOMFactory('footer'),
  form: createDOMFactory('form'),
  h1: createDOMFactory('h1'),
  h2: createDOMFactory('h2'),
  h3: createDOMFactory('h3'),
  h4: createDOMFactory('h4'),
  h5: createDOMFactory('h5'),
  h6: createDOMFactory('h6'),
  head: createDOMFactory('head'),
  header: createDOMFactory('header'),
  hgroup: createDOMFactory('hgroup'),
  hr: createDOMFactory('hr'),
  html: createDOMFactory('html'),
  i: createDOMFactory('i'),
  iframe: createDOMFactory('iframe'),
  img: createDOMFactory('img'),
  input: createDOMFactory('input'),
  ins: createDOMFactory('ins'),
  kbd: createDOMFactory('kbd'),
  keygen: createDOMFactory('keygen'),
  label: createDOMFactory('label'),
  legend: createDOMFactory('legend'),
  li: createDOMFactory('li'),
  link: createDOMFactory('link'),
  main: createDOMFactory('main'),
  map: createDOMFactory('map'),
  mark: createDOMFactory('mark'),
  menu: createDOMFactory('menu'),
  menuitem: createDOMFactory('menuitem'),
  meta: createDOMFactory('meta'),
  meter: createDOMFactory('meter'),
  nav: createDOMFactory('nav'),
  noscript: createDOMFactory('noscript'),
  object: createDOMFactory('object'),
  ol: createDOMFactory('ol'),
  optgroup: createDOMFactory('optgroup'),
  option: createDOMFactory('option'),
  output: createDOMFactory('output'),
  p: createDOMFactory('p'),
  param: createDOMFactory('param'),
  picture: createDOMFactory('picture'),
  pre: createDOMFactory('pre'),
  progress: createDOMFactory('progress'),
  q: createDOMFactory('q'),
  rp: createDOMFactory('rp'),
  rt: createDOMFactory('rt'),
  ruby: createDOMFactory('ruby'),
  s: createDOMFactory('s'),
  samp: createDOMFactory('samp'),
  script: createDOMFactory('script'),
  section: createDOMFactory('section'),
  select: createDOMFactory('select'),
  small: createDOMFactory('small'),
  source: createDOMFactory('source'),
  span: createDOMFactory('span'),
  strong: createDOMFactory('strong'),
  style: createDOMFactory('style'),
  sub: createDOMFactory('sub'),
  summary: createDOMFactory('summary'),
  sup: createDOMFactory('sup'),
  table: createDOMFactory('table'),
  tbody: createDOMFactory('tbody'),
  td: createDOMFactory('td'),
  textarea: createDOMFactory('textarea'),
  tfoot: createDOMFactory('tfoot'),
  th: createDOMFactory('th'),
  thead: createDOMFactory('thead'),
  time: createDOMFactory('time'),
  title: createDOMFactory('title'),
  tr: createDOMFactory('tr'),
  track: createDOMFactory('track'),
  u: createDOMFactory('u'),
  ul: createDOMFactory('ul'),
  'var': createDOMFactory('var'),
  video: createDOMFactory('video'),
  wbr: createDOMFactory('wbr'),

  circle: createDOMFactory('circle'),
  clipPath: createDOMFactory('clipPath'),
  defs: createDOMFactory('defs'),
  ellipse: createDOMFactory('ellipse'),
  g: createDOMFactory('g'),
  image: createDOMFactory('image'),
  line: createDOMFactory('line'),
  linearGradient: createDOMFactory('linearGradient'),
  mask: createDOMFactory('mask'),
  path: createDOMFactory('path'),
  pattern: createDOMFactory('pattern'),
  polygon: createDOMFactory('polygon'),
  polyline: createDOMFactory('polyline'),
  radialGradient: createDOMFactory('radialGradient'),
  rect: createDOMFactory('rect'),
  stop: createDOMFactory('stop'),
  svg: createDOMFactory('svg'),
  text: createDOMFactory('text'),
  tspan: createDOMFactory('tspan')
};

module.exports = ReactDOMFactories;
}, 34, null, "react/lib/ReactDOMFactories.js");
__d(/* react/lib/ReactElementValidator.js */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(20                   ); // 20 = ./ReactCurrentOwner
var ReactComponentTreeHook = require(36                        ); // 36 = ./ReactComponentTreeHook
var ReactElement = require(19              ); // 19 = ./ReactElement

var checkReactTypeSpec = require(37                    ); // 37 = ./checkReactTypeSpec

var canDefineProperty = require(23                   ); // 23 = ./canDefineProperty
var getIteratorFn = require(26               ); // 26 = ./getIteratorFn
var warning = require(21                ); // 21 = fbjs/lib/warning

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = ReactCurrentOwner.current.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function getSourceInfoErrorAddendum(elementProps) {
  if (elementProps !== null && elementProps !== undefined && elementProps.__source !== undefined) {
    var source = elementProps.__source;
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return ' Check your code at ' + fileName + ':' + lineNumber + '.';
  }
  return '';
}

var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;
    if (parentName) {
      info = ' Check the top-level render call using <' + parentName + '>.';
    }
  }
  return info;
}

function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }
  element._store.validated = true;

  var memoizer = ownerHasKeyUseWarning.uniqueKey || (ownerHasKeyUseWarning.uniqueKey = {});

  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
  if (memoizer[currentComponentErrorInfo]) {
    return;
  }
  memoizer[currentComponentErrorInfo] = true;

  var childOwner = '';
  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    childOwner = ' It was passed a child from ' + element._owner.getName() + '.';
  }

  process.env.NODE_ENV !== 'production' ? warning(false, 'Each child in an array or iterator should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.%s', currentComponentErrorInfo, childOwner, ReactComponentTreeHook.getCurrentStackAddendum(element)) : void 0;
}

function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }
  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];
      if (ReactElement.isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (ReactElement.isValidElement(node)) {
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (iteratorFn) {
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;
        while (!(step = iterator.next()).done) {
          if (ReactElement.isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}

function validatePropTypes(element) {
  var componentClass = element.type;
  if (typeof componentClass !== 'function') {
    return;
  }
  var name = componentClass.displayName || componentClass.name;
  if (componentClass.propTypes) {
    checkReactTypeSpec(componentClass.propTypes, element.props, 'prop', name, element, null);
  }
  if (typeof componentClass.getDefaultProps === 'function') {
    process.env.NODE_ENV !== 'production' ? warning(componentClass.getDefaultProps.isReactClassApproved, 'getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.') : void 0;
  }
}

var ReactElementValidator = {

  createElement: function createElement(type, props, children) {
    var validType = typeof type === 'string' || typeof type === 'function';

    if (!validType) {
      if (typeof type !== 'function' && typeof type !== 'string') {
        var info = '';
        if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
          info += ' You likely forgot to export your component from the file ' + 'it\'s defined in.';
        }

        var sourceInfo = getSourceInfoErrorAddendum(props);
        if (sourceInfo) {
          info += sourceInfo;
        } else {
          info += getDeclarationErrorAddendum();
        }

        info += ReactComponentTreeHook.getCurrentStackAddendum();

        process.env.NODE_ENV !== 'production' ? warning(false, 'React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', type == null ? type : typeof type, info) : void 0;
      }
    }

    var element = ReactElement.createElement.apply(this, arguments);

    if (element == null) {
      return element;
    }

    if (validType) {
      for (var i = 2; i < arguments.length; i++) {
        validateChildKeys(arguments[i], type);
      }
    }

    validatePropTypes(element);

    return element;
  },

  createFactory: function createFactory(type) {
    var validatedFactory = ReactElementValidator.createElement.bind(null, type);

    validatedFactory.type = type;

    if (process.env.NODE_ENV !== 'production') {
      if (canDefineProperty) {
        Object.defineProperty(validatedFactory, 'type', {
          enumerable: false,
          get: function get() {
            process.env.NODE_ENV !== 'production' ? warning(false, 'Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.') : void 0;
            Object.defineProperty(this, 'type', {
              value: type
            });
            return type;
          }
        });
      }
    }

    return validatedFactory;
  },

  cloneElement: function cloneElement(element, props, children) {
    var newElement = ReactElement.cloneElement.apply(this, arguments);
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], newElement.type);
    }
    validatePropTypes(newElement);
    return newElement;
  }

};

module.exports = ReactElementValidator;
}, 35, null, "react/lib/ReactElementValidator.js");
__d(/* react/lib/ReactComponentTreeHook.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ); // 17 = ./reactProdInvariant

var ReactCurrentOwner = require(20                   ); // 20 = ./ReactCurrentOwner

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

function isNative(fn) {
  var funcToString = Function.prototype.toString;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');
  try {
    var source = funcToString.call(fn);
    return reIsNative.test(source);
  } catch (err) {
    return false;
  }
}

var canUseCollections = typeof Array.from === 'function' && typeof Map === 'function' && isNative(Map) && Map.prototype != null && typeof Map.prototype.keys === 'function' && isNative(Map.prototype.keys) && typeof Set === 'function' && isNative(Set) && Set.prototype != null && typeof Set.prototype.keys === 'function' && isNative(Set.prototype.keys);

var setItem;
var getItem;
var removeItem;
var getItemIDs;
var addRoot;
var removeRoot;
var getRootIDs;

if (canUseCollections) {
  var itemMap = new Map();
  var rootIDSet = new Set();

  setItem = function setItem(id, item) {
    itemMap.set(id, item);
  };
  getItem = function getItem(id) {
    return itemMap.get(id);
  };
  removeItem = function removeItem(id) {
    itemMap['delete'](id);
  };
  getItemIDs = function getItemIDs() {
    return Array.from(itemMap.keys());
  };

  addRoot = function addRoot(id) {
    rootIDSet.add(id);
  };
  removeRoot = function removeRoot(id) {
    rootIDSet['delete'](id);
  };
  getRootIDs = function getRootIDs() {
    return Array.from(rootIDSet.keys());
  };
} else {
  var itemByKey = {};
  var rootByKey = {};

  var getKeyFromID = function getKeyFromID(id) {
    return '.' + id;
  };
  var getIDFromKey = function getIDFromKey(key) {
    return parseInt(key.substr(1), 10);
  };

  setItem = function setItem(id, item) {
    var key = getKeyFromID(id);
    itemByKey[key] = item;
  };
  getItem = function getItem(id) {
    var key = getKeyFromID(id);
    return itemByKey[key];
  };
  removeItem = function removeItem(id) {
    var key = getKeyFromID(id);
    delete itemByKey[key];
  };
  getItemIDs = function getItemIDs() {
    return Object.keys(itemByKey).map(getIDFromKey);
  };

  addRoot = function addRoot(id) {
    var key = getKeyFromID(id);
    rootByKey[key] = true;
  };
  removeRoot = function removeRoot(id) {
    var key = getKeyFromID(id);
    delete rootByKey[key];
  };
  getRootIDs = function getRootIDs() {
    return Object.keys(rootByKey).map(getIDFromKey);
  };
}

var unmountedIDs = [];

function purgeDeep(id) {
  var item = getItem(id);
  if (item) {
    var childIDs = item.childIDs;

    removeItem(id);
    childIDs.forEach(purgeDeep);
  }
}

function describeComponentFrame(name, source, ownerName) {
  return '\n    in ' + (name || 'Unknown') + (source ? ' (at ' + source.fileName.replace(/^.*[\\\/]/, '') + ':' + source.lineNumber + ')' : ownerName ? ' (created by ' + ownerName + ')' : '');
}

function _getDisplayName(element) {
  if (element == null) {
    return '#empty';
  } else if (typeof element === 'string' || typeof element === 'number') {
    return '#text';
  } else if (typeof element.type === 'string') {
    return element.type;
  } else {
    return element.type.displayName || element.type.name || 'Unknown';
  }
}

function describeID(id) {
  var name = ReactComponentTreeHook.getDisplayName(id);
  var element = ReactComponentTreeHook.getElement(id);
  var ownerID = ReactComponentTreeHook.getOwnerID(id);
  var ownerName;
  if (ownerID) {
    ownerName = ReactComponentTreeHook.getDisplayName(ownerID);
  }
  process.env.NODE_ENV !== 'production' ? warning(element, 'ReactComponentTreeHook: Missing React element for debugID %s when ' + 'building stack', id) : void 0;
  return describeComponentFrame(name, element && element._source, ownerName);
}

var ReactComponentTreeHook = {
  onSetChildren: function onSetChildren(id, nextChildIDs) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.childIDs = nextChildIDs;

    for (var i = 0; i < nextChildIDs.length; i++) {
      var nextChildID = nextChildIDs[i];
      var nextChild = getItem(nextChildID);
      !nextChild ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected hook events to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('140') : void 0;
      !(nextChild.childIDs != null || typeof nextChild.element !== 'object' || nextChild.element == null) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onSetChildren() to fire for a container child before its parent includes it in onSetChildren().') : _prodInvariant('141') : void 0;
      !nextChild.isMounted ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onMountComponent() to fire for the child before its parent includes it in onSetChildren().') : _prodInvariant('71') : void 0;
      if (nextChild.parentID == null) {
        nextChild.parentID = id;
      }
      !(nextChild.parentID === id) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected onBeforeMountComponent() parent and onSetChildren() to be consistent (%s has parents %s and %s).', nextChildID, nextChild.parentID, id) : _prodInvariant('142', nextChildID, nextChild.parentID, id) : void 0;
    }
  },
  onBeforeMountComponent: function onBeforeMountComponent(id, element, parentID) {
    var item = {
      element: element,
      parentID: parentID,
      text: null,
      childIDs: [],
      isMounted: false,
      updateCount: 0
    };
    setItem(id, item);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(id, element) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.element = element;
  },
  onMountComponent: function onMountComponent(id) {
    var item = getItem(id);
    !item ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Item must have been set') : _prodInvariant('144') : void 0;
    item.isMounted = true;
    var isRoot = item.parentID === 0;
    if (isRoot) {
      addRoot(id);
    }
  },
  onUpdateComponent: function onUpdateComponent(id) {
    var item = getItem(id);
    if (!item || !item.isMounted) {
      return;
    }
    item.updateCount++;
  },
  onUnmountComponent: function onUnmountComponent(id) {
    var item = getItem(id);
    if (item) {
      item.isMounted = false;
      var isRoot = item.parentID === 0;
      if (isRoot) {
        removeRoot(id);
      }
    }
    unmountedIDs.push(id);
  },
  purgeUnmountedComponents: function purgeUnmountedComponents() {
    if (ReactComponentTreeHook._preventPurging) {
      return;
    }

    for (var i = 0; i < unmountedIDs.length; i++) {
      var id = unmountedIDs[i];
      purgeDeep(id);
    }
    unmountedIDs.length = 0;
  },
  isMounted: function isMounted(id) {
    var item = getItem(id);
    return item ? item.isMounted : false;
  },
  getCurrentStackAddendum: function getCurrentStackAddendum(topElement) {
    var info = '';
    if (topElement) {
      var name = _getDisplayName(topElement);
      var owner = topElement._owner;
      info += describeComponentFrame(name, topElement._source, owner && owner.getName());
    }

    var currentOwner = ReactCurrentOwner.current;
    var id = currentOwner && currentOwner._debugID;

    info += ReactComponentTreeHook.getStackAddendumByID(id);
    return info;
  },
  getStackAddendumByID: function getStackAddendumByID(id) {
    var info = '';
    while (id) {
      info += describeID(id);
      id = ReactComponentTreeHook.getParentID(id);
    }
    return info;
  },
  getChildIDs: function getChildIDs(id) {
    var item = getItem(id);
    return item ? item.childIDs : [];
  },
  getDisplayName: function getDisplayName(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element) {
      return null;
    }
    return _getDisplayName(element);
  },
  getElement: function getElement(id) {
    var item = getItem(id);
    return item ? item.element : null;
  },
  getOwnerID: function getOwnerID(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (!element || !element._owner) {
      return null;
    }
    return element._owner._debugID;
  },
  getParentID: function getParentID(id) {
    var item = getItem(id);
    return item ? item.parentID : null;
  },
  getSource: function getSource(id) {
    var item = getItem(id);
    var element = item ? item.element : null;
    var source = element != null ? element._source : null;
    return source;
  },
  getText: function getText(id) {
    var element = ReactComponentTreeHook.getElement(id);
    if (typeof element === 'string') {
      return element;
    } else if (typeof element === 'number') {
      return '' + element;
    } else {
      return null;
    }
  },
  getUpdateCount: function getUpdateCount(id) {
    var item = getItem(id);
    return item ? item.updateCount : 0;
  },

  getRootIDs: getRootIDs,
  getRegisteredIDs: getItemIDs
};

module.exports = ReactComponentTreeHook;
}, 36, null, "react/lib/ReactComponentTreeHook.js");
__d(/* react/lib/checkReactTypeSpec.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ); // 17 = ./reactProdInvariant

var ReactPropTypeLocationNames = require(33                            ); // 33 = ./ReactPropTypeLocationNames
var ReactPropTypesSecret = require(38                      ); // 38 = ./ReactPropTypesSecret

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(36                        ); // 36 = ./ReactComponentTreeHook
}

var loggedTypeFailures = {};

function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;

      try {
        !(typeof typeSpecs[typeSpecName] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, '%s: %s type `%s` is invalid; it must be a function, usually from React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : _prodInvariant('84', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName) : void 0;
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      process.env.NODE_ENV !== 'production' ? warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error) : void 0;
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (process.env.NODE_ENV !== 'production') {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require(36                        ); // 36 = ./ReactComponentTreeHook
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        process.env.NODE_ENV !== 'production' ? warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo) : void 0;
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}, 37, null, "react/lib/checkReactTypeSpec.js");
__d(/* react/lib/ReactPropTypesSecret.js */function(global, require, module, exports) {

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
}, 38, null, "react/lib/ReactPropTypesSecret.js");
__d(/* react/lib/ReactPropTypes.js */function(global, require, module, exports) {

'use strict';

var _require = require(19              ), // 19 = ./ReactElement
    isValidElement = _require.isValidElement;

var factory = require(40                  ); // 40 = prop-types/factory

module.exports = factory(isValidElement);
}, 39, null, "react/lib/ReactPropTypes.js");
__d(/* prop-types/factory.js */function(global, require, module, exports) {

'use strict';

var factory = require(41                         ); // 41 = ./factoryWithTypeCheckers
module.exports = function (isValidElement) {
  var throwOnDirectAccess = false;
  return factory(isValidElement, throwOnDirectAccess);
};
}, 40, null, "prop-types/factory.js");
__d(/* prop-types/factoryWithTypeCheckers.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var ReactPropTypesSecret = require(42                          ); // 42 = ./lib/ReactPropTypesSecret
var checkPropTypes = require(43                ); // 43 = ./checkPropTypes

module.exports = function (isValidElement, throwOnDirectAccess) {
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
  var FAUX_ITERATOR_SYMBOL = '@@iterator';
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  var ANONYMOUS = '<<anonymous>>';

  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker
  };

  function is(x, y) {
    if (x === y) {
      return x !== 0 || 1 / x === 1 / y;
    } else {
      return x !== x && y !== y;
    }
  }

  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }

  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use `PropTypes.checkPropTypes()` to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          var cacheKey = componentName + ':' + propName;
          if (!manualPropTypeCallCache[cacheKey] && manualPropTypeWarningCount < 3) {
            warning(false, 'You are manually calling a React.PropTypes validation ' + 'function for the `%s` prop on `%s`. This is deprecated ' + 'and will throw in the standalone `prop-types` package. ' + 'You may be seeing this warning due to a third-party PropTypes ' + 'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.', propFullName, componentName);
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunction.thatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOf, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunction.thatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        warning(false, 'Invalid argument supplid to oneOfType. Expected an array of check functions, but ' + 'received %s at index %s.', getPostfixForTypeWarning(checker), i);
        return emptyFunction.thatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    if (propType === 'symbol') {
      return true;
    }

    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
}, 41, null, "prop-types/factoryWithTypeCheckers.js");
__d(/* prop-types/lib/ReactPropTypesSecret.js */function(global, require, module, exports) {

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
}, 42, null, "prop-types/lib/ReactPropTypesSecret.js");
__d(/* prop-types/checkPropTypes.js */function(global, require, module, exports) {

'use strict';

if (process.env.NODE_ENV !== 'production') {
  var invariant = require(18                  ); // 18 = fbjs/lib/invariant
  var warning = require(21                ); // 21 = fbjs/lib/warning
  var ReactPropTypesSecret = require(42                          ); // 42 = ./lib/ReactPropTypesSecret
  var loggedTypeFailures = {};
}

function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;

        try {
          invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', location, typeSpecName);
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error);
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          warning(false, 'Failed %s type: %s%s', location, error.message, stack != null ? stack : '');
        }
      }
    }
  }
}

module.exports = checkPropTypes;
}, 43, null, "prop-types/checkPropTypes.js");
__d(/* react/lib/ReactVersion.js */function(global, require, module, exports) {

'use strict';

module.exports = '15.5.4';
}, 44, null, "react/lib/ReactVersion.js");
__d(/* react/lib/onlyChild.js */function(global, require, module, exports) {
'use strict';

var _prodInvariant = require(17                    ); // 17 = ./reactProdInvariant

var ReactElement = require(19              ); // 19 = ./ReactElement

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function onlyChild(children) {
  !ReactElement.isValidElement(children) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.Children.only expected to receive a single React element child.') : _prodInvariant('143') : void 0;
  return children;
}

module.exports = onlyChild;
}, 45, null, "react/lib/onlyChild.js");
__d(/* react-native/Libraries/react-native/react-native.js */function(global, require, module, exports) {
'use strict';

var warning = require(21                ); // 21 = fbjs/lib/warning

if (__DEV__) {
  var warningDedupe = {};
  var addonWarn = function addonWarn(prevName, newPackageName) {
    warning(warningDedupe[prevName], 'React.addons.' + prevName + ' is deprecated. Please import the "' + newPackageName + '" package instead.');
    warningDedupe[prevName] = true;
  };
}

var ReactNative = {
  get ActivityIndicator() {
    return require(47                 ); // 47 = ActivityIndicator
  },
  get ART() {
    return require(181             ); // 181 = ReactNativeART
  },
  get Button() {
    return require(187     ); // 187 = Button
  },
  get DatePickerIOS() {
    return require(275            ); // 275 = DatePickerIOS
  },
  get DrawerLayoutAndroid() {
    return require(276                  ); // 276 = DrawerLayoutAndroid
  },
  get Image() {
    return require(268    ); // 268 = Image
  },
  get ImageEditor() {
    return require(278          ); // 278 = ImageEditor
  },
  get ImageStore() {
    return require(279         ); // 279 = ImageStore
  },
  get KeyboardAvoidingView() {
    return require(280                   ); // 280 = KeyboardAvoidingView
  },
  get ListView() {
    return require(282       ); // 282 = ListView
  },
  get MapView() {
    return require(287      ); // 287 = MapView
  },
  get Modal() {
    return require(288    ); // 288 = Modal
  },
  get Navigator() {
    return require(311        ); // 311 = Navigator
  },
  get NavigatorIOS() {
    return require(329           ); // 329 = NavigatorIOS
  },
  get Picker() {
    return require(330     ); // 330 = Picker
  },
  get PickerIOS() {
    return require(331        ); // 331 = PickerIOS
  },
  get ProgressBarAndroid() {
    return require(333                 ); // 333 = ProgressBarAndroid
  },
  get ProgressViewIOS() {
    return require(334              ); // 334 = ProgressViewIOS
  },
  get ScrollView() {
    return require(270         ); // 270 = ScrollView
  },
  get SegmentedControlIOS() {
    return require(335                  ); // 335 = SegmentedControlIOS
  },
  get Slider() {
    return require(336     ); // 336 = Slider
  },
  get SnapshotViewIOS() {
    return require(337              ); // 337 = SnapshotViewIOS
  },
  get Switch() {
    return require(338     ); // 338 = Switch
  },
  get RefreshControl() {
    return require(339             ); // 339 = RefreshControl
  },
  get StatusBar() {
    return require(277        ); // 277 = StatusBar
  },
  get SwipeableListView() {
    return require(340                ); // 340 = SwipeableListView
  },
  get TabBarIOS() {
    return require(343        ); // 343 = TabBarIOS
  },
  get Text() {
    return require(188   ); // 188 = Text
  },
  get TextInput() {
    return require(344        ); // 344 = TextInput
  },
  get ToastAndroid() {
    return require(98            ); // 98 = ToastAndroid
  },
  get ToolbarAndroid() {
    return require(351             ); // 351 = ToolbarAndroid
  },
  get Touchable() {
    return require(189        ); // 189 = Touchable
  },
  get TouchableHighlight() {
    return require(300                 ); // 300 = TouchableHighlight
  },
  get TouchableNativeFeedback() {
    return require(195                      ); // 195 = TouchableNativeFeedback
  },
  get TouchableOpacity() {
    return require(255               ); // 255 = TouchableOpacity
  },
  get TouchableWithoutFeedback() {
    return require(252                       ); // 252 = TouchableWithoutFeedback
  },
  get View() {
    return require(124   ); // 124 = View
  },
  get ViewPagerAndroid() {
    return require(352               ); // 352 = ViewPagerAndroid
  },
  get WebView() {
    return require(353      ); // 353 = WebView
  },

  get ActionSheetIOS() {
    return require(354             ); // 354 = ActionSheetIOS
  },
  get AdSupportIOS() {
    return require(355           ); // 355 = AdSupportIOS
  },
  get Alert() {
    return require(205    ); // 205 = Alert
  },
  get AlertIOS() {
    return require(206       ); // 206 = AlertIOS
  },
  get Animated() {
    return require(256       ); // 256 = Animated
  },
  get AppRegistry() {
    return require(356          ); // 356 = AppRegistry
  },
  get AppState() {
    return require(88        ); // 88 = AppState
  },
  get AsyncStorage() {
    return require(364           ); // 364 = AsyncStorage
  },
  get BackAndroid() {
    return require(361          ); // 361 = BackAndroid
  },
  get CameraRoll() {
    return require(365         ); // 365 = CameraRoll
  },
  get Clipboard() {
    return require(366        ); // 366 = Clipboard
  },
  get DatePickerAndroid() {
    return require(367                ); // 367 = DatePickerAndroid
  },
  get Dimensions() {
    return require(106         ); // 106 = Dimensions
  },
  get Easing() {
    return require(266     ); // 266 = Easing
  },
  get I18nManager() {
    return require(310          ); // 310 = I18nManager
  },
  get ImagePickerIOS() {
    return require(368             ); // 368 = ImagePickerIOS
  },
  get InteractionManager() {
    return require(258                 ); // 258 = InteractionManager
  },
  get Keyboard() {
    return require(86        ); // 86 = Keyboard
  },
  get LayoutAnimation() {
    return require(281              ); // 281 = LayoutAnimation
  },
  get Linking() {
    return require(369      ); // 369 = Linking
  },
  get NativeEventEmitter() {
    return require(79                  ); // 79 = NativeEventEmitter
  },
  get NavigationExperimental() {
    return require(370                     ); // 370 = NavigationExperimental
  },
  get NetInfo() {
    return require(391      ); // 391 = NetInfo
  },
  get PanResponder() {
    return require(325           ); // 325 = PanResponder
  },
  get PermissionsAndroid() {
    return require(392                 ); // 392 = PermissionsAndroid
  },
  get PixelRatio() {
    return require(105         ); // 105 = PixelRatio
  },
  get PushNotificationIOS() {
    return require(393                  ); // 393 = PushNotificationIOS
  },
  get Settings() {
    return require(394       ); // 394 = Settings
  },
  get Share() {
    return require(395    ); // 395 = Share
  },
  get StatusBarIOS() {
    return require(85            ); // 85 = StatusBarIOS
  },
  get StyleSheet() {
    return require(104         ); // 104 = StyleSheet
  },
  get Systrace() {
    return require(62        ); // 62 = Systrace
  },
  get TimePickerAndroid() {
    return require(396                ); // 396 = TimePickerAndroid
  },
  get UIManager() {
    return require(100        ); // 100 = UIManager
  },
  get Vibration() {
    return require(397        ); // 397 = Vibration
  },
  get VibrationIOS() {
    return require(398           ); // 398 = VibrationIOS
  },

  get DeviceEventEmitter() {
    return require(84                     ); // 84 = RCTDeviceEventEmitter
  },
  get NativeAppEventEmitter() {
    return require(233                       ); // 233 = RCTNativeAppEventEmitter
  },
  get NativeModules() {
    return require(57             ); // 57 = NativeModules
  },
  get Platform() {
    return require(56        ); // 56 = Platform
  },
  get processColor() {
    return require(119           ); // 119 = processColor
  },
  get requireNativeComponent() {
    return require(133                     ); // 133 = requireNativeComponent
  },

  get ColorPropType() {
    return require(48             ); // 48 = ColorPropType
  },
  get EdgeInsetsPropType() {
    return require(125                 ); // 125 = EdgeInsetsPropType
  },
  get PointPropType() {
    return require(271            ); // 271 = PointPropType
  },

  addons: {
    get LinkedStateMixin() {
      if (__DEV__) {
        addonWarn('LinkedStateMixin', 'react-addons-linked-state-mixin');
      }
      return require(399                         ); // 399 = react/lib/LinkedStateMixin
    },
    get PureRenderMixin() {
      if (__DEV__) {
        addonWarn('PureRenderMixin', 'react-addons-pure-render-mixin');
      }
      return require(388                                          ); // 388 = react/lib/ReactComponentWithPureRenderMixin
    },
    get TestModule() {
      if (__DEV__) {
        warning(warningDedupe.TestModule, 'React.addons.TestModule is deprecated. ' + 'Use ReactNative.NativeModules.TestModule instead.');
        warningDedupe.TestModule = true;
      }
      return require(57             ).TestModule; // 57 = NativeModules
    },
    get batchedUpdates() {
      if (__DEV__) {
        warning(warningDedupe.batchedUpdates, 'React.addons.batchedUpdates is deprecated. ' + 'Use ReactNative.unstable_batchedUpdates instead.');
        warningDedupe.batchedUpdates = true;
      }
      return require(147           ).batchedUpdates; // 147 = ReactUpdates
    },
    get createFragment() {
      if (__DEV__) {
        addonWarn('createFragment', 'react-addons-create-fragment');
      }
      return require(402                      ).create; // 402 = react/lib/ReactFragment
    },
    get update() {
      if (__DEV__) {
        addonWarn('update', 'react-addons-update');
      }
      return require(403               ); // 403 = react/lib/update
    }
  }
};

if (__DEV__) {
  (function () {
    var throwOnWrongReactAPI = require(404                   ); // 404 = throwOnWrongReactAPI
    var reactAPIs = ['createClass', 'Component'];

    var _loop = function _loop(key) {
      Object.defineProperty(ReactNative, key, {
        get: function get() {
          throwOnWrongReactAPI(key);
        },

        enumerable: false,
        configurable: false
      });
    };

    for (var _iterator = reactAPIs, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref;

      if (_isArray) {
        if (_i >= _iterator.length) break;
        _ref = _iterator[_i++];
      } else {
        _i = _iterator.next();
        if (_i.done) break;
        _ref = _i.value;
      }

      var key = _ref;

      _loop(key);
    }
  })();
}

var ReactNativeInternal = require(196          ); // 196 = ReactNative
function applyForwarding(key) {
  if (__DEV__) {
    Object.defineProperty(ReactNative, key, Object.getOwnPropertyDescriptor(ReactNativeInternal, key));
    return;
  }
  ReactNative[key] = ReactNativeInternal[key];
}
for (var key in ReactNativeInternal) {
  applyForwarding(key);
}
module.exports = ReactNative;
}, 46, null, "react-native/Libraries/react-native/react-native.js");
__d(/* ActivityIndicator */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/ActivityIndicator/ActivityIndicator.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var PropTypes = React.PropTypes;

var GRAY = '#999999';

var ActivityIndicator = React.createClass({
  displayName: 'ActivityIndicator',

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    animating: PropTypes.bool,

    color: ColorPropType,

    size: PropTypes.oneOfType([PropTypes.oneOf(['small', 'large']), PropTypes.number]),

    hidesWhenStopped: PropTypes.bool
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      animating: true,
      color: Platform.OS === 'ios' ? GRAY : undefined,
      hidesWhenStopped: true,
      size: 'small'
    };
  },
  render: function render() {
    var _props = this.props,
        onLayout = _props.onLayout,
        style = _props.style,
        props = babelHelpers.objectWithoutProperties(_props, ['onLayout', 'style']);

    var sizeStyle = void 0;

    switch (props.size) {
      case 'small':
        sizeStyle = styles.sizeSmall;
        break;
      case 'large':
        sizeStyle = styles.sizeLarge;
        break;
      default:
        sizeStyle = { height: props.size, width: props.size };
        break;
    }

    return React.createElement(
      View,
      {
        onLayout: onLayout,
        style: [styles.container, style], __source: {
          fileName: _jsxFileName,
          lineNumber: 94
        }
      },
      React.createElement(RCTActivityIndicator, babelHelpers.extends({}, props, {
        style: sizeStyle,
        styleAttr: 'Normal',
        indeterminate: true,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 97
        }
      }))
    );
  }
});

var styles = StyleSheet.create({
  container: {
    alignItems: 'center',
    justifyContent: 'center'
  },
  sizeSmall: {
    width: 20,
    height: 20
  },
  sizeLarge: {
    width: 36,
    height: 36
  }
});

if (Platform.OS === 'ios') {
  var RCTActivityIndicator = requireNativeComponent('RCTActivityIndicatorView', ActivityIndicator, { nativeOnly: { activityIndicatorViewStyle: true } });
} else if (Platform.OS === 'android') {
  var RCTActivityIndicator = requireNativeComponent('AndroidProgressBar', ActivityIndicator, { nativeOnly: {
      indeterminate: true,
      progress: true,
      styleAttr: true
    } });
}

module.exports = ActivityIndicator;
}, 47, null, "ActivityIndicator");
__d(/* ColorPropType */function(global, require, module, exports) {
'use strict';

var ReactPropTypeLocationNames = require(33                                    ); // 33 = react/lib/ReactPropTypeLocationNames

var normalizeColor = require(49              ); // 49 = normalizeColor

var colorPropType = function colorPropType(isRequired, props, propName, componentName, location, propFullName) {
  var color = props[propName];
  if (color === undefined || color === null) {
    if (isRequired) {
      var locationName = ReactPropTypeLocationNames[location];
      return new Error('Required ' + locationName + ' `' + (propFullName || propName) + '` was not specified in `' + componentName + '`.');
    }
    return;
  }

  if (typeof color === 'number') {
    return;
  }

  if (normalizeColor(color) === null) {
    var locationName = ReactPropTypeLocationNames[location];
    return new Error('Invalid ' + locationName + ' `' + (propFullName || propName) + '` supplied to `' + componentName + '`: ' + color + '\n' + 'Valid color formats are\n  - \'#f0f\' (#rgb)\n  - \'#f0fc\' (#rgba)\n  - \'#ff00ff\' (#rrggbb)\n  - \'#ff00ff00\' (#rrggbbaa)\n  - \'rgb(255, 255, 255)\'\n  - \'rgba(255, 255, 255, 1.0)\'\n  - \'hsl(360, 100%, 100%)\'\n  - \'hsla(360, 100%, 100%, 1.0)\'\n  - \'transparent\'\n  - \'red\'\n  - 0xff00ff00 (0xrrggbbaa)\n');
  }
};

var ColorPropType = colorPropType.bind(null, false);
ColorPropType.isRequired = colorPropType.bind(null, true);

module.exports = ColorPropType;
}, 48, null, "ColorPropType");
__d(/* normalizeColor */function(global, require, module, exports) {
'use strict';

function normalizeColor(color) {
  var match;

  if (typeof color === 'number') {
    if (color >>> 0 === color && color >= 0 && color <= 0xffffffff) {
      return color;
    }
    return null;
  }

  if (match = matchers.hex6.exec(color)) {
    return parseInt(match[1] + 'ff', 16) >>> 0;
  }

  if (names.hasOwnProperty(color)) {
    return names[color];
  }

  if (match = matchers.rgb.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | 0x000000ff) >>> 0;
  }

  if (match = matchers.rgba.exec(color)) {
    return (parse255(match[1]) << 24 | parse255(match[2]) << 16 | parse255(match[3]) << 8 | parse1(match[4])) >>> 0;
  }

  if (match = matchers.hex3.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + 'ff', 16) >>> 0;
  }

  if (match = matchers.hex8.exec(color)) {
    return parseInt(match[1], 16) >>> 0;
  }

  if (match = matchers.hex4.exec(color)) {
    return parseInt(match[1] + match[1] + match[2] + match[2] + match[3] + match[3] + match[4] + match[4], 16) >>> 0;
  }

  if (match = matchers.hsl.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | 0x000000ff) >>> 0;
  }

  if (match = matchers.hsla.exec(color)) {
    return (hslToRgb(parse360(match[1]), parsePercentage(match[2]), parsePercentage(match[3])) | parse1(match[4])) >>> 0;
  }

  return null;
}

function hue2rgb(p, q, t) {
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}

function hslToRgb(h, s, l) {
  var q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  var p = 2 * l - q;
  var r = hue2rgb(p, q, h + 1 / 3);
  var g = hue2rgb(p, q, h);
  var b = hue2rgb(p, q, h - 1 / 3);

  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}

var NUMBER = '[-+]?\\d*\\.?\\d+';
var PERCENTAGE = NUMBER + '%';

function call() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return '\\(\\s*(' + args.join(')\\s*,\\s*(') + ')\\s*\\)';
}

var matchers = {
  rgb: new RegExp('rgb' + call(NUMBER, NUMBER, NUMBER)),
  rgba: new RegExp('rgba' + call(NUMBER, NUMBER, NUMBER, NUMBER)),
  hsl: new RegExp('hsl' + call(NUMBER, PERCENTAGE, PERCENTAGE)),
  hsla: new RegExp('hsla' + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER)),
  hex3: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex4: /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,
  hex6: /^#([0-9a-fA-F]{6})$/,
  hex8: /^#([0-9a-fA-F]{8})$/
};

function parse255(str) {
  var int = parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}

function parse360(str) {
  var int = parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}

function parse1(str) {
  var num = parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}

function parsePercentage(str) {
  var int = parseFloat(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}

var names = {
  transparent: 0x00000000,

  aliceblue: 0xf0f8ffff,
  antiquewhite: 0xfaebd7ff,
  aqua: 0x00ffffff,
  aquamarine: 0x7fffd4ff,
  azure: 0xf0ffffff,
  beige: 0xf5f5dcff,
  bisque: 0xffe4c4ff,
  black: 0x000000ff,
  blanchedalmond: 0xffebcdff,
  blue: 0x0000ffff,
  blueviolet: 0x8a2be2ff,
  brown: 0xa52a2aff,
  burlywood: 0xdeb887ff,
  burntsienna: 0xea7e5dff,
  cadetblue: 0x5f9ea0ff,
  chartreuse: 0x7fff00ff,
  chocolate: 0xd2691eff,
  coral: 0xff7f50ff,
  cornflowerblue: 0x6495edff,
  cornsilk: 0xfff8dcff,
  crimson: 0xdc143cff,
  cyan: 0x00ffffff,
  darkblue: 0x00008bff,
  darkcyan: 0x008b8bff,
  darkgoldenrod: 0xb8860bff,
  darkgray: 0xa9a9a9ff,
  darkgreen: 0x006400ff,
  darkgrey: 0xa9a9a9ff,
  darkkhaki: 0xbdb76bff,
  darkmagenta: 0x8b008bff,
  darkolivegreen: 0x556b2fff,
  darkorange: 0xff8c00ff,
  darkorchid: 0x9932ccff,
  darkred: 0x8b0000ff,
  darksalmon: 0xe9967aff,
  darkseagreen: 0x8fbc8fff,
  darkslateblue: 0x483d8bff,
  darkslategray: 0x2f4f4fff,
  darkslategrey: 0x2f4f4fff,
  darkturquoise: 0x00ced1ff,
  darkviolet: 0x9400d3ff,
  deeppink: 0xff1493ff,
  deepskyblue: 0x00bfffff,
  dimgray: 0x696969ff,
  dimgrey: 0x696969ff,
  dodgerblue: 0x1e90ffff,
  firebrick: 0xb22222ff,
  floralwhite: 0xfffaf0ff,
  forestgreen: 0x228b22ff,
  fuchsia: 0xff00ffff,
  gainsboro: 0xdcdcdcff,
  ghostwhite: 0xf8f8ffff,
  gold: 0xffd700ff,
  goldenrod: 0xdaa520ff,
  gray: 0x808080ff,
  green: 0x008000ff,
  greenyellow: 0xadff2fff,
  grey: 0x808080ff,
  honeydew: 0xf0fff0ff,
  hotpink: 0xff69b4ff,
  indianred: 0xcd5c5cff,
  indigo: 0x4b0082ff,
  ivory: 0xfffff0ff,
  khaki: 0xf0e68cff,
  lavender: 0xe6e6faff,
  lavenderblush: 0xfff0f5ff,
  lawngreen: 0x7cfc00ff,
  lemonchiffon: 0xfffacdff,
  lightblue: 0xadd8e6ff,
  lightcoral: 0xf08080ff,
  lightcyan: 0xe0ffffff,
  lightgoldenrodyellow: 0xfafad2ff,
  lightgray: 0xd3d3d3ff,
  lightgreen: 0x90ee90ff,
  lightgrey: 0xd3d3d3ff,
  lightpink: 0xffb6c1ff,
  lightsalmon: 0xffa07aff,
  lightseagreen: 0x20b2aaff,
  lightskyblue: 0x87cefaff,
  lightslategray: 0x778899ff,
  lightslategrey: 0x778899ff,
  lightsteelblue: 0xb0c4deff,
  lightyellow: 0xffffe0ff,
  lime: 0x00ff00ff,
  limegreen: 0x32cd32ff,
  linen: 0xfaf0e6ff,
  magenta: 0xff00ffff,
  maroon: 0x800000ff,
  mediumaquamarine: 0x66cdaaff,
  mediumblue: 0x0000cdff,
  mediumorchid: 0xba55d3ff,
  mediumpurple: 0x9370dbff,
  mediumseagreen: 0x3cb371ff,
  mediumslateblue: 0x7b68eeff,
  mediumspringgreen: 0x00fa9aff,
  mediumturquoise: 0x48d1ccff,
  mediumvioletred: 0xc71585ff,
  midnightblue: 0x191970ff,
  mintcream: 0xf5fffaff,
  mistyrose: 0xffe4e1ff,
  moccasin: 0xffe4b5ff,
  navajowhite: 0xffdeadff,
  navy: 0x000080ff,
  oldlace: 0xfdf5e6ff,
  olive: 0x808000ff,
  olivedrab: 0x6b8e23ff,
  orange: 0xffa500ff,
  orangered: 0xff4500ff,
  orchid: 0xda70d6ff,
  palegoldenrod: 0xeee8aaff,
  palegreen: 0x98fb98ff,
  paleturquoise: 0xafeeeeff,
  palevioletred: 0xdb7093ff,
  papayawhip: 0xffefd5ff,
  peachpuff: 0xffdab9ff,
  peru: 0xcd853fff,
  pink: 0xffc0cbff,
  plum: 0xdda0ddff,
  powderblue: 0xb0e0e6ff,
  purple: 0x800080ff,
  rebeccapurple: 0x663399ff,
  red: 0xff0000ff,
  rosybrown: 0xbc8f8fff,
  royalblue: 0x4169e1ff,
  saddlebrown: 0x8b4513ff,
  salmon: 0xfa8072ff,
  sandybrown: 0xf4a460ff,
  seagreen: 0x2e8b57ff,
  seashell: 0xfff5eeff,
  sienna: 0xa0522dff,
  silver: 0xc0c0c0ff,
  skyblue: 0x87ceebff,
  slateblue: 0x6a5acdff,
  slategray: 0x708090ff,
  slategrey: 0x708090ff,
  snow: 0xfffafaff,
  springgreen: 0x00ff7fff,
  steelblue: 0x4682b4ff,
  tan: 0xd2b48cff,
  teal: 0x008080ff,
  thistle: 0xd8bfd8ff,
  tomato: 0xff6347ff,
  turquoise: 0x40e0d0ff,
  violet: 0xee82eeff,
  wheat: 0xf5deb3ff,
  white: 0xffffffff,
  whitesmoke: 0xf5f5f5ff,
  yellow: 0xffff00ff,
  yellowgreen: 0x9acd32ff
};

module.exports = normalizeColor;
}, 49, null, "normalizeColor");
__d(/* NativeMethodsMixin */function(global, require, module, exports) {
'use strict';

var ReactNativeAttributePayload = require(51                           ); // 51 = ReactNativeAttributePayload
var TextInputState = require(55              ); // 55 = TextInputState
var UIManager = require(100        ); // 100 = UIManager

var findNodeHandle = require(101             ); // 101 = findNodeHandle
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function warnForStyleProps(props, validAttributes) {
  for (var key in validAttributes.style) {
    if (!(validAttributes[key] || props[key] === undefined)) {
      console.error('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
    }
  }
}

var NativeMethodsMixin = {
  measure: function measure(callback) {
    UIManager.measure(findNodeHandle(this), mountSafeCallback(this, callback));
  },

  measureInWindow: function measureInWindow(callback) {
    UIManager.measureInWindow(findNodeHandle(this), mountSafeCallback(this, callback));
  },

  measureLayout: function measureLayout(relativeToNativeNode, onSuccess, onFail) {
    UIManager.measureLayout(findNodeHandle(this), relativeToNativeNode, mountSafeCallback(this, onFail), mountSafeCallback(this, onSuccess));
  },

  setNativeProps: function setNativeProps(nativeProps) {
    if (!this.viewConfig) {
      var ctor = this.constructor;
      var componentName = ctor.displayName || ctor.name || '<Unknown Component>';
      invariant(false, componentName + ' "viewConfig" is not defined.');
    }

    if (__DEV__) {
      warnForStyleProps(nativeProps, this.viewConfig.validAttributes);
    }

    var updatePayload = ReactNativeAttributePayload.create(nativeProps, this.viewConfig.validAttributes);

    UIManager.updateView(findNodeHandle(this), this.viewConfig.uiViewClassName, updatePayload);
  },

  focus: function focus() {
    TextInputState.focusTextInput(findNodeHandle(this));
  },

  blur: function blur() {
    TextInputState.blurTextInput(findNodeHandle(this));
  }
};

function throwOnStylesProp(component, props) {
  if (props.styles !== undefined) {
    var owner = component._owner || null;
    var name = component.constructor.displayName;
    var msg = '`styles` is not a supported property of `' + name + '`, did ' + 'you mean `style` (singular)?';
    if (owner && owner.constructor && owner.constructor.displayName) {
      msg += '\n\nCheck the `' + owner.constructor.displayName + '` parent ' + ' component.';
    }
    throw new Error(msg);
  }
}
if (__DEV__) {
  var NativeMethodsMixin_DEV = NativeMethodsMixin;
  invariant(!NativeMethodsMixin_DEV.componentWillMount && !NativeMethodsMixin_DEV.componentWillReceiveProps, 'Do not override existing functions.');
  NativeMethodsMixin_DEV.componentWillMount = function () {
    throwOnStylesProp(this, this.props);
  };
  NativeMethodsMixin_DEV.componentWillReceiveProps = function (newProps) {
    throwOnStylesProp(this, newProps);
  };
}

function mountSafeCallback(context, callback) {
  return function () {
    if (!callback || context.isMounted && !context.isMounted()) {
      return undefined;
    }
    return callback.apply(context, arguments);
  };
}

module.exports = NativeMethodsMixin;
}, 50, null, "NativeMethodsMixin");
__d(/* ReactNativeAttributePayload */function(global, require, module, exports) {
'use strict';

var ReactNativePropRegistry = require(52                       ); // 52 = ReactNativePropRegistry

var deepDiffer = require(53          ); // 53 = deepDiffer
var flattenStyle = require(54            ); // 54 = flattenStyle

var emptyObject = {};

var removedKeys = null;
var removedKeyCount = 0;

function defaultDiffer(prevProp, nextProp) {
  if (typeof nextProp !== 'object' || nextProp === null) {
    return true;
  } else {
    return deepDiffer(prevProp, nextProp);
  }
}

function resolveObject(idOrObject) {
  if (typeof idOrObject === 'number') {
    return ReactNativePropRegistry.getByID(idOrObject);
  }
  return idOrObject;
}

function restoreDeletedValuesInNestedArray(updatePayload, node, validAttributes) {
  if (Array.isArray(node)) {
    var i = node.length;
    while (i-- && removedKeyCount > 0) {
      restoreDeletedValuesInNestedArray(updatePayload, node[i], validAttributes);
    }
  } else if (node && removedKeyCount > 0) {
    var obj = resolveObject(node);
    for (var propKey in removedKeys) {
      if (!removedKeys[propKey]) {
        continue;
      }
      var nextProp = obj[propKey];
      if (nextProp === undefined) {
        continue;
      }

      var attributeConfig = validAttributes[propKey];
      if (!attributeConfig) {
        continue;
      }

      if (typeof nextProp === 'function') {
        nextProp = true;
      }
      if (typeof nextProp === 'undefined') {
        nextProp = null;
      }

      if (typeof attributeConfig !== 'object') {
        updatePayload[propKey] = nextProp;
      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
        updatePayload[propKey] = nextValue;
      }
      removedKeys[propKey] = false;
      removedKeyCount--;
    }
  }
}

function diffNestedArrayProperty(updatePayload, prevArray, nextArray, validAttributes) {
  var minLength = prevArray.length < nextArray.length ? prevArray.length : nextArray.length;
  var i;
  for (i = 0; i < minLength; i++) {
    updatePayload = diffNestedProperty(updatePayload, prevArray[i], nextArray[i], validAttributes);
  }
  for (; i < prevArray.length; i++) {
    updatePayload = clearNestedProperty(updatePayload, prevArray[i], validAttributes);
  }
  for (; i < nextArray.length; i++) {
    updatePayload = addNestedProperty(updatePayload, nextArray[i], validAttributes);
  }
  return updatePayload;
}

function diffNestedProperty(updatePayload, prevProp, nextProp, validAttributes) {

  if (!updatePayload && prevProp === nextProp) {
    return updatePayload;
  }

  if (!prevProp || !nextProp) {
    if (nextProp) {
      return addNestedProperty(updatePayload, nextProp, validAttributes);
    }
    if (prevProp) {
      return clearNestedProperty(updatePayload, prevProp, validAttributes);
    }
    return updatePayload;
  }

  if (!Array.isArray(prevProp) && !Array.isArray(nextProp)) {
    return diffProperties(updatePayload, resolveObject(prevProp), resolveObject(nextProp), validAttributes);
  }

  if (Array.isArray(prevProp) && Array.isArray(nextProp)) {
    return diffNestedArrayProperty(updatePayload, prevProp, nextProp, validAttributes);
  }

  if (Array.isArray(prevProp)) {
    return diffProperties(updatePayload, flattenStyle(prevProp), resolveObject(nextProp), validAttributes);
  }

  return diffProperties(updatePayload, resolveObject(prevProp), flattenStyle(nextProp), validAttributes);
}

function addNestedProperty(updatePayload, nextProp, validAttributes) {
  if (!nextProp) {
    return updatePayload;
  }

  if (!Array.isArray(nextProp)) {
    return addProperties(updatePayload, resolveObject(nextProp), validAttributes);
  }

  for (var i = 0; i < nextProp.length; i++) {
    updatePayload = addNestedProperty(updatePayload, nextProp[i], validAttributes);
  }

  return updatePayload;
}

function clearNestedProperty(updatePayload, prevProp, validAttributes) {
  if (!prevProp) {
    return updatePayload;
  }

  if (!Array.isArray(prevProp)) {
    return clearProperties(updatePayload, resolveObject(prevProp), validAttributes);
  }

  for (var i = 0; i < prevProp.length; i++) {
    updatePayload = clearNestedProperty(updatePayload, prevProp[i], validAttributes);
  }
  return updatePayload;
}

function diffProperties(updatePayload, prevProps, nextProps, validAttributes) {
  var attributeConfig;
  var nextProp;
  var prevProp;

  for (var propKey in nextProps) {
    attributeConfig = validAttributes[propKey];
    if (!attributeConfig) {
      continue;
    }

    prevProp = prevProps[propKey];
    nextProp = nextProps[propKey];

    if (typeof nextProp === 'function') {
      nextProp = true;

      if (typeof prevProp === 'function') {
        prevProp = true;
      }
    }

    if (typeof nextProp === 'undefined') {
      nextProp = null;
      if (typeof prevProp === 'undefined') {
        prevProp = null;
      }
    }

    if (removedKeys) {
      removedKeys[propKey] = false;
    }

    if (updatePayload && updatePayload[propKey] !== undefined) {
      if (typeof attributeConfig !== 'object') {
        updatePayload[propKey] = nextProp;
      } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
        var nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
        updatePayload[propKey] = nextValue;
      }
      continue;
    }

    if (prevProp === nextProp) {
      continue;
    }

    if (typeof attributeConfig !== 'object') {
      if (defaultDiffer(prevProp, nextProp)) {
        (updatePayload || (updatePayload = {}))[propKey] = nextProp;
      }
    } else if (typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
      var shouldUpdate = prevProp === undefined || (typeof attributeConfig.diff === 'function' ? attributeConfig.diff(prevProp, nextProp) : defaultDiffer(prevProp, nextProp));
      if (shouldUpdate) {
        nextValue = typeof attributeConfig.process === 'function' ? attributeConfig.process(nextProp) : nextProp;
        (updatePayload || (updatePayload = {}))[propKey] = nextValue;
      }
    } else {
      removedKeys = null;
      removedKeyCount = 0;

      updatePayload = diffNestedProperty(updatePayload, prevProp, nextProp, attributeConfig);
      if (removedKeyCount > 0 && updatePayload) {
        restoreDeletedValuesInNestedArray(updatePayload, nextProp, attributeConfig);
        removedKeys = null;
      }
    }
  }

  for (propKey in prevProps) {
    if (nextProps[propKey] !== undefined) {
      continue;
    }
    attributeConfig = validAttributes[propKey];
    if (!attributeConfig) {
      continue;
    }

    if (updatePayload && updatePayload[propKey] !== undefined) {
      continue;
    }

    prevProp = prevProps[propKey];
    if (prevProp === undefined) {
      continue;
    }

    if (typeof attributeConfig !== 'object' || typeof attributeConfig.diff === 'function' || typeof attributeConfig.process === 'function') {
      (updatePayload || (updatePayload = {}))[propKey] = null;
      if (!removedKeys) {
        removedKeys = {};
      }
      if (!removedKeys[propKey]) {
        removedKeys[propKey] = true;
        removedKeyCount++;
      }
    } else {
      updatePayload = clearNestedProperty(updatePayload, prevProp, attributeConfig);
    }
  }
  return updatePayload;
}

function addProperties(updatePayload, props, validAttributes) {
  return diffProperties(updatePayload, emptyObject, props, validAttributes);
}

function clearProperties(updatePayload, prevProps, validAttributes) {
  return diffProperties(updatePayload, prevProps, emptyObject, validAttributes);
}

var ReactNativeAttributePayload = {

  create: function create(props, validAttributes) {
    return addProperties(null, props, validAttributes);
  },

  diff: function diff(prevProps, nextProps, validAttributes) {
    return diffProperties(null, prevProps, nextProps, validAttributes);
  }

};

module.exports = ReactNativeAttributePayload;
}, 51, null, "ReactNativeAttributePayload");
__d(/* ReactNativePropRegistry */function(global, require, module, exports) {
'use strict';

var objects = {};
var uniqueID = 1;
var emptyObject = {};

var ReactNativePropRegistry = function () {
  function ReactNativePropRegistry() {
    babelHelpers.classCallCheck(this, ReactNativePropRegistry);
  }

  babelHelpers.createClass(ReactNativePropRegistry, null, [{
    key: 'register',
    value: function register(object) {
      var id = ++uniqueID;
      if (__DEV__) {
        Object.freeze(object);
      }
      objects[id] = object;
      return id;
    }
  }, {
    key: 'getByID',
    value: function getByID(id) {
      if (!id) {
        return emptyObject;
      }

      var object = objects[id];
      if (!object) {
        console.warn('Invalid style with id `' + id + '`. Skipping ...');
        return emptyObject;
      }
      return object;
    }
  }]);
  return ReactNativePropRegistry;
}();

module.exports = ReactNativePropRegistry;
}, 52, null, "ReactNativePropRegistry");
__d(/* deepDiffer */function(global, require, module, exports) {
'use strict';

var deepDiffer = function deepDiffer(one, two) {
  if (one === two) {
    return false;
  }
  if (typeof one === 'function' && typeof two === 'function') {
    return false;
  }
  if (typeof one !== 'object' || one === null) {
    return one !== two;
  }
  if (typeof two !== 'object' || two === null) {
    return true;
  }
  if (one.constructor !== two.constructor) {
    return true;
  }
  if (Array.isArray(one)) {
    var len = one.length;
    if (two.length !== len) {
      return true;
    }
    for (var ii = 0; ii < len; ii++) {
      if (deepDiffer(one[ii], two[ii])) {
        return true;
      }
    }
  } else {
    for (var key in one) {
      if (deepDiffer(one[key], two[key])) {
        return true;
      }
    }
    for (var twoKey in two) {
      if (one[twoKey] === undefined && two[twoKey] !== undefined) {
        return true;
      }
    }
  }
  return false;
};

module.exports = deepDiffer;
}, 53, null, "deepDiffer");
__d(/* flattenStyle */function(global, require, module, exports) {
'use strict';

var ReactNativePropRegistry = require(52                       ); // 52 = ReactNativePropRegistry
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function getStyle(style) {
  if (typeof style === 'number') {
    return ReactNativePropRegistry.getByID(style);
  }
  return style;
}

function flattenStyle(style) {
  if (!style) {
    return undefined;
  }
  invariant(style !== true, 'style may be false but not true');

  if (!Array.isArray(style)) {
    return getStyle(style);
  }

  var result = {};
  for (var i = 0, styleLength = style.length; i < styleLength; ++i) {
    var computedStyle = flattenStyle(style[i]);
    if (computedStyle) {
      for (var key in computedStyle) {
        result[key] = computedStyle[key];
      }
    }
  }
  return result;
}

module.exports = flattenStyle;
}, 54, null, "flattenStyle");
__d(/* TextInputState */function(global, require, module, exports) {
'use strict';

var Platform = require(56        ); // 56 = Platform
var UIManager = require(100        ); // 100 = UIManager

var TextInputState = {
  _currentlyFocusedID: null,

  currentlyFocusedField: function currentlyFocusedField() {
    return this._currentlyFocusedID;
  },

  focusTextInput: function focusTextInput(textFieldID) {
    if (this._currentlyFocusedID !== textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = textFieldID;
      if (Platform.OS === 'ios') {
        UIManager.focus(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.focusTextInput, null);
      }
    }
  },

  blurTextInput: function blurTextInput(textFieldID) {
    if (this._currentlyFocusedID === textFieldID && textFieldID !== null) {
      this._currentlyFocusedID = null;
      if (Platform.OS === 'ios') {
        UIManager.blur(textFieldID);
      } else if (Platform.OS === 'android') {
        UIManager.dispatchViewManagerCommand(textFieldID, UIManager.AndroidTextInput.Commands.blurTextInput, null);
      }
    }
  }
};

module.exports = TextInputState;
}, 55, null, "TextInputState");
__d(/* Platform */function(global, require, module, exports) {

'use strict';

var Platform = {
  OS: 'android',
  get Version() {
    var AndroidConstants = require(57             ).AndroidConstants; // 57 = NativeModules
    return AndroidConstants && AndroidConstants.Version;
  },
  get isTesting() {
    var constants = require(57             ).AndroidConstants; // 57 = NativeModules
    return constants && constants.isTesting;
  },
  select: function select(obj) {
    return obj.android;
  }
};

module.exports = Platform;
}, 56, null, "Platform");
__d(/* NativeModules */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge

var defineLazyObjectProperty = require(99                        ); // 99 = defineLazyObjectProperty
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function genModule(config, moduleID) {
  if (!config) {
    return null;
  }

  var _config = babelHelpers.slicedToArray(config, 5),
      moduleName = _config[0],
      constants = _config[1],
      methods = _config[2],
      promiseMethods = _config[3],
      syncMethods = _config[4];

  invariant(!moduleName.startsWith('RCT') && !moduleName.startsWith('RK'), 'Module name prefixes should\'ve been stripped by the native side ' + 'but wasn\'t for ' + moduleName);

  if (!constants && !methods) {
    return { name: moduleName };
  }

  var module = {};
  methods && methods.forEach(function (methodName, methodID) {
    var isPromise = promiseMethods && arrayContains(promiseMethods, methodID);
    var isSync = syncMethods && arrayContains(syncMethods, methodID);
    invariant(!isPromise || !isSync, 'Cannot have a method that is both async and a sync hook');
    var methodType = isPromise ? 'promise' : isSync ? 'sync' : 'async';
    module[methodName] = genMethod(moduleID, methodID, methodType);
  });
  babelHelpers.extends(module, constants);

  if (__DEV__) {
    BatchedBridge.createDebugLookup(moduleID, moduleName, methods);
  }

  return { name: moduleName, module: module };
}

global.__fbGenNativeModule = genModule;

function loadModule(name, moduleID) {
  invariant(global.nativeRequireModuleConfig, 'Can\'t lazily create module without nativeRequireModuleConfig');
  var config = global.nativeRequireModuleConfig(name);
  var info = genModule(config, moduleID);
  return info && info.module;
}

function genMethod(moduleID, methodID, type) {
  var fn = null;
  if (type === 'promise') {
    fn = function fn() {
      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return new Promise(function (resolve, reject) {
        BatchedBridge.enqueueNativeCall(moduleID, methodID, args, function (data) {
          return resolve(data);
        }, function (errorData) {
          return reject(createErrorFromErrorData(errorData));
        });
      });
    };
  } else if (type === 'sync') {
    fn = function fn() {
      for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }

      return global.nativeCallSyncHook(moduleID, methodID, args);
    };
  } else {
    fn = function fn() {
      for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }

      var lastArg = args.length > 0 ? args[args.length - 1] : null;
      var secondLastArg = args.length > 1 ? args[args.length - 2] : null;
      var hasSuccessCallback = typeof lastArg === 'function';
      var hasErrorCallback = typeof secondLastArg === 'function';
      hasErrorCallback && invariant(hasSuccessCallback, 'Cannot have a non-function arg after a function arg.');
      var onSuccess = hasSuccessCallback ? lastArg : null;
      var onFail = hasErrorCallback ? secondLastArg : null;
      var callbackCount = hasSuccessCallback + hasErrorCallback;
      args = args.slice(0, args.length - callbackCount);
      BatchedBridge.enqueueNativeCall(moduleID, methodID, args, onFail, onSuccess);
    };
  }
  fn.type = type;
  return fn;
}

function arrayContains(array, value) {
  return array.indexOf(value) !== -1;
}

function createErrorFromErrorData(errorData) {
  var message = errorData.message,
      extraErrorInfo = babelHelpers.objectWithoutProperties(errorData, ['message']);

  var error = new Error(message);
  error.framesToPop = 1;
  return babelHelpers.extends(error, extraErrorInfo);
}

var NativeModules = {};
if (global.nativeModuleProxy) {
  NativeModules = global.nativeModuleProxy;
} else {
  var bridgeConfig = global.__fbBatchedBridgeConfig;
  invariant(bridgeConfig, '__fbBatchedBridgeConfig is not set, cannot invoke native modules');

  (bridgeConfig.remoteModuleConfig || []).forEach(function (config, moduleID) {
    var info = genModule(config, moduleID);
    if (!info) {
      return;
    }

    if (info.module) {
      NativeModules[info.name] = info.module;
    } else {
        defineLazyObjectProperty(NativeModules, info.name, {
          get: function get() {
            return loadModule(info.name, moduleID);
          }
        });
      }
  });
}

module.exports = NativeModules;
}, 57, null, "NativeModules");
__d(/* BatchedBridge */function(global, require, module, exports) {
'use strict';

var MessageQueue = require(59            ); // 59 = MessageQueue
var BatchedBridge = new MessageQueue();

BatchedBridge.registerCallableModule('Systrace', require(62        )); // 62 = Systrace
BatchedBridge.registerCallableModule('JSTimersExecution', require(61                 )); // 61 = JSTimersExecution
BatchedBridge.registerCallableModule('HeapCapture', require(75           )); // 75 = HeapCapture
BatchedBridge.registerCallableModule('SamplingProfiler', require(76                )); // 76 = SamplingProfiler

if (__DEV__) {
  BatchedBridge.registerCallableModule('HMRClient', require(77         )); // 77 = HMRClient
}

Object.defineProperty(global, '__fbBatchedBridge', {
  configurable: true,
  value: BatchedBridge
});

module.exports = BatchedBridge;
}, 58, null, "BatchedBridge");
__d(/* MessageQueue */function(global, require, module, exports) {

'use strict';

var ErrorUtils = require(60          ); // 60 = ErrorUtils
var JSTimersExecution = require(61                 ); // 61 = JSTimersExecution
var Systrace = require(62        ); // 62 = Systrace

var deepFreezeAndThrowOnMutationInDev = require(73                                 ); // 73 = deepFreezeAndThrowOnMutationInDev
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var stringifySafe = require(74             ); // 74 = stringifySafe

var TO_JS = 0;
var TO_NATIVE = 1;

var MODULE_IDS = 0;
var METHOD_IDS = 1;
var PARAMS = 2;
var MIN_TIME_BETWEEN_FLUSHES_MS = 5;

var TRACE_TAG_REACT_APPS = 1 << 17;

var DEBUG_INFO_LIMIT = 32;

var guard = function guard(fn) {
  try {
    fn();
  } catch (error) {
    ErrorUtils.reportFatalError(error);
  }
};

var MessageQueue = function () {
  function MessageQueue() {
    babelHelpers.classCallCheck(this, MessageQueue);

    this._callableModules = {};
    this._queue = [[], [], [], 0];
    this._callbacks = [];
    this._callbackID = 0;
    this._callID = 0;
    this._lastFlush = 0;
    this._eventLoopStartTime = new Date().getTime();

    if (__DEV__) {
      this._debugInfo = {};
      this._remoteModuleTable = {};
      this._remoteMethodTable = {};
    }

    this.callFunctionReturnFlushedQueue = this.callFunctionReturnFlushedQueue.bind(this);
    this.callFunctionReturnResultAndFlushedQueue = this.callFunctionReturnResultAndFlushedQueue.bind(this);
    this.flushedQueue = this.flushedQueue.bind(this);
    this.invokeCallbackAndReturnFlushedQueue = this.invokeCallbackAndReturnFlushedQueue.bind(this);
  }

  babelHelpers.createClass(MessageQueue, [{
    key: 'callFunctionReturnFlushedQueue',
    value: function callFunctionReturnFlushedQueue(module, method, args) {
      var _this = this;

      guard(function () {
        _this.__callFunction(module, method, args);
        _this.__callImmediates();
      });

      return this.flushedQueue();
    }
  }, {
    key: 'callFunctionReturnResultAndFlushedQueue',
    value: function callFunctionReturnResultAndFlushedQueue(module, method, args) {
      var _this2 = this;

      var result = void 0;
      guard(function () {
        result = _this2.__callFunction(module, method, args);
        _this2.__callImmediates();
      });

      return [result, this.flushedQueue()];
    }
  }, {
    key: 'invokeCallbackAndReturnFlushedQueue',
    value: function invokeCallbackAndReturnFlushedQueue(cbID, args) {
      var _this3 = this;

      guard(function () {
        _this3.__invokeCallback(cbID, args);
        _this3.__callImmediates();
      });

      return this.flushedQueue();
    }
  }, {
    key: 'flushedQueue',
    value: function flushedQueue() {
      this.__callImmediates();

      var queue = this._queue;
      this._queue = [[], [], [], this._callID];
      return queue[0].length ? queue : null;
    }
  }, {
    key: 'getEventLoopRunningTime',
    value: function getEventLoopRunningTime() {
      return new Date().getTime() - this._eventLoopStartTime;
    }
  }, {
    key: 'registerCallableModule',
    value: function registerCallableModule(name, module) {
      this._callableModules[name] = module;
    }
  }, {
    key: 'enqueueNativeCall',
    value: function enqueueNativeCall(moduleID, methodID, params, onFail, onSucc) {
      if (onFail || onSucc) {
        if (__DEV__) {
          var callId = this._callbackID >> 1;
          this._debugInfo[callId] = [moduleID, methodID];
          if (callId > DEBUG_INFO_LIMIT) {
            delete this._debugInfo[callId - DEBUG_INFO_LIMIT];
          }
        }
        onFail && params.push(this._callbackID);

        this._callbacks[this._callbackID++] = onFail;
        onSucc && params.push(this._callbackID);

        this._callbacks[this._callbackID++] = onSucc;
      }

      if (__DEV__) {
        global.nativeTraceBeginAsyncFlow && global.nativeTraceBeginAsyncFlow(TRACE_TAG_REACT_APPS, 'native', this._callID);
      }
      this._callID++;

      this._queue[MODULE_IDS].push(moduleID);
      this._queue[METHOD_IDS].push(methodID);

      if (__DEV__) {
        JSON.stringify(params);

        deepFreezeAndThrowOnMutationInDev(params);
      }
      this._queue[PARAMS].push(params);

      var now = new Date().getTime();
      if (global.nativeFlushQueueImmediate && now - this._lastFlush >= MIN_TIME_BETWEEN_FLUSHES_MS) {
        global.nativeFlushQueueImmediate(this._queue);
        this._queue = [[], [], [], this._callID];
        this._lastFlush = now;
      }
      Systrace.counterEvent('pending_js_to_native_queue', this._queue[0].length);
      if (__DEV__ && this.__spy && isFinite(moduleID)) {
        this.__spy({ type: TO_NATIVE,
          module: this._remoteModuleTable[moduleID],
          method: this._remoteMethodTable[moduleID][methodID],
          args: params });
      }
    }
  }, {
    key: 'createDebugLookup',
    value: function createDebugLookup(moduleID, name, methods) {
      if (__DEV__) {
        this._remoteModuleTable[moduleID] = name;
        this._remoteMethodTable[moduleID] = methods;
      }
    }
  }, {
    key: '__callImmediates',
    value: function __callImmediates() {
      Systrace.beginEvent('JSTimersExecution.callImmediates()');
      guard(function () {
        return JSTimersExecution.callImmediates();
      });
      Systrace.endEvent();
    }
  }, {
    key: '__callFunction',
    value: function __callFunction(module, method, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;
      Systrace.beginEvent(module + '.' + method + '()');
      if (__DEV__ && this.__spy) {
        this.__spy({ type: TO_JS, module: module, method: method, args: args });
      }
      var moduleMethods = this._callableModules[module];
      invariant(!!moduleMethods, 'Module %s is not a registered callable module (calling %s)', module, method);
      invariant(!!moduleMethods[method], 'Method %s does not exist on module %s', method, module);
      var result = moduleMethods[method].apply(moduleMethods, args);
      Systrace.endEvent();
      return result;
    }
  }, {
    key: '__invokeCallback',
    value: function __invokeCallback(cbID, args) {
      this._lastFlush = new Date().getTime();
      this._eventLoopStartTime = this._lastFlush;
      var callback = this._callbacks[cbID];

      if (__DEV__) {
        var debug = this._debugInfo[cbID >> 1];
        var _module = debug && this._remoteModuleTable[debug[0]];
        var _method = debug && this._remoteMethodTable[debug[0]][debug[1]];
        if (callback == null) {
          var errorMessage = 'Callback with id ' + cbID + ': ' + _module + '.' + _method + '() not found';
          if (_method) {
            errorMessage = 'The callback ' + _method + '() exists in module ' + _module + ', ' + 'but only one callback may be registered to a function in a native module.';
          }
          invariant(callback, errorMessage);
        }
        var profileName = debug ? '<callback for ' + _module + '.' + _method + '>' : cbID;
        if (callback && this.__spy && __DEV__) {
          this.__spy({ type: TO_JS, module: null, method: profileName, args: args });
        }
        Systrace.beginEvent('MessageQueue.invokeCallback(' + profileName + ', ' + stringifySafe(args) + ')');
      } else {
        if (!callback) {
          return;
        }
      }

      this._callbacks[cbID & ~1] = null;

      this._callbacks[cbID | 1] = null;

      callback.apply(null, args);

      if (__DEV__) {
        Systrace.endEvent();
      }
    }
  }], [{
    key: 'spy',
    value: function spy(spyOrToggle) {
      if (spyOrToggle === true) {
        MessageQueue.prototype.__spy = function (info) {
          console.log((info.type === TO_JS ? 'N->JS' : 'JS->N') + ' : ' + ('' + (info.module ? info.module + '.' : '') + info.method) + ('(' + JSON.stringify(info.args) + ')'));
        };
      } else if (spyOrToggle === false) {
        MessageQueue.prototype.__spy = null;
      } else {
        MessageQueue.prototype.__spy = spyOrToggle;
      }
    }
  }]);
  return MessageQueue;
}();

module.exports = MessageQueue;
}, 59, null, "MessageQueue");
__d(/* ErrorUtils */function(global, require, module, exports) {
module.exports = global.ErrorUtils;
}, 60, null, "ErrorUtils");
__d(/* JSTimersExecution */function(global, require, module, exports) {
'use strict';

var Systrace = require(62        ); // 62 = Systrace

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var performanceNow = require(67                       ); // 67 = fbjs/lib/performanceNow
var warning = require(21                ); // 21 = fbjs/lib/warning

var FRAME_DURATION = 1000 / 60;
var IDLE_CALLBACK_FRAME_DEADLINE = 1;

var hasEmittedTimeDriftWarning = false;

var JSTimersExecution = {
  GUID: 1,

  callbacks: [],
  types: [],
  timerIDs: [],
  immediates: [],
  requestIdleCallbacks: [],
  identifiers: [],

  errors: null,

  callTimer: function callTimer(timerID, frameTime) {
    warning(timerID <= JSTimersExecution.GUID, 'Tried to call timer with ID %s but no such timer exists.', timerID);

    var timerIndex = JSTimersExecution.timerIDs.indexOf(timerID);
    if (timerIndex === -1) {
      return;
    }

    var type = JSTimersExecution.types[timerIndex];
    var callback = JSTimersExecution.callbacks[timerIndex];
    if (!callback || !type) {
      console.error('No callback found for timerID ' + timerID);
      return;
    }

    if (__DEV__) {
      var identifier = JSTimersExecution.identifiers[timerIndex] || {};
      Systrace.beginEvent('Systrace.callTimer: ' + identifier.methodName);
    }

    if (type === 'setTimeout' || type === 'setImmediate' || type === 'requestAnimationFrame' || type === 'requestIdleCallback') {
      JSTimersExecution._clearIndex(timerIndex);
    }

    try {
      if (type === 'setTimeout' || type === 'setInterval' || type === 'setImmediate') {
        callback();
      } else if (type === 'requestAnimationFrame') {
        callback(performanceNow());
      } else if (type === 'requestIdleCallback') {
        callback({
          timeRemaining: function timeRemaining() {
            return Math.max(0, FRAME_DURATION - (performanceNow() - frameTime));
          }
        });
      } else {
        console.error('Tried to call a callback with invalid type: ' + type);
      }
    } catch (e) {
      if (!JSTimersExecution.errors) {
        JSTimersExecution.errors = [e];
      } else {
        JSTimersExecution.errors.push(e);
      }
    }

    if (__DEV__) {
      Systrace.endEvent();
    }
  },
  callTimers: function callTimers(timerIDs) {
    invariant(timerIDs.length !== 0, 'Cannot call `callTimers` with an empty list of IDs.');

    JSTimersExecution.errors = null;
    for (var i = 0; i < timerIDs.length; i++) {
      JSTimersExecution.callTimer(timerIDs[i], 0);
    }

    var errors = JSTimersExecution.errors;
    if (errors) {
      var errorCount = errors.length;
      if (errorCount > 1) {
        for (var ii = 1; ii < errorCount; ii++) {
          require(69        ).setTimeout(function (error) { // 69 = JSTimers
            throw error;
          }.bind(null, errors[ii]), 0);
        }
      }
      throw errors[0];
    }
  },


  callIdleCallbacks: function callIdleCallbacks(frameTime) {
    if (FRAME_DURATION - (performanceNow() - frameTime) < IDLE_CALLBACK_FRAME_DEADLINE) {
      return;
    }

    JSTimersExecution.errors = null;
    if (JSTimersExecution.requestIdleCallbacks.length > 0) {
      var passIdleCallbacks = JSTimersExecution.requestIdleCallbacks.slice();
      JSTimersExecution.requestIdleCallbacks = [];

      for (var i = 0; i < passIdleCallbacks.length; ++i) {
        JSTimersExecution.callTimer(passIdleCallbacks[i], frameTime);
      }
    }

    if (JSTimersExecution.requestIdleCallbacks.length === 0) {
      var _require = require(57             ), // 57 = NativeModules
          Timing = _require.Timing;

      Timing.setSendIdleEvents(false);
    }

    if (JSTimersExecution.errors) {
      JSTimersExecution.errors.forEach(function (error) {
        return require(69        ).setTimeout(function () { // 69 = JSTimers
          throw error;
        }, 0);
      });
    }
  },

  callImmediatesPass: function callImmediatesPass() {
    Systrace.beginEvent('JSTimersExecution.callImmediatesPass()');

    if (JSTimersExecution.immediates.length > 0) {
      var passImmediates = JSTimersExecution.immediates.slice();
      JSTimersExecution.immediates = [];

      for (var i = 0; i < passImmediates.length; ++i) {
        JSTimersExecution.callTimer(passImmediates[i], 0);
      }
    }

    Systrace.endEvent();

    return JSTimersExecution.immediates.length > 0;
  },
  callImmediates: function callImmediates() {
    JSTimersExecution.errors = null;
    while (JSTimersExecution.callImmediatesPass()) {}
    if (JSTimersExecution.errors) {
      JSTimersExecution.errors.forEach(function (error) {
        return require(69        ).setTimeout(function () { // 69 = JSTimers
          throw error;
        }, 0);
      });
    }
  },
  emitTimeDriftWarning: function emitTimeDriftWarning(warningMessage) {
    if (hasEmittedTimeDriftWarning) {
      return;
    }
    hasEmittedTimeDriftWarning = true;
    console.warn(warningMessage);
  },
  _clearIndex: function _clearIndex(i) {
    JSTimersExecution.timerIDs[i] = null;
    JSTimersExecution.callbacks[i] = null;
    JSTimersExecution.types[i] = null;
    JSTimersExecution.identifiers[i] = null;
  }
};

module.exports = JSTimersExecution;
}, 61, null, "JSTimersExecution");
__d(/* Systrace */function(global, require, module, exports) {
'use strict';

var TRACE_TAG_REACT_APPS = 1 << 17;
var TRACE_TAG_JSC_CALLS = 1 << 27;

var _enabled = false;
var _asyncCookie = 0;

var ReactSystraceDevtool = __DEV__ ? {
  onBeforeMountComponent: function onBeforeMountComponent(debugID) {
    var displayName = require(36                                ).getDisplayName(debugID); // 36 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent('ReactReconciler.mountComponent(' + displayName + ')');
  },
  onMountComponent: function onMountComponent(debugID) {
    Systrace.endEvent();
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID) {
    var displayName = require(36                                ).getDisplayName(debugID); // 36 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent('ReactReconciler.updateComponent(' + displayName + ')');
  },
  onUpdateComponent: function onUpdateComponent(debugID) {
    Systrace.endEvent();
  },
  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
    var displayName = require(36                                ).getDisplayName(debugID); // 36 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent('ReactReconciler.unmountComponent(' + displayName + ')');
  },
  onUnmountComponent: function onUnmountComponent(debugID) {
    Systrace.endEvent();
  },
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    var displayName = require(36                                ).getDisplayName(debugID); // 36 = react/lib/ReactComponentTreeHook
    Systrace.beginEvent(displayName + '.' + timerType + '()');
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    Systrace.endEvent();
  }
} : null;

var Systrace = {
  setEnabled: function setEnabled(enabled) {
    if (_enabled !== enabled) {
      if (__DEV__) {
        if (enabled) {
          global.nativeTraceBeginLegacy && global.nativeTraceBeginLegacy(TRACE_TAG_JSC_CALLS);
          require(63              ).addHook(ReactSystraceDevtool); // 63 = ReactDebugTool
        } else {
          global.nativeTraceEndLegacy && global.nativeTraceEndLegacy(TRACE_TAG_JSC_CALLS);
          require(63              ).removeHook(ReactSystraceDevtool); // 63 = ReactDebugTool
        }
      }
      _enabled = enabled;
    }
  },
  beginEvent: function beginEvent(profileName, args) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginSection(TRACE_TAG_REACT_APPS, profileName, args);
    }
  },
  endEvent: function endEvent() {
    if (_enabled) {
      global.nativeTraceEndSection(TRACE_TAG_REACT_APPS);
    }
  },
  beginAsyncEvent: function beginAsyncEvent(profileName) {
    var cookie = _asyncCookie;
    if (_enabled) {
      _asyncCookie++;
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceBeginAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
    return cookie;
  },
  endAsyncEvent: function endAsyncEvent(profileName, cookie) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceEndAsyncSection(TRACE_TAG_REACT_APPS, profileName, cookie, 0);
    }
  },
  counterEvent: function counterEvent(profileName, value) {
    if (_enabled) {
      profileName = typeof profileName === 'function' ? profileName() : profileName;
      global.nativeTraceCounter && global.nativeTraceCounter(TRACE_TAG_REACT_APPS, profileName, value);
    }
  },
  attachToRelayProfiler: function attachToRelayProfiler(relayProfiler) {
    relayProfiler.attachProfileHandler('*', function (name) {
      var cookie = Systrace.beginAsyncEvent(name);
      return function () {
        Systrace.endAsyncEvent(name, cookie);
      };
    });

    relayProfiler.attachAggregateHandler('*', function (name, callback) {
      Systrace.beginEvent(name);
      callback();
      Systrace.endEvent();
    });
  },
  swizzleJSON: function swizzleJSON() {
    Systrace.measureMethods(JSON, 'JSON', ['parse', 'stringify']);
  },
  measureMethods: function measureMethods(object, objectName, methodNames) {
    if (!__DEV__) {
      return;
    }

    methodNames.forEach(function (methodName) {
      object[methodName] = Systrace.measure(objectName, methodName, object[methodName]);
    });
  },
  measure: function measure(objName, fnName, func) {
    if (!__DEV__) {
      return func;
    }

    var profileName = objName + '.' + fnName;
    return function () {
      if (!_enabled) {
        return func.apply(this, arguments);
      }

      Systrace.beginEvent(profileName);
      var ret = func.apply(this, arguments);
      Systrace.endEvent();
      return ret;
    };
  }
};

if (__DEV__) {
  require.Systrace = Systrace;
}

module.exports = Systrace;
}, 62, null, "Systrace");
__d(/* ReactDebugTool */function(global, require, module, exports) {

'use strict';

var ReactInvalidSetStateWarningHook = require(64                               ); // 64 = ReactInvalidSetStateWarningHook
var ReactHostOperationHistoryHook = require(65                             ); // 65 = ReactHostOperationHistoryHook
var ReactComponentTreeHook = require(36                                ); // 36 = react/lib/ReactComponentTreeHook
var ExecutionEnvironment = require(66                             ); // 66 = fbjs/lib/ExecutionEnvironment

var performanceNow = require(67                       ); // 67 = fbjs/lib/performanceNow
var warning = require(21                ); // 21 = fbjs/lib/warning

var hooks = [];
var didHookThrowForEvent = {};

function callHook(event, fn, context, arg1, arg2, arg3, arg4, arg5) {
  try {
    fn.call(context, arg1, arg2, arg3, arg4, arg5);
  } catch (e) {
    warning(didHookThrowForEvent[event], 'Exception thrown by hook while handling %s: %s', event, e + '\n' + e.stack);
    didHookThrowForEvent[event] = true;
  }
}

function emitEvent(event, arg1, arg2, arg3, arg4, arg5) {
  for (var i = 0; i < hooks.length; i++) {
    var hook = hooks[i];
    var fn = hook[event];
    if (fn) {
      callHook(event, fn, hook, arg1, arg2, arg3, arg4, arg5);
    }
  }
}

var _isProfiling = false;
var flushHistory = [];
var lifeCycleTimerStack = [];
var currentFlushNesting = 0;
var currentFlushMeasurements = [];
var currentFlushStartTime = 0;
var currentTimerDebugID = null;
var currentTimerStartTime = 0;
var currentTimerNestedFlushDuration = 0;
var currentTimerType = null;

var lifeCycleTimerHasWarned = false;

function clearHistory() {
  ReactComponentTreeHook.purgeUnmountedComponents();
  ReactHostOperationHistoryHook.clearHistory();
}

function getTreeSnapshot(registeredIDs) {
  return registeredIDs.reduce(function (tree, id) {
    var ownerID = ReactComponentTreeHook.getOwnerID(id);
    var parentID = ReactComponentTreeHook.getParentID(id);
    tree[id] = {
      displayName: ReactComponentTreeHook.getDisplayName(id),
      text: ReactComponentTreeHook.getText(id),
      updateCount: ReactComponentTreeHook.getUpdateCount(id),
      childIDs: ReactComponentTreeHook.getChildIDs(id),

      ownerID: ownerID || parentID && ReactComponentTreeHook.getOwnerID(parentID) || 0,
      parentID: parentID
    };
    return tree;
  }, {});
}

function resetMeasurements() {
  var previousStartTime = currentFlushStartTime;
  var previousMeasurements = currentFlushMeasurements;
  var previousOperations = ReactHostOperationHistoryHook.getHistory();

  if (currentFlushNesting === 0) {
    currentFlushStartTime = 0;
    currentFlushMeasurements = [];
    clearHistory();
    return;
  }

  if (previousMeasurements.length || previousOperations.length) {
    var registeredIDs = ReactComponentTreeHook.getRegisteredIDs();
    flushHistory.push({
      duration: performanceNow() - previousStartTime,
      measurements: previousMeasurements || [],
      operations: previousOperations || [],
      treeSnapshot: getTreeSnapshot(registeredIDs)
    });
  }

  clearHistory();
  currentFlushStartTime = performanceNow();
  currentFlushMeasurements = [];
}

function checkDebugID(debugID) {
  var allowRoot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (allowRoot && debugID === 0) {
    return;
  }
  if (!debugID) {
    warning(false, 'ReactDebugTool: debugID may not be empty.');
  }
}

function beginLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType && !lifeCycleTimerHasWarned) {
    warning(false, 'There is an internal error in the React performance measurement code. ' + 'Did not expect %s timer to start while %s timer is still in ' + 'progress for %s instance.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
    lifeCycleTimerHasWarned = true;
  }
  currentTimerStartTime = performanceNow();
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

function endLifeCycleTimer(debugID, timerType) {
  if (currentFlushNesting === 0) {
    return;
  }
  if (currentTimerType !== timerType && !lifeCycleTimerHasWarned) {
    warning(false, 'There is an internal error in the React performance measurement code. ' + 'We did not expect %s timer to stop while %s timer is still in ' + 'progress for %s instance. Please report this as a bug in React.', timerType, currentTimerType || 'no', debugID === currentTimerDebugID ? 'the same' : 'another');
    lifeCycleTimerHasWarned = true;
  }
  if (_isProfiling) {
    currentFlushMeasurements.push({
      timerType: timerType,
      instanceID: debugID,
      duration: performanceNow() - currentTimerStartTime - currentTimerNestedFlushDuration
    });
  }
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function pauseCurrentLifeCycleTimer() {
  var currentTimer = {
    startTime: currentTimerStartTime,
    nestedFlushStartTime: performanceNow(),
    debugID: currentTimerDebugID,
    timerType: currentTimerType
  };
  lifeCycleTimerStack.push(currentTimer);
  currentTimerStartTime = 0;
  currentTimerNestedFlushDuration = 0;
  currentTimerDebugID = null;
  currentTimerType = null;
}

function resumeCurrentLifeCycleTimer() {
  var _lifeCycleTimerStack$ = lifeCycleTimerStack.pop(),
      startTime = _lifeCycleTimerStack$.startTime,
      nestedFlushStartTime = _lifeCycleTimerStack$.nestedFlushStartTime,
      debugID = _lifeCycleTimerStack$.debugID,
      timerType = _lifeCycleTimerStack$.timerType;

  var nestedFlushDuration = performanceNow() - nestedFlushStartTime;
  currentTimerStartTime = startTime;
  currentTimerNestedFlushDuration += nestedFlushDuration;
  currentTimerDebugID = debugID;
  currentTimerType = timerType;
}

var lastMarkTimeStamp = 0;
var canUsePerformanceMeasure = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function';

function shouldMark(debugID) {
  if (!_isProfiling || !canUsePerformanceMeasure) {
    return false;
  }
  var element = ReactComponentTreeHook.getElement(debugID);
  if (element == null || typeof element !== 'object') {
    return false;
  }
  var isHostElement = typeof element.type === 'string';
  if (isHostElement) {
    return false;
  }
  return true;
}

function markBegin(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  lastMarkTimeStamp = performanceNow();
  performance.mark(markName);
}

function markEnd(debugID, markType) {
  if (!shouldMark(debugID)) {
    return;
  }

  var markName = debugID + '::' + markType;
  var displayName = ReactComponentTreeHook.getDisplayName(debugID) || 'Unknown';

  var timeStamp = performanceNow();
  if (timeStamp - lastMarkTimeStamp > 0.1) {
    var measurementName = displayName + ' [' + markType + ']';
    performance.measure(measurementName, markName);
  }

  performance.clearMarks(markName);
  performance.clearMeasures(measurementName);
}

var ReactDebugTool = {
  addHook: function addHook(hook) {
    hooks.push(hook);
  },
  removeHook: function removeHook(hook) {
    for (var i = 0; i < hooks.length; i++) {
      if (hooks[i] === hook) {
        hooks.splice(i, 1);
        i--;
      }
    }
  },
  isProfiling: function isProfiling() {
    return _isProfiling;
  },
  beginProfiling: function beginProfiling() {
    if (_isProfiling) {
      return;
    }

    _isProfiling = true;
    flushHistory.length = 0;
    resetMeasurements();
    ReactDebugTool.addHook(ReactHostOperationHistoryHook);
  },
  endProfiling: function endProfiling() {
    if (!_isProfiling) {
      return;
    }

    _isProfiling = false;
    resetMeasurements();
    ReactDebugTool.removeHook(ReactHostOperationHistoryHook);
  },
  getFlushHistory: function getFlushHistory() {
    return flushHistory;
  },
  onBeginFlush: function onBeginFlush() {
    currentFlushNesting++;
    resetMeasurements();
    pauseCurrentLifeCycleTimer();
    emitEvent('onBeginFlush');
  },
  onEndFlush: function onEndFlush() {
    resetMeasurements();
    currentFlushNesting--;
    resumeCurrentLifeCycleTimer();
    emitEvent('onEndFlush');
  },
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    emitEvent('onBeginLifeCycleTimer', debugID, timerType);
    markBegin(debugID, timerType);
    beginLifeCycleTimer(debugID, timerType);
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    checkDebugID(debugID);
    endLifeCycleTimer(debugID, timerType);
    markEnd(debugID, timerType);
    emitEvent('onEndLifeCycleTimer', debugID, timerType);
  },
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    emitEvent('onBeginProcessingChildContext');
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    emitEvent('onEndProcessingChildContext');
  },
  onHostOperation: function onHostOperation(operation) {
    checkDebugID(operation.instanceID);
    emitEvent('onHostOperation', operation);
  },
  onSetState: function onSetState() {
    emitEvent('onSetState');
  },
  onSetChildren: function onSetChildren(debugID, childDebugIDs) {
    checkDebugID(debugID);
    childDebugIDs.forEach(checkDebugID);
    emitEvent('onSetChildren', debugID, childDebugIDs);
  },
  onBeforeMountComponent: function onBeforeMountComponent(debugID, element, parentDebugID) {
    checkDebugID(debugID);
    checkDebugID(parentDebugID, true);
    emitEvent('onBeforeMountComponent', debugID, element, parentDebugID);
    markBegin(debugID, 'mount');
  },
  onMountComponent: function onMountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'mount');
    emitEvent('onMountComponent', debugID);
  },
  onBeforeUpdateComponent: function onBeforeUpdateComponent(debugID, element) {
    checkDebugID(debugID);
    emitEvent('onBeforeUpdateComponent', debugID, element);
    markBegin(debugID, 'update');
  },
  onUpdateComponent: function onUpdateComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'update');
    emitEvent('onUpdateComponent', debugID);
  },
  onBeforeUnmountComponent: function onBeforeUnmountComponent(debugID) {
    checkDebugID(debugID);
    emitEvent('onBeforeUnmountComponent', debugID);
    markBegin(debugID, 'unmount');
  },
  onUnmountComponent: function onUnmountComponent(debugID) {
    checkDebugID(debugID);
    markEnd(debugID, 'unmount');
    emitEvent('onUnmountComponent', debugID);
  },
  onTestEvent: function onTestEvent() {
    emitEvent('onTestEvent');
  }
};

ReactDebugTool.addHook(ReactInvalidSetStateWarningHook);
ReactDebugTool.addHook(ReactComponentTreeHook);
var url = ExecutionEnvironment.canUseDOM && window.location.href || '';
if (/[?&]react_perf\b/.test(url)) {
  ReactDebugTool.beginProfiling();
}

module.exports = ReactDebugTool;
}, 63, null, "ReactDebugTool");
__d(/* ReactInvalidSetStateWarningHook */function(global, require, module, exports) {

'use strict';

var warning = require(21                ); // 21 = fbjs/lib/warning

if (__DEV__) {
  var processingChildContext = false;

  var warnInvalidSetState = function warnInvalidSetState() {
    warning(!processingChildContext, 'setState(...): Cannot call setState() inside getChildContext()');
  };
}

var ReactInvalidSetStateWarningHook = {
  onBeginProcessingChildContext: function onBeginProcessingChildContext() {
    processingChildContext = true;
  },
  onEndProcessingChildContext: function onEndProcessingChildContext() {
    processingChildContext = false;
  },
  onSetState: function onSetState() {
    warnInvalidSetState();
  }
};

module.exports = ReactInvalidSetStateWarningHook;
}, 64, null, "ReactInvalidSetStateWarningHook");
__d(/* ReactHostOperationHistoryHook */function(global, require, module, exports) {

'use strict';

var history = [];

var ReactHostOperationHistoryHook = {
  onHostOperation: function onHostOperation(operation) {
    history.push(operation);
  },
  clearHistory: function clearHistory() {
    if (ReactHostOperationHistoryHook._preventClearing) {
      return;
    }

    history = [];
  },
  getHistory: function getHistory() {
    return history;
  }
};

module.exports = ReactHostOperationHistoryHook;
}, 65, null, "ReactHostOperationHistoryHook");
__d(/* fbjs/lib/ExecutionEnvironment.js */function(global, require, module, exports) {

'use strict';

var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var ExecutionEnvironment = {

  canUseDOM: canUseDOM,

  canUseWorkers: typeof Worker !== 'undefined',

  canUseEventListeners: canUseDOM && !!(window.addEventListener || window.attachEvent),

  canUseViewport: canUseDOM && !!window.screen,

  isInWorker: !canUseDOM };

module.exports = ExecutionEnvironment;
}, 66, null, "fbjs/lib/ExecutionEnvironment.js");
__d(/* fbjs/lib/performanceNow.js */function(global, require, module, exports) {'use strict';

var performance = require(68             ); // 68 = ./performance

var performanceNow;

if (performance.now) {
  performanceNow = function performanceNow() {
    return performance.now();
  };
} else {
  performanceNow = function performanceNow() {
    return Date.now();
  };
}

module.exports = performanceNow;
}, 67, null, "fbjs/lib/performanceNow.js");
__d(/* fbjs/lib/performance.js */function(global, require, module, exports) {

'use strict';

var ExecutionEnvironment = require(66                      ); // 66 = ./ExecutionEnvironment

var performance;

if (ExecutionEnvironment.canUseDOM) {
  performance = window.performance || window.msPerformance || window.webkitPerformance;
}

module.exports = performance || {};
}, 68, null, "fbjs/lib/performance.js");
__d(/* JSTimers */function(global, require, module, exports) {
'use strict';

var RCTTiming = require(57             ).Timing; // 57 = NativeModules
var JSTimersExecution = require(61                 ); // 61 = JSTimersExecution

var parseErrorStack = require(70               ); // 70 = parseErrorStack

function _getFreeIndex() {
  var freeIndex = JSTimersExecution.timerIDs.indexOf(null);
  if (freeIndex === -1) {
    freeIndex = JSTimersExecution.timerIDs.length;
  }
  return freeIndex;
}

function _allocateCallback(func, type) {
  var id = JSTimersExecution.GUID++;
  var freeIndex = _getFreeIndex();
  JSTimersExecution.timerIDs[freeIndex] = id;
  JSTimersExecution.callbacks[freeIndex] = func;
  JSTimersExecution.types[freeIndex] = type;
  if (__DEV__) {
    var e = new Error();
    e.framesToPop = 1;
    var stack = parseErrorStack(e);
    if (stack) {
      JSTimersExecution.identifiers[freeIndex] = stack.shift();
    }
  }
  return id;
}

function _freeCallback(timerID) {
  if (timerID == null) {
    return;
  }

  var index = JSTimersExecution.timerIDs.indexOf(timerID);

  if (index !== -1) {
    JSTimersExecution._clearIndex(index);
    var type = JSTimersExecution.types[index];
    if (type !== 'setImmediate' && type !== 'requestIdleCallback') {
      RCTTiming.deleteTimer(timerID);
    }
  }
}

var JSTimers = {
  setTimeout: function setTimeout(func, duration) {
    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setTimeout');
    RCTTiming.createTimer(id, duration || 0, Date.now(), false);
    return id;
  },

  setInterval: function setInterval(func, duration) {
    for (var _len2 = arguments.length, args = Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
      args[_key2 - 2] = arguments[_key2];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setInterval');
    RCTTiming.createTimer(id, duration || 0, Date.now(), true);
    return id;
  },

  setImmediate: function setImmediate(func) {
    for (var _len3 = arguments.length, args = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      args[_key3 - 1] = arguments[_key3];
    }

    var id = _allocateCallback(function () {
      return func.apply(undefined, args);
    }, 'setImmediate');
    JSTimersExecution.immediates.push(id);
    return id;
  },

  requestAnimationFrame: function requestAnimationFrame(func) {
    var id = _allocateCallback(func, 'requestAnimationFrame');
    RCTTiming.createTimer(id, 1, Date.now(), false);
    return id;
  },

  requestIdleCallback: function requestIdleCallback(func) {
    if (JSTimersExecution.requestIdleCallbacks.length === 0) {
      RCTTiming.setSendIdleEvents(true);
    }

    var id = _allocateCallback(func, 'requestIdleCallback');
    JSTimersExecution.requestIdleCallbacks.push(id);
    return id;
  },

  cancelIdleCallback: function cancelIdleCallback(timerID) {
    _freeCallback(timerID);
    var index = JSTimersExecution.requestIdleCallbacks.indexOf(timerID);
    if (index !== -1) {
      JSTimersExecution.requestIdleCallbacks.splice(index, 1);
    }

    if (JSTimersExecution.requestIdleCallbacks.length === 0) {
      RCTTiming.setSendIdleEvents(false);
    }
  },

  clearTimeout: function clearTimeout(timerID) {
    _freeCallback(timerID);
  },

  clearInterval: function clearInterval(timerID) {
    _freeCallback(timerID);
  },

  clearImmediate: function clearImmediate(timerID) {
    _freeCallback(timerID);
    var index = JSTimersExecution.immediates.indexOf(timerID);
    if (index !== -1) {
      JSTimersExecution.immediates.splice(index, 1);
    }
  },

  cancelAnimationFrame: function cancelAnimationFrame(timerID) {
    _freeCallback(timerID);
  }
};

module.exports = JSTimers;
}, 69, null, "JSTimers");
__d(/* parseErrorStack */function(global, require, module, exports) {
'use strict';

var stacktraceParser = require(71                 ); // 71 = stacktrace-parser

function parseErrorStack(e) {
  if (!e || !e.stack) {
    return [];
  }

  var stack = Array.isArray(e.stack) ? e.stack : stacktraceParser.parse(e.stack);

  var framesToPop = typeof e.framesToPop === 'number' ? e.framesToPop : 0;
  while (framesToPop--) {
    stack.shift();
  }

  return stack;
}

module.exports = parseErrorStack;
}, 70, null, "parseErrorStack");
__d(/* stacktrace-parser/index.js */function(global, require, module, exports) {module.exports = require(72                          ); // 72 = ./lib/stacktrace-parser.js
}, 71, null, "stacktrace-parser/index.js");
__d(/* stacktrace-parser/lib/stacktrace-parser.js */function(global, require, module, exports) {

var UNKNOWN_FUNCTION = '<unknown>';

var StackTraceParser = {
    parse: function parse(stackString) {
        var chrome = /^\s*at (?:(?:(?:Anonymous function)?|((?:\[object object\])?\S+(?: \[as \S+\])?)) )?\(?((?:file|http|https):.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            gecko = /^(?:\s*([^@]*)(?:\((.*?)\))?@)?(\S.*?):(\d+)(?::(\d+))?\s*$/i,
            node = /^\s*at (?:((?:\[object object\])?\S+(?: \[as \S+\])?) )?\(?(.*?):(\d+)(?::(\d+))?\)?\s*$/i,
            lines = stackString.split('\n'),
            stack = [],
            parts,
            element;

        for (var i = 0, j = lines.length; i < j; ++i) {
            if (parts = gecko.exec(lines[i])) {
                element = {
                    'file': parts[3],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[4],
                    'column': parts[5] ? +parts[5] : null
                };
            } else if (parts = chrome.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else if (parts = node.exec(lines[i])) {
                element = {
                    'file': parts[2],
                    'methodName': parts[1] || UNKNOWN_FUNCTION,
                    'lineNumber': +parts[3],
                    'column': parts[4] ? +parts[4] : null
                };
            } else {
                continue;
            }

            stack.push(element);
        }

        return stack;
    }
};

module.exports = StackTraceParser;
}, 72, null, "stacktrace-parser/lib/stacktrace-parser.js");
__d(/* deepFreezeAndThrowOnMutationInDev */function(global, require, module, exports) {

'use strict';

function deepFreezeAndThrowOnMutationInDev(object) {
  if (__DEV__) {
    if (typeof object !== 'object' || object === null || Object.isFrozen(object) || Object.isSealed(object)) {
      return;
    }

    var keys = Object.keys(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        object.__defineGetter__(key, identity.bind(null, object[key]));
        object.__defineSetter__(key, throwOnImmutableMutation.bind(null, key));
      }
    }

    Object.freeze(object);
    Object.seal(object);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      if (object.hasOwnProperty(key)) {
        deepFreezeAndThrowOnMutationInDev(object[key]);
      }
    }
  }
}

function throwOnImmutableMutation(key, value) {
  throw Error('You attempted to set the key `' + key + '` with the value `' + JSON.stringify(value) + '` on an object that is meant to be immutable ' + 'and has been frozen.');
}

function identity(value) {
  return value;
}

module.exports = deepFreezeAndThrowOnMutationInDev;
}, 73, null, "deepFreezeAndThrowOnMutationInDev");
__d(/* stringifySafe */function(global, require, module, exports) {
'use strict';

function stringifySafe(arg) {
  var ret;
  var type = typeof arg;
  if (arg === undefined) {
    ret = 'undefined';
  } else if (arg === null) {
    ret = 'null';
  } else if (type === 'string') {
    ret = '"' + arg + '"';
  } else if (type === 'function') {
    try {
      ret = arg.toString();
    } catch (e) {
      ret = '[function unknown]';
    }
  } else {
    try {
      ret = JSON.stringify(arg);
    } catch (e) {
      if (typeof arg.toString === 'function') {
        try {
          ret = arg.toString();
        } catch (E) {}
      }
    }
  }
  return ret || '["' + type + '" failed to stringify]';
}

module.exports = stringifySafe;
}, 74, null, "stringifySafe");
__d(/* HeapCapture */function(global, require, module, exports) {
'use strict';

var HeapCapture = {
  captureHeap: function captureHeap(path) {
    var error = null;
    try {
      global.nativeCaptureHeap(path);
      console.log('HeapCapture.captureHeap succeeded: ' + path);
    } catch (e) {
      console.log('HeapCapture.captureHeap error: ' + e.toString());
      error = e.toString();
    }
    require(57             ).JSCHeapCapture.captureComplete(path, error); // 57 = NativeModules
  }
};

module.exports = HeapCapture;
}, 75, null, "HeapCapture");
__d(/* SamplingProfiler */function(global, require, module, exports) {
'use strict';

var SamplingProfiler = {
  poke: function poke(token) {
    var error = null;
    var result = null;
    try {
      result = global.pokeSamplingProfiler();
      if (result === null) {
        console.log('The JSC Sampling Profiler has started');
      } else {
        console.log('The JSC Sampling Profiler has stopped');
      }
    } catch (e) {
      console.log('Error occured when restarting Sampling Profiler: ' + e.toString());
      error = e.toString();
    }
    require(57             ).JSCSamplingProfiler.operationComplete(token, result, error); // 57 = NativeModules
  }
};

module.exports = SamplingProfiler;
}, 76, null, "SamplingProfiler");
__d(/* HMRClient */function(global, require, module, exports) {
'use strict';

var Platform = require(56        ); // 56 = Platform
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var HMRClient = {
  enable: function enable(platform, bundleEntry, host, port) {
    invariant(platform, 'Missing required parameter `platform`');
    invariant(bundleEntry, 'Missing required paramenter `bundleEntry`');
    invariant(host, 'Missing required paramenter `host`');

    var WebSocket = require(78         ); // 78 = WebSocket

    var wsHostPort = port !== null && port !== '' ? host + ':' + port : host;

    var wsUrl = 'ws://' + wsHostPort + '/hot?' + ('platform=' + platform + '&') + ('bundleEntry=' + bundleEntry.replace('.bundle', '.js'));

    var activeWS = new WebSocket(wsUrl);
    activeWS.onerror = function (e) {
      var error = 'Hot loading isn\'t working because it cannot connect to the development server.\n\nTry the following to fix the issue:\n- Ensure that the packager server is running and available on the same network';

      if (Platform.OS === 'ios') {
        error += '\n- Ensure that the Packager server URL is correctly set in AppDelegate';
      } else {
        error += '\n- Ensure that your device/emulator is connected to your machine and has USB debugging enabled - run \'adb devices\' to see a list of connected devices\n- If you\'re on a physical device connected to the same machine, run \'adb reverse tcp:8081 tcp:8081\' to forward requests from your device\n- If your device is on the same Wi-Fi network, set \'Debug server host & port for device\' in \'Dev settings\' to your machine\'s IP address and the port of the local dev server - e.g. 10.0.1.1:8081';
      }

      error += '\n\nURL: ' + host + ':' + port + '\n\nError: ' + e.message;

      throw new Error(error);
    };
    activeWS.onmessage = function (_ref) {
      var data = _ref.data;

      var HMRLoadingView = require(97              ); // 97 = HMRLoadingView

      data = JSON.parse(data);

      switch (data.type) {
        case 'update-start':
          {
            HMRLoadingView.showMessage('Hot Loading...');
            break;
          }
        case 'update':
          {
            var _data$body = data.body,
                modules = _data$body.modules,
                sourceMappingURLs = _data$body.sourceMappingURLs,
                sourceURLs = _data$body.sourceURLs,
                inverseDependencies = _data$body.inverseDependencies;


            if (Platform.OS === 'ios') {
              var RCTRedBox = require(57             ).RedBox; // 57 = NativeModules
              RCTRedBox && RCTRedBox.dismiss && RCTRedBox.dismiss();
            } else {
              var RCTExceptionsManager = require(57             ).ExceptionsManager; // 57 = NativeModules
              RCTExceptionsManager && RCTExceptionsManager.dismissRedbox && RCTExceptionsManager.dismissRedbox();
            }

            modules.forEach(function (_ref2, i) {
              var id = _ref2.id,
                  code = _ref2.code;

              code = code + '\n\n' + sourceMappingURLs[i];

              var injectFunction = typeof global.nativeInjectHMRUpdate === 'function' ? global.nativeInjectHMRUpdate : eval;

              code = ['__accept(', id + ',', 'function(global,require,module,exports){', '' + code, '\n},', '' + JSON.stringify(inverseDependencies), ');'].join('');

              injectFunction(code, sourceURLs[i]);
            });

            HMRLoadingView.hide();
            break;
          }
        case 'update-done':
          {
            HMRLoadingView.hide();
            break;
          }
        case 'error':
          {
            HMRLoadingView.hide();
            throw new Error(data.body.type + ' ' + data.body.description);
          }
        default:
          {
            throw new Error('Unexpected message: ' + data);
          }
      }
    };
  }
};

module.exports = HMRClient;
}, 77, null, "HMRClient");
__d(/* WebSocket */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var Platform = require(56        ); // 56 = Platform
var RCTWebSocketModule = require(57             ).WebSocketModule; // 57 = NativeModules
var WebSocketEvent = require(90              ); // 90 = WebSocketEvent
var binaryToBase64 = require(91              ); // 91 = binaryToBase64

var EventTarget = require(93                 ); // 93 = event-target-shim
var base64 = require(92         ); // 92 = base64-js

var CONNECTING = 0;
var OPEN = 1;
var CLOSING = 2;
var CLOSED = 3;

var CLOSE_NORMAL = 1000;

var WEBSOCKET_EVENTS = ['close', 'error', 'message', 'open'];

var nextWebSocketId = 0;

var WebSocket = function (_EventTarget) {
  babelHelpers.inherits(WebSocket, _EventTarget);

  function WebSocket(url, protocols, options) {
    babelHelpers.classCallCheck(this, WebSocket);

    var _this = babelHelpers.possibleConstructorReturn(this, (WebSocket.__proto__ || Object.getPrototypeOf(WebSocket)).call(this));

    _this.CONNECTING = CONNECTING;
    _this.OPEN = OPEN;
    _this.CLOSING = CLOSING;
    _this.CLOSED = CLOSED;
    _this.readyState = CONNECTING;

    if (typeof protocols === 'string') {
      protocols = [protocols];
    }

    if (!Array.isArray(protocols)) {
      protocols = null;
    }

    _this._eventEmitter = new NativeEventEmitter(RCTWebSocketModule);
    _this._socketId = nextWebSocketId++;
    RCTWebSocketModule.connect(url, protocols, options, _this._socketId);
    _this._registerEvents();
    return _this;
  }

  babelHelpers.createClass(WebSocket, [{
    key: 'close',
    value: function close(code, reason) {
      if (this.readyState === this.CLOSING || this.readyState === this.CLOSED) {
        return;
      }

      this.readyState = this.CLOSING;
      this._close(code, reason);
    }
  }, {
    key: 'send',
    value: function send(data) {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      if (typeof data === 'string') {
        RCTWebSocketModule.send(data, this._socketId);
        return;
      }

      if (data instanceof ArrayBuffer || ArrayBuffer.isView(data)) {
        RCTWebSocketModule.sendBinary(binaryToBase64(data), this._socketId);
        return;
      }

      throw new Error('Unsupported data type');
    }
  }, {
    key: 'ping',
    value: function ping() {
      if (this.readyState === this.CONNECTING) {
        throw new Error('INVALID_STATE_ERR');
      }

      RCTWebSocketModule.ping(this._socketId);
    }
  }, {
    key: '_close',
    value: function _close(code, reason) {
      if (Platform.OS === 'android') {
        var statusCode = typeof code === 'number' ? code : CLOSE_NORMAL;
        var closeReason = typeof reason === 'string' ? reason : '';
        RCTWebSocketModule.close(statusCode, closeReason, this._socketId);
      } else {
        RCTWebSocketModule.close(this._socketId);
      }
    }
  }, {
    key: '_unregisterEvents',
    value: function _unregisterEvents() {
      this._subscriptions.forEach(function (e) {
        return e.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: '_registerEvents',
    value: function _registerEvents() {
      var _this2 = this;

      this._subscriptions = [this._eventEmitter.addListener('websocketMessage', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.dispatchEvent(new WebSocketEvent('message', {
          data: ev.type === 'binary' ? base64.toByteArray(ev.data).buffer : ev.data
        }));
      }), this._eventEmitter.addListener('websocketOpen', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.OPEN;
        _this2.dispatchEvent(new WebSocketEvent('open'));
      }), this._eventEmitter.addListener('websocketClosed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('close', {
          code: ev.code,
          reason: ev.reason
        }));
        _this2._unregisterEvents();
        _this2.close();
      }), this._eventEmitter.addListener('websocketFailed', function (ev) {
        if (ev.id !== _this2._socketId) {
          return;
        }
        _this2.readyState = _this2.CLOSED;
        _this2.dispatchEvent(new WebSocketEvent('error', {
          message: ev.message
        }));
        _this2.dispatchEvent(new WebSocketEvent('close', {
          message: ev.message
        }));
        _this2._unregisterEvents();
        _this2.close();
      })];
    }
  }]);
  return WebSocket;
}(EventTarget.apply(undefined, WEBSOCKET_EVENTS));

WebSocket.CONNECTING = CONNECTING;
WebSocket.OPEN = OPEN;
WebSocket.CLOSING = CLOSING;
WebSocket.CLOSED = CLOSED;


module.exports = WebSocket;
}, 78, null, "WebSocket");
__d(/* NativeEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(80            ); // 80 = EventEmitter
var Platform = require(56        ); // 56 = Platform
var RCTDeviceEventEmitter = require(84                     ); // 84 = RCTDeviceEventEmitter
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var NativeEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(NativeEventEmitter, _EventEmitter);

  function NativeEventEmitter(nativeModule) {
    babelHelpers.classCallCheck(this, NativeEventEmitter);

    var _this = babelHelpers.possibleConstructorReturn(this, (NativeEventEmitter.__proto__ || Object.getPrototypeOf(NativeEventEmitter)).call(this, RCTDeviceEventEmitter.sharedSubscriber));

    if (Platform.OS === 'ios') {
      invariant(nativeModule, 'Native module cannot be null.');
      _this._nativeModule = nativeModule;
    }
    return _this;
  }

  babelHelpers.createClass(NativeEventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      if (Platform.OS === 'ios') {
        this._nativeModule.addListener(eventType);
      }
      return babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      invariant(eventType, 'eventType argument is required.');
      if (Platform.OS === 'ios') {
        var count = this.listeners(eventType).length;
        this._nativeModule.removeListeners(count);
      }
      babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (Platform.OS === 'ios') {
        this._nativeModule.removeListeners(1);
      }
      babelHelpers.get(NativeEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NativeEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
    }
  }]);
  return NativeEventEmitter;
}(EventEmitter);

module.exports = NativeEventEmitter;
}, 79, null, "NativeEventEmitter");
__d(/* EventEmitter */function(global, require, module, exports) {
'use strict';

var EmitterSubscription = require(81                   ); // 81 = EmitterSubscription
var EventSubscriptionVendor = require(83                       ); // 83 = EventSubscriptionVendor

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var EventEmitter = function () {
  function EventEmitter(subscriber) {
    babelHelpers.classCallCheck(this, EventEmitter);

    this._subscriber = subscriber || new EventSubscriptionVendor();
  }

  babelHelpers.createClass(EventEmitter, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {

      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      var _this = this;

      return this.addListener(eventType, function () {
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this.removeCurrentListener();
        listener.apply(context, args);
      });
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._subscriber.removeAllSubscriptions(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      invariant(!!this._currentSubscription, 'Not in an emitting cycle; there is no current subscription');
      this.removeSubscription(this._currentSubscription);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');
      this._subscriber.removeSubscription(subscription);
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      return subscriptions ? subscriptions.filter(emptyFunction.thatReturnsTrue).map(function (subscription) {
        return subscription.listener;
      }) : [];
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription) {
            this._currentSubscription = subscription;
            subscription.listener.apply(subscription.context, Array.prototype.slice.call(arguments, 1));
          }
        }
        this._currentSubscription = null;
      }
    }
  }, {
    key: 'removeListener',
    value: function removeListener(eventType, listener) {
      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);
      if (subscriptions) {
        for (var i = 0, l = subscriptions.length; i < l; i++) {
          var subscription = subscriptions[i];

          if (subscription && subscription.listener === listener) {
            subscription.remove();
          }
        }
      }
    }
  }]);
  return EventEmitter;
}();

module.exports = EventEmitter;
}, 80, null, "EventEmitter");
__d(/* EmitterSubscription */function(global, require, module, exports) {
'use strict';

var EventSubscription = require(82                 ); // 82 = EventSubscription

var EmitterSubscription = function (_EventSubscription) {
  babelHelpers.inherits(EmitterSubscription, _EventSubscription);

  function EmitterSubscription(emitter, subscriber, listener, context) {
    babelHelpers.classCallCheck(this, EmitterSubscription);

    var _this = babelHelpers.possibleConstructorReturn(this, (EmitterSubscription.__proto__ || Object.getPrototypeOf(EmitterSubscription)).call(this, subscriber));

    _this.emitter = emitter;
    _this.listener = listener;
    _this.context = context;
    return _this;
  }

  babelHelpers.createClass(EmitterSubscription, [{
    key: 'remove',
    value: function remove() {
      this.emitter.removeSubscription(this);
    }
  }]);
  return EmitterSubscription;
}(EventSubscription);

module.exports = EmitterSubscription;
}, 81, null, "EmitterSubscription");
__d(/* EventSubscription */function(global, require, module, exports) {
'use strict';

var EventSubscription = function () {
  function EventSubscription(subscriber) {
    babelHelpers.classCallCheck(this, EventSubscription);

    this.subscriber = subscriber;
  }

  babelHelpers.createClass(EventSubscription, [{
    key: 'remove',
    value: function remove() {
      this.subscriber.removeSubscription(this);
    }
  }]);
  return EventSubscription;
}();

module.exports = EventSubscription;
}, 82, null, "EventSubscription");
__d(/* EventSubscriptionVendor */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var EventSubscriptionVendor = function () {
  function EventSubscriptionVendor() {
    babelHelpers.classCallCheck(this, EventSubscriptionVendor);

    this._subscriptionsForType = {};
    this._currentSubscription = null;
  }

  babelHelpers.createClass(EventSubscriptionVendor, [{
    key: 'addSubscription',
    value: function addSubscription(eventType, subscription) {
      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');
      if (!this._subscriptionsForType[eventType]) {
        this._subscriptionsForType[eventType] = [];
      }
      var key = this._subscriptionsForType[eventType].length;
      this._subscriptionsForType[eventType].push(subscription);
      subscription.eventType = eventType;
      subscription.key = key;
      return subscription;
    }
  }, {
    key: 'removeAllSubscriptions',
    value: function removeAllSubscriptions(eventType) {
      if (eventType === undefined) {
        this._subscriptionsForType = {};
      } else {
        delete this._subscriptionsForType[eventType];
      }
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      var eventType = subscription.eventType;
      var key = subscription.key;

      var subscriptionsForType = this._subscriptionsForType[eventType];
      if (subscriptionsForType) {
        delete subscriptionsForType[key];
      }
    }
  }, {
    key: 'getSubscriptionsForType',
    value: function getSubscriptionsForType(eventType) {
      return this._subscriptionsForType[eventType];
    }
  }]);
  return EventSubscriptionVendor;
}();

module.exports = EventSubscriptionVendor;
}, 83, null, "EventSubscriptionVendor");
__d(/* RCTDeviceEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(80            ); // 80 = EventEmitter
var EventSubscriptionVendor = require(83                       ); // 83 = EventSubscriptionVendor
var BatchedBridge = require(58             ); // 58 = BatchedBridge

var RCTDeviceEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(RCTDeviceEventEmitter, _EventEmitter);

  function RCTDeviceEventEmitter() {
    babelHelpers.classCallCheck(this, RCTDeviceEventEmitter);

    var sharedSubscriber = new EventSubscriptionVendor();

    var _this = babelHelpers.possibleConstructorReturn(this, (RCTDeviceEventEmitter.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter)).call(this, sharedSubscriber));

    _this.sharedSubscriber = sharedSubscriber;
    return _this;
  }

  babelHelpers.createClass(RCTDeviceEventEmitter, [{
    key: '_nativeEventModule',
    value: function _nativeEventModule(eventType) {
      if (eventType) {
        if (eventType.lastIndexOf('statusBar', 0) === 0) {
          console.warn('`%s` event should be registered via the StatusBarIOS module', eventType);
          return require(85            ); // 85 = StatusBarIOS
        }
        if (eventType.lastIndexOf('keyboard', 0) === 0) {
          console.warn('`%s` event should be registered via the Keyboard module', eventType);
          return require(86        ); // 86 = Keyboard
        }
        if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {
          console.warn('`%s` event should be registered via the AppState module', eventType);
          return require(88        ); // 88 = AppState
        }
      }
      return null;
    }
  }, {
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      var eventModule = this._nativeEventModule(eventType);
      return eventModule ? eventModule.addListener(eventType, listener, context) : babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'addListener', this).call(this, eventType, listener, context);
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      var eventModule = this._nativeEventModule(eventType);
      eventModule && eventType ? eventModule.removeAllListeners(eventType) : babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeAllListeners', this).call(this, eventType);
    }
  }, {
    key: 'removeSubscription',
    value: function removeSubscription(subscription) {
      if (subscription.emitter !== this) {
        subscription.emitter.removeSubscription(subscription);
      } else {
        babelHelpers.get(RCTDeviceEventEmitter.prototype.__proto__ || Object.getPrototypeOf(RCTDeviceEventEmitter.prototype), 'removeSubscription', this).call(this, subscription);
      }
    }
  }]);
  return RCTDeviceEventEmitter;
}(EventEmitter);

RCTDeviceEventEmitter = new RCTDeviceEventEmitter();

BatchedBridge.registerCallableModule('RCTDeviceEventEmitter', RCTDeviceEventEmitter);

module.exports = RCTDeviceEventEmitter;
}, 84, null, "RCTDeviceEventEmitter");
__d(/* StatusBarIOS */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter

module.exports = new NativeEventEmitter('StatusBarManager');
}, 85, null, "StatusBarIOS");
__d(/* Keyboard */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var KeyboardObserver = require(57             ).KeyboardObserver; // 57 = NativeModules
var dismissKeyboard = require(87               ); // 87 = dismissKeyboard
var KeyboardEventEmitter = new NativeEventEmitter(KeyboardObserver);

var Keyboard = {
  addListener: function addListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeListener: function removeListener(eventName, callback) {
    invariant(false, 'Dummy method used for documentation');
  },
  removeAllListeners: function removeAllListeners(eventName) {
    invariant(false, 'Dummy method used for documentation');
  },
  dismiss: function dismiss() {
    invariant(false, 'Dummy method used for documentation');
  }
};

Keyboard = KeyboardEventEmitter;
Keyboard.dismiss = dismissKeyboard;

module.exports = Keyboard;
}, 86, null, "Keyboard");
__d(/* dismissKeyboard */function(global, require, module, exports) {
'use strict';

var TextInputState = require(55              ); // 55 = TextInputState

function dismissKeyboard() {
  TextInputState.blurTextInput(TextInputState.currentlyFocusedField());
}

module.exports = dismissKeyboard;
}, 87, null, "dismissKeyboard");
__d(/* AppState */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var NativeModules = require(57             ); // 57 = NativeModules
var RCTAppState = NativeModules.AppState;

var logError = require(89        ); // 89 = logError
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var AppState = function (_NativeEventEmitter) {
  babelHelpers.inherits(AppState, _NativeEventEmitter);

  function AppState() {
    babelHelpers.classCallCheck(this, AppState);

    var _this = babelHelpers.possibleConstructorReturn(this, (AppState.__proto__ || Object.getPrototypeOf(AppState)).call(this, RCTAppState));

    _this._eventHandlers = {
      change: new Map(),
      memoryWarning: new Map()
    };

    _this.currentState = RCTAppState.initialAppState || 'active';

    _this.addListener('appStateDidChange', function (appStateData) {
      _this.currentState = appStateData.app_state;
    });

    RCTAppState.getCurrentAppState(function (appStateData) {
      _this.currentState = appStateData.app_state;
    }, logError);
    return _this;
  }

  babelHelpers.createClass(AppState, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to subscribe to unknown event: "%s"', type);
      if (type === 'change') {
        this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {
          handler(appStateData.app_state);
        }));
      } else if (type === 'memoryWarning') {
        this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));
      }
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(['change', 'memoryWarning'].indexOf(type) !== -1, 'Trying to remove listener for unknown event: "%s"', type);
      if (!this._eventHandlers[type].has(handler)) {
        return;
      }
      this._eventHandlers[type].get(handler).remove();
      this._eventHandlers[type].delete(handler);
    }
  }]);
  return AppState;
}(NativeEventEmitter);

AppState = new AppState();

module.exports = AppState;
}, 88, null, "AppState");
__d(/* logError */function(global, require, module, exports) {
'use strict';

var logError = function logError() {
  if (arguments.length === 1 && arguments[0] instanceof Error) {
    var err = arguments[0];
    console.error('Error: "' + err.message + '".  Stack:\n' + err.stack);
  } else {
    console.error.apply(console, arguments);
  }
};

module.exports = logError;
}, 89, null, "logError");
__d(/* WebSocketEvent */function(global, require, module, exports) {

'use strict';

var WebSocketEvent = function WebSocketEvent(type, eventInitDict) {
  babelHelpers.classCallCheck(this, WebSocketEvent);

  this.type = type.toString();
  babelHelpers.extends(this, eventInitDict);
};

module.exports = WebSocketEvent;
}, 90, null, "WebSocketEvent");
__d(/* binaryToBase64 */function(global, require, module, exports) {
'use strict';

var base64 = require(92         ); // 92 = base64-js

function binaryToBase64(data) {
  if (data instanceof ArrayBuffer) {
    data = new Uint8Array(data);
  }
  if (data instanceof Uint8Array) {
    return base64.fromByteArray(data);
  }
  if (!ArrayBuffer.isView(data)) {
    throw new Error('data must be ArrayBuffer or typed array');
  }
  var _data = data,
      buffer = _data.buffer,
      byteOffset = _data.byteOffset,
      byteLength = _data.byteLength;

  return base64.fromByteArray(new Uint8Array(buffer, byteOffset, byteLength));
}

module.exports = binaryToBase64;
}, 91, null, "binaryToBase64");
__d(/* base64-js/index.js */function(global, require, module, exports) {'use strict';

exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;

var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i];
  revLookup[code.charCodeAt(i)] = i;
}

revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;

function placeHoldersCount(b64) {
  var len = b64.length;
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4');
  }

  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;
}

function byteLength(b64) {
  return b64.length * 3 / 4 - placeHoldersCount(b64);
}

function toByteArray(b64) {
  var i, j, l, tmp, placeHolders, arr;
  var len = b64.length;
  placeHolders = placeHoldersCount(b64);

  arr = new Arr(len * 3 / 4 - placeHolders);

  l = placeHolders > 0 ? len - 4 : len;

  var L = 0;

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
    arr[L++] = tmp >> 16 & 0xFF;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  if (placeHolders === 2) {
    tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
    arr[L++] = tmp & 0xFF;
  } else if (placeHolders === 1) {
    tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
    arr[L++] = tmp >> 8 & 0xFF;
    arr[L++] = tmp & 0xFF;
  }

  return arr;
}

function tripletToBase64(num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}

function encodeChunk(uint8, start, end) {
  var tmp;
  var output = [];
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
    output.push(tripletToBase64(tmp));
  }
  return output.join('');
}

function fromByteArray(uint8) {
  var tmp;
  var len = uint8.length;
  var extraBytes = len % 3;
  var output = '';
  var parts = [];
  var maxChunkLength = 16383;
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
  }

  if (extraBytes === 1) {
    tmp = uint8[len - 1];
    output += lookup[tmp >> 2];
    output += lookup[tmp << 4 & 0x3F];
    output += '==';
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + uint8[len - 1];
    output += lookup[tmp >> 10];
    output += lookup[tmp >> 4 & 0x3F];
    output += lookup[tmp << 2 & 0x3F];
    output += '=';
  }

  parts.push(output);

  return parts.join('');
}
}, 92, null, "base64-js/index.js");
__d(/* event-target-shim/lib/event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(94         ); // 94 = ./commons
var CustomEventTarget = require(95                     ); // 95 = ./custom-event-target
var EventWrapper = require(96               ); // 96 = ./event-wrapper
var LISTENERS = Commons.LISTENERS;
var CAPTURE = Commons.CAPTURE;
var BUBBLE = Commons.BUBBLE;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;
var defineCustomEventTarget = CustomEventTarget.defineCustomEventTarget;
var createEventWrapper = EventWrapper.createEventWrapper;
var STOP_IMMEDIATE_PROPAGATION_FLAG = EventWrapper.STOP_IMMEDIATE_PROPAGATION_FLAG;

var HAS_EVENTTARGET_INTERFACE = typeof window !== "undefined" && typeof window.EventTarget !== "undefined";

var EventTarget = module.exports = function EventTarget() {
    if (this instanceof EventTarget) {
        Object.defineProperty(this, LISTENERS, { value: Object.create(null) });
    } else if (arguments.length === 1 && Array.isArray(arguments[0])) {
        return defineCustomEventTarget(EventTarget, arguments[0]);
    } else if (arguments.length > 0) {
        var types = Array(arguments.length);
        for (var i = 0; i < arguments.length; ++i) {
            types[i] = arguments[i];
        }

        return defineCustomEventTarget(EventTarget, types);
    } else {
        throw new TypeError("Cannot call a class as a function");
    }
};

EventTarget.prototype = Object.create((HAS_EVENTTARGET_INTERFACE ? window.EventTarget : Object).prototype, {
    constructor: {
        value: EventTarget,
        writable: true,
        configurable: true
    },

    addEventListener: {
        value: function addEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }
            if (typeof listener !== "function" && typeof listener !== "object") {
                throw new TypeError("\"listener\" is not an object.");
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var node = this[LISTENERS][type];
            if (node == null) {
                this[LISTENERS][type] = newNode(listener, kind);
                return true;
            }

            var prev = null;
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    return false;
                }
                prev = node;
                node = node.next;
            }

            prev.next = newNode(listener, kind);
            return true;
        },
        configurable: true,
        writable: true
    },

    removeEventListener: {
        value: function removeEventListener(type, listener, capture) {
            if (listener == null) {
                return false;
            }

            var kind = capture ? CAPTURE : BUBBLE;
            var prev = null;
            var node = this[LISTENERS][type];
            while (node != null) {
                if (node.listener === listener && node.kind === kind) {
                    if (prev == null) {
                        this[LISTENERS][type] = node.next;
                    } else {
                        prev.next = node.next;
                    }
                    return true;
                }

                prev = node;
                node = node.next;
            }

            return false;
        },
        configurable: true,
        writable: true
    },

    dispatchEvent: {
        value: function dispatchEvent(event) {
            var node = this[LISTENERS][event.type];
            if (node == null) {
                return true;
            }

            var wrapped = createEventWrapper(event, this);

            while (node != null) {
                if (typeof node.listener === "function") {
                    node.listener.call(this, wrapped);
                } else if (node.kind !== ATTRIBUTE && typeof node.listener.handleEvent === "function") {
                    node.listener.handleEvent(wrapped);
                }

                if (wrapped[STOP_IMMEDIATE_PROPAGATION_FLAG]) {
                    break;
                }
                node = node.next;
            }

            return !wrapped.defaultPrevented;
        },
        configurable: true,
        writable: true
    }
});
}, 93, null, "event-target-shim/lib/event-target.js");
__d(/* event-target-shim/lib/commons.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = exports.createUniqueKey = typeof Symbol !== "undefined" ? Symbol : function createUniqueKey(name) {
  return "[[" + name + "_" + Math.random().toFixed(8).slice(2) + "]]";
};

exports.LISTENERS = createUniqueKey("listeners");

exports.CAPTURE = 1;

exports.BUBBLE = 2;

exports.ATTRIBUTE = 3;

exports.newNode = function newNode(listener, kind) {
  return { listener: listener, kind: kind, next: null };
};
}, 94, null, "event-target-shim/lib/commons.js");
__d(/* event-target-shim/lib/custom-event-target.js */function(global, require, module, exports) {

"use strict";

var Commons = require(94         ); // 94 = ./commons
var LISTENERS = Commons.LISTENERS;
var ATTRIBUTE = Commons.ATTRIBUTE;
var newNode = Commons.newNode;

function getAttributeListener(eventTarget, type) {
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            return node.listener;
        }
        node = node.next;
    }
    return null;
}

function setAttributeListener(eventTarget, type, listener) {
    if (typeof listener !== "function" && typeof listener !== "object") {
        listener = null;
    }

    var prev = null;
    var node = eventTarget[LISTENERS][type];
    while (node != null) {
        if (node.kind === ATTRIBUTE) {
            if (prev == null) {
                eventTarget[LISTENERS][type] = node.next;
            } else {
                prev.next = node.next;
            }
        } else {
            prev = node;
        }

        node = node.next;
    }

    if (listener != null) {
        if (prev == null) {
            eventTarget[LISTENERS][type] = newNode(listener, ATTRIBUTE);
        } else {
            prev.next = newNode(listener, ATTRIBUTE);
        }
    }
}

exports.defineCustomEventTarget = function (EventTargetBase, types) {
    function EventTarget() {
        EventTargetBase.call(this);
    }

    var descripter = {
        constructor: {
            value: EventTarget,
            configurable: true,
            writable: true
        }
    };

    types.forEach(function (type) {
        descripter["on" + type] = {
            get: function get() {
                return getAttributeListener(this, type);
            },
            set: function set(listener) {
                setAttributeListener(this, type, listener);
            },
            configurable: true,
            enumerable: true
        };
    });

    EventTarget.prototype = Object.create(EventTargetBase.prototype, descripter);

    return EventTarget;
};
}, 95, null, "event-target-shim/lib/custom-event-target.js");
__d(/* event-target-shim/lib/event-wrapper.js */function(global, require, module, exports) {

"use strict";

var createUniqueKey = require(94         ).createUniqueKey; // 94 = ./commons

var STOP_IMMEDIATE_PROPAGATION_FLAG = createUniqueKey("stop_immediate_propagation_flag");

var CANCELED_FLAG = createUniqueKey("canceled_flag");

var ORIGINAL_EVENT = createUniqueKey("original_event");

var wrapperPrototypeDefinition = Object.freeze({
    stopPropagation: Object.freeze({
        value: function stopPropagation() {
            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopPropagation === "function") {
                e.stopPropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    stopImmediatePropagation: Object.freeze({
        value: function stopImmediatePropagation() {
            this[STOP_IMMEDIATE_PROPAGATION_FLAG] = true;

            var e = this[ORIGINAL_EVENT];
            if (typeof e.stopImmediatePropagation === "function") {
                e.stopImmediatePropagation();
            }
        },
        writable: true,
        configurable: true
    }),

    preventDefault: Object.freeze({
        value: function preventDefault() {
            if (this.cancelable === true) {
                this[CANCELED_FLAG] = true;
            }

            var e = this[ORIGINAL_EVENT];
            if (typeof e.preventDefault === "function") {
                e.preventDefault();
            }
        },
        writable: true,
        configurable: true
    }),

    defaultPrevented: Object.freeze({
        get: function defaultPrevented() {
            return this[CANCELED_FLAG];
        },
        enumerable: true,
        configurable: true
    })
});

exports.STOP_IMMEDIATE_PROPAGATION_FLAG = STOP_IMMEDIATE_PROPAGATION_FLAG;

exports.createEventWrapper = function createEventWrapper(event, eventTarget) {
    var timeStamp = typeof event.timeStamp === "number" ? event.timeStamp : Date.now();
    var propertyDefinition = {
        type: { value: event.type, enumerable: true },
        target: { value: eventTarget, enumerable: true },
        currentTarget: { value: eventTarget, enumerable: true },
        eventPhase: { value: 2, enumerable: true },
        bubbles: { value: Boolean(event.bubbles), enumerable: true },
        cancelable: { value: Boolean(event.cancelable), enumerable: true },
        timeStamp: { value: timeStamp, enumerable: true },
        isTrusted: { value: false, enumerable: true }
    };
    propertyDefinition[STOP_IMMEDIATE_PROPAGATION_FLAG] = { value: false, writable: true };
    propertyDefinition[CANCELED_FLAG] = { value: false, writable: true };
    propertyDefinition[ORIGINAL_EVENT] = { value: event };

    if (typeof event.detail !== "undefined") {
        propertyDefinition.detail = { value: event.detail, enumerable: true };
    }

    return Object.create(Object.create(event, wrapperPrototypeDefinition), propertyDefinition);
};
}, 96, null, "event-target-shim/lib/event-wrapper.js");
__d(/* HMRLoadingView */function(global, require, module, exports) {

'use strict';

var ToastAndroid = require(98            ); // 98 = ToastAndroid

var TOAST_SHORT_DELAY = 2000;

var HMRLoadingView = function () {
  function HMRLoadingView() {
    babelHelpers.classCallCheck(this, HMRLoadingView);
  }

  babelHelpers.createClass(HMRLoadingView, null, [{
    key: 'showMessage',
    value: function showMessage(message) {
      if (HMRLoadingView._showing) {
        return;
      }
      ToastAndroid.show(message, ToastAndroid.SHORT);
      HMRLoadingView._showing = true;
      setTimeout(function () {
        HMRLoadingView._showing = false;
      }, TOAST_SHORT_DELAY);
    }
  }, {
    key: 'hide',
    value: function hide() {}
  }]);
  return HMRLoadingView;
}();

module.exports = HMRLoadingView;
}, 97, null, "HMRLoadingView");
__d(/* ToastAndroid */function(global, require, module, exports) {

'use strict';

var RCTToastAndroid = require(57             ).ToastAndroid; // 57 = NativeModules

var ToastAndroid = {
  SHORT: RCTToastAndroid.SHORT,
  LONG: RCTToastAndroid.LONG,

  TOP: RCTToastAndroid.TOP,
  BOTTOM: RCTToastAndroid.BOTTOM,
  CENTER: RCTToastAndroid.CENTER,

  show: function show(message, duration) {
    RCTToastAndroid.show(message, duration);
  },

  showWithGravity: function showWithGravity(message, duration, gravity) {
    RCTToastAndroid.showWithGravity(message, duration, gravity);
  }
};

module.exports = ToastAndroid;
}, 98, null, "ToastAndroid");
__d(/* defineLazyObjectProperty */function(global, require, module, exports) {

'use strict';

function defineLazyObjectProperty(object, name, descriptor) {
  var get = descriptor.get;

  var enumerable = descriptor.enumerable !== false;
  var writable = descriptor.writable !== false;

  var value = void 0;
  var valueSet = false;
  function getValue() {
    if (!valueSet) {
      valueSet = true;
      setValue(get());
    }
    return value;
  }
  function setValue(newValue) {
    value = newValue;
    valueSet = true;
    Object.defineProperty(object, name, {
      value: newValue,
      configurable: true,
      enumerable: enumerable,
      writable: writable
    });
  }

  Object.defineProperty(object, name, {
    get: getValue,
    set: setValue,
    configurable: true,
    enumerable: enumerable
  });
}

module.exports = defineLazyObjectProperty;
}, 99, null, "defineLazyObjectProperty");
__d(/* UIManager */function(global, require, module, exports) {
'use strict';

var NativeModules = require(57             ); // 57 = NativeModules
var Platform = require(56        ); // 56 = Platform

var defineLazyObjectProperty = require(99                        ); // 99 = defineLazyObjectProperty
var findNodeHandle = require(101             ); // 101 = findNodeHandle
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var UIManager = NativeModules.UIManager;


invariant(UIManager, 'UIManager is undefined. The native module config is probably incorrect.');

var _takeSnapshot = UIManager.takeSnapshot;

UIManager.takeSnapshot = function _callee(view, options) {
  return regeneratorRuntime.async(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (_takeSnapshot) {
            _context.next = 3;
            break;
          }

          console.warn('UIManager.takeSnapshot is not available on this platform');
          return _context.abrupt('return');

        case 3:
          if (typeof view !== 'number' && view !== 'window') {
            view = findNodeHandle(view) || 'window';
          }
          return _context.abrupt('return', _takeSnapshot(view, options));

        case 5:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
};

if (Platform.OS === 'ios') {
  Object.keys(UIManager).forEach(function (viewName) {
    var viewConfig = UIManager[viewName];
    if (viewConfig.Manager) {
      defineLazyObjectProperty(viewConfig, 'Constants', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var constants = {};
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value !== 'function') {
              constants[key] = value;
            }
          });
          return constants;
        }
      });
      defineLazyObjectProperty(viewConfig, 'Commands', {
        get: function get() {
          var viewManager = NativeModules[viewConfig.Manager];
          var commands = {};
          var index = 0;
          viewManager && Object.keys(viewManager).forEach(function (key) {
            var value = viewManager[key];
            if (typeof value === 'function') {
              commands[key] = index++;
            }
          });
          return commands;
        }
      });
    }
  });
} else if (Platform.OS === 'android' && UIManager.AndroidLazyViewManagersEnabled) {
  UIManager.ViewManagerNames.forEach(function (viewManagerName) {
    defineLazyObjectProperty(UIManager, viewManagerName, {
      get: function get() {
        return NativeModules[viewManagerName.replace(/^(RCT|RK)/, '')];
      }
    });
  });
}

module.exports = UIManager;
}, 100, null, "UIManager");
__d(/* findNodeHandle */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(20                           ); // 20 = react/lib/ReactCurrentOwner
var ReactInstanceMap = require(102               ); // 102 = ReactInstanceMap

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

function findNodeHandle(componentOrHandle) {
  if (__DEV__) {
    var owner = ReactCurrentOwner.current;
    if (owner !== null) {
      warning(owner._warnedAboutRefsInRender, '%s is accessing findNodeHandle inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component');
      owner._warnedAboutRefsInRender = true;
    }
  }
  if (componentOrHandle == null) {
    return null;
  }
  if (typeof componentOrHandle === 'number') {
    return componentOrHandle;
  }

  var component = componentOrHandle;

  var internalInstance = ReactInstanceMap.get(component);
  if (internalInstance) {
    return internalInstance.getHostNode();
  } else {
    var rootNodeID = component._rootNodeID;
    if (rootNodeID) {
      return rootNodeID;
    } else {
      invariant(typeof component === 'object' && '_rootNodeID' in component || component.render != null && typeof component.render === 'function', 'findNodeHandle(...): Argument is not a component ' + '(type: %s, keys: %s)', typeof component, Object.keys(component));
      invariant(false, 'findNodeHandle(...): Unable to find node handle for unmounted ' + 'component.');
    }
  }
}

module.exports = findNodeHandle;
}, 101, null, "findNodeHandle");
__d(/* ReactInstanceMap */function(global, require, module, exports) {

'use strict';

var ReactInstanceMap = {
  remove: function remove(key) {
    key._reactInternalInstance = undefined;
  },

  get: function get(key) {
    return key._reactInternalInstance;
  },

  has: function has(key) {
    return key._reactInternalInstance !== undefined;
  },

  set: function set(key, value) {
    key._reactInternalInstance = value;
  }

};

module.exports = ReactInstanceMap;
}, 102, null, "ReactInstanceMap");
__d(/* React */function(global, require, module, exports) {

'use strict';

module.exports = require(13               ); // 13 = react/lib/React
}, 103, null, "React");
__d(/* StyleSheet */function(global, require, module, exports) {
'use strict';

var PixelRatio = require(105         ); // 105 = PixelRatio
var ReactNativePropRegistry = require(52                       ); // 52 = ReactNativePropRegistry
var ReactNativeStyleAttributes = require(107                         ); // 107 = ReactNativeStyleAttributes
var StyleSheetValidation = require(123                   ); // 123 = StyleSheetValidation

var flatten = require(54            ); // 54 = flattenStyle

var hairlineWidth = PixelRatio.roundToNearestPixel(0.4);
if (hairlineWidth === 0) {
  hairlineWidth = 1 / PixelRatio.get();
}

var absoluteFillObject = {
  position: 'absolute',
  left: 0,
  right: 0,
  top: 0,
  bottom: 0
};
var absoluteFill = ReactNativePropRegistry.register(absoluteFillObject);
module.exports = {
  hairlineWidth: hairlineWidth,

  absoluteFill: absoluteFill,

  absoluteFillObject: absoluteFillObject,

  flatten: flatten,

  setStyleAttributePreprocessor: function setStyleAttributePreprocessor(property, process) {
    var value = void 0;

    if (typeof ReactNativeStyleAttributes[property] === 'string') {
      value = {};
    } else if (typeof ReactNativeStyleAttributes[property] === 'object') {
      value = ReactNativeStyleAttributes[property];
    } else {
      console.error(property + ' is not a valid style attribute');
      return;
    }

    if (__DEV__ && typeof value.process === 'function') {
      console.warn('Overwriting ' + property + ' style attribute preprocessor');
    }

    ReactNativeStyleAttributes[property] = babelHelpers.extends({}, value, { process: process });
  },
  create: function create(obj) {
    var result = {};
    for (var key in obj) {
      StyleSheetValidation.validateStyle(key, obj);
      result[key] = ReactNativePropRegistry.register(obj[key]);
    }
    return result;
  }
};
}, 104, null, "StyleSheet");
__d(/* PixelRatio */function(global, require, module, exports) {
'use strict';

var Dimensions = require(106         ); // 106 = Dimensions

var PixelRatio = function () {
  function PixelRatio() {
    babelHelpers.classCallCheck(this, PixelRatio);
  }

  babelHelpers.createClass(PixelRatio, null, [{
    key: 'get',
    value: function get() {
      return Dimensions.get('window').scale;
    }
  }, {
    key: 'getFontScale',
    value: function getFontScale() {
      return Dimensions.get('window').fontScale || PixelRatio.get();
    }
  }, {
    key: 'getPixelSizeForLayoutSize',
    value: function getPixelSizeForLayoutSize(layoutSize) {
      return Math.round(layoutSize * PixelRatio.get());
    }
  }, {
    key: 'roundToNearestPixel',
    value: function roundToNearestPixel(layoutSize) {
      var ratio = PixelRatio.get();
      return Math.round(layoutSize * ratio) / ratio;
    }
  }, {
    key: 'startDetecting',
    value: function startDetecting() {}
  }]);
  return PixelRatio;
}();

module.exports = PixelRatio;
}, 105, null, "PixelRatio");
__d(/* Dimensions */function(global, require, module, exports) {
'use strict';

var Platform = require(56        ); // 56 = Platform
var UIManager = require(100        ); // 100 = UIManager
var RCTDeviceEventEmitter = require(84                     ); // 84 = RCTDeviceEventEmitter

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var dimensions = {};

var Dimensions = function () {
  function Dimensions() {
    babelHelpers.classCallCheck(this, Dimensions);
  }

  babelHelpers.createClass(Dimensions, null, [{
    key: 'set',
    value: function set(dims) {
      if (dims && dims.windowPhysicalPixels) {
        dims = JSON.parse(JSON.stringify(dims));

        var windowPhysicalPixels = dims.windowPhysicalPixels;
        dims.window = {
          width: windowPhysicalPixels.width / windowPhysicalPixels.scale,
          height: windowPhysicalPixels.height / windowPhysicalPixels.scale,
          scale: windowPhysicalPixels.scale,
          fontScale: windowPhysicalPixels.fontScale
        };
        if (Platform.OS === 'android') {
          var screenPhysicalPixels = dims.screenPhysicalPixels;
          dims.screen = {
            width: screenPhysicalPixels.width / screenPhysicalPixels.scale,
            height: screenPhysicalPixels.height / screenPhysicalPixels.scale,
            scale: screenPhysicalPixels.scale,
            fontScale: screenPhysicalPixels.fontScale
          };

          delete dims.screenPhysicalPixels;
        } else {
          dims.screen = dims.window;
        }

        delete dims.windowPhysicalPixels;
      }

      babelHelpers.extends(dimensions, dims);
    }
  }, {
    key: 'get',
    value: function get(dim) {
      invariant(dimensions[dim], 'No dimension set for key ' + dim);
      return dimensions[dim];
    }
  }]);
  return Dimensions;
}();

Dimensions.set(UIManager.Dimensions);
RCTDeviceEventEmitter.addListener('didUpdateDimensions', function (update) {
  Dimensions.set(update);
});

module.exports = Dimensions;
}, 106, null, "Dimensions");
__d(/* ReactNativeStyleAttributes */function(global, require, module, exports) {

'use strict';

var ImageStylePropTypes = require(108                  ); // 108 = ImageStylePropTypes
var TextStylePropTypes = require(116                 ); // 116 = TextStylePropTypes
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var keyMirror = require(110                 ); // 110 = fbjs/lib/keyMirror
var matricesDiffer = require(118             ); // 118 = matricesDiffer
var processColor = require(119           ); // 119 = processColor
var processTransform = require(120               ); // 120 = processTransform
var sizesDiffer = require(122          ); // 122 = sizesDiffer

var ReactNativeStyleAttributes = babelHelpers.extends({}, keyMirror(ViewStylePropTypes), keyMirror(TextStylePropTypes), keyMirror(ImageStylePropTypes));

ReactNativeStyleAttributes.transform = { process: processTransform };
ReactNativeStyleAttributes.transformMatrix = { diff: matricesDiffer };
ReactNativeStyleAttributes.shadowOffset = { diff: sizesDiffer };

ReactNativeStyleAttributes.decomposedMatrix = 'decomposedMatrix';

var colorAttributes = { process: processColor };
ReactNativeStyleAttributes.backgroundColor = colorAttributes;
ReactNativeStyleAttributes.borderBottomColor = colorAttributes;
ReactNativeStyleAttributes.borderColor = colorAttributes;
ReactNativeStyleAttributes.borderLeftColor = colorAttributes;
ReactNativeStyleAttributes.borderRightColor = colorAttributes;
ReactNativeStyleAttributes.borderTopColor = colorAttributes;
ReactNativeStyleAttributes.color = colorAttributes;
ReactNativeStyleAttributes.shadowColor = colorAttributes;
ReactNativeStyleAttributes.textDecorationColor = colorAttributes;
ReactNativeStyleAttributes.tintColor = colorAttributes;
ReactNativeStyleAttributes.textShadowColor = colorAttributes;
ReactNativeStyleAttributes.overlayColor = colorAttributes;

module.exports = ReactNativeStyleAttributes;
}, 107, null, "ReactNativeStyleAttributes");
__d(/* ImageStylePropTypes */function(global, require, module, exports) {
'use strict';

var ImageResizeMode = require(109              ); // 109 = ImageResizeMode
var LayoutPropTypes = require(111              ); // 111 = LayoutPropTypes
var ColorPropType = require(48             ); // 48 = ColorPropType
var ShadowPropTypesIOS = require(112                 ); // 112 = ShadowPropTypesIOS
var TransformPropTypes = require(113                 ); // 113 = TransformPropTypes

var ReactPropTypes = require(103    ).PropTypes; // 103 = React

var ImageStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  resizeMode: ReactPropTypes.oneOf(Object.keys(ImageResizeMode)),
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderWidth: ReactPropTypes.number,
  borderRadius: ReactPropTypes.number,
  overflow: ReactPropTypes.oneOf(['visible', 'hidden']),

  tintColor: ColorPropType,
  opacity: ReactPropTypes.number,

  overlayColor: ReactPropTypes.string,

  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number
});

module.exports = ImageStylePropTypes;
}, 108, null, "ImageStylePropTypes");
__d(/* ImageResizeMode */function(global, require, module, exports) {
'use strict';

var keyMirror = require(110                 ); // 110 = fbjs/lib/keyMirror

var ImageResizeMode = keyMirror({
  contain: null,

  cover: null,

  stretch: null,

  center: null,

  repeat: null
});

module.exports = ImageResizeMode;
}, 109, null, "ImageResizeMode");
__d(/* fbjs/lib/keyMirror.js */function(global, require, module, exports) {

'use strict';

var invariant = require(18           ); // 18 = ./invariant

var keyMirror = function keyMirror(obj) {
  var ret = {};
  var key;
  !(obj instanceof Object && !Array.isArray(obj)) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'keyMirror(...): Argument must be an object.') : invariant(false) : void 0;
  for (key in obj) {
    if (!obj.hasOwnProperty(key)) {
      continue;
    }
    ret[key] = key;
  }
  return ret;
};

module.exports = keyMirror;
}, 110, null, "fbjs/lib/keyMirror.js");
__d(/* LayoutPropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(103    ).PropTypes; // 103 = React

var LayoutPropTypes = {
  width: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  height: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  top: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  left: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  right: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  bottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxWidth: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  minHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  maxHeight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  margin: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  marginRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  padding: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingVertical: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingHorizontal: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingTop: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingBottom: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingLeft: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  paddingRight: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  borderWidth: ReactPropTypes.number,

  borderTopWidth: ReactPropTypes.number,

  borderRightWidth: ReactPropTypes.number,

  borderBottomWidth: ReactPropTypes.number,

  borderLeftWidth: ReactPropTypes.number,

  position: ReactPropTypes.oneOf(['absolute', 'relative']),

  flexDirection: ReactPropTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),

  flexWrap: ReactPropTypes.oneOf(['wrap', 'nowrap']),

  justifyContent: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'space-between', 'space-around']),

  alignItems: ReactPropTypes.oneOf(['flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  alignSelf: ReactPropTypes.oneOf(['auto', 'flex-start', 'flex-end', 'center', 'stretch', 'baseline']),

  overflow: ReactPropTypes.oneOf(['visible', 'hidden', 'scroll']),

  flex: ReactPropTypes.number,
  flexGrow: ReactPropTypes.number,
  flexShrink: ReactPropTypes.number,
  flexBasis: ReactPropTypes.oneOfType([ReactPropTypes.number, ReactPropTypes.string]),

  aspectRatio: ReactPropTypes.number,

  zIndex: ReactPropTypes.number
};

module.exports = LayoutPropTypes;
}, 111, null, "LayoutPropTypes");
__d(/* ShadowPropTypesIOS */function(global, require, module, exports) {
'use strict';

var ColorPropType = require(48             ); // 48 = ColorPropType
var ReactPropTypes = require(103    ).PropTypes; // 103 = React

var ShadowPropTypesIOS = {
  shadowColor: ColorPropType,

  shadowOffset: ReactPropTypes.shape({ width: ReactPropTypes.number, height: ReactPropTypes.number }),

  shadowOpacity: ReactPropTypes.number,

  shadowRadius: ReactPropTypes.number
};

module.exports = ShadowPropTypesIOS;
}, 112, null, "ShadowPropTypesIOS");
__d(/* TransformPropTypes */function(global, require, module, exports) {
'use strict';

var deprecatedPropType = require(114                 ); // 114 = deprecatedPropType

var ReactPropTypes = require(103    ).PropTypes; // 103 = React

var TransformMatrixPropType = function TransformMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The transformMatrix style property is deprecated. ' + 'Use `transform: [{ matrix: ... }]` instead.');
  }
};

var DecomposedMatrixPropType = function DecomposedMatrixPropType(props, propName, componentName) {
  if (props[propName]) {
    return new Error('The decomposedMatrix style property is deprecated. ' + 'Use `transform: [...]` instead.');
  }
};

var TransformPropTypes = {
  transform: ReactPropTypes.arrayOf(ReactPropTypes.oneOfType([ReactPropTypes.shape({ perspective: ReactPropTypes.number }), ReactPropTypes.shape({ rotate: ReactPropTypes.string }), ReactPropTypes.shape({ rotateX: ReactPropTypes.string }), ReactPropTypes.shape({ rotateY: ReactPropTypes.string }), ReactPropTypes.shape({ rotateZ: ReactPropTypes.string }), ReactPropTypes.shape({ scale: ReactPropTypes.number }), ReactPropTypes.shape({ scaleX: ReactPropTypes.number }), ReactPropTypes.shape({ scaleY: ReactPropTypes.number }), ReactPropTypes.shape({ translateX: ReactPropTypes.number }), ReactPropTypes.shape({ translateY: ReactPropTypes.number }), ReactPropTypes.shape({ skewX: ReactPropTypes.string }), ReactPropTypes.shape({ skewY: ReactPropTypes.string })])),

  transformMatrix: TransformMatrixPropType,
  decomposedMatrix: DecomposedMatrixPropType,

  scaleX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  scaleY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  rotation: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateX: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.'),
  translateY: deprecatedPropType(ReactPropTypes.number, 'Use the transform prop instead.')
};

module.exports = TransformPropTypes;
}, 113, null, "TransformPropTypes");
__d(/* deprecatedPropType */function(global, require, module, exports) {
'use strict';

var UIManager = require(100        ); // 100 = UIManager
var ReactPropTypesSecret = require(38                              ); // 38 = react/lib/ReactPropTypesSecret
var ReactPropTypeLocations = require(115                               ); // 115 = react/lib/ReactPropTypeLocations

function deprecatedPropType(propType, explanation) {
  return function validate(props, propName, componentName) {
    if (!UIManager[componentName] && props[propName] !== undefined) {
      console.warn('`' + propName + '` supplied to `' + componentName + '` has been deprecated. ' + explanation);
    }

    return propType(props, propName, componentName, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);
  };
}

module.exports = deprecatedPropType;
}, 114, null, "deprecatedPropType");
__d(/* react/lib/ReactPropTypeLocations.js */function(global, require, module, exports) {

'use strict';
}, 115, null, "react/lib/ReactPropTypeLocations.js");
__d(/* TextStylePropTypes */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(103    ).PropTypes; // 103 = React
var ColorPropType = require(48             ); // 48 = ColorPropType
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var TextStylePropTypes = babelHelpers.extends({}, ViewStylePropTypes, {

  color: ColorPropType,
  fontFamily: ReactPropTypes.string,
  fontSize: ReactPropTypes.number,
  fontStyle: ReactPropTypes.oneOf(['normal', 'italic']),

  fontWeight: ReactPropTypes.oneOf(['normal', 'bold', '100', '200', '300', '400', '500', '600', '700', '800', '900']),

  fontVariant: ReactPropTypes.arrayOf(ReactPropTypes.oneOf(['small-caps', 'oldstyle-nums', 'lining-nums', 'tabular-nums', 'proportional-nums'])),
  textShadowOffset: ReactPropTypes.shape({ width: ReactPropTypes.number, height: ReactPropTypes.number }),
  textShadowRadius: ReactPropTypes.number,
  textShadowColor: ColorPropType,

  letterSpacing: ReactPropTypes.number,
  lineHeight: ReactPropTypes.number,

  textAlign: ReactPropTypes.oneOf(['auto', 'left', 'right', 'center', 'justify']),

  textAlignVertical: ReactPropTypes.oneOf(['auto', 'top', 'bottom', 'center']),

  includeFontPadding: ReactPropTypes.bool,
  textDecorationLine: ReactPropTypes.oneOf(['none', 'underline', 'line-through', 'underline line-through']),

  textDecorationStyle: ReactPropTypes.oneOf(['solid', 'double', 'dotted', 'dashed']),

  textDecorationColor: ColorPropType,

  writingDirection: ReactPropTypes.oneOf(['auto', 'ltr', 'rtl'])
});

module.exports = TextStylePropTypes;
}, 116, null, "TextStylePropTypes");
__d(/* ViewStylePropTypes */function(global, require, module, exports) {
'use strict';

var LayoutPropTypes = require(111              ); // 111 = LayoutPropTypes
var ReactPropTypes = require(103    ).PropTypes; // 103 = React
var ColorPropType = require(48             ); // 48 = ColorPropType
var ShadowPropTypesIOS = require(112                 ); // 112 = ShadowPropTypesIOS
var TransformPropTypes = require(113                 ); // 113 = TransformPropTypes

var ViewStylePropTypes = babelHelpers.extends({}, LayoutPropTypes, ShadowPropTypesIOS, TransformPropTypes, {
  backfaceVisibility: ReactPropTypes.oneOf(['visible', 'hidden']),
  backgroundColor: ColorPropType,
  borderColor: ColorPropType,
  borderTopColor: ColorPropType,
  borderRightColor: ColorPropType,
  borderBottomColor: ColorPropType,
  borderLeftColor: ColorPropType,
  borderRadius: ReactPropTypes.number,
  borderTopLeftRadius: ReactPropTypes.number,
  borderTopRightRadius: ReactPropTypes.number,
  borderBottomLeftRadius: ReactPropTypes.number,
  borderBottomRightRadius: ReactPropTypes.number,
  borderStyle: ReactPropTypes.oneOf(['solid', 'dotted', 'dashed']),
  borderWidth: ReactPropTypes.number,
  borderTopWidth: ReactPropTypes.number,
  borderRightWidth: ReactPropTypes.number,
  borderBottomWidth: ReactPropTypes.number,
  borderLeftWidth: ReactPropTypes.number,
  opacity: ReactPropTypes.number,

  elevation: ReactPropTypes.number
});

module.exports = ViewStylePropTypes;
}, 117, null, "ViewStylePropTypes");
__d(/* matricesDiffer */function(global, require, module, exports) {
'use strict';

var matricesDiffer = function matricesDiffer(one, two) {
  if (one === two) {
    return false;
  }
  return !one || !two || one[12] !== two[12] || one[13] !== two[13] || one[14] !== two[14] || one[5] !== two[5] || one[10] !== two[10] || one[1] !== two[1] || one[2] !== two[2] || one[3] !== two[3] || one[4] !== two[4] || one[6] !== two[6] || one[7] !== two[7] || one[8] !== two[8] || one[9] !== two[9] || one[11] !== two[11] || one[15] !== two[15];
};

module.exports = matricesDiffer;
}, 118, null, "matricesDiffer");
__d(/* processColor */function(global, require, module, exports) {
'use strict';

var Platform = require(56        ); // 56 = Platform

var normalizeColor = require(49              ); // 49 = normalizeColor

function processColor(color) {
  if (color === undefined || color === null) {
    return color;
  }

  var int32Color = normalizeColor(color);
  if (int32Color === null) {
    return undefined;
  }

  int32Color = (int32Color << 24 | int32Color >>> 8) >>> 0;

  if (Platform.OS === 'android') {
    int32Color = int32Color | 0x0;
  }
  return int32Color;
}

module.exports = processColor;
}, 119, null, "processColor");
__d(/* processTransform */function(global, require, module, exports) {
'use strict';

var MatrixMath = require(121         ); // 121 = MatrixMath
var Platform = require(56        ); // 56 = Platform

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var stringifySafe = require(74             ); // 74 = stringifySafe

function processTransform(transform) {
  if (__DEV__) {
    _validateTransforms(transform);
  }

  if (Platform.OS === 'android' || Platform.OS === 'ios') {
    return transform;
  }

  var result = MatrixMath.createIdentityMatrix();

  transform.forEach(function (transformation) {
    var key = Object.keys(transformation)[0];
    var value = transformation[key];

    switch (key) {
      case 'matrix':
        MatrixMath.multiplyInto(result, result, value);
        break;
      case 'perspective':
        _multiplyTransform(result, MatrixMath.reusePerspectiveCommand, [value]);
        break;
      case 'rotateX':
        _multiplyTransform(result, MatrixMath.reuseRotateXCommand, [_convertToRadians(value)]);
        break;
      case 'rotateY':
        _multiplyTransform(result, MatrixMath.reuseRotateYCommand, [_convertToRadians(value)]);
        break;
      case 'rotate':
      case 'rotateZ':
        _multiplyTransform(result, MatrixMath.reuseRotateZCommand, [_convertToRadians(value)]);
        break;
      case 'scale':
        _multiplyTransform(result, MatrixMath.reuseScaleCommand, [value]);
        break;
      case 'scaleX':
        _multiplyTransform(result, MatrixMath.reuseScaleXCommand, [value]);
        break;
      case 'scaleY':
        _multiplyTransform(result, MatrixMath.reuseScaleYCommand, [value]);
        break;
      case 'translate':
        _multiplyTransform(result, MatrixMath.reuseTranslate3dCommand, [value[0], value[1], value[2] || 0]);
        break;
      case 'translateX':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [value, 0]);
        break;
      case 'translateY':
        _multiplyTransform(result, MatrixMath.reuseTranslate2dCommand, [0, value]);
        break;
      case 'skewX':
        _multiplyTransform(result, MatrixMath.reuseSkewXCommand, [_convertToRadians(value)]);
        break;
      case 'skewY':
        _multiplyTransform(result, MatrixMath.reuseSkewYCommand, [_convertToRadians(value)]);
        break;
      default:
        throw new Error('Invalid transform name: ' + key);
    }
  });

  return result;
}

function _multiplyTransform(result, matrixMathFunction, args) {
  var matrixToApply = MatrixMath.createIdentityMatrix();
  var argsWithIdentity = [matrixToApply].concat(args);
  matrixMathFunction.apply(this, argsWithIdentity);
  MatrixMath.multiplyInto(result, result, matrixToApply);
}

function _convertToRadians(value) {
  var floatValue = parseFloat(value, 10);
  return value.indexOf('rad') > -1 ? floatValue : floatValue * Math.PI / 180;
}

function _validateTransforms(transform) {
  transform.forEach(function (transformation) {
    var keys = Object.keys(transformation);
    invariant(keys.length === 1, 'You must specify exactly one property per transform object. Passed properties: %s', stringifySafe(transformation));
    var key = keys[0];
    var value = transformation[key];
    _validateTransform(key, value, transformation);
  });
}

function _validateTransform(key, value, transformation) {
  invariant(!value.getValue, 'You passed an Animated.Value to a normal component. ' + 'You need to wrap that component in an Animated. For example, ' + 'replace <View /> by <Animated.View />.');

  var multivalueTransforms = ['matrix', 'translate'];
  if (multivalueTransforms.indexOf(key) !== -1) {
    invariant(Array.isArray(value), 'Transform with key of %s must have an array as the value: %s', key, stringifySafe(transformation));
  }
  switch (key) {
    case 'matrix':
      invariant(value.length === 9 || value.length === 16, 'Matrix transform must have a length of 9 (2d) or 16 (3d). ' + 'Provided matrix has a length of %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'translate':
      invariant(value.length === 2 || value.length === 3, 'Transform with key translate must be an array of length 2 or 3, found %s: %s', value.length, stringifySafe(transformation));
      break;
    case 'rotateX':
    case 'rotateY':
    case 'rotateZ':
    case 'rotate':
    case 'skewX':
    case 'skewY':
      invariant(typeof value === 'string', 'Transform with key of "%s" must be a string: %s', key, stringifySafe(transformation));
      invariant(value.indexOf('deg') > -1 || value.indexOf('rad') > -1, 'Rotate transform must be expressed in degrees (deg) or radians ' + '(rad): %s', stringifySafe(transformation));
      break;
    case 'perspective':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      invariant(value !== 0, 'Transform with key of "%s" cannot be zero: %s', key, stringifySafe(transformation));
      break;
    case 'translateX':
    case 'translateY':
    case 'scale':
    case 'scaleX':
    case 'scaleY':
      invariant(typeof value === 'number', 'Transform with key of "%s" must be a number: %s', key, stringifySafe(transformation));
      break;
    default:
      invariant(false, 'Invalid transform %s: %s', key, stringifySafe(transformation));
  }
}

module.exports = processTransform;
}, 120, null, "processTransform");
__d(/* MatrixMath */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var MatrixMath = {
  createIdentityMatrix: function createIdentityMatrix() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  },

  createCopy: function createCopy(m) {
    return [m[0], m[1], m[2], m[3], m[4], m[5], m[6], m[7], m[8], m[9], m[10], m[11], m[12], m[13], m[14], m[15]];
  },

  createOrthographic: function createOrthographic(left, right, bottom, top, near, far) {
    var a = 2 / (right - left);
    var b = 2 / (top - bottom);
    var c = -2 / (far - near);

    var tx = -(right + left) / (right - left);
    var ty = -(top + bottom) / (top - bottom);
    var tz = -(far + near) / (far - near);

    return [a, 0, 0, 0, 0, b, 0, 0, 0, 0, c, 0, tx, ty, tz, 1];
  },

  createFrustum: function createFrustum(left, right, bottom, top, near, far) {
    var r_width = 1 / (right - left);
    var r_height = 1 / (top - bottom);
    var r_depth = 1 / (near - far);
    var x = 2 * (near * r_width);
    var y = 2 * (near * r_height);
    var A = (right + left) * r_width;
    var B = (top + bottom) * r_height;
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [x, 0, 0, 0, 0, y, 0, 0, A, B, C, -1, 0, 0, D, 0];
  },

  createPerspective: function createPerspective(fovInRadians, aspect, near, far) {
    var h = 1 / Math.tan(fovInRadians / 2);
    var r_depth = 1 / (near - far);
    var C = (far + near) * r_depth;
    var D = 2 * (far * near * r_depth);
    return [h / aspect, 0, 0, 0, 0, h, 0, 0, 0, 0, C, -1, 0, 0, D, 0];
  },

  createTranslate2d: function createTranslate2d(x, y) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseTranslate2dCommand(mat, x, y);
    return mat;
  },

  reuseTranslate2dCommand: function reuseTranslate2dCommand(matrixCommand, x, y) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
  },

  reuseTranslate3dCommand: function reuseTranslate3dCommand(matrixCommand, x, y, z) {
    matrixCommand[12] = x;
    matrixCommand[13] = y;
    matrixCommand[14] = z;
  },

  createScale: function createScale(factor) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseScaleCommand(mat, factor);
    return mat;
  },

  reuseScaleCommand: function reuseScaleCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
    matrixCommand[5] = factor;
  },

  reuseScale3dCommand: function reuseScale3dCommand(matrixCommand, x, y, z) {
    matrixCommand[0] = x;
    matrixCommand[5] = y;
    matrixCommand[10] = z;
  },

  reusePerspectiveCommand: function reusePerspectiveCommand(matrixCommand, p) {
    matrixCommand[11] = -1 / p;
  },

  reuseScaleXCommand: function reuseScaleXCommand(matrixCommand, factor) {
    matrixCommand[0] = factor;
  },
  reuseScaleYCommand: function reuseScaleYCommand(matrixCommand, factor) {
    matrixCommand[5] = factor;
  },
  reuseScaleZCommand: function reuseScaleZCommand(matrixCommand, factor) {
    matrixCommand[10] = factor;
  },


  reuseRotateXCommand: function reuseRotateXCommand(matrixCommand, radians) {
    matrixCommand[5] = Math.cos(radians);
    matrixCommand[6] = Math.sin(radians);
    matrixCommand[9] = -Math.sin(radians);
    matrixCommand[10] = Math.cos(radians);
  },

  reuseRotateYCommand: function reuseRotateYCommand(matrixCommand, amount) {
    matrixCommand[0] = Math.cos(amount);
    matrixCommand[2] = -Math.sin(amount);
    matrixCommand[8] = Math.sin(amount);
    matrixCommand[10] = Math.cos(amount);
  },

  reuseRotateZCommand: function reuseRotateZCommand(matrixCommand, radians) {
    matrixCommand[0] = Math.cos(radians);
    matrixCommand[1] = Math.sin(radians);
    matrixCommand[4] = -Math.sin(radians);
    matrixCommand[5] = Math.cos(radians);
  },

  createRotateZ: function createRotateZ(radians) {
    var mat = MatrixMath.createIdentityMatrix();
    MatrixMath.reuseRotateZCommand(mat, radians);
    return mat;
  },

  reuseSkewXCommand: function reuseSkewXCommand(matrixCommand, radians) {
    matrixCommand[4] = Math.tan(radians);
  },

  reuseSkewYCommand: function reuseSkewYCommand(matrixCommand, radians) {
    matrixCommand[1] = Math.tan(radians);
  },

  multiplyInto: function multiplyInto(out, a, b) {
    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];

    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];
    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];
    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];
    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
  },

  determinant: function determinant(matrix) {
    var _matrix = babelHelpers.slicedToArray(matrix, 16),
        m00 = _matrix[0],
        m01 = _matrix[1],
        m02 = _matrix[2],
        m03 = _matrix[3],
        m10 = _matrix[4],
        m11 = _matrix[5],
        m12 = _matrix[6],
        m13 = _matrix[7],
        m20 = _matrix[8],
        m21 = _matrix[9],
        m22 = _matrix[10],
        m23 = _matrix[11],
        m30 = _matrix[12],
        m31 = _matrix[13],
        m32 = _matrix[14],
        m33 = _matrix[15];

    return m03 * m12 * m21 * m30 - m02 * m13 * m21 * m30 - m03 * m11 * m22 * m30 + m01 * m13 * m22 * m30 + m02 * m11 * m23 * m30 - m01 * m12 * m23 * m30 - m03 * m12 * m20 * m31 + m02 * m13 * m20 * m31 + m03 * m10 * m22 * m31 - m00 * m13 * m22 * m31 - m02 * m10 * m23 * m31 + m00 * m12 * m23 * m31 + m03 * m11 * m20 * m32 - m01 * m13 * m20 * m32 - m03 * m10 * m21 * m32 + m00 * m13 * m21 * m32 + m01 * m10 * m23 * m32 - m00 * m11 * m23 * m32 - m02 * m11 * m20 * m33 + m01 * m12 * m20 * m33 + m02 * m10 * m21 * m33 - m00 * m12 * m21 * m33 - m01 * m10 * m22 * m33 + m00 * m11 * m22 * m33;
  },
  inverse: function inverse(matrix) {
    var det = MatrixMath.determinant(matrix);
    if (!det) {
      return matrix;
    }

    var _matrix2 = babelHelpers.slicedToArray(matrix, 16),
        m00 = _matrix2[0],
        m01 = _matrix2[1],
        m02 = _matrix2[2],
        m03 = _matrix2[3],
        m10 = _matrix2[4],
        m11 = _matrix2[5],
        m12 = _matrix2[6],
        m13 = _matrix2[7],
        m20 = _matrix2[8],
        m21 = _matrix2[9],
        m22 = _matrix2[10],
        m23 = _matrix2[11],
        m30 = _matrix2[12],
        m31 = _matrix2[13],
        m32 = _matrix2[14],
        m33 = _matrix2[15];

    return [(m12 * m23 * m31 - m13 * m22 * m31 + m13 * m21 * m32 - m11 * m23 * m32 - m12 * m21 * m33 + m11 * m22 * m33) / det, (m03 * m22 * m31 - m02 * m23 * m31 - m03 * m21 * m32 + m01 * m23 * m32 + m02 * m21 * m33 - m01 * m22 * m33) / det, (m02 * m13 * m31 - m03 * m12 * m31 + m03 * m11 * m32 - m01 * m13 * m32 - m02 * m11 * m33 + m01 * m12 * m33) / det, (m03 * m12 * m21 - m02 * m13 * m21 - m03 * m11 * m22 + m01 * m13 * m22 + m02 * m11 * m23 - m01 * m12 * m23) / det, (m13 * m22 * m30 - m12 * m23 * m30 - m13 * m20 * m32 + m10 * m23 * m32 + m12 * m20 * m33 - m10 * m22 * m33) / det, (m02 * m23 * m30 - m03 * m22 * m30 + m03 * m20 * m32 - m00 * m23 * m32 - m02 * m20 * m33 + m00 * m22 * m33) / det, (m03 * m12 * m30 - m02 * m13 * m30 - m03 * m10 * m32 + m00 * m13 * m32 + m02 * m10 * m33 - m00 * m12 * m33) / det, (m02 * m13 * m20 - m03 * m12 * m20 + m03 * m10 * m22 - m00 * m13 * m22 - m02 * m10 * m23 + m00 * m12 * m23) / det, (m11 * m23 * m30 - m13 * m21 * m30 + m13 * m20 * m31 - m10 * m23 * m31 - m11 * m20 * m33 + m10 * m21 * m33) / det, (m03 * m21 * m30 - m01 * m23 * m30 - m03 * m20 * m31 + m00 * m23 * m31 + m01 * m20 * m33 - m00 * m21 * m33) / det, (m01 * m13 * m30 - m03 * m11 * m30 + m03 * m10 * m31 - m00 * m13 * m31 - m01 * m10 * m33 + m00 * m11 * m33) / det, (m03 * m11 * m20 - m01 * m13 * m20 - m03 * m10 * m21 + m00 * m13 * m21 + m01 * m10 * m23 - m00 * m11 * m23) / det, (m12 * m21 * m30 - m11 * m22 * m30 - m12 * m20 * m31 + m10 * m22 * m31 + m11 * m20 * m32 - m10 * m21 * m32) / det, (m01 * m22 * m30 - m02 * m21 * m30 + m02 * m20 * m31 - m00 * m22 * m31 - m01 * m20 * m32 + m00 * m21 * m32) / det, (m02 * m11 * m30 - m01 * m12 * m30 - m02 * m10 * m31 + m00 * m12 * m31 + m01 * m10 * m32 - m00 * m11 * m32) / det, (m01 * m12 * m20 - m02 * m11 * m20 + m02 * m10 * m21 - m00 * m12 * m21 - m01 * m10 * m22 + m00 * m11 * m22) / det];
  },
  transpose: function transpose(m) {
    return [m[0], m[4], m[8], m[12], m[1], m[5], m[9], m[13], m[2], m[6], m[10], m[14], m[3], m[7], m[11], m[15]];
  },
  multiplyVectorByMatrix: function multiplyVectorByMatrix(v, m) {
    var _v = babelHelpers.slicedToArray(v, 4),
        vx = _v[0],
        vy = _v[1],
        vz = _v[2],
        vw = _v[3];

    return [vx * m[0] + vy * m[4] + vz * m[8] + vw * m[12], vx * m[1] + vy * m[5] + vz * m[9] + vw * m[13], vx * m[2] + vy * m[6] + vz * m[10] + vw * m[14], vx * m[3] + vy * m[7] + vz * m[11] + vw * m[15]];
  },
  v3Length: function v3Length(a) {
    return Math.sqrt(a[0] * a[0] + a[1] * a[1] + a[2] * a[2]);
  },
  v3Normalize: function v3Normalize(vector, v3Length) {
    var im = 1 / (v3Length || MatrixMath.v3Length(vector));
    return [vector[0] * im, vector[1] * im, vector[2] * im];
  },
  v3Dot: function v3Dot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
  },
  v3Combine: function v3Combine(a, b, aScale, bScale) {
    return [aScale * a[0] + bScale * b[0], aScale * a[1] + bScale * b[1], aScale * a[2] + bScale * b[2]];
  },
  v3Cross: function v3Cross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
  },
  quaternionToDegreesXYZ: function quaternionToDegreesXYZ(q, matrix, row) {
    var _q = babelHelpers.slicedToArray(q, 4),
        qx = _q[0],
        qy = _q[1],
        qz = _q[2],
        qw = _q[3];

    var qw2 = qw * qw;
    var qx2 = qx * qx;
    var qy2 = qy * qy;
    var qz2 = qz * qz;
    var test = qx * qy + qz * qw;
    var unit = qw2 + qx2 + qy2 + qz2;
    var conv = 180 / Math.PI;

    if (test > 0.49999 * unit) {
      return [0, 2 * Math.atan2(qx, qw) * conv, 90];
    }
    if (test < -0.49999 * unit) {
      return [0, -2 * Math.atan2(qx, qw) * conv, -90];
    }

    return [MatrixMath.roundTo3Places(Math.atan2(2 * qx * qw - 2 * qy * qz, 1 - 2 * qx2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.atan2(2 * qy * qw - 2 * qx * qz, 1 - 2 * qy2 - 2 * qz2) * conv), MatrixMath.roundTo3Places(Math.asin(2 * qx * qy + 2 * qz * qw) * conv)];
  },
  roundTo3Places: function roundTo3Places(n) {
    var arr = n.toString().split('e');
    return Math.round(arr[0] + 'e' + (arr[1] ? +arr[1] - 3 : 3)) * 0.001;
  },
  decomposeMatrix: function decomposeMatrix(transformMatrix) {

    invariant(transformMatrix.length === 16, 'Matrix decomposition needs a list of 3d matrix values, received %s', transformMatrix);

    var perspective = [];
    var quaternion = [];
    var scale = [];
    var skew = [];
    var translation = [];

    if (!transformMatrix[15]) {
      return;
    }
    var matrix = [];
    var perspectiveMatrix = [];
    for (var i = 0; i < 4; i++) {
      matrix.push([]);
      for (var j = 0; j < 4; j++) {
        var value = transformMatrix[i * 4 + j] / transformMatrix[15];
        matrix[i].push(value);
        perspectiveMatrix.push(j === 3 ? 0 : value);
      }
    }
    perspectiveMatrix[15] = 1;

    if (!MatrixMath.determinant(perspectiveMatrix)) {
      return;
    }

    if (matrix[0][3] !== 0 || matrix[1][3] !== 0 || matrix[2][3] !== 0) {
      var rightHandSide = [matrix[0][3], matrix[1][3], matrix[2][3], matrix[3][3]];

      var inversePerspectiveMatrix = MatrixMath.inverse(perspectiveMatrix);
      var transposedInversePerspectiveMatrix = MatrixMath.transpose(inversePerspectiveMatrix);
      var perspective = MatrixMath.multiplyVectorByMatrix(rightHandSide, transposedInversePerspectiveMatrix);
    } else {
      perspective[0] = perspective[1] = perspective[2] = 0;
      perspective[3] = 1;
    }

    for (var i = 0; i < 3; i++) {
      translation[i] = matrix[3][i];
    }

    var row = [];
    for (i = 0; i < 3; i++) {
      row[i] = [matrix[i][0], matrix[i][1], matrix[i][2]];
    }

    scale[0] = MatrixMath.v3Length(row[0]);
    row[0] = MatrixMath.v3Normalize(row[0], scale[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    skew[0] = MatrixMath.v3Dot(row[0], row[1]);
    row[1] = MatrixMath.v3Combine(row[1], row[0], 1.0, -skew[0]);

    scale[1] = MatrixMath.v3Length(row[1]);
    row[1] = MatrixMath.v3Normalize(row[1], scale[1]);
    skew[0] /= scale[1];

    skew[1] = MatrixMath.v3Dot(row[0], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[0], 1.0, -skew[1]);
    skew[2] = MatrixMath.v3Dot(row[1], row[2]);
    row[2] = MatrixMath.v3Combine(row[2], row[1], 1.0, -skew[2]);

    scale[2] = MatrixMath.v3Length(row[2]);
    row[2] = MatrixMath.v3Normalize(row[2], scale[2]);
    skew[1] /= scale[2];
    skew[2] /= scale[2];

    var pdum3 = MatrixMath.v3Cross(row[1], row[2]);
    if (MatrixMath.v3Dot(row[0], pdum3) < 0) {
      for (i = 0; i < 3; i++) {
        scale[i] *= -1;
        row[i][0] *= -1;
        row[i][1] *= -1;
        row[i][2] *= -1;
      }
    }

    quaternion[0] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] - row[1][1] - row[2][2], 0));
    quaternion[1] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] + row[1][1] - row[2][2], 0));
    quaternion[2] = 0.5 * Math.sqrt(Math.max(1 - row[0][0] - row[1][1] + row[2][2], 0));
    quaternion[3] = 0.5 * Math.sqrt(Math.max(1 + row[0][0] + row[1][1] + row[2][2], 0));

    if (row[2][1] > row[1][2]) {
      quaternion[0] = -quaternion[0];
    }
    if (row[0][2] > row[2][0]) {
      quaternion[1] = -quaternion[1];
    }
    if (row[1][0] > row[0][1]) {
      quaternion[2] = -quaternion[2];
    }

    var rotationDegrees;
    if (quaternion[0] < 0.001 && quaternion[0] >= 0 && quaternion[1] < 0.001 && quaternion[1] >= 0) {
      rotationDegrees = [0, 0, MatrixMath.roundTo3Places(Math.atan2(row[0][1], row[0][0]) * 180 / Math.PI)];
    } else {
      rotationDegrees = MatrixMath.quaternionToDegreesXYZ(quaternion, matrix, row);
    }

    return {
      rotationDegrees: rotationDegrees,
      perspective: perspective,
      quaternion: quaternion,
      scale: scale,
      skew: skew,
      translation: translation,

      rotate: rotationDegrees[2],
      rotateX: rotationDegrees[0],
      rotateY: rotationDegrees[1],
      scaleX: scale[0],
      scaleY: scale[1],
      translateX: translation[0],
      translateY: translation[1]
    };
  }
};

module.exports = MatrixMath;
}, 121, null, "MatrixMath");
__d(/* sizesDiffer */function(global, require, module, exports) {
'use strict';

var dummySize = { width: undefined, height: undefined };

var sizesDiffer = function sizesDiffer(one, two) {
  one = one || dummySize;
  two = two || dummySize;
  return one !== two && (one.width !== two.width || one.height !== two.height);
};

module.exports = sizesDiffer;
}, 122, null, "sizesDiffer");
__d(/* StyleSheetValidation */function(global, require, module, exports) {
'use strict';

var ImageStylePropTypes = require(108                  ); // 108 = ImageStylePropTypes
var ReactPropTypeLocations = require(115                               ); // 115 = react/lib/ReactPropTypeLocations
var ReactPropTypesSecret = require(38                              ); // 38 = react/lib/ReactPropTypesSecret
var TextStylePropTypes = require(116                 ); // 116 = TextStylePropTypes
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var StyleSheetValidation = function () {
  function StyleSheetValidation() {
    babelHelpers.classCallCheck(this, StyleSheetValidation);
  }

  babelHelpers.createClass(StyleSheetValidation, null, [{
    key: 'validateStyleProp',
    value: function validateStyleProp(prop, style, caller) {
      if (!__DEV__) {
        return;
      }
      if (allStylePropTypes[prop] === undefined) {
        var message1 = '"' + prop + '" is not a valid style property.';
        var message2 = '\nValid style props: ' + JSON.stringify(Object.keys(allStylePropTypes).sort(), null, '  ');
        styleError(message1, style, caller, message2);
      }
      var error = allStylePropTypes[prop](style, prop, caller, ReactPropTypeLocations.prop, null, ReactPropTypesSecret);
      if (error) {
        styleError(error.message, style, caller);
      }
    }
  }, {
    key: 'validateStyle',
    value: function validateStyle(name, styles) {
      if (!__DEV__) {
        return;
      }
      for (var prop in styles[name]) {
        StyleSheetValidation.validateStyleProp(prop, styles[name], 'StyleSheet ' + name);
      }
    }
  }, {
    key: 'addValidStylePropTypes',
    value: function addValidStylePropTypes(stylePropTypes) {
      for (var key in stylePropTypes) {
        allStylePropTypes[key] = stylePropTypes[key];
      }
    }
  }]);
  return StyleSheetValidation;
}();

var styleError = function styleError(message1, style, caller, message2) {
  invariant(false, message1 + '\n' + (caller || '<<unknown>>') + ': ' + JSON.stringify(style, null, '  ') + (message2 || ''));
};

var allStylePropTypes = {};

StyleSheetValidation.addValidStylePropTypes(ImageStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(TextStylePropTypes);
StyleSheetValidation.addValidStylePropTypes(ViewStylePropTypes);

module.exports = StyleSheetValidation;
}, 123, null, "StyleSheetValidation");
__d(/* View */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/View/View.js';
var EdgeInsetsPropType = require(125                 ); // 125 = EdgeInsetsPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var NativeModules = require(57             ); // 57 = NativeModules
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var ReactNativeStyleAttributes = require(107                         ); // 107 = ReactNativeStyleAttributes
var ReactNativeViewAttributes = require(130                        ); // 130 = ReactNativeViewAttributes
var StyleSheetPropType = require(131                 ); // 131 = StyleSheetPropType
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var TVViewPropTypes = {};
if (Platform.isTVOS) {
  TVViewPropTypes = require(132              ); // 132 = TVViewPropTypes
}

var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var PropTypes = React.PropTypes;

var stylePropType = StyleSheetPropType(ViewStylePropTypes);

var AccessibilityTraits = ['none', 'button', 'link', 'header', 'search', 'image', 'selected', 'plays', 'key', 'text', 'summary', 'disabled', 'frequentUpdates', 'startsMedia', 'adjustable', 'allowsDirectInteraction', 'pageTurn'];

var AccessibilityComponentType = ['none', 'button', 'radiobutton_checked', 'radiobutton_unchecked'];

var forceTouchAvailable = NativeModules.IOSConstants && NativeModules.IOSConstants.forceTouchAvailable || false;

var statics = {
  AccessibilityTraits: AccessibilityTraits,
  AccessibilityComponentType: AccessibilityComponentType,

  forceTouchAvailable: forceTouchAvailable
};

var View = React.createClass({
  displayName: 'View',

  mixins: [NativeMethodsMixin],

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  statics: babelHelpers.extends({}, statics),

  propTypes: babelHelpers.extends({}, TVViewPropTypes, {
    accessible: PropTypes.bool,

    accessibilityLabel: PropTypes.node,

    accessibilityComponentType: PropTypes.oneOf(AccessibilityComponentType),

    accessibilityLiveRegion: PropTypes.oneOf(['none', 'polite', 'assertive']),

    importantForAccessibility: PropTypes.oneOf(['auto', 'yes', 'no', 'no-hide-descendants']),

    accessibilityTraits: PropTypes.oneOfType([PropTypes.oneOf(AccessibilityTraits), PropTypes.arrayOf(PropTypes.oneOf(AccessibilityTraits))]),

    onAccessibilityTap: PropTypes.func,

    onMagicTap: PropTypes.func,

    testID: PropTypes.string,

    onResponderGrant: PropTypes.func,

    onResponderMove: PropTypes.func,

    onResponderReject: PropTypes.func,

    onResponderRelease: PropTypes.func,

    onResponderTerminate: PropTypes.func,

    onResponderTerminationRequest: PropTypes.func,

    onStartShouldSetResponder: PropTypes.func,

    onStartShouldSetResponderCapture: PropTypes.func,

    onMoveShouldSetResponder: PropTypes.func,

    onMoveShouldSetResponderCapture: PropTypes.func,

    hitSlop: EdgeInsetsPropType,

    onLayout: PropTypes.func,

    pointerEvents: PropTypes.oneOf(['box-none', 'none', 'box-only', 'auto']),
    style: stylePropType,

    removeClippedSubviews: PropTypes.bool,

    renderToHardwareTextureAndroid: PropTypes.bool,

    shouldRasterizeIOS: PropTypes.bool,

    collapsable: PropTypes.bool,

    needsOffscreenAlphaCompositing: PropTypes.bool
  }),

  contextTypes: {
    isInAParentText: React.PropTypes.bool
  },

  render: function render() {
    invariant(!(this.context.isInAParentText && Platform.OS === 'android'), 'Nesting of <View> within <Text> is not supported on Android.');

    return React.createElement(RCTView, babelHelpers.extends({}, this.props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 524
      }
    }));
  }
});

var RCTView = requireNativeComponent('RCTView', View, {
  nativeOnly: {
    nativeBackgroundAndroid: true,
    nativeForegroundAndroid: true
  }
});

if (__DEV__) {
  var UIManager = require(100        ); // 100 = UIManager
  var viewConfig = UIManager.viewConfigs && UIManager.viewConfigs.RCTView || {};
  for (var prop in viewConfig.nativeProps) {
    var viewAny = View;
    if (!viewAny.propTypes[prop] && !ReactNativeStyleAttributes[prop]) {
      throw new Error('View is missing propType for native prop `' + prop + '`');
    }
  }
}

var ViewToExport = RCTView;
if (__DEV__) {
  ViewToExport = View;
} else {
  babelHelpers.extends(RCTView, statics);
}

module.exports = ViewToExport;
}, 124, null, "View");
__d(/* EdgeInsetsPropType */function(global, require, module, exports) {
'use strict';

var _require = require(103    ), // 103 = React
    PropTypes = _require.PropTypes;

var createStrictShapeTypeChecker = require(126                           ); // 126 = createStrictShapeTypeChecker

var EdgeInsetsPropType = createStrictShapeTypeChecker({
  top: PropTypes.number,
  left: PropTypes.number,
  bottom: PropTypes.number,
  right: PropTypes.number
});

module.exports = EdgeInsetsPropType;
}, 125, null, "EdgeInsetsPropType");
__d(/* createStrictShapeTypeChecker */function(global, require, module, exports) {
'use strict';

var ReactPropTypeLocationNames = require(33                                    ); // 33 = react/lib/ReactPropTypeLocationNames
var ReactPropTypesSecret = require(38                              ); // 38 = react/lib/ReactPropTypesSecret

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var merge = require(127    ); // 127 = merge

function createStrictShapeTypeChecker(shapeTypes) {
  function checkType(isRequired, props, propName, componentName, location) {
    if (!props[propName]) {
      if (isRequired) {
        invariant(false, 'Required object `' + propName + '` was not specified in ' + ('`' + componentName + '`.'));
      }
      return;
    }
    var propValue = props[propName];
    var propType = typeof propValue;
    var locationName = location && ReactPropTypeLocationNames[location] || '(unknown)';
    if (propType !== 'object') {
      invariant(false, 'Invalid ' + locationName + ' `' + propName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
    }

    var allKeys = merge(props[propName], shapeTypes);
    for (var key in allKeys) {
      var checker = shapeTypes[key];
      if (!checker) {
        invariant(false, 'Invalid props.' + propName + ' key `' + key + '` supplied to `' + componentName + '`.' + '\nBad object: ' + JSON.stringify(props[propName], null, '  ') + '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  '));
      }
      var error = checker(propValue, key, componentName, location, null, ReactPropTypesSecret);
      if (error) {
        invariant(false, error.message + '\nBad object: ' + JSON.stringify(props[propName], null, '  '));
      }
    }
  }
  function chainedCheckType(props, propName, componentName, location) {
    return checkType(false, props, propName, componentName, location);
  }
  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
}

module.exports = createStrictShapeTypeChecker;
}, 126, null, "createStrictShapeTypeChecker");
__d(/* merge */function(global, require, module, exports) {

"use strict";

var mergeInto = require(128        ); // 128 = mergeInto

var merge = function merge(one, two) {
  var result = {};
  mergeInto(result, one);
  mergeInto(result, two);
  return result;
};

module.exports = merge;
}, 127, null, "merge");
__d(/* mergeInto */function(global, require, module, exports) {

"use strict";

var mergeHelpers = require(129           ); // 129 = mergeHelpers

var checkMergeObjectArg = mergeHelpers.checkMergeObjectArg;
var checkMergeIntoObjectArg = mergeHelpers.checkMergeIntoObjectArg;

function mergeInto(one, two) {
  checkMergeIntoObjectArg(one);
  if (two != null) {
    checkMergeObjectArg(two);
    for (var key in two) {
      if (!two.hasOwnProperty(key)) {
        continue;
      }
      one[key] = two[key];
    }
  }
}

module.exports = mergeInto;
}, 128, null, "mergeInto");
__d(/* mergeHelpers */function(global, require, module, exports) {

"use strict";

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var keyMirror = require(110                 ); // 110 = fbjs/lib/keyMirror

var MAX_MERGE_DEPTH = 36;

var isTerminal = function isTerminal(o) {
  return typeof o !== 'object' || o === null;
};

var mergeHelpers = {

  MAX_MERGE_DEPTH: MAX_MERGE_DEPTH,

  isTerminal: isTerminal,

  normalizeMergeArg: function normalizeMergeArg(arg) {
    return arg === undefined || arg === null ? {} : arg;
  },

  checkMergeArrayArgs: function checkMergeArrayArgs(one, two) {
    invariant(Array.isArray(one) && Array.isArray(two), 'Tried to merge arrays, instead got %s and %s.', one, two);
  },

  checkMergeObjectArgs: function checkMergeObjectArgs(one, two) {
    mergeHelpers.checkMergeObjectArg(one);
    mergeHelpers.checkMergeObjectArg(two);
  },

  checkMergeObjectArg: function checkMergeObjectArg(arg) {
    invariant(!isTerminal(arg) && !Array.isArray(arg), 'Tried to merge an object, instead got %s.', arg);
  },

  checkMergeIntoObjectArg: function checkMergeIntoObjectArg(arg) {
    invariant((!isTerminal(arg) || typeof arg === 'function') && !Array.isArray(arg), 'Tried to merge into an object, instead got %s.', arg);
  },

  checkMergeLevel: function checkMergeLevel(level) {
    invariant(level < MAX_MERGE_DEPTH, 'Maximum deep merge depth exceeded. You may be attempting to merge ' + 'circular structures in an unsupported way.');
  },

  checkArrayStrategy: function checkArrayStrategy(strategy) {
    invariant(strategy === undefined || strategy in mergeHelpers.ArrayStrategies, 'You must provide an array strategy to deep merge functions to ' + 'instruct the deep merge how to resolve merging two arrays.');
  },

  ArrayStrategies: keyMirror({
    Clobber: true,
    IndexByIndex: true
  })

};

module.exports = mergeHelpers;
}, 129, null, "mergeHelpers");
__d(/* ReactNativeViewAttributes */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(107                         ); // 107 = ReactNativeStyleAttributes

var ReactNativeViewAttributes = {};

ReactNativeViewAttributes.UIView = {
  pointerEvents: true,
  accessible: true,
  accessibilityLabel: true,
  accessibilityComponentType: true,
  accessibilityLiveRegion: true,
  accessibilityTraits: true,
  importantForAccessibility: true,
  testID: true,
  renderToHardwareTextureAndroid: true,
  shouldRasterizeIOS: true,
  onLayout: true,
  onAccessibilityTap: true,
  onMagicTap: true,
  collapsable: true,
  needsOffscreenAlphaCompositing: true,
  style: ReactNativeStyleAttributes
};

ReactNativeViewAttributes.RCTView = babelHelpers.extends({}, ReactNativeViewAttributes.UIView, {
  removeClippedSubviews: true
});

module.exports = ReactNativeViewAttributes;
}, 130, null, "ReactNativeViewAttributes");
__d(/* StyleSheetPropType */function(global, require, module, exports) {
'use strict';

var createStrictShapeTypeChecker = require(126                           ); // 126 = createStrictShapeTypeChecker
var flattenStyle = require(54            ); // 54 = flattenStyle

function StyleSheetPropType(shape) {
  var shapePropType = createStrictShapeTypeChecker(shape);
  return function (props, propName, componentName, location) {
    var newProps = props;
    if (props[propName]) {
      newProps = {};
      newProps[propName] = flattenStyle(props[propName]);
    }
    return shapePropType(newProps, propName, componentName, location);
  };
}

module.exports = StyleSheetPropType;
}, 131, null, "StyleSheetPropType");
__d(/* TVViewPropTypes */function(global, require, module, exports) {
'use strict';

var PropTypes = require(103    ).PropTypes; // 103 = React

var TVViewPropTypes = {
  isTVSelectable: PropTypes.bool,

  hasTVPreferredFocus: PropTypes.bool,

  tvParallaxProperties: PropTypes.object,

  tvParallaxShiftDistanceX: PropTypes.number,

  tvParallaxShiftDistanceY: PropTypes.number,

  tvParallaxTiltAngle: PropTypes.number,

  tvParallaxMagnification: PropTypes.number

};

module.exports = TVViewPropTypes;
}, 132, null, "TVViewPropTypes");
__d(/* requireNativeComponent */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(107                         ); // 107 = ReactNativeStyleAttributes
var UIManager = require(100        ); // 100 = UIManager
var UnimplementedView = require(134                ); // 134 = UnimplementedView

var createReactNativeComponentClass = require(135                              ); // 135 = createReactNativeComponentClass
var insetsDiffer = require(174           ); // 174 = insetsDiffer
var matricesDiffer = require(118             ); // 118 = matricesDiffer
var pointsDiffer = require(175           ); // 175 = pointsDiffer
var processColor = require(119           ); // 119 = processColor
var resolveAssetSource = require(176                 ); // 176 = resolveAssetSource
var sizesDiffer = require(122          ); // 122 = sizesDiffer
var verifyPropTypes = require(180              ); // 180 = verifyPropTypes
var warning = require(21                ); // 21 = fbjs/lib/warning

function requireNativeComponent(viewName, componentInterface, extraConfig) {
  var viewConfig = UIManager[viewName];
  if (!viewConfig || !viewConfig.NativeProps) {
    warning(false, 'Native component for "%s" does not exist', viewName);
    return UnimplementedView;
  }

  viewConfig.uiViewClassName = viewName;
  viewConfig.validAttributes = {};
  viewConfig.propTypes = componentInterface && componentInterface.propTypes;

  var nativeProps = babelHelpers.extends({}, UIManager.RCTView.NativeProps, viewConfig.NativeProps);
  for (var key in nativeProps) {
    var useAttribute = false;
    var attribute = {};

    var differ = TypeToDifferMap[nativeProps[key]];
    if (differ) {
      attribute.diff = differ;
      useAttribute = true;
    }

    var processor = TypeToProcessorMap[nativeProps[key]];
    if (processor) {
      attribute.process = processor;
      useAttribute = true;
    }

    viewConfig.validAttributes[key] = useAttribute ? attribute : true;
  }

  viewConfig.validAttributes.style = ReactNativeStyleAttributes;

  if (__DEV__) {
    componentInterface && verifyPropTypes(componentInterface, viewConfig, extraConfig && extraConfig.nativeOnly);
  }

  return createReactNativeComponentClass(viewConfig);
}

var TypeToDifferMap = {
  CATransform3D: matricesDiffer,
  CGPoint: pointsDiffer,
  CGSize: sizesDiffer,
  UIEdgeInsets: insetsDiffer
};

function processColorArray(colors) {
  return colors && colors.map(processColor);
}

var TypeToProcessorMap = {
  CGColor: processColor,
  CGColorArray: processColorArray,
  UIColor: processColor,
  UIColorArray: processColorArray,
  CGImage: resolveAssetSource,
  UIImage: resolveAssetSource,
  RCTImageSource: resolveAssetSource,

  Color: processColor,
  ColorArray: processColorArray
};

module.exports = requireNativeComponent;
}, 133, null, "requireNativeComponent");
__d(/* UnimplementedView */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/UnimplementedViews/UnimplementedView.js';
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet

var UnimplementedView = function (_React$Component) {
  babelHelpers.inherits(UnimplementedView, _React$Component);

  function UnimplementedView() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, UnimplementedView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = UnimplementedView.__proto__ || Object.getPrototypeOf(UnimplementedView)).call.apply(_ref, [this].concat(args))), _this), _this.setNativeProps = function () {}, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(UnimplementedView, [{
    key: 'render',
    value: function render() {
      var View = require(124   ); // 124 = View
      return React.createElement(
        View,
        { style: [styles.unimplementedView, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 24
          }
        },
        this.props.children
      );
    }
  }]);
  return UnimplementedView;
}(React.Component);

var styles = StyleSheet.create({
  unimplementedView: {
    borderWidth: 1,
    borderColor: 'red',
    alignSelf: 'flex-start'
  }
});

module.exports = UnimplementedView;
}, 134, null, "UnimplementedView");
__d(/* createReactNativeComponentClass */function(global, require, module, exports) {

'use strict';

var ReactNativeBaseComponent = require(136                       ); // 136 = ReactNativeBaseComponent

var createReactNativeComponentClass = function createReactNativeComponentClass(viewConfig) {
  var Constructor = function Constructor(element) {
    this._currentElement = element;
    this._topLevelWrapper = null;
    this._hostParent = null;
    this._hostContainerInfo = null;
    this._rootNodeID = 0;
    this._renderedChildren = null;
  };
  Constructor.displayName = viewConfig.uiViewClassName;
  Constructor.viewConfig = viewConfig;
  Constructor.propTypes = viewConfig.propTypes;
  Constructor.prototype = new ReactNativeBaseComponent(viewConfig);
  Constructor.prototype.constructor = Constructor;

  return Constructor;
};

module.exports = createReactNativeComponentClass;
}, 135, null, "createReactNativeComponentClass");
__d(/* ReactNativeBaseComponent */function(global, require, module, exports) {
'use strict';

var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var ReactNativeAttributePayload = require(51                           ); // 51 = ReactNativeAttributePayload
var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree
var ReactNativeEventEmitter = require(138                      ); // 138 = ReactNativeEventEmitter
var ReactNativeTagHandles = require(146                    ); // 146 = ReactNativeTagHandles
var ReactMultiChild = require(156              ); // 156 = ReactMultiChild
var UIManager = require(100        ); // 100 = UIManager

var deepFreezeAndThrowOnMutationInDev = require(73                                 ); // 73 = deepFreezeAndThrowOnMutationInDev

var registrationNames = ReactNativeEventEmitter.registrationNames;
var putListener = ReactNativeEventEmitter.putListener;
var deleteListener = ReactNativeEventEmitter.deleteListener;
var deleteAllListeners = ReactNativeEventEmitter.deleteAllListeners;

var ReactNativeBaseComponent = function ReactNativeBaseComponent(viewConfig) {
  this.viewConfig = viewConfig;
};

ReactNativeBaseComponent.Mixin = {
  getPublicInstance: function getPublicInstance() {
    return this;
  },

  unmountComponent: function unmountComponent() {
    ReactNativeComponentTree.uncacheNode(this);
    deleteAllListeners(this);
    this.unmountChildren();
    this._rootNodeID = 0;
  },

  initializeChildren: function initializeChildren(children, containerTag, transaction, context) {
    var mountImages = this.mountChildren(children, transaction, context);

    if (mountImages.length) {
      var createdTags = [];
      for (var i = 0, l = mountImages.length; i < l; i++) {
        var mountImage = mountImages[i];
        var childTag = mountImage;
        createdTags[i] = childTag;
      }
      UIManager.setChildren(containerTag, createdTags);
    }
  },

  receiveComponent: function receiveComponent(nextElement, transaction, context) {
    var prevElement = this._currentElement;
    this._currentElement = nextElement;

    if (__DEV__) {
      for (var key in this.viewConfig.validAttributes) {
        if (nextElement.props.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(nextElement.props[key]);
        }
      }
    }

    var updatePayload = ReactNativeAttributePayload.diff(prevElement.props, nextElement.props, this.viewConfig.validAttributes);

    if (updatePayload) {
      UIManager.updateView(this._rootNodeID, this.viewConfig.uiViewClassName, updatePayload);
    }

    this._reconcileListenersUponUpdate(prevElement.props, nextElement.props);
    this.updateChildren(nextElement.props.children, transaction, context);
  },

  _registerListenersUponCreation: function _registerListenersUponCreation(initialProps) {
    for (var key in initialProps) {
      if (registrationNames[key] && initialProps[key]) {
        var listener = initialProps[key];
        putListener(this, key, listener);
      }
    }
  },

  _reconcileListenersUponUpdate: function _reconcileListenersUponUpdate(prevProps, nextProps) {
    for (var key in nextProps) {
      if (registrationNames[key] && nextProps[key] !== prevProps[key]) {
        if (nextProps[key]) {
          putListener(this, key, nextProps[key]);
        } else {
          deleteListener(this, key);
        }
      }
    }
  },

  getHostNode: function getHostNode() {
    return this._rootNodeID;
  },

  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var tag = ReactNativeTagHandles.allocateTag();

    this._rootNodeID = tag;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    if (__DEV__) {
      for (var key in this.viewConfig.validAttributes) {
        if (this._currentElement.props.hasOwnProperty(key)) {
          deepFreezeAndThrowOnMutationInDev(this._currentElement.props[key]);
        }
      }
    }

    var updatePayload = ReactNativeAttributePayload.create(this._currentElement.props, this.viewConfig.validAttributes);

    var nativeTopRootTag = hostContainerInfo._tag;
    UIManager.createView(tag, this.viewConfig.uiViewClassName, nativeTopRootTag, updatePayload);

    ReactNativeComponentTree.precacheNode(this, tag);

    this._registerListenersUponCreation(this._currentElement.props);
    this.initializeChildren(this._currentElement.props.children, tag, transaction, context);
    return tag;
  }
};

babelHelpers.extends(ReactNativeBaseComponent.prototype, ReactMultiChild, ReactNativeBaseComponent.Mixin, NativeMethodsMixin);

module.exports = ReactNativeBaseComponent;
}, 136, null, "ReactNativeBaseComponent");
__d(/* ReactNativeComponentTree */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var instanceCache = {};

function getRenderedHostOrTextFromComponent(component) {
  var rendered;
  while (rendered = component._renderedComponent) {
    component = rendered;
  }
  return component;
}

function precacheNode(inst, tag) {
  var nativeInst = getRenderedHostOrTextFromComponent(inst);
  instanceCache[tag] = nativeInst;
}

function uncacheNode(inst) {
  var tag = inst._rootNodeID;
  if (tag) {
    delete instanceCache[tag];
  }
}

function getInstanceFromTag(tag) {
  return instanceCache[tag] || null;
}

function getTagFromInstance(inst) {
  invariant(inst._rootNodeID, 'All native instances should have a tag.');
  return inst._rootNodeID;
}

var ReactNativeComponentTree = {
  getClosestInstanceFromNode: getInstanceFromTag,
  getInstanceFromNode: getInstanceFromTag,
  getNodeFromInstance: getTagFromInstance,
  precacheNode: precacheNode,
  uncacheNode: uncacheNode
};

module.exports = ReactNativeComponentTree;
}, 137, null, "ReactNativeComponentTree");
__d(/* ReactNativeEventEmitter */function(global, require, module, exports) {
'use strict';

var EventPluginHub = require(139             ); // 139 = EventPluginHub
var EventPluginRegistry = require(140                  ); // 140 = EventPluginRegistry
var ReactEventEmitterMixin = require(145                     ); // 145 = ReactEventEmitterMixin
var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree
var ReactNativeTagHandles = require(146                    ); // 146 = ReactNativeTagHandles
var ReactUpdates = require(147           ); // 147 = ReactUpdates

var warning = require(21                ); // 21 = fbjs/lib/warning

var EMPTY_NATIVE_EVENT = {};

var touchSubsequence = function touchSubsequence(touches, indices) {
  var ret = [];
  for (var i = 0; i < indices.length; i++) {
    ret.push(touches[indices[i]]);
  }
  return ret;
};

var removeTouchesAtIndices = function removeTouchesAtIndices(touches, indices) {
  var rippedOut = [];

  var temp = touches;
  for (var i = 0; i < indices.length; i++) {
    var index = indices[i];
    rippedOut.push(touches[index]);
    temp[index] = null;
  }
  var fillAt = 0;
  for (var j = 0; j < temp.length; j++) {
    var cur = temp[j];
    if (cur !== null) {
      temp[fillAt++] = cur;
    }
  }
  temp.length = fillAt;
  return rippedOut;
};

var ReactNativeEventEmitter = babelHelpers.extends({}, ReactEventEmitterMixin, {

  registrationNames: EventPluginRegistry.registrationNameModules,

  putListener: EventPluginHub.putListener,

  getListener: EventPluginHub.getListener,

  deleteListener: EventPluginHub.deleteListener,

  deleteAllListeners: EventPluginHub.deleteAllListeners,

  _receiveRootNodeIDEvent: function _receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam) {
    var nativeEvent = nativeEventParam || EMPTY_NATIVE_EVENT;
    var inst = ReactNativeComponentTree.getInstanceFromNode(rootNodeID);
    if (!inst) {
      return;
    }
    ReactUpdates.batchedUpdates(function () {
      ReactNativeEventEmitter.handleTopLevel(topLevelType, inst, nativeEvent, nativeEvent.target);
    });
  },

  receiveEvent: function receiveEvent(tag, topLevelType, nativeEventParam) {
    var rootNodeID = tag;
    ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, topLevelType, nativeEventParam);
  },

  receiveTouches: function receiveTouches(eventTopLevelType, touches, changedIndices) {
    var changedTouches = eventTopLevelType === 'topTouchEnd' || eventTopLevelType === 'topTouchCancel' ? removeTouchesAtIndices(touches, changedIndices) : touchSubsequence(touches, changedIndices);

    for (var jj = 0; jj < changedTouches.length; jj++) {
      var touch = changedTouches[jj];

      touch.changedTouches = changedTouches;
      touch.touches = touches;
      var nativeEvent = touch;
      var rootNodeID = null;
      var target = nativeEvent.target;
      if (target !== null && target !== undefined) {
        if (target < ReactNativeTagHandles.tagsStartAt) {
          if (__DEV__) {
            warning(false, 'A view is reporting that a touch occured on tag zero.');
          }
        } else {
          rootNodeID = target;
        }
      }
      ReactNativeEventEmitter._receiveRootNodeIDEvent(rootNodeID, eventTopLevelType, nativeEvent);
    }
  }
});

module.exports = ReactNativeEventEmitter;
}, 138, null, "ReactNativeEventEmitter");
__d(/* EventPluginHub */function(global, require, module, exports) {

'use strict';

var EventPluginRegistry = require(140                  ); // 140 = EventPluginRegistry
var EventPluginUtils = require(141               ); // 141 = EventPluginUtils
var ReactErrorUtils = require(142              ); // 142 = ReactErrorUtils

var accumulateInto = require(143             ); // 143 = accumulateInto
var forEachAccumulated = require(144                 ); // 144 = forEachAccumulated
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var listenerBank = {};

var eventQueue = null;

var executeDispatchesAndRelease = function executeDispatchesAndRelease(event, simulated) {
  if (event) {
    EventPluginUtils.executeDispatchesInOrder(event, simulated);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};
var executeDispatchesAndReleaseSimulated = function executeDispatchesAndReleaseSimulated(e) {
  return executeDispatchesAndRelease(e, true);
};
var executeDispatchesAndReleaseTopLevel = function executeDispatchesAndReleaseTopLevel(e) {
  return executeDispatchesAndRelease(e, false);
};

var getDictionaryKey = function getDictionaryKey(inst) {
  return '.' + inst._rootNodeID;
};

var EventPluginHub = {
  injection: {
    injectEventPluginOrder: EventPluginRegistry.injectEventPluginOrder,

    injectEventPluginsByName: EventPluginRegistry.injectEventPluginsByName

  },

  putListener: function putListener(inst, registrationName, listener) {
    invariant(typeof listener === 'function', 'Expected %s listener to be a function, instead got type %s', registrationName, typeof listener);

    var key = getDictionaryKey(inst);
    var bankForRegistrationName = listenerBank[registrationName] || (listenerBank[registrationName] = {});
    bankForRegistrationName[key] = listener;

    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.didPutListener) {
      PluginModule.didPutListener(inst, registrationName, listener);
    }
  },

  getListener: function getListener(inst, registrationName) {
    var bankForRegistrationName = listenerBank[registrationName];
    var key = getDictionaryKey(inst);
    return bankForRegistrationName && bankForRegistrationName[key];
  },

  deleteListener: function deleteListener(inst, registrationName) {
    var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
    if (PluginModule && PluginModule.willDeleteListener) {
      PluginModule.willDeleteListener(inst, registrationName);
    }

    var bankForRegistrationName = listenerBank[registrationName];

    if (bankForRegistrationName) {
      var key = getDictionaryKey(inst);
      delete bankForRegistrationName[key];
    }
  },

  deleteAllListeners: function deleteAllListeners(inst) {
    var key = getDictionaryKey(inst);
    for (var registrationName in listenerBank) {
      if (!listenerBank.hasOwnProperty(registrationName)) {
        continue;
      }

      if (!listenerBank[registrationName][key]) {
        continue;
      }

      var PluginModule = EventPluginRegistry.registrationNameModules[registrationName];
      if (PluginModule && PluginModule.willDeleteListener) {
        PluginModule.willDeleteListener(inst, registrationName);
      }

      delete listenerBank[registrationName][key];
    }
  },

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events;
    var plugins = EventPluginRegistry.plugins;
    for (var i = 0; i < plugins.length; i++) {
      var possiblePlugin = plugins[i];
      if (possiblePlugin) {
        var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
        if (extractedEvents) {
          events = accumulateInto(events, extractedEvents);
        }
      }
    }
    return events;
  },

  enqueueEvents: function enqueueEvents(events) {
    if (events) {
      eventQueue = accumulateInto(eventQueue, events);
    }
  },

  processEventQueue: function processEventQueue(simulated) {
    var processingEventQueue = eventQueue;
    eventQueue = null;
    if (simulated) {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseSimulated);
    } else {
      forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);
    }
    invariant(!eventQueue, 'processEventQueue(): Additional events were enqueued while processing ' + 'an event queue. Support for this has not yet been implemented.');

    ReactErrorUtils.rethrowCaughtError();
  },

  __purge: function __purge() {
    listenerBank = {};
  },

  __getListenerBank: function __getListenerBank() {
    return listenerBank;
  }

};

module.exports = EventPluginHub;
}, 139, null, "EventPluginHub");
__d(/* EventPluginRegistry */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var eventPluginOrder = null;

var namesToPlugins = {};

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    return;
  }
  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);
    invariant(pluginIndex > -1, 'EventPluginRegistry: Cannot inject event plugins that do not exist in ' + 'the plugin ordering, `%s`.', pluginName);
    if (EventPluginRegistry.plugins[pluginIndex]) {
      continue;
    }
    invariant(pluginModule.extractEvents, 'EventPluginRegistry: Event plugins must implement an `extractEvents` ' + 'method, but `%s` does not.', pluginName);
    EventPluginRegistry.plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;
    for (var eventName in publishedEvents) {
      invariant(publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName), 'EventPluginRegistry: Failed to publish event `%s` for plugin `%s`.', eventName, pluginName);
    }
  }
}

function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  invariant(!EventPluginRegistry.eventNameDispatchConfigs.hasOwnProperty(eventName), 'EventPluginHub: More than one plugin attempted to publish the same ' + 'event name, `%s`.', eventName);
  EventPluginRegistry.eventNameDispatchConfigs[eventName] = dispatchConfig;

  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;
  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }
    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }
  return false;
}

function publishRegistrationName(registrationName, pluginModule, eventName) {
  invariant(!EventPluginRegistry.registrationNameModules[registrationName], 'EventPluginHub: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
  EventPluginRegistry.registrationNameModules[registrationName] = pluginModule;
  EventPluginRegistry.registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  if (__DEV__) {
    var lowerCasedName = registrationName.toLowerCase();
    EventPluginRegistry.possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      EventPluginRegistry.possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}

var EventPluginRegistry = {
  plugins: [],

  eventNameDispatchConfigs: {},

  registrationNameModules: {},

  registrationNameDependencies: {},

  possibleRegistrationNames: __DEV__ ? {} : null,

  injectEventPluginOrder: function injectEventPluginOrder(injectedEventPluginOrder) {
    invariant(!eventPluginOrder, 'EventPluginRegistry: Cannot inject event plugin ordering more than ' + 'once. You are likely trying to load more than one copy of React.');

    eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
    recomputePluginOrdering();
  },

  injectEventPluginsByName: function injectEventPluginsByName(injectedNamesToPlugins) {
    var isOrderingDirty = false;
    for (var pluginName in injectedNamesToPlugins) {
      if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
        continue;
      }
      var pluginModule = injectedNamesToPlugins[pluginName];
      if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
        invariant(!namesToPlugins[pluginName], 'EventPluginRegistry: Cannot inject two different event plugins ' + 'using the same name, `%s`.', pluginName);
        namesToPlugins[pluginName] = pluginModule;
        isOrderingDirty = true;
      }
    }
    if (isOrderingDirty) {
      recomputePluginOrdering();
    }
  },

  getPluginModuleForEvent: function getPluginModuleForEvent(event) {
    var dispatchConfig = event.dispatchConfig;
    if (dispatchConfig.registrationName) {
      return EventPluginRegistry.registrationNameModules[dispatchConfig.registrationName] || null;
    }
    if (dispatchConfig.phasedRegistrationNames !== undefined) {
      var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

      for (var phase in phasedRegistrationNames) {
        if (!phasedRegistrationNames.hasOwnProperty(phase)) {
          continue;
        }
        var pluginModule = EventPluginRegistry.registrationNameModules[phasedRegistrationNames[phase]];
        if (pluginModule) {
          return pluginModule;
        }
      }
    }
    return null;
  },

  _resetEventPlugins: function _resetEventPlugins() {
    eventPluginOrder = null;
    for (var pluginName in namesToPlugins) {
      if (namesToPlugins.hasOwnProperty(pluginName)) {
        delete namesToPlugins[pluginName];
      }
    }
    EventPluginRegistry.plugins.length = 0;

    var eventNameDispatchConfigs = EventPluginRegistry.eventNameDispatchConfigs;
    for (var eventName in eventNameDispatchConfigs) {
      if (eventNameDispatchConfigs.hasOwnProperty(eventName)) {
        delete eventNameDispatchConfigs[eventName];
      }
    }

    var registrationNameModules = EventPluginRegistry.registrationNameModules;
    for (var registrationName in registrationNameModules) {
      if (registrationNameModules.hasOwnProperty(registrationName)) {
        delete registrationNameModules[registrationName];
      }
    }

    if (__DEV__) {
      var possibleRegistrationNames = EventPluginRegistry.possibleRegistrationNames;
      for (var lowerCasedName in possibleRegistrationNames) {
        if (possibleRegistrationNames.hasOwnProperty(lowerCasedName)) {
          delete possibleRegistrationNames[lowerCasedName];
        }
      }
    }
  }

};

module.exports = EventPluginRegistry;
}, 140, null, "EventPluginRegistry");
__d(/* EventPluginUtils */function(global, require, module, exports) {

'use strict';

var ReactErrorUtils = require(142              ); // 142 = ReactErrorUtils

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var ComponentTree;
var TreeTraversal;
var injection = {
  injectComponentTree: function injectComponentTree(Injected) {
    ComponentTree = Injected;
    if (__DEV__) {
      warning(Injected && Injected.getNodeFromInstance && Injected.getInstanceFromNode, 'EventPluginUtils.injection.injectComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  },
  injectTreeTraversal: function injectTreeTraversal(Injected) {
    TreeTraversal = Injected;
    if (__DEV__) {
      warning(Injected && Injected.isAncestor && Injected.getLowestCommonAncestor, 'EventPluginUtils.injection.injectTreeTraversal(...): Injected ' + 'module is missing isAncestor or getLowestCommonAncestor.');
    }
  }
};

function isEndish(topLevelType) {
  return topLevelType === 'topMouseUp' || topLevelType === 'topTouchEnd' || topLevelType === 'topTouchCancel';
}

function isMoveish(topLevelType) {
  return topLevelType === 'topMouseMove' || topLevelType === 'topTouchMove';
}
function isStartish(topLevelType) {
  return topLevelType === 'topMouseDown' || topLevelType === 'topTouchStart';
}

var validateEventDispatches;
if (__DEV__) {
  validateEventDispatches = function validateEventDispatches(event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;

    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;

    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    warning(instancesIsArr === listenersIsArr && instancesLen === listenersLen, 'EventPluginUtils: Invalid `event`.');
  };
}

function executeDispatch(event, simulated, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = EventPluginUtils.getNodeFromInstance(inst);
  if (simulated) {
    ReactErrorUtils.invokeGuardedCallbackWithCatch(type, listener, event);
  } else {
    ReactErrorUtils.invokeGuardedCallback(type, listener, event);
  }
  event.currentTarget = null;
}

function executeDispatchesInOrder(event, simulated) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (__DEV__) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }

      executeDispatch(event, simulated, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, simulated, dispatchListeners, dispatchInstances);
  }
  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

function executeDispatchesInOrderStopAtTrueImpl(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;
  if (__DEV__) {
    validateEventDispatches(event);
  }
  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      }

      if (dispatchListeners[i](event, dispatchInstances[i])) {
        return dispatchInstances[i];
      }
    }
  } else if (dispatchListeners) {
    if (dispatchListeners(event, dispatchInstances)) {
      return dispatchInstances;
    }
  }
  return null;
}

function executeDispatchesInOrderStopAtTrue(event) {
  var ret = executeDispatchesInOrderStopAtTrueImpl(event);
  event._dispatchInstances = null;
  event._dispatchListeners = null;
  return ret;
}

function executeDirectDispatch(event) {
  if (__DEV__) {
    validateEventDispatches(event);
  }
  var dispatchListener = event._dispatchListeners;
  var dispatchInstance = event._dispatchInstances;
  invariant(!Array.isArray(dispatchListener), 'executeDirectDispatch(...): Invalid `event`.');
  event.currentTarget = dispatchListener ? EventPluginUtils.getNodeFromInstance(dispatchInstance) : null;
  var res = dispatchListener ? dispatchListener(event) : null;
  event.currentTarget = null;
  event._dispatchListeners = null;
  event._dispatchInstances = null;
  return res;
}

function hasDispatches(event) {
  return !!event._dispatchListeners;
}

var EventPluginUtils = {
  isEndish: isEndish,
  isMoveish: isMoveish,
  isStartish: isStartish,

  executeDirectDispatch: executeDirectDispatch,
  executeDispatchesInOrder: executeDispatchesInOrder,
  executeDispatchesInOrderStopAtTrue: executeDispatchesInOrderStopAtTrue,
  hasDispatches: hasDispatches,

  getInstanceFromNode: function getInstanceFromNode(node) {
    return ComponentTree.getInstanceFromNode(node);
  },
  getNodeFromInstance: function getNodeFromInstance(node) {
    return ComponentTree.getNodeFromInstance(node);
  },
  isAncestor: function isAncestor(a, b) {
    return TreeTraversal.isAncestor(a, b);
  },
  getLowestCommonAncestor: function getLowestCommonAncestor(a, b) {
    return TreeTraversal.getLowestCommonAncestor(a, b);
  },
  getParentInstance: function getParentInstance(inst) {
    return TreeTraversal.getParentInstance(inst);
  },
  traverseTwoPhase: function traverseTwoPhase(target, fn, arg) {
    return TreeTraversal.traverseTwoPhase(target, fn, arg);
  },
  traverseEnterLeave: function traverseEnterLeave(from, to, fn, argFrom, argTo) {
    return TreeTraversal.traverseEnterLeave(from, to, fn, argFrom, argTo);
  },

  injection: injection
};

module.exports = EventPluginUtils;
}, 141, null, "EventPluginUtils");
__d(/* ReactErrorUtils */function(global, require, module, exports) {

'use strict';

var caughtError = null;

function invokeGuardedCallback(name, func, a) {
  try {
    func(a);
  } catch (x) {
    if (caughtError === null) {
      caughtError = x;
    }
  }
}

var ReactErrorUtils = {
  invokeGuardedCallback: invokeGuardedCallback,

  invokeGuardedCallbackWithCatch: invokeGuardedCallback,

  rethrowCaughtError: function rethrowCaughtError() {
    if (caughtError) {
      var error = caughtError;
      caughtError = null;
      throw error;
    }
  }
};

if (__DEV__) {
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');
    ReactErrorUtils.invokeGuardedCallback = function (name, func, a) {
      var boundFunc = func.bind(null, a);
      var evtType = 'react-' + name;
      fakeNode.addEventListener(evtType, boundFunc, false);
      var evt = document.createEvent('Event');

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);
      fakeNode.removeEventListener(evtType, boundFunc, false);
    };
  }
}

module.exports = ReactErrorUtils;
}, 142, null, "ReactErrorUtils");
__d(/* accumulateInto */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function accumulateInto(current, next) {
  invariant(next != null, 'accumulateInto(...): Accumulated items must not be null or undefined.');

  if (current == null) {
    return next;
  }

  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }
    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulateInto;
}, 143, null, "accumulateInto");
__d(/* forEachAccumulated */function(global, require, module, exports) {

'use strict';

function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

module.exports = forEachAccumulated;
}, 144, null, "forEachAccumulated");
__d(/* ReactEventEmitterMixin */function(global, require, module, exports) {

'use strict';

var EventPluginHub = require(139             ); // 139 = EventPluginHub

function runEventQueueInBatch(events) {
  EventPluginHub.enqueueEvents(events);
  EventPluginHub.processEventQueue(false);
}

var ReactEventEmitterMixin = {
  handleTopLevel: function handleTopLevel(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var events = EventPluginHub.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    runEventQueueInBatch(events);
  }
};

module.exports = ReactEventEmitterMixin;
}, 145, null, "ReactEventEmitterMixin");
__d(/* ReactNativeTagHandles */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var INITIAL_TAG_COUNT = 1;
var ReactNativeTagHandles = {
  tagsStartAt: INITIAL_TAG_COUNT,
  tagCount: INITIAL_TAG_COUNT,

  allocateTag: function allocateTag() {
    while (this.reactTagIsNativeTopRootID(ReactNativeTagHandles.tagCount)) {
      ReactNativeTagHandles.tagCount++;
    }
    var tag = ReactNativeTagHandles.tagCount;
    ReactNativeTagHandles.tagCount++;
    return tag;
  },

  assertRootTag: function assertRootTag(tag) {
    invariant(this.reactTagIsNativeTopRootID(tag), 'Expect a native root tag, instead got %s', tag);
  },

  reactTagIsNativeTopRootID: function reactTagIsNativeTopRootID(reactTag) {
    return reactTag % 10 === 1;
  }
};

module.exports = ReactNativeTagHandles;
}, 146, null, "ReactNativeTagHandles");
__d(/* ReactUpdates */function(global, require, module, exports) {

'use strict';

var CallbackQueue = require(148            ); // 148 = CallbackQueue
var PooledClass = require(149          ); // 149 = PooledClass
var ReactFeatureFlags = require(150                ); // 150 = ReactFeatureFlags
var ReactReconciler = require(151              ); // 151 = ReactReconciler
var Transaction = require(155          ); // 155 = Transaction

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var dirtyComponents = [];
var updateBatchNumber = 0;
var asapCallbackQueue = CallbackQueue.getPooled();
var asapEnqueued = false;

var batchingStrategy = null;

function ensureInjected() {
  invariant(ReactUpdates.ReactReconcileTransaction && batchingStrategy, 'ReactUpdates: must inject a reconcile transaction class and batching ' + 'strategy');
}

var NESTED_UPDATES = {
  initialize: function initialize() {
    this.dirtyComponentsLength = dirtyComponents.length;
  },
  close: function close() {
    if (this.dirtyComponentsLength !== dirtyComponents.length) {
      dirtyComponents.splice(0, this.dirtyComponentsLength);
      flushBatchedUpdates();
    } else {
      dirtyComponents.length = 0;
    }
  }
};

var UPDATE_QUEUEING = {
  initialize: function initialize() {
    this.callbackQueue.reset();
  },
  close: function close() {
    this.callbackQueue.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [NESTED_UPDATES, UPDATE_QUEUEING];

function ReactUpdatesFlushTransaction() {
  this.reinitializeTransaction();
  this.dirtyComponentsLength = null;
  this.callbackQueue = CallbackQueue.getPooled();
  this.reconcileTransaction = ReactUpdates.ReactReconcileTransaction.getPooled(true);
}

babelHelpers.extends(ReactUpdatesFlushTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  destructor: function destructor() {
    this.dirtyComponentsLength = null;
    CallbackQueue.release(this.callbackQueue);
    this.callbackQueue = null;
    ReactUpdates.ReactReconcileTransaction.release(this.reconcileTransaction);
    this.reconcileTransaction = null;
  },

  perform: function perform(method, scope, a) {
    return Transaction.perform.call(this, this.reconcileTransaction.perform, this.reconcileTransaction, method, scope, a);
  }
});

PooledClass.addPoolingTo(ReactUpdatesFlushTransaction);

function batchedUpdates(callback, a, b, c, d, e) {
  ensureInjected();
  return batchingStrategy.batchedUpdates(callback, a, b, c, d, e);
}

function mountOrderComparator(c1, c2) {
  return c1._mountOrder - c2._mountOrder;
}

function runBatchedUpdates(transaction) {
  var len = transaction.dirtyComponentsLength;
  invariant(len === dirtyComponents.length, 'Expected flush transaction\'s stored dirty-components length (%s) to ' + 'match dirty-components array length (%s).', len, dirtyComponents.length);

  dirtyComponents.sort(mountOrderComparator);

  updateBatchNumber++;

  for (var i = 0; i < len; i++) {
    var component = dirtyComponents[i];

    var callbacks = component._pendingCallbacks;
    component._pendingCallbacks = null;

    var markerName;
    if (ReactFeatureFlags.logTopLevelRenders) {
      var namedComponent = component;

      if (component._currentElement.type.isReactTopLevelWrapper) {
        namedComponent = component._renderedComponent;
      }
      markerName = 'React update: ' + namedComponent.getName();
      console.time(markerName);
    }

    ReactReconciler.performUpdateIfNecessary(component, transaction.reconcileTransaction, updateBatchNumber);

    if (markerName) {
      console.timeEnd(markerName);
    }

    if (callbacks) {
      for (var j = 0; j < callbacks.length; j++) {
        transaction.callbackQueue.enqueue(callbacks[j], component.getPublicInstance());
      }
    }
  }
}

var flushBatchedUpdates = function flushBatchedUpdates() {
  while (dirtyComponents.length || asapEnqueued) {
    if (dirtyComponents.length) {
      var transaction = ReactUpdatesFlushTransaction.getPooled();
      transaction.perform(runBatchedUpdates, null, transaction);
      ReactUpdatesFlushTransaction.release(transaction);
    }

    if (asapEnqueued) {
      asapEnqueued = false;
      var queue = asapCallbackQueue;
      asapCallbackQueue = CallbackQueue.getPooled();
      queue.notifyAll();
      CallbackQueue.release(queue);
    }
  }
};

function enqueueUpdate(component) {
  ensureInjected();

  if (!batchingStrategy.isBatchingUpdates) {
    batchingStrategy.batchedUpdates(enqueueUpdate, component);
    return;
  }

  dirtyComponents.push(component);
  if (component._updateBatchNumber == null) {
    component._updateBatchNumber = updateBatchNumber + 1;
  }
}

function asap(callback, context) {
  invariant(batchingStrategy.isBatchingUpdates, 'ReactUpdates.asap: Can\'t enqueue an asap callback in a context where' + 'updates are not being batched.');
  asapCallbackQueue.enqueue(callback, context);
  asapEnqueued = true;
}

var ReactUpdatesInjection = {
  injectReconcileTransaction: function injectReconcileTransaction(ReconcileTransaction) {
    invariant(ReconcileTransaction, 'ReactUpdates: must provide a reconcile transaction class');
    ReactUpdates.ReactReconcileTransaction = ReconcileTransaction;
  },

  injectBatchingStrategy: function injectBatchingStrategy(_batchingStrategy) {
    invariant(_batchingStrategy, 'ReactUpdates: must provide a batching strategy');
    invariant(typeof _batchingStrategy.batchedUpdates === 'function', 'ReactUpdates: must provide a batchedUpdates() function');
    invariant(typeof _batchingStrategy.isBatchingUpdates === 'boolean', 'ReactUpdates: must provide an isBatchingUpdates boolean attribute');
    batchingStrategy = _batchingStrategy;
  },

  getBatchingStrategy: function getBatchingStrategy() {
    return batchingStrategy;
  }
};

var ReactUpdates = {
  ReactReconcileTransaction: null,

  batchedUpdates: batchedUpdates,
  enqueueUpdate: enqueueUpdate,
  flushBatchedUpdates: flushBatchedUpdates,
  injection: ReactUpdatesInjection,
  asap: asap
};

module.exports = ReactUpdates;
}, 147, null, "ReactUpdates");
__d(/* CallbackQueue */function(global, require, module, exports) {

'use strict';

var PooledClass = require(149          ); // 149 = PooledClass

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var CallbackQueue = function () {
  function CallbackQueue(arg) {
    babelHelpers.classCallCheck(this, CallbackQueue);

    this._callbacks = null;
    this._contexts = null;
    this._arg = arg;
  }

  babelHelpers.createClass(CallbackQueue, [{
    key: 'enqueue',
    value: function enqueue(callback, context) {
      this._callbacks = this._callbacks || [];
      this._callbacks.push(callback);
      this._contexts = this._contexts || [];
      this._contexts.push(context);
    }
  }, {
    key: 'notifyAll',
    value: function notifyAll() {
      var callbacks = this._callbacks;
      var contexts = this._contexts;
      var arg = this._arg;
      if (callbacks && contexts) {
        invariant(callbacks.length === contexts.length, 'Mismatched list of contexts in callback queue');
        this._callbacks = null;
        this._contexts = null;
        for (var i = 0; i < callbacks.length; i++) {
          callbacks[i].call(contexts[i], arg);
        }
        callbacks.length = 0;
        contexts.length = 0;
      }
    }
  }, {
    key: 'checkpoint',
    value: function checkpoint() {
      return this._callbacks ? this._callbacks.length : 0;
    }
  }, {
    key: 'rollback',
    value: function rollback(len) {
      if (this._callbacks && this._contexts) {
        this._callbacks.length = len;
        this._contexts.length = len;
      }
    }
  }, {
    key: 'reset',
    value: function reset() {
      this._callbacks = null;
      this._contexts = null;
    }
  }, {
    key: 'destructor',
    value: function destructor() {
      this.reset();
    }
  }]);
  return CallbackQueue;
}();

module.exports = PooledClass.addPoolingTo(CallbackQueue);
}, 148, null, "CallbackQueue");
__d(/* PooledClass */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var oneArgumentPooler = function oneArgumentPooler(copyFieldsFrom) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, copyFieldsFrom);
    return instance;
  } else {
    return new Klass(copyFieldsFrom);
  }
};

var twoArgumentPooler = function twoArgumentPooler(a1, a2) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2);
    return instance;
  } else {
    return new Klass(a1, a2);
  }
};

var threeArgumentPooler = function threeArgumentPooler(a1, a2, a3) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3);
    return instance;
  } else {
    return new Klass(a1, a2, a3);
  }
};

var fourArgumentPooler = function fourArgumentPooler(a1, a2, a3, a4) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4);
  }
};

var fiveArgumentPooler = function fiveArgumentPooler(a1, a2, a3, a4, a5) {
  var Klass = this;
  if (Klass.instancePool.length) {
    var instance = Klass.instancePool.pop();
    Klass.call(instance, a1, a2, a3, a4, a5);
    return instance;
  } else {
    return new Klass(a1, a2, a3, a4, a5);
  }
};

var standardReleaser = function standardReleaser(instance) {
  var Klass = this;
  invariant(instance instanceof Klass, 'Trying to release an instance into a pool of a different type.');
  instance.destructor();
  if (Klass.instancePool.length < Klass.poolSize) {
    Klass.instancePool.push(instance);
  }
};

var DEFAULT_POOL_SIZE = 10;
var DEFAULT_POOLER = oneArgumentPooler;

var addPoolingTo = function addPoolingTo(CopyConstructor, pooler) {
  var NewKlass = CopyConstructor;
  NewKlass.instancePool = [];
  NewKlass.getPooled = pooler || DEFAULT_POOLER;
  if (!NewKlass.poolSize) {
    NewKlass.poolSize = DEFAULT_POOL_SIZE;
  }
  NewKlass.release = standardReleaser;
  return NewKlass;
};

var PooledClass = {
  addPoolingTo: addPoolingTo,
  oneArgumentPooler: oneArgumentPooler,
  twoArgumentPooler: twoArgumentPooler,
  threeArgumentPooler: threeArgumentPooler,
  fourArgumentPooler: fourArgumentPooler,
  fiveArgumentPooler: fiveArgumentPooler
};

module.exports = PooledClass;
}, 149, null, "PooledClass");
__d(/* ReactFeatureFlags */function(global, require, module, exports) {

'use strict';

var ReactFeatureFlags = {
  logTopLevelRenders: false
};

module.exports = ReactFeatureFlags;
}, 150, null, "ReactFeatureFlags");
__d(/* ReactReconciler */function(global, require, module, exports) {

'use strict';

var ReactRef = require(152       ); // 152 = ReactRef
var ReactInstrumentation = require(154                   ); // 154 = ReactInstrumentation

var warning = require(21                ); // 21 = fbjs/lib/warning

function attachRefs(transaction) {
  ReactRef.attachRefs(this, this._currentElement, transaction);
}

var ReactReconciler = {
  mountComponent: function mountComponent(internalInstance, transaction, hostParent, hostContainerInfo, context, parentDebugID) {
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeMountComponent(internalInstance._debugID, internalInstance._currentElement, parentDebugID);
      }
    }
    var markup = internalInstance.mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID);
    if (internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onMountComponent(internalInstance._debugID);
      }
    }
    return markup;
  },

  getHostNode: function getHostNode(internalInstance) {
    return internalInstance.getHostNode();
  },

  unmountComponent: function unmountComponent(internalInstance, safely) {
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUnmountComponent(internalInstance._debugID);
      }
    }
    ReactRef.detachRefs(internalInstance, internalInstance._currentElement);
    internalInstance.unmountComponent(safely);
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUnmountComponent(internalInstance._debugID);
      }
    }
  },

  receiveComponent: function receiveComponent(internalInstance, nextElement, transaction, context) {
    var prevElement = internalInstance._currentElement;

    if (nextElement === prevElement && context === internalInstance._context) {
      return;
    }

    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, nextElement);
      }
    }

    var refsChanged = ReactRef.shouldUpdateRefs(prevElement, nextElement);

    if (refsChanged) {
      ReactRef.detachRefs(internalInstance, prevElement);
    }

    internalInstance.receiveComponent(nextElement, transaction, context);

    if (refsChanged && internalInstance._currentElement && internalInstance._currentElement.ref != null) {
      transaction.getReactMountReady().enqueue(attachRefs, internalInstance);
    }

    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  },

  performUpdateIfNecessary: function performUpdateIfNecessary(internalInstance, transaction, updateBatchNumber) {
    if (internalInstance._updateBatchNumber !== updateBatchNumber) {
      warning(internalInstance._updateBatchNumber == null || internalInstance._updateBatchNumber === updateBatchNumber + 1, 'performUpdateIfNecessary: Unexpected batch number (current %s, ' + 'pending %s)', updateBatchNumber, internalInstance._updateBatchNumber);
      return;
    }
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onBeforeUpdateComponent(internalInstance._debugID, internalInstance._currentElement);
      }
    }
    internalInstance.performUpdateIfNecessary(transaction);
    if (__DEV__) {
      if (internalInstance._debugID !== 0) {
        ReactInstrumentation.debugTool.onUpdateComponent(internalInstance._debugID);
      }
    }
  }

};

module.exports = ReactReconciler;
}, 151, null, "ReactReconciler");
__d(/* ReactRef */function(global, require, module, exports) {

'use strict';

var ReactOwner = require(153         ); // 153 = ReactOwner

var ReactRef = {};

function attachRef(ref, component, owner, transaction) {
  if (typeof ref === 'function') {
    ref(component.getPublicInstance(transaction));
  } else {
    ReactOwner.addComponentAsRefTo(component, ref, owner, transaction);
  }
}

function detachRef(ref, component, owner) {
  if (typeof ref === 'function') {
    ref(null);
  } else {
    ReactOwner.removeComponentAsRefFrom(component, ref, owner);
  }
}

ReactRef.attachRefs = function (instance, element, transaction) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    attachRef(ref, instance, element._owner, transaction);
  }
};

ReactRef.shouldUpdateRefs = function (prevElement, nextElement) {

  var prevRef = null;
  var prevOwner = null;
  if (prevElement !== null && typeof prevElement === 'object') {
    prevRef = prevElement.ref;
    prevOwner = prevElement._owner;
  }

  var nextRef = null;
  var nextOwner = null;
  if (nextElement !== null && typeof nextElement === 'object') {
    nextRef = nextElement.ref;
    nextOwner = nextElement._owner;
  }

  return prevRef !== nextRef || typeof nextRef === 'string' && nextOwner !== prevOwner;
};

ReactRef.detachRefs = function (instance, element) {
  if (element === null || typeof element !== 'object') {
    return;
  }
  var ref = element.ref;
  if (ref != null) {
    detachRef(ref, instance, element._owner);
  }
};

module.exports = ReactRef;
}, 152, null, "ReactRef");
__d(/* ReactOwner */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function isValidOwner(object) {
  return !!(object && typeof object.attachRef === 'function' && typeof object.detachRef === 'function');
}

var ReactOwner = {
  addComponentAsRefTo: function addComponentAsRefTo(component, ref, owner, transaction) {
    invariant(isValidOwner(owner), 'addComponentAsRefTo(...): Only a ReactOwner can have refs. You might ' + 'be adding a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).');
    owner.attachRef(ref, component, transaction);
  },

  removeComponentAsRefFrom: function removeComponentAsRefFrom(component, ref, owner) {
    invariant(isValidOwner(owner), 'removeComponentAsRefFrom(...): Only a ReactOwner can have refs. You might ' + 'be removing a ref to a component that was not created inside a component\'s ' + '`render` method, or you have multiple copies of React loaded ' + '(details: https://fb.me/react-refs-must-have-owner).');
    var ownerPublicInstance = owner.getPublicInstance();

    if (ownerPublicInstance && ownerPublicInstance.refs[ref] === component.getPublicInstance()) {
      owner.detachRef(ref);
    }
  }

};

module.exports = ReactOwner;
}, 153, null, "ReactOwner");
__d(/* ReactInstrumentation */function(global, require, module, exports) {

'use strict';

var debugTool = null;

if (__DEV__) {
  var ReactDebugTool = require(63              ); // 63 = ReactDebugTool
  debugTool = ReactDebugTool;
}

module.exports = { debugTool: debugTool };
}, 154, null, "ReactInstrumentation");
__d(/* Transaction */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var OBSERVED_ERROR = {};

var TransactionImpl = {
  reinitializeTransaction: function reinitializeTransaction() {
    this.transactionWrappers = this.getTransactionWrappers();
    if (this.wrapperInitData) {
      this.wrapperInitData.length = 0;
    } else {
      this.wrapperInitData = [];
    }
    this._isInTransaction = false;
  },

  _isInTransaction: false,

  getTransactionWrappers: null,

  isInTransaction: function isInTransaction() {
    return !!this._isInTransaction;
  },

  perform: function perform(method, scope, a, b, c, d, e, f) {
    invariant(!this.isInTransaction(), 'Transaction.perform(...): Cannot initialize a transaction when there ' + 'is already an outstanding transaction.');
    var errorThrown;
    var ret;
    try {
      this._isInTransaction = true;

      errorThrown = true;
      this.initializeAll(0);
      ret = method.call(scope, a, b, c, d, e, f);
      errorThrown = false;
    } finally {
      try {
        if (errorThrown) {
          try {
            this.closeAll(0);
          } catch (err) {}
        } else {
          this.closeAll(0);
        }
      } finally {
        this._isInTransaction = false;
      }
    }
    return ret;
  },

  initializeAll: function initializeAll(startIndex) {
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      try {
        this.wrapperInitData[i] = OBSERVED_ERROR;
        this.wrapperInitData[i] = wrapper.initialize ? wrapper.initialize.call(this) : null;
      } finally {
        if (this.wrapperInitData[i] === OBSERVED_ERROR) {
          try {
            this.initializeAll(i + 1);
          } catch (err) {}
        }
      }
    }
  },

  closeAll: function closeAll(startIndex) {
    invariant(this.isInTransaction(), 'Transaction.closeAll(): Cannot close transaction when none are open.');
    var transactionWrappers = this.transactionWrappers;
    for (var i = startIndex; i < transactionWrappers.length; i++) {
      var wrapper = transactionWrappers[i];
      var initData = this.wrapperInitData[i];
      var errorThrown;
      try {
        errorThrown = true;
        if (initData !== OBSERVED_ERROR && wrapper.close) {
          wrapper.close.call(this, initData);
        }
        errorThrown = false;
      } finally {
        if (errorThrown) {
          try {
            this.closeAll(i + 1);
          } catch (e) {}
        }
      }
    }
    this.wrapperInitData.length = 0;
  }
};

module.exports = TransactionImpl;
}, 155, null, "Transaction");
__d(/* ReactMultiChild */function(global, require, module, exports) {

'use strict';

var ReactComponentEnvironment = require(157                        ); // 157 = ReactComponentEnvironment
var ReactInstanceMap = require(102               ); // 102 = ReactInstanceMap
var ReactInstrumentation = require(154                   ); // 154 = ReactInstrumentation

var ReactCurrentOwner = require(20                           ); // 20 = react/lib/ReactCurrentOwner
var ReactReconciler = require(151              ); // 151 = ReactReconciler
var ReactChildReconciler = require(158                   ); // 158 = ReactChildReconciler

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var flattenChildren = require(173              ); // 173 = flattenChildren
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function makeInsertMarkup(markup, afterNode, toIndex) {
  return {
    type: 'INSERT_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: toIndex,
    afterNode: afterNode
  };
}

function makeMove(child, afterNode, toIndex) {
  return {
    type: 'MOVE_EXISTING',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: ReactReconciler.getHostNode(child),
    toIndex: toIndex,
    afterNode: afterNode
  };
}

function makeRemove(child, node) {
  return {
    type: 'REMOVE_NODE',
    content: null,
    fromIndex: child._mountIndex,
    fromNode: node,
    toIndex: null,
    afterNode: null
  };
}

function makeSetMarkup(markup) {
  return {
    type: 'SET_MARKUP',
    content: markup,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

function makeTextContent(textContent) {
  return {
    type: 'TEXT_CONTENT',
    content: textContent,
    fromIndex: null,
    fromNode: null,
    toIndex: null,
    afterNode: null
  };
}

function enqueue(queue, update) {
  if (update) {
    queue = queue || [];
    queue.push(update);
  }
  return queue;
}

function processQueue(inst, updateQueue) {
  ReactComponentEnvironment.processChildrenUpdates(inst, updateQueue);
}

var setChildrenForInstrumentation = emptyFunction;
if (__DEV__) {
  var getDebugID = function getDebugID(inst) {
    if (!inst._debugID) {
      var internal;
      if (internal = ReactInstanceMap.get(inst)) {
        inst = internal;
      }
    }
    return inst._debugID;
  };
  setChildrenForInstrumentation = function setChildrenForInstrumentation(children) {
    var debugID = getDebugID(this);

    if (debugID !== 0) {
      ReactInstrumentation.debugTool.onSetChildren(debugID, children ? Object.keys(children).map(function (key) {
        return children[key]._debugID;
      }) : []);
    }
  };
}

var ReactMultiChild = {
  _reconcilerInstantiateChildren: function _reconcilerInstantiateChildren(nestedChildren, transaction, context) {
    if (__DEV__) {
      var selfDebugID = getDebugID(this);
      if (this._currentElement) {
        try {
          ReactCurrentOwner.current = this._currentElement._owner;
          return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context, selfDebugID);
        } finally {
          ReactCurrentOwner.current = null;
        }
      }
    }
    return ReactChildReconciler.instantiateChildren(nestedChildren, transaction, context);
  },

  _reconcilerUpdateChildren: function _reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context) {
    var nextChildren;
    var selfDebugID = 0;
    if (__DEV__) {
      selfDebugID = getDebugID(this);
      if (this._currentElement) {
        try {
          ReactCurrentOwner.current = this._currentElement._owner;
          nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
        } finally {
          ReactCurrentOwner.current = null;
        }
        ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
        return nextChildren;
      }
    }
    nextChildren = flattenChildren(nextNestedChildrenElements, selfDebugID);
    ReactChildReconciler.updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, this, this._hostContainerInfo, context, selfDebugID);
    return nextChildren;
  },

  mountChildren: function mountChildren(nestedChildren, transaction, context) {
    var children = this._reconcilerInstantiateChildren(nestedChildren, transaction, context);
    this._renderedChildren = children;

    var mountImages = [];
    var index = 0;
    for (var name in children) {
      if (children.hasOwnProperty(name)) {
        var child = children[name];
        var selfDebugID = 0;
        if (__DEV__) {
          selfDebugID = getDebugID(this);
        }
        var mountImage = ReactReconciler.mountComponent(child, transaction, this, this._hostContainerInfo, context, selfDebugID);
        child._mountIndex = index++;
        mountImages.push(mountImage);
      }
    }

    if (__DEV__) {
      setChildrenForInstrumentation.call(this, children);
    }

    return mountImages;
  },

  updateTextContent: function updateTextContent(nextContent) {
    var prevChildren = this._renderedChildren;

    ReactChildReconciler.unmountChildren(prevChildren, false);
    for (var name in prevChildren) {
      if (prevChildren.hasOwnProperty(name)) {
        invariant(false, 'updateTextContent called on non-empty component.');
      }
    }

    var updates = [makeTextContent(nextContent)];
    processQueue(this, updates);
  },

  updateMarkup: function updateMarkup(nextMarkup) {
    var prevChildren = this._renderedChildren;

    ReactChildReconciler.unmountChildren(prevChildren, false);
    for (var name in prevChildren) {
      if (prevChildren.hasOwnProperty(name)) {
        invariant(false, 'updateTextContent called on non-empty component.');
      }
    }
    var updates = [makeSetMarkup(nextMarkup)];
    processQueue(this, updates);
  },

  updateChildren: function updateChildren(nextNestedChildrenElements, transaction, context) {
    this._updateChildren(nextNestedChildrenElements, transaction, context);
  },

  _updateChildren: function _updateChildren(nextNestedChildrenElements, transaction, context) {
    var prevChildren = this._renderedChildren;
    var removedNodes = {};
    var mountImages = [];
    var nextChildren = this._reconcilerUpdateChildren(prevChildren, nextNestedChildrenElements, mountImages, removedNodes, transaction, context);
    if (!nextChildren && !prevChildren) {
      return;
    }
    var updates = null;
    var name;

    var nextIndex = 0;
    var lastIndex = 0;

    var nextMountIndex = 0;
    var lastPlacedNode = null;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      var prevChild = prevChildren && prevChildren[name];
      var nextChild = nextChildren[name];
      if (prevChild === nextChild) {
        updates = enqueue(updates, this.moveChild(prevChild, lastPlacedNode, nextIndex, lastIndex));
        lastIndex = Math.max(prevChild._mountIndex, lastIndex);
        prevChild._mountIndex = nextIndex;
      } else {
        if (prevChild) {
          lastIndex = Math.max(prevChild._mountIndex, lastIndex);
        }

        updates = enqueue(updates, this._mountChildAtIndex(nextChild, mountImages[nextMountIndex], lastPlacedNode, nextIndex, transaction, context));
        nextMountIndex++;
      }
      nextIndex++;
      lastPlacedNode = ReactReconciler.getHostNode(nextChild);
    }

    for (name in removedNodes) {
      if (removedNodes.hasOwnProperty(name)) {
        updates = enqueue(updates, this._unmountChild(prevChildren[name], removedNodes[name]));
      }
    }
    if (updates) {
      processQueue(this, updates);
    }
    this._renderedChildren = nextChildren;

    if (__DEV__) {
      setChildrenForInstrumentation.call(this, nextChildren);
    }
  },

  unmountChildren: function unmountChildren(safely) {
    var renderedChildren = this._renderedChildren;
    ReactChildReconciler.unmountChildren(renderedChildren, safely);
    this._renderedChildren = null;
  },

  moveChild: function moveChild(child, afterNode, toIndex, lastIndex) {
    if (child._mountIndex < lastIndex) {
      return makeMove(child, afterNode, toIndex);
    }
  },

  createChild: function createChild(child, afterNode, mountImage) {
    return makeInsertMarkup(mountImage, afterNode, child._mountIndex);
  },

  removeChild: function removeChild(child, node) {
    return makeRemove(child, node);
  },

  _mountChildAtIndex: function _mountChildAtIndex(child, mountImage, afterNode, index, transaction, context) {
    child._mountIndex = index;
    return this.createChild(child, afterNode, mountImage);
  },

  _unmountChild: function _unmountChild(child, node) {
    var update = this.removeChild(child, node);
    child._mountIndex = null;
    return update;
  }
};

module.exports = ReactMultiChild;
}, 156, null, "ReactMultiChild");
__d(/* ReactComponentEnvironment */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var injected = false;

var ReactComponentEnvironment = {
  replaceNodeWithMarkup: null,

  processChildrenUpdates: null,

  injection: {
    injectEnvironment: function injectEnvironment(environment) {
      invariant(!injected, 'ReactCompositeComponent: injectEnvironment() can only be called once.');
      ReactComponentEnvironment.replaceNodeWithMarkup = environment.replaceNodeWithMarkup;
      ReactComponentEnvironment.processChildrenUpdates = environment.processChildrenUpdates;
      injected = true;
    }
  }

};

module.exports = ReactComponentEnvironment;
}, 157, null, "ReactComponentEnvironment");
__d(/* ReactChildReconciler */function(global, require, module, exports) {

'use strict';

var ReactReconciler = require(151              ); // 151 = ReactReconciler

var instantiateReactComponent = require(159                        ); // 159 = instantiateReactComponent
var KeyEscapeUtils = require(169             ); // 169 = KeyEscapeUtils
var shouldUpdateReactComponent = require(166                         ); // 166 = shouldUpdateReactComponent
var traverseAllChildren = require(170                  ); // 170 = traverseAllChildren
var warning = require(21                ); // 21 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(36                                ); // 36 = react/lib/ReactComponentTreeHook
}

function instantiateChild(childInstances, child, name, selfDebugID) {
  var keyUnique = childInstances[name] === undefined;
  if (__DEV__) {
    if (!ReactComponentTreeHook) {
      ReactComponentTreeHook = require(36                                ); // 36 = react/lib/ReactComponentTreeHook
    }
    if (!keyUnique) {
      warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID));
    }
  }
  if (child != null && keyUnique) {
    childInstances[name] = instantiateReactComponent(child, true);
  }
}

var ReactChildReconciler = {
  instantiateChildren: function instantiateChildren(nestedChildNodes, transaction, context, selfDebugID) {
    if (nestedChildNodes == null) {
      return null;
    }
    var childInstances = {};

    if (__DEV__) {
      traverseAllChildren(nestedChildNodes, function (childInsts, child, name) {
        return instantiateChild(childInsts, child, name, selfDebugID);
      }, childInstances);
    } else {
      traverseAllChildren(nestedChildNodes, instantiateChild, childInstances);
    }
    return childInstances;
  },

  updateChildren: function updateChildren(prevChildren, nextChildren, mountImages, removedNodes, transaction, hostParent, hostContainerInfo, context, selfDebugID) {
    if (!nextChildren && !prevChildren) {
      return;
    }
    var name;
    var prevChild;
    for (name in nextChildren) {
      if (!nextChildren.hasOwnProperty(name)) {
        continue;
      }
      prevChild = prevChildren && prevChildren[name];
      var prevElement = prevChild && prevChild._currentElement;
      var nextElement = nextChildren[name];
      if (prevChild != null && shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactReconciler.receiveComponent(prevChild, nextElement, transaction, context);
        nextChildren[name] = prevChild;
      } else {
        if (prevChild) {
          removedNodes[name] = ReactReconciler.getHostNode(prevChild);
          ReactReconciler.unmountComponent(prevChild, false);
        }

        var nextChildInstance = instantiateReactComponent(nextElement, true);
        nextChildren[name] = nextChildInstance;

        var nextChildMountImage = ReactReconciler.mountComponent(nextChildInstance, transaction, hostParent, hostContainerInfo, context, selfDebugID);
        mountImages.push(nextChildMountImage);
      }
    }

    for (name in prevChildren) {
      if (prevChildren.hasOwnProperty(name) && !(nextChildren && nextChildren.hasOwnProperty(name))) {
        prevChild = prevChildren[name];
        removedNodes[name] = ReactReconciler.getHostNode(prevChild);
        ReactReconciler.unmountComponent(prevChild, false);
      }
    }
  },

  unmountChildren: function unmountChildren(renderedChildren, safely) {
    for (var name in renderedChildren) {
      if (renderedChildren.hasOwnProperty(name)) {
        var renderedChild = renderedChildren[name];
        ReactReconciler.unmountComponent(renderedChild, safely);
      }
    }
  }

};

module.exports = ReactChildReconciler;
}, 158, null, "ReactChildReconciler");
__d(/* instantiateReactComponent */function(global, require, module, exports) {

'use strict';

var ReactCompositeComponent = require(160                      ); // 160 = ReactCompositeComponent
var ReactEmptyComponent = require(167                  ); // 167 = ReactEmptyComponent
var ReactHostComponent = require(168                 ); // 168 = ReactHostComponent

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var ReactCompositeComponentWrapper = function ReactCompositeComponentWrapper(element) {
  this.construct(element);
};
babelHelpers.extends(ReactCompositeComponentWrapper.prototype, ReactCompositeComponent, {
  _instantiateReactComponent: instantiateReactComponent
});

function getDeclarationErrorAddendum(owner) {
  if (owner) {
    var name = owner.getName();
    if (name) {
      return ' Check the render method of `' + name + '`.';
    }
  }
  return '';
}

function isInternalComponentType(type) {
  return typeof type === 'function' && typeof type.prototype !== 'undefined' && typeof type.prototype.mountComponent === 'function' && typeof type.prototype.receiveComponent === 'function';
}

var nextDebugID = 1;

function instantiateReactComponent(node, shouldHaveDebugID) {
  var instance;

  if (node === null || node === false) {
    instance = ReactEmptyComponent.create(instantiateReactComponent);
  } else if (typeof node === 'object') {
    var element = node;
    invariant(element && (typeof element.type === 'function' || typeof element.type === 'string'), 'Element type is invalid: expected a string (for built-in components) ' + 'or a class/function (for composite components) but got: %s.%s', element.type == null ? element.type : typeof element.type, getDeclarationErrorAddendum(element._owner));

    if (typeof element.type === 'string') {
      instance = ReactHostComponent.createInternalComponent(element);
    } else if (isInternalComponentType(element.type)) {
      instance = new element.type(element);

      if (!instance.getHostNode) {
        instance.getHostNode = instance.getNativeNode;
      }
    } else {
      instance = new ReactCompositeComponentWrapper(element);
    }
  } else if (typeof node === 'string' || typeof node === 'number') {
    instance = ReactHostComponent.createInstanceForText(node);
  } else {
    invariant(false, 'Encountered invalid React node of type %s', typeof node);
  }

  if (__DEV__) {
    warning(typeof instance.mountComponent === 'function' && typeof instance.receiveComponent === 'function' && typeof instance.getHostNode === 'function' && typeof instance.unmountComponent === 'function', 'Only React Components can be mounted.');
  }

  instance._mountIndex = 0;
  instance._mountImage = null;

  if (__DEV__) {
    instance._debugID = shouldHaveDebugID ? nextDebugID++ : 0;
  }

  if (__DEV__) {
    if (Object.preventExtensions) {
      Object.preventExtensions(instance);
    }
  }

  return instance;
}

module.exports = instantiateReactComponent;
}, 159, null, "instantiateReactComponent");
__d(/* ReactCompositeComponent */function(global, require, module, exports) {

'use strict';

var React = require(103    ); // 103 = React
var ReactComponentEnvironment = require(157                        ); // 157 = ReactComponentEnvironment
var ReactCurrentOwner = require(20                           ); // 20 = react/lib/ReactCurrentOwner
var ReactErrorUtils = require(142              ); // 142 = ReactErrorUtils
var ReactInstanceMap = require(102               ); // 102 = ReactInstanceMap
var ReactInstrumentation = require(154                   ); // 154 = ReactInstrumentation
var ReactNodeTypes = require(161             ); // 161 = ReactNodeTypes
var ReactReconciler = require(151              ); // 151 = ReactReconciler

if (__DEV__) {
  var checkReactTypeSpec = require(162                 ); // 162 = checkReactTypeSpec
}

var emptyObject = require(30                    ); // 30 = fbjs/lib/emptyObject
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var shallowEqual = require(165                    ); // 165 = fbjs/lib/shallowEqual
var shouldUpdateReactComponent = require(166                         ); // 166 = shouldUpdateReactComponent
var warning = require(21                ); // 21 = fbjs/lib/warning

var CompositeTypes = {
  ImpureClass: 0,
  PureClass: 1,
  StatelessFunctional: 2
};

function StatelessComponent(Component) {}
StatelessComponent.prototype.render = function () {
  var Component = ReactInstanceMap.get(this)._currentElement.type;
  var element = Component(this.props, this.context, this.updater);
  warnIfInvalidElement(Component, element);
  return element;
};

function warnIfInvalidElement(Component, element) {
  if (__DEV__) {
    warning(element === null || element === false || React.isValidElement(element), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component');
    warning(!Component.childContextTypes, '%s(...): childContextTypes cannot be defined on a functional component.', Component.displayName || Component.name || 'Component');
  }
}

function shouldConstruct(Component) {
  return !!(Component.prototype && Component.prototype.isReactComponent);
}

function isPureComponent(Component) {
  return !!(Component.prototype && Component.prototype.isPureReactComponent);
}

function measureLifeCyclePerf(fn, debugID, timerType) {
  if (debugID === 0) {
    return fn();
  }

  ReactInstrumentation.debugTool.onBeginLifeCycleTimer(debugID, timerType);
  try {
    return fn();
  } finally {
    ReactInstrumentation.debugTool.onEndLifeCycleTimer(debugID, timerType);
  }
}

var nextMountID = 1;

var ReactCompositeComponent = {
  construct: function construct(element) {
    this._currentElement = element;
    this._rootNodeID = 0;
    this._compositeType = null;
    this._instance = null;
    this._hostParent = null;
    this._hostContainerInfo = null;

    this._updateBatchNumber = null;
    this._pendingElement = null;
    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    this._renderedNodeType = null;
    this._renderedComponent = null;
    this._context = null;
    this._mountOrder = 0;
    this._topLevelWrapper = null;

    this._pendingCallbacks = null;

    this._calledComponentWillUnmount = false;

    if (__DEV__) {
      this._warnedAboutRefsInRender = false;
    }
  },

  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    var _this = this;

    this._context = context;
    this._mountOrder = nextMountID++;
    this._hostParent = hostParent;
    this._hostContainerInfo = hostContainerInfo;

    var publicProps = this._currentElement.props;
    var publicContext = this._processContext(context);

    var Component = this._currentElement.type;

    var updateQueue = transaction.getUpdateQueue();

    var doConstruct = shouldConstruct(Component);
    var inst = this._constructComponent(doConstruct, publicProps, publicContext, updateQueue);
    var renderedElement;

    if (!doConstruct && (inst == null || inst.render == null)) {
      renderedElement = inst;
      warnIfInvalidElement(Component, renderedElement);
      invariant(inst === null || inst === false || React.isValidElement(inst), '%s(...): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', Component.displayName || Component.name || 'Component');
      inst = new StatelessComponent(Component);
      this._compositeType = CompositeTypes.StatelessFunctional;
    } else {
      if (isPureComponent(Component)) {
        this._compositeType = CompositeTypes.PureClass;
      } else {
        this._compositeType = CompositeTypes.ImpureClass;
      }
    }

    if (__DEV__) {
      if (inst.render == null) {
        warning(false, '%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', Component.displayName || Component.name || 'Component');
      }

      var propsMutated = inst.props !== publicProps;
      var componentName = Component.displayName || Component.name || 'Component';

      warning(inst.props === undefined || !propsMutated, '%s(...): When calling super() in `%s`, make sure to pass ' + 'up the same props that your component\'s constructor was passed.', componentName, componentName);
    }

    inst.props = publicProps;
    inst.context = publicContext;
    inst.refs = emptyObject;
    inst.updater = updateQueue;

    this._instance = inst;

    ReactInstanceMap.set(inst, this);

    if (__DEV__) {
      warning(!inst.getInitialState || inst.getInitialState.isReactClassApproved, 'getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', this.getName() || 'a component');
      warning(!inst.getDefaultProps || inst.getDefaultProps.isReactClassApproved, 'getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', this.getName() || 'a component');
      warning(!inst.propTypes, 'propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', this.getName() || 'a component');
      warning(!inst.contextTypes, 'contextTypes was defined as an instance property on %s. Use a ' + 'static property to define contextTypes instead.', this.getName() || 'a component');
      warning(typeof inst.componentShouldUpdate !== 'function', '%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', this.getName() || 'A component');
      warning(typeof inst.componentDidUnmount !== 'function', '%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', this.getName() || 'A component');
      warning(typeof inst.componentWillRecieveProps !== 'function', '%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', this.getName() || 'A component');
    }

    var initialState = inst.state;
    if (initialState === undefined) {
      inst.state = initialState = null;
    }
    invariant(typeof initialState === 'object' && !Array.isArray(initialState), '%s.state: must be set to an object or null', this.getName() || 'ReactCompositeComponent');

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;

    var markup;
    if (inst.unstable_handleError) {
      markup = this.performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } else {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }

    if (inst.componentDidMount) {
      if (__DEV__) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(function () {
            return inst.componentDidMount();
          }, _this._debugID, 'componentDidMount');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidMount, inst);
      }
    }

    return markup;
  },

  _constructComponent: function _constructComponent(doConstruct, publicProps, publicContext, updateQueue) {
    if (__DEV__) {
      ReactCurrentOwner.current = this;
      try {
        return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      return this._constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue);
    }
  },

  _constructComponentWithoutOwner: function _constructComponentWithoutOwner(doConstruct, publicProps, publicContext, updateQueue) {
    var Component = this._currentElement.type;

    if (doConstruct) {
      if (__DEV__) {
        return measureLifeCyclePerf(function () {
          return new Component(publicProps, publicContext, updateQueue);
        }, this._debugID, 'ctor');
      } else {
        return new Component(publicProps, publicContext, updateQueue);
      }
    }

    if (__DEV__) {
      return measureLifeCyclePerf(function () {
        return Component(publicProps, publicContext, updateQueue);
      }, this._debugID, 'render');
    } else {
      return Component(publicProps, publicContext, updateQueue);
    }
  },

  performInitialMountWithErrorHandling: function performInitialMountWithErrorHandling(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var markup;
    var checkpoint = transaction.checkpoint();
    try {
      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    } catch (e) {
      transaction.rollback(checkpoint);
      this._instance.unstable_handleError(e);
      if (this._pendingStateQueue) {
        this._instance.state = this._processPendingState(this._instance.props, this._instance.context);
      }
      checkpoint = transaction.checkpoint();

      this._renderedComponent.unmountComponent(true);
      transaction.rollback(checkpoint);

      markup = this.performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context);
    }
    return markup;
  },

  performInitialMount: function performInitialMount(renderedElement, hostParent, hostContainerInfo, transaction, context) {
    var inst = this._instance;

    var debugID = 0;
    if (__DEV__) {
      debugID = this._debugID;
    }

    if (inst.componentWillMount) {
      if (__DEV__) {
        measureLifeCyclePerf(function () {
          return inst.componentWillMount();
        }, debugID, 'componentWillMount');
      } else {
        inst.componentWillMount();
      }

      if (this._pendingStateQueue) {
        inst.state = this._processPendingState(inst.props, inst.context);
      }
    }

    if (renderedElement === undefined) {
      renderedElement = this._renderValidatedComponent();
    }

    var nodeType = ReactNodeTypes.getType(renderedElement);
    this._renderedNodeType = nodeType;
    var child = this._instantiateReactComponent(renderedElement, nodeType !== ReactNodeTypes.EMPTY);
    this._renderedComponent = child;

    var markup = ReactReconciler.mountComponent(child, transaction, hostParent, hostContainerInfo, this._processChildContext(context), debugID);

    if (__DEV__) {
      if (debugID !== 0) {
        var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
        ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
      }
    }

    return markup;
  },

  getHostNode: function getHostNode() {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },

  unmountComponent: function unmountComponent(safely) {
    if (!this._renderedComponent) {
      return;
    }

    var inst = this._instance;

    if (inst.componentWillUnmount && !inst._calledComponentWillUnmount) {
      inst._calledComponentWillUnmount = true;

      if (safely) {
        var name = this.getName() + '.componentWillUnmount()';
        ReactErrorUtils.invokeGuardedCallback(name, inst.componentWillUnmount.bind(inst));
      } else {
        if (__DEV__) {
          measureLifeCyclePerf(function () {
            return inst.componentWillUnmount();
          }, this._debugID, 'componentWillUnmount');
        } else {
          inst.componentWillUnmount();
        }
      }
    }

    if (this._renderedComponent) {
      ReactReconciler.unmountComponent(this._renderedComponent, safely);
      this._renderedNodeType = null;
      this._renderedComponent = null;
      this._instance = null;
    }

    this._pendingStateQueue = null;
    this._pendingReplaceState = false;
    this._pendingForceUpdate = false;
    this._pendingCallbacks = null;
    this._pendingElement = null;

    this._context = null;
    this._rootNodeID = 0;
    this._topLevelWrapper = null;

    ReactInstanceMap.remove(inst);
  },

  _maskContext: function _maskContext(context) {
    var Component = this._currentElement.type;
    var contextTypes = Component.contextTypes;
    if (!contextTypes) {
      return emptyObject;
    }
    var maskedContext = {};
    for (var contextName in contextTypes) {
      maskedContext[contextName] = context[contextName];
    }
    return maskedContext;
  },

  _processContext: function _processContext(context) {
    var maskedContext = this._maskContext(context);
    if (__DEV__) {
      var Component = this._currentElement.type;
      if (Component.contextTypes) {
        this._checkContextTypes(Component.contextTypes, maskedContext, 'context');
      }
    }
    return maskedContext;
  },

  _processChildContext: function _processChildContext(currentContext) {
    var Component = this._currentElement.type;
    var inst = this._instance;
    var childContext;

    if (inst.getChildContext) {
      if (__DEV__) {
        ReactInstrumentation.debugTool.onBeginProcessingChildContext();
        try {
          childContext = inst.getChildContext();
        } finally {
          ReactInstrumentation.debugTool.onEndProcessingChildContext();
        }
      } else {
        childContext = inst.getChildContext();
      }
    }

    if (childContext) {
      invariant(typeof Component.childContextTypes === 'object', '%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', this.getName() || 'ReactCompositeComponent');
      if (__DEV__) {
        this._checkContextTypes(Component.childContextTypes, childContext, 'childContext');
      }
      for (var name in childContext) {
        invariant(name in Component.childContextTypes, '%s.getChildContext(): key "%s" is not defined in childContextTypes.', this.getName() || 'ReactCompositeComponent', name);
      }
      return babelHelpers.extends({}, currentContext, childContext);
    }
    return currentContext;
  },

  _checkContextTypes: function _checkContextTypes(typeSpecs, values, location) {
    if (__DEV__) {
      checkReactTypeSpec(typeSpecs, values, location, this.getName(), null, this._debugID);
    }
  },

  receiveComponent: function receiveComponent(nextElement, transaction, nextContext) {
    var prevElement = this._currentElement;
    var prevContext = this._context;

    this._pendingElement = null;

    this.updateComponent(transaction, prevElement, nextElement, prevContext, nextContext);
  },

  performUpdateIfNecessary: function performUpdateIfNecessary(transaction) {
    if (this._pendingElement != null) {
      ReactReconciler.receiveComponent(this, this._pendingElement, transaction, this._context);
    } else if (this._pendingStateQueue !== null || this._pendingForceUpdate) {
      this.updateComponent(transaction, this._currentElement, this._currentElement, this._context, this._context);
    } else {
      this._updateBatchNumber = null;
    }
  },

  updateComponent: function updateComponent(transaction, prevParentElement, nextParentElement, prevUnmaskedContext, nextUnmaskedContext) {
    var inst = this._instance;
    invariant(inst != null, 'Attempted to update component `%s` that has already been unmounted ' + '(or failed to mount).', this.getName() || 'ReactCompositeComponent');

    var willReceive = false;
    var nextContext;

    if (this._context === nextUnmaskedContext) {
      nextContext = inst.context;
    } else {
      nextContext = this._processContext(nextUnmaskedContext);
      willReceive = true;
    }

    var prevProps = prevParentElement.props;
    var nextProps = nextParentElement.props;

    if (prevParentElement !== nextParentElement) {
      willReceive = true;
    }

    if (willReceive && inst.componentWillReceiveProps) {
      if (__DEV__) {
        measureLifeCyclePerf(function () {
          return inst.componentWillReceiveProps(nextProps, nextContext);
        }, this._debugID, 'componentWillReceiveProps');
      } else {
        inst.componentWillReceiveProps(nextProps, nextContext);
      }
    }

    var nextState = this._processPendingState(nextProps, nextContext);
    var shouldUpdate = true;

    if (!this._pendingForceUpdate) {
      if (inst.shouldComponentUpdate) {
        if (__DEV__) {
          shouldUpdate = measureLifeCyclePerf(function () {
            return inst.shouldComponentUpdate(nextProps, nextState, nextContext);
          }, this._debugID, 'shouldComponentUpdate');
        } else {
          shouldUpdate = inst.shouldComponentUpdate(nextProps, nextState, nextContext);
        }
      } else {
        if (this._compositeType === CompositeTypes.PureClass) {
          shouldUpdate = !shallowEqual(prevProps, nextProps) || !shallowEqual(inst.state, nextState);
        }
      }
    }

    if (__DEV__) {
      warning(shouldUpdate !== undefined, '%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', this.getName() || 'ReactCompositeComponent');
    }

    this._updateBatchNumber = null;
    if (shouldUpdate) {
      this._pendingForceUpdate = false;

      this._performComponentUpdate(nextParentElement, nextProps, nextState, nextContext, transaction, nextUnmaskedContext);
    } else {
      this._currentElement = nextParentElement;
      this._context = nextUnmaskedContext;
      inst.props = nextProps;
      inst.state = nextState;
      inst.context = nextContext;
    }
  },

  _processPendingState: function _processPendingState(props, context) {
    var inst = this._instance;
    var queue = this._pendingStateQueue;
    var replace = this._pendingReplaceState;
    this._pendingReplaceState = false;
    this._pendingStateQueue = null;

    if (!queue) {
      return inst.state;
    }

    if (replace && queue.length === 1) {
      return queue[0];
    }

    var nextState = babelHelpers.extends({}, replace ? queue[0] : inst.state);
    for (var i = replace ? 1 : 0; i < queue.length; i++) {
      var partial = queue[i];
      babelHelpers.extends(nextState, typeof partial === 'function' ? partial.call(inst, nextState, props, context) : partial);
    }

    return nextState;
  },

  _performComponentUpdate: function _performComponentUpdate(nextElement, nextProps, nextState, nextContext, transaction, unmaskedContext) {
    var _this2 = this;

    var inst = this._instance;

    var hasComponentDidUpdate = Boolean(inst.componentDidUpdate);
    var prevProps;
    var prevState;
    var prevContext;
    if (hasComponentDidUpdate) {
      prevProps = inst.props;
      prevState = inst.state;
      prevContext = inst.context;
    }

    if (inst.componentWillUpdate) {
      if (__DEV__) {
        measureLifeCyclePerf(function () {
          return inst.componentWillUpdate(nextProps, nextState, nextContext);
        }, this._debugID, 'componentWillUpdate');
      } else {
        inst.componentWillUpdate(nextProps, nextState, nextContext);
      }
    }

    this._currentElement = nextElement;
    this._context = unmaskedContext;
    inst.props = nextProps;
    inst.state = nextState;
    inst.context = nextContext;

    this._updateRenderedComponent(transaction, unmaskedContext);

    if (hasComponentDidUpdate) {
      if (__DEV__) {
        transaction.getReactMountReady().enqueue(function () {
          measureLifeCyclePerf(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), _this2._debugID, 'componentDidUpdate');
        });
      } else {
        transaction.getReactMountReady().enqueue(inst.componentDidUpdate.bind(inst, prevProps, prevState, prevContext), inst);
      }
    }
  },

  _updateRenderedComponent: function _updateRenderedComponent(transaction, context) {
    var prevComponentInstance = this._renderedComponent;
    var prevRenderedElement = prevComponentInstance._currentElement;
    var nextRenderedElement = this._renderValidatedComponent();

    var debugID = 0;
    if (__DEV__) {
      debugID = this._debugID;
    }

    if (shouldUpdateReactComponent(prevRenderedElement, nextRenderedElement)) {
      ReactReconciler.receiveComponent(prevComponentInstance, nextRenderedElement, transaction, this._processChildContext(context));
    } else {
      var oldHostNode = ReactReconciler.getHostNode(prevComponentInstance);
      ReactReconciler.unmountComponent(prevComponentInstance, false);

      var nodeType = ReactNodeTypes.getType(nextRenderedElement);
      this._renderedNodeType = nodeType;
      var child = this._instantiateReactComponent(nextRenderedElement, nodeType !== ReactNodeTypes.EMPTY);
      this._renderedComponent = child;

      var nextMarkup = ReactReconciler.mountComponent(child, transaction, this._hostParent, this._hostContainerInfo, this._processChildContext(context), debugID);

      if (__DEV__) {
        if (debugID !== 0) {
          var childDebugIDs = child._debugID !== 0 ? [child._debugID] : [];
          ReactInstrumentation.debugTool.onSetChildren(debugID, childDebugIDs);
        }
      }

      this._replaceNodeWithMarkup(oldHostNode, nextMarkup, prevComponentInstance);
    }
  },

  _replaceNodeWithMarkup: function _replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance) {
    ReactComponentEnvironment.replaceNodeWithMarkup(oldHostNode, nextMarkup, prevInstance);
  },

  _renderValidatedComponentWithoutOwnerOrContext: function _renderValidatedComponentWithoutOwnerOrContext() {
    var inst = this._instance;
    var renderedElement;

    if (__DEV__) {
      renderedElement = measureLifeCyclePerf(function () {
        return inst.render();
      }, this._debugID, 'render');
    } else {
      renderedElement = inst.render();
    }

    if (__DEV__) {
      if (renderedElement === undefined && inst.render._isMockFunction) {
        renderedElement = null;
      }
    }

    return renderedElement;
  },

  _renderValidatedComponent: function _renderValidatedComponent() {
    var renderedElement;
    if (__DEV__ || this._compositeType !== CompositeTypes.StatelessFunctional) {
      ReactCurrentOwner.current = this;
      try {
        renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
      } finally {
        ReactCurrentOwner.current = null;
      }
    } else {
      renderedElement = this._renderValidatedComponentWithoutOwnerOrContext();
    }
    invariant(renderedElement === null || renderedElement === false || React.isValidElement(renderedElement), '%s.render(): A valid React element (or null) must be returned. You may have ' + 'returned undefined, an array or some other invalid object.', this.getName() || 'ReactCompositeComponent');

    return renderedElement;
  },

  attachRef: function attachRef(ref, component, transaction) {
    var inst = this.getPublicInstance();
    invariant(inst != null, 'Stateless function components cannot have refs.');
    var publicComponentInstance = component.getPublicInstance(transaction);
    if (__DEV__) {
      var componentName = component && component.getName ? component.getName() : 'a component';
      warning(publicComponentInstance != null || component._compositeType !== CompositeTypes.StatelessFunctional, 'Stateless function components cannot be given refs ' + '(See ref "%s" in %s created by %s). ' + 'Attempts to access this ref will fail.', ref, componentName, this.getName());
    }
    var refs = inst.refs === emptyObject ? inst.refs = {} : inst.refs;
    refs[ref] = publicComponentInstance;
  },

  detachRef: function detachRef(ref) {
    var refs = this.getPublicInstance().refs;
    delete refs[ref];
  },

  getName: function getName() {
    var type = this._currentElement.type;
    var constructor = this._instance && this._instance.constructor;
    return type.displayName || constructor && constructor.displayName || type.name || constructor && constructor.name || null;
  },

  getPublicInstance: function getPublicInstance() {
    var inst = this._instance;
    if (this._compositeType === CompositeTypes.StatelessFunctional) {
      return null;
    }
    return inst;
  },

  _instantiateReactComponent: null

};

module.exports = ReactCompositeComponent;
}, 160, null, "ReactCompositeComponent");
__d(/* ReactNodeTypes */function(global, require, module, exports) {

'use strict';

var React = require(103    ); // 103 = React

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var ReactNodeTypes = {
  HOST: 0,
  COMPOSITE: 1,
  EMPTY: 2,

  getType: function getType(node) {
    if (node === null || node === false) {
      return ReactNodeTypes.EMPTY;
    } else if (React.isValidElement(node)) {
      if (typeof node.type === 'function') {
        return ReactNodeTypes.COMPOSITE;
      } else {
        return ReactNodeTypes.HOST;
      }
    }
    invariant(false, 'Unexpected node: %s', node);
  }
};

module.exports = ReactNodeTypes;
}, 161, null, "ReactNodeTypes");
__d(/* checkReactTypeSpec */function(global, require, module, exports) {

'use strict';

var ReactPropTypeLocationNames = require(163                         ); // 163 = ReactPropTypeLocationNames
var ReactPropTypesSecret = require(164                   ); // 164 = ReactPropTypesSecret

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(36                                ); // 36 = react/lib/ReactComponentTreeHook
}

var loggedTypeFailures = {};

function checkReactTypeSpec(typeSpecs, values, location, componentName, element, debugID) {
  for (var typeSpecName in typeSpecs) {
    if (typeSpecs.hasOwnProperty(typeSpecName)) {
      var error;

      try {
        invariant(typeof typeSpecs[typeSpecName] === 'function', '%s: %s type `%s` is invalid; it must be a function, usually from ' + 'React.PropTypes.', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName);
        error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
      } catch (ex) {
        error = ex;
      }
      warning(!error || error instanceof Error, '%s: type specification of %s `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', ReactPropTypeLocationNames[location], typeSpecName, typeof error);
      if (error instanceof Error && !(error.message in loggedTypeFailures)) {
        loggedTypeFailures[error.message] = true;

        var componentStackInfo = '';

        if (__DEV__) {
          if (!ReactComponentTreeHook) {
            ReactComponentTreeHook = require(36                                ); // 36 = react/lib/ReactComponentTreeHook
          }
          if (debugID !== null) {
            componentStackInfo = ReactComponentTreeHook.getStackAddendumByID(debugID);
          } else if (element !== null) {
            componentStackInfo = ReactComponentTreeHook.getCurrentStackAddendum(element);
          }
        }

        warning(false, 'Failed %s type: %s%s', location, error.message, componentStackInfo);
      }
    }
  }
}

module.exports = checkReactTypeSpec;
}, 162, null, "checkReactTypeSpec");
__d(/* ReactPropTypeLocationNames */function(global, require, module, exports) {

'use strict';

var ReactPropTypeLocationNames = {};

if (__DEV__) {
  ReactPropTypeLocationNames = {
    prop: 'prop',
    context: 'context',
    childContext: 'child context'
  };
}

module.exports = ReactPropTypeLocationNames;
}, 163, null, "ReactPropTypeLocationNames");
__d(/* ReactPropTypesSecret */function(global, require, module, exports) {

'use strict';

var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;
}, 164, null, "ReactPropTypesSecret");
__d(/* fbjs/lib/shallowEqual.js */function(global, require, module, exports) {

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  }

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

module.exports = shallowEqual;
}, 165, null, "fbjs/lib/shallowEqual.js");
__d(/* shouldUpdateReactComponent */function(global, require, module, exports) {

'use strict';

function shouldUpdateReactComponent(prevElement, nextElement) {
  var prevEmpty = prevElement === null || prevElement === false;
  var nextEmpty = nextElement === null || nextElement === false;
  if (prevEmpty || nextEmpty) {
    return prevEmpty === nextEmpty;
  }

  var prevType = typeof prevElement;
  var nextType = typeof nextElement;
  if (prevType === 'string' || prevType === 'number') {
    return nextType === 'string' || nextType === 'number';
  } else {
    return nextType === 'object' && prevElement.type === nextElement.type && prevElement.key === nextElement.key;
  }
}

module.exports = shouldUpdateReactComponent;
}, 166, null, "shouldUpdateReactComponent");
__d(/* ReactEmptyComponent */function(global, require, module, exports) {

'use strict';

var emptyComponentFactory;

var ReactEmptyComponentInjection = {
  injectEmptyComponentFactory: function injectEmptyComponentFactory(factory) {
    emptyComponentFactory = factory;
  }
};

var ReactEmptyComponent = {
  create: function create(instantiate) {
    return emptyComponentFactory(instantiate);
  }
};

ReactEmptyComponent.injection = ReactEmptyComponentInjection;

module.exports = ReactEmptyComponent;
}, 167, null, "ReactEmptyComponent");
__d(/* ReactHostComponent */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var genericComponentClass = null;

var tagToComponentClass = {};
var textComponentClass = null;

var ReactHostComponentInjection = {
  injectGenericComponentClass: function injectGenericComponentClass(componentClass) {
    genericComponentClass = componentClass;
  },

  injectTextComponentClass: function injectTextComponentClass(componentClass) {
    textComponentClass = componentClass;
  },

  injectComponentClasses: function injectComponentClasses(componentClasses) {
    babelHelpers.extends(tagToComponentClass, componentClasses);
  }
};

function createInternalComponent(element) {
  invariant(genericComponentClass, 'There is no registered component for the tag %s', element.type);
  return new genericComponentClass(element);
}

function createInstanceForText(text) {
  return new textComponentClass(text);
}

function isTextComponent(component) {
  return component instanceof textComponentClass;
}

var ReactHostComponent = {
  createInternalComponent: createInternalComponent,
  createInstanceForText: createInstanceForText,
  isTextComponent: isTextComponent,
  injection: ReactHostComponentInjection
};

module.exports = ReactHostComponent;
}, 168, null, "ReactHostComponent");
__d(/* KeyEscapeUtils */function(global, require, module, exports) {

'use strict';

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });

  return '$' + escapedString;
}

function unescape(key) {
  var unescapeRegex = /(=0|=2)/g;
  var unescaperLookup = {
    '=0': '=',
    '=2': ':'
  };
  var keySubstring = key[0] === '.' && key[1] === '$' ? key.substring(2) : key.substring(1);

  return ('' + keySubstring).replace(unescapeRegex, function (match) {
    return unescaperLookup[match];
  });
}

var KeyEscapeUtils = {
  escape: escape,
  unescape: unescape
};

module.exports = KeyEscapeUtils;
}, 169, null, "KeyEscapeUtils");
__d(/* traverseAllChildren */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(20                           ); // 20 = react/lib/ReactCurrentOwner
var REACT_ELEMENT_TYPE = require(171                 ); // 171 = ReactElementSymbol

var getIteratorFn = require(172            ); // 172 = getIteratorFn
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var KeyEscapeUtils = require(169             ); // 169 = KeyEscapeUtils
var warning = require(21                ); // 21 = fbjs/lib/warning

var SEPARATOR = '.';
var SUBSEPARATOR = ':';

var didWarnAboutMaps = false;

function getComponentKey(component, index) {
  if (component && typeof component === 'object' && component.key != null) {
    return KeyEscapeUtils.escape(component.key);
  }

  return index.toString(36);
}

function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    children = null;
  }

  if (children === null || type === 'string' || type === 'number' || type === 'object' && children.$$typeof === REACT_ELEMENT_TYPE) {
    callback(traverseContext, children, nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0;
  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);
    if (iteratorFn) {
      var iterator = iteratorFn.call(children);
      var step;
      if (iteratorFn !== children.entries) {
        var ii = 0;
        while (!(step = iterator.next()).done) {
          child = step.value;
          nextName = nextNamePrefix + getComponentKey(child, ii++);
          subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
        }
      } else {
        if (__DEV__) {
          var mapsAsChildrenAddendum = '';
          if (ReactCurrentOwner.current) {
            var mapsAsChildrenOwnerName = ReactCurrentOwner.current.getName();
            if (mapsAsChildrenOwnerName) {
              mapsAsChildrenAddendum = ' Check the render method of `' + mapsAsChildrenOwnerName + '`.';
            }
          }
          warning(didWarnAboutMaps, 'Using Maps as children is not yet fully supported. It is an ' + 'experimental feature that might be removed. Convert it to a ' + 'sequence / iterable of keyed ReactElements instead.%s', mapsAsChildrenAddendum);
          didWarnAboutMaps = true;
        }

        while (!(step = iterator.next()).done) {
          var entry = step.value;
          if (entry) {
            child = entry[1];
            nextName = nextNamePrefix + KeyEscapeUtils.escape(entry[0]) + SUBSEPARATOR + getComponentKey(child, 0);
            subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
          }
        }
      }
    } else if (type === 'object') {
      var addendum = '';
      if (__DEV__) {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead or wrap the object using createFragment(object) from the ' + 'React add-ons.';
        if (children._isReactElement) {
          addendum = ' It looks like you\'re using an element created by a different ' + 'version of React. Make sure to use only one copy of React.';
        }
        if (ReactCurrentOwner.current) {
          var name = ReactCurrentOwner.current.getName();
          if (name) {
            addendum += ' Check the render method of `' + name + '`.';
          }
        }
      }
      var childrenString = String(children);
      invariant(false, 'Objects are not valid as a React child (found: %s).%s', childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString, addendum);
    }
  }

  return subtreeCount;
}

function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}

module.exports = traverseAllChildren;
}, 170, null, "traverseAllChildren");
__d(/* ReactElementSymbol */function(global, require, module, exports) {

'use strict';

var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.for : '@@for') && (typeof Symbol === 'function' ? Symbol.for : '@@for')('react.element') || 0xeac7;

module.exports = REACT_ELEMENT_TYPE;
}, 171, null, "ReactElementSymbol");
__d(/* getIteratorFn */function(global, require, module, exports) {

'use strict';

var ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
  if (typeof iteratorFn === 'function') {
    return iteratorFn;
  }
}

module.exports = getIteratorFn;
}, 172, null, "getIteratorFn");
__d(/* flattenChildren */function(global, require, module, exports) {

'use strict';

var KeyEscapeUtils = require(169             ); // 169 = KeyEscapeUtils
var traverseAllChildren = require(170                  ); // 170 = traverseAllChildren
var warning = require(21                ); // 21 = fbjs/lib/warning

var ReactComponentTreeHook;

if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV === 'test') {
  ReactComponentTreeHook = require(36                                ); // 36 = react/lib/ReactComponentTreeHook
}

function flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID) {
  if (traverseContext && typeof traverseContext === 'object') {
    var result = traverseContext;
    var keyUnique = result[name] === undefined;
    if (__DEV__) {
      if (!ReactComponentTreeHook) {
        ReactComponentTreeHook = require(36                                ); // 36 = react/lib/ReactComponentTreeHook
      }
      if (!keyUnique) {
        warning(false, 'flattenChildren(...): Encountered two children with the same key, ' + '`%s`. Child keys must be unique; when two children share a key, only ' + 'the first child will be used.%s', KeyEscapeUtils.unescape(name), ReactComponentTreeHook.getStackAddendumByID(selfDebugID));
      }
    }
    if (keyUnique && child != null) {
      result[name] = child;
    }
  }
}

function flattenChildren(children, selfDebugID) {
  if (children == null) {
    return children;
  }
  var result = {};

  if (__DEV__) {
    traverseAllChildren(children, function (traverseContext, child, name) {
      return flattenSingleChildIntoContext(traverseContext, child, name, selfDebugID);
    }, result);
  } else {
    traverseAllChildren(children, flattenSingleChildIntoContext, result);
  }
  return result;
}

module.exports = flattenChildren;
}, 173, null, "flattenChildren");
__d(/* insetsDiffer */function(global, require, module, exports) {
'use strict';

var dummyInsets = {
  top: undefined,
  left: undefined,
  right: undefined,
  bottom: undefined
};

var insetsDiffer = function insetsDiffer(one, two) {
  one = one || dummyInsets;
  two = two || dummyInsets;
  return one !== two && (one.top !== two.top || one.left !== two.left || one.right !== two.right || one.bottom !== two.bottom);
};

module.exports = insetsDiffer;
}, 174, null, "insetsDiffer");
__d(/* pointsDiffer */function(global, require, module, exports) {
'use strict';

var dummyPoint = { x: undefined, y: undefined };

var pointsDiffer = function pointsDiffer(one, two) {
  one = one || dummyPoint;
  two = two || dummyPoint;
  return one !== two && (one.x !== two.x || one.y !== two.y);
};

module.exports = pointsDiffer;
}, 175, null, "pointsDiffer");
__d(/* resolveAssetSource */function(global, require, module, exports) {
'use strict';

var AssetRegistry = require(177            ); // 177 = AssetRegistry
var AssetSourceResolver = require(178                  ); // 178 = AssetSourceResolver

var _require = require(57             ), // 57 = NativeModules
    SourceCode = _require.SourceCode;

var _customSourceTransformer = void 0,
    _serverURL = void 0,
    _bundleSourcePath = void 0;

function getDevServerURL() {
  if (_serverURL === undefined) {
    var scriptURL = SourceCode.scriptURL;
    var match = scriptURL && scriptURL.match(/^https?:\/\/.*?\//);
    if (match) {
      _serverURL = match[0];
    } else {
      _serverURL = null;
    }
  }
  return _serverURL;
}

function getBundleSourcePath() {
  if (_bundleSourcePath === undefined) {
    var scriptURL = SourceCode.scriptURL;
    if (!scriptURL) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('assets://')) {
      _bundleSourcePath = null;
      return _bundleSourcePath;
    }
    if (scriptURL.startsWith('file://')) {
      _bundleSourcePath = scriptURL.substring(7, scriptURL.lastIndexOf('/') + 1);
    } else {
      _bundleSourcePath = scriptURL.substring(0, scriptURL.lastIndexOf('/') + 1);
    }
  }

  return _bundleSourcePath;
}

function setCustomSourceTransformer(transformer) {
  _customSourceTransformer = transformer;
}

function resolveAssetSource(source) {
  if (typeof source === 'object') {
    return source;
  }

  var asset = AssetRegistry.getAssetByID(source);
  if (!asset) {
    return null;
  }

  var resolver = new AssetSourceResolver(getDevServerURL(), getBundleSourcePath(), asset);
  if (_customSourceTransformer) {
    return _customSourceTransformer(resolver);
  }
  return resolver.defaultAsset();
}

module.exports = resolveAssetSource;
module.exports.pickScale = AssetSourceResolver.pickScale;
module.exports.setCustomSourceTransformer = setCustomSourceTransformer;
}, 176, null, "resolveAssetSource");
__d(/* AssetRegistry */function(global, require, module, exports) {
'use strict';

var assets = [];

function registerAsset(asset) {
  return assets.push(asset);
}

function getAssetByID(assetId) {
  return assets[assetId - 1];
}

module.exports = { registerAsset: registerAsset, getAssetByID: getAssetByID };
}, 177, null, "AssetRegistry");
__d(/* AssetSourceResolver */function(global, require, module, exports) {
'use strict';

var PixelRatio = require(105         ); // 105 = PixelRatio
var Platform = require(56        ); // 56 = Platform

var assetPathUtils = require(179                                    ); // 179 = ../../local-cli/bundle/assetPathUtils
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function getScaledAssetPath(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var scaleSuffix = scale === 1 ? '' : '@' + scale + 'x';
  var assetDir = assetPathUtils.getBasePath(asset);
  return assetDir + '/' + asset.name + scaleSuffix + '.' + asset.type;
}

function getAssetPathInDrawableFolder(asset) {
  var scale = AssetSourceResolver.pickScale(asset.scales, PixelRatio.get());
  var drawbleFolder = assetPathUtils.getAndroidDrawableFolderName(asset, scale);
  var fileName = assetPathUtils.getAndroidResourceIdentifier(asset);
  return drawbleFolder + '/' + fileName + '.' + asset.type;
}

var AssetSourceResolver = function () {
  function AssetSourceResolver(serverUrl, bundlePath, asset) {
    babelHelpers.classCallCheck(this, AssetSourceResolver);

    this.serverUrl = serverUrl;
    this.bundlePath = bundlePath;
    this.asset = asset;
  }

  babelHelpers.createClass(AssetSourceResolver, [{
    key: 'isLoadedFromServer',
    value: function isLoadedFromServer() {
      return !!this.serverUrl;
    }
  }, {
    key: 'isLoadedFromFileSystem',
    value: function isLoadedFromFileSystem() {
      return !!this.bundlePath;
    }
  }, {
    key: 'defaultAsset',
    value: function defaultAsset() {
      if (this.isLoadedFromServer()) {
        return this.assetServerURL();
      }

      if (Platform.OS === 'android') {
        return this.isLoadedFromFileSystem() ? this.drawableFolderInBundle() : this.resourceIdentifierWithoutScale();
      } else {
        return this.scaledAssetPathInBundle();
      }
    }
  }, {
    key: 'assetServerURL',
    value: function assetServerURL() {
      invariant(!!this.serverUrl, 'need server to load from');
      return this.fromSource(this.serverUrl + getScaledAssetPath(this.asset) + '?platform=' + Platform.OS + '&hash=' + this.asset.hash);
    }
  }, {
    key: 'scaledAssetPath',
    value: function scaledAssetPath() {
      return this.fromSource(getScaledAssetPath(this.asset));
    }
  }, {
    key: 'scaledAssetPathInBundle',
    value: function scaledAssetPathInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource(path + getScaledAssetPath(this.asset));
    }
  }, {
    key: 'resourceIdentifierWithoutScale',
    value: function resourceIdentifierWithoutScale() {
      invariant(Platform.OS === 'android', 'resource identifiers work on Android');
      return this.fromSource(assetPathUtils.getAndroidResourceIdentifier(this.asset));
    }
  }, {
    key: 'drawableFolderInBundle',
    value: function drawableFolderInBundle() {
      var path = this.bundlePath || '';
      return this.fromSource('file://' + path + getAssetPathInDrawableFolder(this.asset));
    }
  }, {
    key: 'fromSource',
    value: function fromSource(source) {
      return {
        __packager_asset: true,
        width: this.asset.width,
        height: this.asset.height,
        uri: source,
        scale: AssetSourceResolver.pickScale(this.asset.scales, PixelRatio.get())
      };
    }
  }], [{
    key: 'pickScale',
    value: function pickScale(scales, deviceScale) {
      for (var i = 0; i < scales.length; i++) {
        if (scales[i] >= deviceScale) {
          return scales[i];
        }
      }

      return scales[scales.length - 1] || 1;
    }
  }]);
  return AssetSourceResolver;
}();

module.exports = AssetSourceResolver;
}, 178, null, "AssetSourceResolver");
__d(/* react-native/local-cli/bundle/assetPathUtils.js */function(global, require, module, exports) {
'use strict';

function getAndroidAssetSuffix(scale) {
  switch (scale) {
    case 0.75:
      return 'ldpi';
    case 1:
      return 'mdpi';
    case 1.5:
      return 'hdpi';
    case 2:
      return 'xhdpi';
    case 3:
      return 'xxhdpi';
    case 4:
      return 'xxxhdpi';
  }
}

function getAndroidDrawableFolderName(asset, scale) {
  var suffix = getAndroidAssetSuffix(scale);
  if (!suffix) {
    throw new Error('Don\'t know which android drawable suffix to use for asset: ' + JSON.stringify(asset));
  }
  var androidFolder = 'drawable-' + suffix;
  return androidFolder;
}

function getAndroidResourceIdentifier(asset) {
  var folderPath = getBasePath(asset);
  return (folderPath + '/' + asset.name).toLowerCase().replace(/\//g, '_').replace(/([^a-z0-9_])/g, '').replace(/^assets_/, '');
}

function getBasePath(asset) {
  var basePath = asset.httpServerLocation;
  if (basePath[0] === '/') {
    basePath = basePath.substr(1);
  }
  return basePath;
}

module.exports = {
  getAndroidAssetSuffix: getAndroidAssetSuffix,
  getAndroidDrawableFolderName: getAndroidDrawableFolderName,
  getAndroidResourceIdentifier: getAndroidResourceIdentifier,
  getBasePath: getBasePath
};
}, 179, null, "react-native/local-cli/bundle/assetPathUtils.js");
__d(/* verifyPropTypes */function(global, require, module, exports) {
'use strict';

var ReactNativeStyleAttributes = require(107                         ); // 107 = ReactNativeStyleAttributes

function verifyPropTypes(componentInterface, viewConfig, nativePropsToIgnore) {
  if (!viewConfig) {
    return;
  }
  var componentName = componentInterface.displayName || componentInterface.name || 'unknown';

  if (!componentInterface.propTypes) {
    throw new Error('`' + componentName + '` has no propTypes defined`');
  }

  var nativeProps = viewConfig.NativeProps;
  for (var prop in nativeProps) {
    if (!componentInterface.propTypes[prop] && !ReactNativeStyleAttributes[prop] && (!nativePropsToIgnore || !nativePropsToIgnore[prop])) {
      var message;
      if (componentInterface.propTypes.hasOwnProperty(prop)) {
        message = '`' + componentName + '` has incorrectly defined propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop];
      } else {
        message = '`' + componentName + '` has no propType for native prop `' + viewConfig.uiViewClassName + '.' + prop + '` of native type `' + nativeProps[prop] + '`';
      }
      message += '\nIf you haven\'t changed this prop yourself, this usually means that ' + 'your versions of the native code and JavaScript code are out of sync. Updating both ' + 'should make this error go away.';
      throw new Error(message);
    }
  }
}

module.exports = verifyPropTypes;
}, 180, null, "verifyPropTypes");
__d(/* ReactNativeART */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/ART/ReactNativeART.js';
var Color = require(182             ); // 182 = art/core/color
var Path = require(183                  ); // 183 = ARTSerializablePath
var Transform = require(186                 ); // 186 = art/core/transform

var React = require(103    ); // 103 = React
var ReactNativeViewAttributes = require(130                        ); // 130 = ReactNativeViewAttributes

var createReactNativeComponentClass = require(135                              ); // 135 = createReactNativeComponentClass
var merge = require(127    ); // 127 = merge
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function arrayDiffer(a, b) {
  if (a == null || b == null) {
    return true;
  }
  if (a.length !== b.length) {
    return true;
  }
  for (var i = 0; i < a.length; i++) {
    if (a[i] !== b[i]) {
      return true;
    }
  }
  return false;
}

function fontAndLinesDiffer(a, b) {
  if (a === b) {
    return false;
  }
  if (a.font !== b.font) {
    if (a.font === null) {
      return true;
    }
    if (b.font === null) {
      return true;
    }

    if (a.font.fontFamily !== b.font.fontFamily || a.font.fontSize !== b.font.fontSize || a.font.fontWeight !== b.font.fontWeight || a.font.fontStyle !== b.font.fontStyle) {
      return true;
    }
  }
  return arrayDiffer(a.lines, b.lines);
}

var SurfaceViewAttributes = merge(ReactNativeViewAttributes.UIView, {});

var NodeAttributes = {
  transform: { diff: arrayDiffer },
  opacity: true
};

var GroupAttributes = merge(NodeAttributes, {
  clipping: { diff: arrayDiffer }
});

var RenderableAttributes = merge(NodeAttributes, {
  fill: { diff: arrayDiffer },
  stroke: { diff: arrayDiffer },
  strokeWidth: true,
  strokeCap: true,
  strokeJoin: true,
  strokeDash: { diff: arrayDiffer }
});

var ShapeAttributes = merge(RenderableAttributes, {
  d: { diff: arrayDiffer }
});

var TextAttributes = merge(RenderableAttributes, {
  alignment: true,
  frame: { diff: fontAndLinesDiffer },
  path: { diff: arrayDiffer }
});

var NativeSurfaceView = createReactNativeComponentClass({
  validAttributes: SurfaceViewAttributes,
  uiViewClassName: 'ARTSurfaceView'
});

var NativeGroup = createReactNativeComponentClass({
  validAttributes: GroupAttributes,
  uiViewClassName: 'ARTGroup'
});

var NativeShape = createReactNativeComponentClass({
  validAttributes: ShapeAttributes,
  uiViewClassName: 'ARTShape'
});

var NativeText = createReactNativeComponentClass({
  validAttributes: TextAttributes,
  uiViewClassName: 'ARTText'
});

function childrenAsString(children) {
  if (!children) {
    return '';
  }
  if (typeof children === 'string') {
    return children;
  }
  if (children.length) {
    return children.join('\n');
  }
  return '';
}

var Surface = function (_React$Component) {
  babelHelpers.inherits(Surface, _React$Component);

  function Surface() {
    babelHelpers.classCallCheck(this, Surface);
    return babelHelpers.possibleConstructorReturn(this, (Surface.__proto__ || Object.getPrototypeOf(Surface)).apply(this, arguments));
  }

  babelHelpers.createClass(Surface, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return { isInSurface: true };
    }
  }, {
    key: 'render',
    value: function render() {
      var props = this.props;
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      return React.createElement(
        NativeSurfaceView,
        { style: [props.style, { width: w, height: h }], __source: {
            fileName: _jsxFileName,
            lineNumber: 154
          }
        },
        this.props.children
      );
    }
  }]);
  return Surface;
}(React.Component);

Surface.childContextTypes = {
  isInSurface: React.PropTypes.bool
};


function extractNumber(value, defaultValue) {
  if (value == null) {
    return defaultValue;
  }
  return +value;
}

var pooledTransform = new Transform();

function extractTransform(props) {
  var scaleX = props.scaleX != null ? props.scaleX : props.scale != null ? props.scale : 1;
  var scaleY = props.scaleY != null ? props.scaleY : props.scale != null ? props.scale : 1;

  pooledTransform.transformTo(1, 0, 0, 1, 0, 0).move(props.x || 0, props.y || 0).rotate(props.rotation || 0, props.originX, props.originY).scale(scaleX, scaleY, props.originX, props.originY);

  if (props.transform != null) {
    pooledTransform.transform(props.transform);
  }

  return [pooledTransform.xx, pooledTransform.yx, pooledTransform.xy, pooledTransform.yy, pooledTransform.x, pooledTransform.y];
}

function extractOpacity(props) {
  if (props.visible === false) {
    return 0;
  }
  if (props.opacity == null) {
    return 1;
  }
  return +props.opacity;
}

var Group = function (_React$Component2) {
  babelHelpers.inherits(Group, _React$Component2);

  function Group() {
    babelHelpers.classCallCheck(this, Group);
    return babelHelpers.possibleConstructorReturn(this, (Group.__proto__ || Object.getPrototypeOf(Group)).apply(this, arguments));
  }

  babelHelpers.createClass(Group, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      invariant(this.context.isInSurface, 'ART: <Group /> must be a child of a <Surface />');
      return React.createElement(
        NativeGroup,
        {
          opacity: extractOpacity(props),
          transform: extractTransform(props), __source: {
            fileName: _jsxFileName,
            lineNumber: 226
          }
        },
        this.props.children
      );
    }
  }]);
  return Group;
}(React.Component);

Group.contextTypes = {
  isInSurface: React.PropTypes.bool.isRequired
};

var ClippingRectangle = function (_React$Component3) {
  babelHelpers.inherits(ClippingRectangle, _React$Component3);

  function ClippingRectangle() {
    babelHelpers.classCallCheck(this, ClippingRectangle);
    return babelHelpers.possibleConstructorReturn(this, (ClippingRectangle.__proto__ || Object.getPrototypeOf(ClippingRectangle)).apply(this, arguments));
  }

  babelHelpers.createClass(ClippingRectangle, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var x = extractNumber(props.x, 0);
      var y = extractNumber(props.y, 0);
      var w = extractNumber(props.width, 0);
      var h = extractNumber(props.height, 0);
      var clipping = [x, y, w, h];

      var propsExcludingXAndY = merge(props);
      delete propsExcludingXAndY.x;
      delete propsExcludingXAndY.y;
      return React.createElement(
        NativeGroup,
        {
          clipping: clipping,
          opacity: extractOpacity(props),
          transform: extractTransform(propsExcludingXAndY), __source: {
            fileName: _jsxFileName,
            lineNumber: 248
          }
        },
        this.props.children
      );
    }
  }]);
  return ClippingRectangle;
}(React.Component);

var SOLID_COLOR = 0;
var LINEAR_GRADIENT = 1;
var RADIAL_GRADIENT = 2;
var PATTERN = 3;

function insertColorIntoArray(color, targetArray, atIndex) {
  var c = new Color(color);
  targetArray[atIndex + 0] = c.red / 255;
  targetArray[atIndex + 1] = c.green / 255;
  targetArray[atIndex + 2] = c.blue / 255;
  targetArray[atIndex + 3] = c.alpha;
}

function insertColorsIntoArray(stops, targetArray, atIndex) {
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      insertColorIntoArray(stops[i], targetArray, atIndex + i * 4);
      i++;
    }
  } else {
    for (var offset in stops) {
      insertColorIntoArray(stops[offset], targetArray, atIndex + i * 4);
      i++;
    }
  }
  return atIndex + i * 4;
}

function insertOffsetsIntoArray(stops, targetArray, atIndex, multi, reverse) {
  var offsetNumber;
  var i = 0;
  if ('length' in stops) {
    while (i < stops.length) {
      offsetNumber = i / (stops.length - 1) * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  } else {
    for (var offsetString in stops) {
      offsetNumber = +offsetString * multi;
      targetArray[atIndex + i] = reverse ? 1 - offsetNumber : offsetNumber;
      i++;
    }
  }
  return atIndex + i;
}

function insertColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 1, false);
}

function insertDoubleColorStopsIntoArray(stops, targetArray, atIndex) {
  var lastIndex = insertColorsIntoArray(stops, targetArray, atIndex);
  lastIndex = insertColorsIntoArray(stops, targetArray, lastIndex);
  lastIndex = insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, false);
  insertOffsetsIntoArray(stops, targetArray, lastIndex, 0.5, true);
}

function applyBoundingBoxToBrushData(brushData, props) {
  var type = brushData[0];
  var width = +props.width;
  var height = +props.height;
  if (type === LINEAR_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
  } else if (type === RADIAL_GRADIENT) {
    brushData[1] *= width;
    brushData[2] *= height;
    brushData[3] *= width;
    brushData[4] *= height;
    brushData[5] *= width;
    brushData[6] *= height;
  } else if (type === PATTERN) {}
}

function extractBrush(colorOrBrush, props) {
  if (colorOrBrush == null) {
    return null;
  }
  if (colorOrBrush._brush) {
    if (colorOrBrush._bb) {
      applyBoundingBoxToBrushData(colorOrBrush._brush, props);
      colorOrBrush._bb = false;
    }
    return colorOrBrush._brush;
  }
  var c = new Color(colorOrBrush);
  return [SOLID_COLOR, c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractColor(color) {
  if (color == null) {
    return null;
  }
  var c = new Color(color);
  return [c.red / 255, c.green / 255, c.blue / 255, c.alpha];
}

function extractStrokeCap(strokeCap) {
  switch (strokeCap) {
    case 'butt':
      return 0;
    case 'square':
      return 2;
    default:
      return 1;}
}

function extractStrokeJoin(strokeJoin) {
  switch (strokeJoin) {
    case 'miter':
      return 0;
    case 'bevel':
      return 2;
    default:
      return 1;}
}

var Shape = function (_React$Component4) {
  babelHelpers.inherits(Shape, _React$Component4);

  function Shape() {
    babelHelpers.classCallCheck(this, Shape);
    return babelHelpers.possibleConstructorReturn(this, (Shape.__proto__ || Object.getPrototypeOf(Shape)).apply(this, arguments));
  }

  babelHelpers.createClass(Shape, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var path = props.d || childrenAsString(props.children);
      var d = new Path(path).toJSON();
      return React.createElement(NativeShape, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        d: d,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 396
        }
      });
    }
  }]);
  return Shape;
}(React.Component);

var cachedFontObjectsFromString = {};

var fontFamilyPrefix = /^[\s"']*/;
var fontFamilySuffix = /[\s"']*$/;

function extractSingleFontFamily(fontFamilyString) {
  return fontFamilyString.split(',')[0].replace(fontFamilyPrefix, '').replace(fontFamilySuffix, '');
}

function parseFontString(font) {
  if (cachedFontObjectsFromString.hasOwnProperty(font)) {
    return cachedFontObjectsFromString[font];
  }
  var regexp = /^\s*((?:(?:normal|bold|italic)\s+)*)(?:(\d+(?:\.\d+)?)[ptexm\%]*(?:\s*\/.*?)?\s+)?\s*\"?([^\"]*)/i;
  var match = regexp.exec(font);
  if (!match) {
    return null;
  }
  var fontFamily = extractSingleFontFamily(match[3]);
  var fontSize = +match[2] || 12;
  var isBold = /bold/.exec(match[1]);
  var isItalic = /italic/.exec(match[1]);
  cachedFontObjectsFromString[font] = {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: isBold ? 'bold' : 'normal',
    fontStyle: isItalic ? 'italic' : 'normal'
  };
  return cachedFontObjectsFromString[font];
}

function extractFont(font) {
  if (font == null) {
    return null;
  }
  if (typeof font === 'string') {
    return parseFontString(font);
  }
  var fontFamily = extractSingleFontFamily(font.fontFamily);
  var fontSize = +font.fontSize || 12;
  return {
    fontFamily: fontFamily,
    fontSize: fontSize,
    fontWeight: font.fontWeight,
    fontStyle: font.fontStyle
  };
}

var newLine = /\n/g;
function extractFontAndLines(font, text) {
  return { font: extractFont(font), lines: text.split(newLine) };
}

function extractAlignment(alignment) {
  switch (alignment) {
    case 'right':
      return 1;
    case 'center':
      return 2;
    default:
      return 0;
  }
}

var Text = function (_React$Component5) {
  babelHelpers.inherits(Text, _React$Component5);

  function Text() {
    babelHelpers.classCallCheck(this, Text);
    return babelHelpers.possibleConstructorReturn(this, (Text.__proto__ || Object.getPrototypeOf(Text)).apply(this, arguments));
  }

  babelHelpers.createClass(Text, [{
    key: 'render',
    value: function render() {
      var props = this.props;
      var textPath = props.path ? new Path(props.path).toJSON() : null;
      var textFrame = extractFontAndLines(props.font, childrenAsString(props.children));
      return React.createElement(NativeText, {
        fill: extractBrush(props.fill, props),
        opacity: extractOpacity(props),
        stroke: extractColor(props.stroke),
        strokeCap: extractStrokeCap(props.strokeCap),
        strokeDash: props.strokeDash || null,
        strokeJoin: extractStrokeJoin(props.strokeJoin),
        strokeWidth: extractNumber(props.strokeWidth, 1),
        transform: extractTransform(props),

        alignment: extractAlignment(props.alignment),
        frame: textFrame,
        path: textPath,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 493
        }
      });
    }
  }]);
  return Text;
}(React.Component);

function LinearGradient(stops, x1, y1, x2, y2) {
  var type = LINEAR_GRADIENT;

  if (arguments.length < 5) {
    var angle = (x1 == null ? 270 : x1) * Math.PI / 180;

    var x = Math.cos(angle);
    var y = -Math.sin(angle);
    var l = (Math.abs(x) + Math.abs(y)) / 2;

    x *= l;y *= l;

    x1 = 0.5 - x;
    x2 = 0.5 + x;
    y1 = 0.5 - y;
    y2 = 0.5 + y;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [type, +x1, +y1, +x2, +y2];
  insertColorStopsIntoArray(stops, brushData, 5);
  this._brush = brushData;
}

function RadialGradient(stops, fx, fy, rx, ry, cx, cy) {
  if (ry == null) {
    ry = rx;
  }
  if (cx == null) {
    cx = fx;
  }
  if (cy == null) {
    cy = fy;
  }
  if (fx == null) {
    fx = fy = rx = ry = cx = cy = 0.5;
    this._bb = true;
  } else {
    this._bb = false;
  }

  var brushData = [RADIAL_GRADIENT, +fx, +fy, +rx * 2, +ry * 2, +cx, +cy];
  insertDoubleColorStopsIntoArray(stops, brushData, 7);
  this._brush = brushData;
}

function Pattern(url, width, height, left, top) {
  this._brush = [PATTERN, url, +left || 0, +top || 0, +width, +height];
}

var ReactART = {
  LinearGradient: LinearGradient,
  RadialGradient: RadialGradient,
  Pattern: Pattern,
  Transform: Transform,
  Path: Path,
  Surface: Surface,
  Group: Group,
  ClippingRectangle: ClippingRectangle,
  Shape: Shape,
  Text: Text
};

module.exports = ReactART;
}, 181, null, "ReactNativeART");
__d(/* art/core/color.js */function(global, require, module, exports) {var colors = {
	maroon: '#800000', red: '#ff0000', orange: '#ffA500', yellow: '#ffff00', olive: '#808000',
	purple: '#800080', fuchsia: "#ff00ff", white: '#ffffff', lime: '#00ff00', green: '#008000',
	navy: '#000080', blue: '#0000ff', aqua: '#00ffff', teal: '#008080',
	black: '#000000', silver: '#c0c0c0', gray: '#808080'
};

var map = function map(array, fn) {
	var results = [];
	for (var i = 0, l = array.length; i < l; i++) {
		results[i] = fn(array[i], i);
	}return results;
};

var Color = function Color(color, type) {

	if (color.isColor) {

		this.red = color.red;
		this.green = color.green;
		this.blue = color.blue;
		this.alpha = color.alpha;
	} else {

		var namedColor = colors[color];
		if (namedColor) {
			color = namedColor;
			type = 'hex';
		}

		switch (typeof color) {
			case 'string':
				if (!type) type = (type = color.match(/^rgb|^hsb|^hsl/)) ? type[0] : 'hex';break;
			case 'object':
				type = type || 'rgb';color = color.toString();break;
			case 'number':
				type = 'hex';color = color.toString(16);break;
		}

		color = Color['parse' + type.toUpperCase()](color);
		this.red = color[0];
		this.green = color[1];
		this.blue = color[2];
		this.alpha = color[3];
	}

	this.isColor = true;
};

var limit = function limit(number, min, max) {
	return Math.min(max, Math.max(min, number));
};

var listMatch = /([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,\s*([-.\d]+\%?)\s*,?\s*([-.\d]*\%?)/;
var hexMatch = /^#?([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{1,2})([a-f0-9]{0,2})$/i;

Color.parseRGB = function (color) {
	return map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit) * (bit[bit.length - 1] == '%' ? 2.55 : 1);
		return i < 3 ? Math.round((bit %= 256) < 0 ? bit + 256 : bit) : limit(bit === '' ? 1 : Number(bit), 0, 1);
	});
};

Color.parseHEX = function (color) {
	if (color.length == 1) color = color + color + color;
	return map(color.match(hexMatch).slice(1), function (bit, i) {
		if (i == 3) return bit ? parseInt(bit, 16) / 255 : 1;
		return parseInt(bit.length == 1 ? bit + bit : bit, 16);
	});
};

Color.parseHSB = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var a = hsb[3];
	var br = Math.round(hsb[2] / 100 * 255);
	if (hsb[1] == 0) return [br, br, br, a];

	var hue = hsb[0];
	var f = hue % 60;
	var p = Math.round(hsb[2] * (100 - hsb[1]) / 10000 * 255);
	var q = Math.round(hsb[2] * (6000 - hsb[1] * f) / 600000 * 255);
	var t = Math.round(hsb[2] * (6000 - hsb[1] * (60 - f)) / 600000 * 255);

	switch (Math.floor(hue / 60)) {
		case 0:
			return [br, t, p, a];
		case 1:
			return [q, br, p, a];
		case 2:
			return [p, br, t, a];
		case 3:
			return [p, q, br, a];
		case 4:
			return [t, p, br, a];
		default:
			return [br, p, q, a];
	}
};

Color.parseHSL = function (color) {
	var hsb = map(color.match(listMatch).slice(1), function (bit, i) {
		if (bit) bit = parseFloat(bit);
		if (i === 0) return Math.round((bit %= 360) < 0 ? bit + 360 : bit);else if (i < 3) return limit(Math.round(bit), 0, 100);else return limit(bit === '' ? 1 : Number(bit), 0, 1);
	});

	var h = hsb[0] / 60;
	var s = hsb[1] / 100;
	var l = hsb[2] / 100;
	var a = hsb[3];

	var c = (1 - Math.abs(2 * l - 1)) * s;
	var x = c * (1 - Math.abs(h % 2 - 1));
	var m = l - c / 2;

	var p = Math.round((c + m) * 255);
	var q = Math.round((x + m) * 255);
	var t = Math.round(m * 255);

	switch (Math.floor(h)) {
		case 0:
			return [p, q, t, a];
		case 1:
			return [q, p, t, a];
		case 2:
			return [t, p, q, a];
		case 3:
			return [t, q, p, a];
		case 4:
			return [q, t, p, a];
		default:
			return [p, t, q, a];
	}
};

var toString = function toString(type, array) {
	if (array[3] != 1) type += 'a';else array.pop();
	return type + '(' + array.join(', ') + ')';
};

Color.prototype = {

	toHSB: function toHSB(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / max : 0,
		    brightness = max / 255;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsb = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(brightness * 100), alpha];

		return array ? hsb : toString('hsb', hsb);
	},

	toHSL: function toHSL(array) {
		var red = this.red,
		    green = this.green,
		    blue = this.blue,
		    alpha = this.alpha;

		var max = Math.max(red, green, blue),
		    min = Math.min(red, green, blue),
		    delta = max - min;
		var hue = 0,
		    saturation = delta != 0 ? delta / (255 - Math.abs(max + min - 255)) : 0,
		    lightness = (max + min) / 512;
		if (saturation) {
			var rr = (max - red) / delta,
			    gr = (max - green) / delta,
			    br = (max - blue) / delta;
			hue = red == max ? br - gr : green == max ? 2 + rr - br : 4 + gr - rr;
			if ((hue /= 6) < 0) hue++;
		}

		var hsl = [Math.round(hue * 360), Math.round(saturation * 100), Math.round(lightness * 100), alpha];

		return array ? hsl : toString('hsl', hsl);
	},

	toHEX: function toHEX(array) {

		var a = this.alpha;
		var alpha = (a = Math.round(a * 255).toString(16)).length == 1 ? a + a : a;

		var hex = map([this.red, this.green, this.blue], function (bit) {
			bit = bit.toString(16);
			return bit.length == 1 ? '0' + bit : bit;
		});

		return array ? hex.concat(alpha) : '#' + hex.join('') + (alpha == 'ff' ? '' : alpha);
	},

	toRGB: function toRGB(array) {
		var rgb = [this.red, this.green, this.blue, this.alpha];
		return array ? rgb : toString('rgb', rgb);
	}

};

Color.prototype.toString = Color.prototype.toRGB;

Color.hex = function (hex) {
	return new Color(hex, 'hex');
};

if (this.hex == null) this.hex = Color.hex;

Color.hsb = function (h, s, b, a) {
	return new Color([h || 0, s || 0, b || 0, a == null ? 1 : a], 'hsb');
};

if (this.hsb == null) this.hsb = Color.hsb;

Color.hsl = function (h, s, l, a) {
	return new Color([h || 0, s || 0, l || 0, a == null ? 1 : a], 'hsl');
};

if (this.hsl == null) this.hsl = Color.hsl;

Color.rgb = function (r, g, b, a) {
	return new Color([r || 0, g || 0, b || 0, a == null ? 1 : a], 'rgb');
};

if (this.rgb == null) this.rgb = Color.rgb;

Color.detach = function (color) {
	color = new Color(color);
	return [Color.rgb(color.red, color.green, color.blue).toString(), color.alpha];
};

module.exports = Color;
}, 182, null, "art/core/color.js");
__d(/* ARTSerializablePath */function(global, require, module, exports) {
'use strict';

var Class = require(184                ); // 184 = art/core/class.js
var Path = require(185               ); // 185 = art/core/path.js

var MOVE_TO = 0;
var CLOSE = 1;
var LINE_TO = 2;
var CURVE_TO = 3;
var ARC = 4;

var SerializablePath = Class(Path, {

  initialize: function initialize(path) {
    this.reset();
    if (path instanceof SerializablePath) {
      this.path = path.path.slice(0);
    } else if (path) {
      if (path.applyToPath) {
        path.applyToPath(this);
      } else {
        this.push(path);
      }
    }
  },

  onReset: function onReset() {
    this.path = [];
  },

  onMove: function onMove(sx, sy, x, y) {
    this.path.push(MOVE_TO, x, y);
  },

  onLine: function onLine(sx, sy, x, y) {
    this.path.push(LINE_TO, x, y);
  },

  onBezierCurve: function onBezierCurve(sx, sy, p1x, p1y, p2x, p2y, x, y) {
    this.path.push(CURVE_TO, p1x, p1y, p2x, p2y, x, y);
  },

  _arcToBezier: Path.prototype.onArc,

  onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
    if (rx !== ry || rotation) {
      return this._arcToBezier(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation);
    }
    this.path.push(ARC, cx, cy, rx, sa, ea, ccw ? 0 : 1);
  },

  onClose: function onClose() {
    this.path.push(CLOSE);
  },

  toJSON: function toJSON() {
    return this.path;
  }

});

module.exports = SerializablePath;
}, 183, null, "ARTSerializablePath");
__d(/* art/core/class.js */function(global, require, module, exports) {module.exports = function (mixins) {
	var proto = {};
	for (var i = 0, l = arguments.length; i < l; i++) {
		var mixin = arguments[i];
		if (typeof mixin == 'function') mixin = mixin.prototype;
		for (var key in mixin) {
			proto[key] = mixin[key];
		}
	}
	if (!proto.initialize) proto.initialize = function () {};
	proto.constructor = function (a, b, c, d, e, f, g, h) {
		return new proto.initialize(a, b, c, d, e, f, g, h);
	};
	proto.constructor.prototype = proto.initialize.prototype = proto;
	return proto.constructor;
};
}, 184, null, "art/core/class.js");
__d(/* art/core/path.js */function(global, require, module, exports) {var Class = require(184      ); // 184 = ./class

module.exports = Class({

	initialize: function initialize(path) {
		this.reset().push(path);
	},

	push: function push() {
		var p = Array.prototype.join.call(arguments, ' ').match(/[a-df-z]|[\-+]?(?:[\d\.]e[\-+]?|[^\s\-+,a-z])+/ig);
		if (!p) return this;

		var last,
		    cmd = p[0],
		    i = 1;
		while (cmd) {
			switch (cmd) {
				case 'm':
					this.move(p[i++], p[i++]);break;
				case 'l':
					this.line(p[i++], p[i++]);break;
				case 'c':
					this.curve(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 's':
					this.curve(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'q':
					this.curve(p[i++], p[i++], p[i++], p[i++]);break;
				case 't':
					this.curve(p[i++], p[i++]);break;
				case 'a':
					this.arc(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'h':
					this.line(p[i++], 0);break;
				case 'v':
					this.line(0, p[i++]);break;

				case 'M':
					this.moveTo(p[i++], p[i++]);break;
				case 'L':
					this.lineTo(p[i++], p[i++]);break;
				case 'C':
					this.curveTo(p[i++], p[i++], p[i++], p[i++], p[i++], p[i++]);break;
				case 'S':
					this.curveTo(p[i++], p[i++], null, null, p[i++], p[i++]);break;
				case 'Q':
					this.curveTo(p[i++], p[i++], p[i++], p[i++]);break;
				case 'T':
					this.curveTo(p[i++], p[i++]);break;
				case 'A':
					this.arcTo(p[i + 5], p[i + 6], p[i], p[i + 1], p[i + 3], !+p[i + 4], p[i + 2]);i += 7;break;
				case 'H':
					this.lineTo(p[i++], this.penY);break;
				case 'V':
					this.lineTo(this.penX, p[i++]);break;

				case 'Z':case 'z':
					this.close();break;
				default:
					cmd = last;i--;continue;
			}

			last = cmd;
			if (last == 'm') last = 'l';else if (last == 'M') last = 'L';
			cmd = p[i++];
		}
		return this;
	},

	reset: function reset() {
		this.penX = this.penY = 0;
		this.penDownX = this.penDownY = null;
		this._pivotX = this._pivotY = 0;
		this.onReset();
		return this;
	},

	move: function move(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX += +x, this._pivotY = this.penY += +y);
		return this;
	},
	moveTo: function moveTo(x, y) {
		this.onMove(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	line: function line(x, y) {
		return this.lineTo(this.penX + +x, this.penY + +y);
	},
	lineTo: function lineTo(x, y) {
		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onLine(this.penX, this.penY, this._pivotX = this.penX = +x, this._pivotY = this.penY = +y);
		return this;
	},

	curve: function curve(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		return this.curveTo(x + +c1x, y + +c1y, c2x == null ? null : x + +c2x, c2y == null ? null : y + +c2y, ex == null ? null : x + +ex, ey == null ? null : y + +ey);
	},
	curveTo: function curveTo(c1x, c1y, c2x, c2y, ex, ey) {
		var x = this.penX,
		    y = this.penY;
		if (c2x == null) {
			c2x = +c1x;c2y = +c1y;
			c1x = x * 2 - (this._pivotX || 0);c1y = y * 2 - (this._pivotY || 0);
		}
		if (ex == null) {
			this._pivotX = +c1x;this._pivotY = +c1y;
			ex = +c2x;ey = +c2y;
			c2x = (ex + +c1x * 2) / 3;c2y = (ey + +c1y * 2) / 3;
			c1x = (x + +c1x * 2) / 3;c1y = (y + +c1y * 2) / 3;
		} else {
			this._pivotX = +c2x;this._pivotY = +c2y;
		}
		if (this.penDownX == null) {
			this.penDownX = x;this.penDownY = y;
		}
		this.onBezierCurve(x, y, +c1x, +c1y, +c2x, +c2y, this.penX = +ex, this.penY = +ey);
		return this;
	},

	arc: function arc(x, y, rx, ry, outer, counterClockwise, rotation) {
		return this.arcTo(this.penX + +x, this.penY + +y, rx, ry, outer, counterClockwise, rotation);
	},
	arcTo: function arcTo(x, y, rx, ry, outer, counterClockwise, rotation) {
		ry = Math.abs(+ry || +rx || +y - this.penY);
		rx = Math.abs(+rx || +x - this.penX);

		if (!rx || !ry || x == this.penX && y == this.penY) return this.lineTo(x, y);

		var tX = this.penX,
		    tY = this.penY,
		    clockwise = !+counterClockwise,
		    large = !!+outer;

		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad);
		x -= tX;y -= tY;

		var cx = cos * x / 2 + sin * y / 2,
		    cy = -sin * x / 2 + cos * y / 2,
		    rxry = rx * rx * ry * ry,
		    rycx = ry * ry * cx * cx,
		    rxcy = rx * rx * cy * cy,
		    a = rxry - rxcy - rycx;

		if (a < 0) {
			a = Math.sqrt(1 - a / rxry);
			rx *= a;ry *= a;
			cx = x / 2;cy = y / 2;
		} else {
			a = Math.sqrt(a / (rxcy + rycx));
			if (large == clockwise) a = -a;
			var cxd = -a * cy * rx / ry,
			    cyd = a * cx * ry / rx;
			cx = cos * cxd - sin * cyd + x / 2;
			cy = sin * cxd + cos * cyd + y / 2;
		}

		var xx = cos / rx,
		    yx = sin / rx,
		    xy = -sin / ry,
		    yy = cos / ry;

		var sa = Math.atan2(xy * -cx + yy * -cy, xx * -cx + yx * -cy),
		    ea = Math.atan2(xy * (x - cx) + yy * (y - cy), xx * (x - cx) + yx * (y - cy));

		cx += tX;cy += tY;
		x += tX;y += tY;

		if (this.penDownX == null) {
			this.penDownX = this.penX;this.penDownY = this.penY;
		}
		this.onArc(tX, tY, this._pivotX = this.penX = x, this._pivotY = this.penY = y, cx, cy, rx, ry, sa, ea, !clockwise, rotation);
		return this;
	},

	counterArc: function counterArc(x, y, rx, ry, outer) {
		return this.arc(x, y, rx, ry, outer, true);
	},
	counterArcTo: function counterArcTo(x, y, rx, ry, outer) {
		return this.arcTo(x, y, rx, ry, outer, true);
	},

	close: function close() {
		if (this.penDownX != null) {
			this.onClose(this.penX, this.penY, this.penX = this.penDownX, this.penY = this.penDownY);
			this.penDownX = null;
		}
		return this;
	},

	onReset: function onReset() {},

	onMove: function onMove(sx, sy, ex, ey) {},

	onLine: function onLine(sx, sy, ex, ey) {
		this.onBezierCurve(sx, sy, sx, sy, ex, ey, ex, ey);
	},

	onBezierCurve: function onBezierCurve(sx, sy, c1x, c1y, c2x, c2y, ex, ey) {
		var gx = ex - sx,
		    gy = ey - sy,
		    g = gx * gx + gy * gy,
		    v1,
		    v2,
		    cx,
		    cy,
		    u;

		cx = c1x - sx;cy = c1y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v1 = cx * cx + cy * cy;

		cx = c2x - sx;cy = c2y - sy;
		u = cx * gx + cy * gy;

		if (u > g) {
			cx -= gx;
			cy -= gy;
		} else if (u > 0 && g != 0) {
			cx -= u / g * gx;
			cy -= u / g * gy;
		}

		v2 = cx * cx + cy * cy;

		if (v1 < 0.01 && v2 < 0.01) {
			this.onLine(sx, sy, ex, ey);
			return;
		}

		if (isNaN(v1) || isNaN(v2)) {
			throw new Error('Bad input');
		}

		var s1x = (c1x + c2x) * 0.5,
		    s1y = (c1y + c2y) * 0.5,
		    l1x = (c1x + sx) * 0.5,
		    l1y = (c1y + sy) * 0.5,
		    l2x = (l1x + s1x) * 0.5,
		    l2y = (l1y + s1y) * 0.5,
		    r2x = (ex + c2x) * 0.5,
		    r2y = (ey + c2y) * 0.5,
		    r1x = (r2x + s1x) * 0.5,
		    r1y = (r2y + s1y) * 0.5,
		    l2r1x = (l2x + r1x) * 0.5,
		    l2r1y = (l2y + r1y) * 0.5;

		this.onBezierCurve(sx, sy, l1x, l1y, l2x, l2y, l2r1x, l2r1y);
		this.onBezierCurve(l2r1x, l2r1y, r1x, r1y, r2x, r2y, ex, ey);
	},

	onArc: function onArc(sx, sy, ex, ey, cx, cy, rx, ry, sa, ea, ccw, rotation) {
		var rad = rotation ? rotation * Math.PI / 180 : 0,
		    cos = Math.cos(rad),
		    sin = Math.sin(rad),
		    xx = cos * rx,
		    yx = -sin * ry,
		    xy = sin * rx,
		    yy = cos * ry;

		var arc = ea - sa;
		if (arc < 0 && !ccw) arc += Math.PI * 2;else if (arc > 0 && ccw) arc -= Math.PI * 2;

		var n = Math.ceil(Math.abs(arc / (Math.PI / 2))),
		    step = arc / n,
		    k = 4 / 3 * Math.tan(step / 4);

		var x = Math.cos(sa),
		    y = Math.sin(sa);

		for (var i = 0; i < n; i++) {
			var cp1x = x - k * y,
			    cp1y = y + k * x;

			sa += step;
			x = Math.cos(sa);y = Math.sin(sa);

			var cp2x = x + k * y,
			    cp2y = y - k * x;

			this.onBezierCurve(sx, sy, cx + xx * cp1x + yx * cp1y, cy + xy * cp1x + yy * cp1y, cx + xx * cp2x + yx * cp2y, cy + xy * cp2x + yy * cp2y, sx = cx + xx * x + yx * y, sy = cy + xy * x + yy * y);
		}
	},

	onClose: function onClose(sx, sy, ex, ey) {
		this.onLine(sx, sy, ex, ey);
	}

});
}, 185, null, "art/core/path.js");
__d(/* art/core/transform.js */function(global, require, module, exports) {var Class = require(184      ); // 184 = ./class

function Transform(xx, yx, xy, yy, x, y) {
	if (xx && typeof xx == 'object') {
		yx = xx.yx;yy = xx.yy;y = xx.y;
		xy = xx.xy;x = xx.x;xx = xx.xx;
	}
	this.xx = xx == null ? 1 : xx;
	this.yx = yx || 0;
	this.xy = xy || 0;
	this.yy = yy == null ? 1 : yy;
	this.x = (x == null ? this.x : x) || 0;
	this.y = (y == null ? this.y : y) || 0;
	this._transform();
	return this;
};

module.exports = Class({

	initialize: Transform,

	_transform: function _transform() {},

	xx: 1, yx: 0, x: 0,
	xy: 0, yy: 1, y: 0,

	transform: function transform(xx, yx, xy, yy, x, y) {
		var m = this;
		if (xx && typeof xx == 'object') {
			yx = xx.yx;yy = xx.yy;y = xx.y;
			xy = xx.xy;x = xx.x;xx = xx.xx;
		}
		if (!x) x = 0;
		if (!y) y = 0;
		return this.transformTo(m.xx * xx + m.xy * yx, m.yx * xx + m.yy * yx, m.xx * xy + m.xy * yy, m.yx * xy + m.yy * yy, m.xx * x + m.xy * y + m.x, m.yx * x + m.yy * y + m.y);
	},

	transformTo: Transform,

	translate: function translate(x, y) {
		return this.transform(1, 0, 0, 1, x, y);
	},

	move: function move(x, y) {
		this.x += x || 0;
		this.y += y || 0;
		this._transform();
		return this;
	},

	scale: function scale(x, y) {
		if (y == null) y = x;
		return this.transform(x, 0, 0, y, 0, 0);
	},

	rotate: function rotate(deg, x, y) {
		if (x == null || y == null) {
			x = (this.left || 0) + (this.width || 0) / 2;
			y = (this.top || 0) + (this.height || 0) / 2;
		}

		var rad = deg * Math.PI / 180,
		    sin = Math.sin(rad),
		    cos = Math.cos(rad);

		this.transform(1, 0, 0, 1, x, y);
		var m = this;

		return this.transformTo(cos * m.xx - sin * m.yx, sin * m.xx + cos * m.yx, cos * m.xy - sin * m.yy, sin * m.xy + cos * m.yy, m.x, m.y).transform(1, 0, 0, 1, -x, -y);
	},

	moveTo: function moveTo(x, y) {
		var m = this;
		return this.transformTo(m.xx, m.yx, m.xy, m.yy, x, y);
	},

	rotateTo: function rotateTo(deg, x, y) {
		var m = this;
		var flip = m.yx / m.xx > m.yy / m.xy ? -1 : 1;
		if (m.xx < 0 ? m.xy >= 0 : m.xy < 0) flip = -flip;
		return this.rotate(deg - Math.atan2(flip * m.yx, flip * m.xx) * 180 / Math.PI, x, y);
	},

	scaleTo: function scaleTo(x, y) {
		var m = this;

		var h = Math.sqrt(m.xx * m.xx + m.yx * m.yx);
		m.xx /= h;m.yx /= h;

		h = Math.sqrt(m.yy * m.yy + m.xy * m.xy);
		m.yy /= h;m.xy /= h;

		return this.scale(x, y);
	},

	resizeTo: function resizeTo(width, height) {
		var w = this.width,
		    h = this.height;
		if (!w || !h) return this;
		return this.scaleTo(width / w, height / h);
	},

	inversePoint: function inversePoint(x, y) {
		var a = this.xx,
		    b = this.yx,
		    c = this.xy,
		    d = this.yy,
		    e = this.x,
		    f = this.y;
		var det = b * c - a * d;
		if (det == 0) return null;
		return {
			x: (d * (e - x) + c * (y - f)) / det,
			y: (a * (f - y) + b * (x - e)) / det
		};
	},

	point: function point(x, y) {
		var m = this;
		return {
			x: m.xx * x + m.xy * y + m.x,
			y: m.yx * x + m.yy * y + m.y
		};
	}

});
}, 186, null, "art/core/transform.js");
__d(/* Button */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Button.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var TouchableNativeFeedback = require(195                      ); // 195 = TouchableNativeFeedback
var TouchableOpacity = require(255               ); // 255 = TouchableOpacity
var View = require(124   ); // 124 = View

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var Button = function (_React$Component) {
  babelHelpers.inherits(Button, _React$Component);

  function Button() {
    babelHelpers.classCallCheck(this, Button);
    return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  babelHelpers.createClass(Button, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          accessibilityLabel = _props.accessibilityLabel,
          color = _props.color,
          onPress = _props.onPress,
          title = _props.title,
          disabled = _props.disabled,
          testID = _props.testID;

      var buttonStyles = [styles.button];
      var textStyles = [styles.text];
      var Touchable = Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity;
      if (color && Platform.OS === 'ios') {
        textStyles.push({ color: color });
      } else if (color) {
        buttonStyles.push({ backgroundColor: color });
      }
      if (disabled) {
        buttonStyles.push(styles.buttonDisabled);
        textStyles.push(styles.textDisabled);
      }
      invariant(typeof title === 'string', 'The title prop of a Button must be a string');
      var formattedTitle = Platform.OS === 'android' ? title.toUpperCase() : title;
      return React.createElement(
        Touchable,
        {
          accessibilityComponentType: 'button',
          accessibilityLabel: accessibilityLabel,
          accessibilityTraits: ['button'],
          testID: testID,
          disabled: disabled,
          onPress: onPress, __source: {
            fileName: _jsxFileName,
            lineNumber: 115
          }
        },
        React.createElement(
          View,
          { style: buttonStyles, __source: {
              fileName: _jsxFileName,
              lineNumber: 122
            }
          },
          React.createElement(
            Text,
            { style: textStyles, __source: {
                fileName: _jsxFileName,
                lineNumber: 123
              }
            },
            formattedTitle
          )
        )
      );
    }
  }]);
  return Button;
}(React.Component);

Button.propTypes = {
  title: React.PropTypes.string.isRequired,

  accessibilityLabel: React.PropTypes.string,

  color: ColorPropType,

  disabled: React.PropTypes.bool,

  onPress: React.PropTypes.func.isRequired,

  testID: React.PropTypes.string
};

var defaultBlue = '#2196F3';
if (Platform.OS === 'ios') {
  defaultBlue = '#0C42FD';
}

var styles = StyleSheet.create({
  button: Platform.select({
    ios: {},
    android: {
      elevation: 4,
      backgroundColor: defaultBlue,
      borderRadius: 2
    }
  }),
  text: Platform.select({
    ios: {
      color: defaultBlue,
      textAlign: 'center',
      padding: 8,
      fontSize: 18
    },
    android: {
      textAlign: 'center',
      color: 'white',
      padding: 8,
      fontWeight: '500'
    }
  }),
  buttonDisabled: Platform.select({
    ios: {},
    android: {
      elevation: 0,
      backgroundColor: '#dfdfdf'
    }
  }),
  textDisabled: Platform.select({
    ios: {
      color: '#cdcdcd'
    },
    android: {
      color: '#a1a1a1'
    }
  })
});

module.exports = Button;
}, 187, null, "Button");
__d(/* Text */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Text/Text.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var EdgeInsetsPropType = require(125                 ); // 125 = EdgeInsetsPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var ReactNativeViewAttributes = require(130                        ); // 130 = ReactNativeViewAttributes
var StyleSheetPropType = require(131                 ); // 131 = StyleSheetPropType
var TextStylePropTypes = require(116                 ); // 116 = TextStylePropTypes
var Touchable = require(189        ); // 189 = Touchable

var processColor = require(119           ); // 119 = processColor
var createReactNativeComponentClass = require(135                              ); // 135 = createReactNativeComponentClass
var mergeFast = require(194        ); // 194 = mergeFast

var PropTypes = React.PropTypes;


var stylePropType = StyleSheetPropType(TextStylePropTypes);

var viewConfig = {
  validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
    isHighlighted: true,
    numberOfLines: true,
    ellipsizeMode: true,
    allowFontScaling: true,
    selectable: true,
    selectionColor: true,
    adjustsFontSizeToFit: true,
    minimumFontScale: true,
    textBreakStrategy: true
  }),
  uiViewClassName: 'RCTText'
};

var Text = React.createClass({
  displayName: 'Text',

  propTypes: {
    ellipsizeMode: PropTypes.oneOf(['head', 'middle', 'tail', 'clip']),

    numberOfLines: PropTypes.number,

    textBreakStrategy: PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onLayout: PropTypes.func,

    onPress: PropTypes.func,

    onLongPress: PropTypes.func,

    pressRetentionOffset: EdgeInsetsPropType,

    selectable: PropTypes.bool,

    selectionColor: ColorPropType,

    suppressHighlighting: PropTypes.bool,
    style: stylePropType,

    testID: PropTypes.string,

    allowFontScaling: PropTypes.bool,

    accessible: PropTypes.bool,

    adjustsFontSizeToFit: PropTypes.bool,

    minimumFontScale: PropTypes.number
  },
  getDefaultProps: function getDefaultProps() {
    return {
      accessible: true,
      allowFontScaling: true,
      ellipsizeMode: 'tail'
    };
  },

  getInitialState: function getInitialState() {
    return mergeFast(Touchable.Mixin.touchableGetInitialState(), {
      isHighlighted: false
    });
  },
  mixins: [NativeMethodsMixin],
  viewConfig: viewConfig,
  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: PropTypes.bool
  },
  contextTypes: {
    isInAParentText: PropTypes.bool
  },

  _handlers: null,
  _hasPressHandler: function _hasPressHandler() {
    return !!this.props.onPress || !!this.props.onLongPress;
  },

  touchableHandleActivePressIn: null,
  touchableHandleActivePressOut: null,
  touchableHandlePress: null,
  touchableHandleLongPress: null,
  touchableGetPressRectOffset: null,
  render: function render() {
    var _this = this;

    var newProps = this.props;
    if (this.props.onStartShouldSetResponder || this._hasPressHandler()) {
      if (!this._handlers) {
        this._handlers = {
          onStartShouldSetResponder: function onStartShouldSetResponder() {
            var shouldSetFromProps = _this.props.onStartShouldSetResponder && _this.props.onStartShouldSetResponder();
            var setResponder = shouldSetFromProps || _this._hasPressHandler();
            if (setResponder && !_this.touchableHandleActivePressIn) {
              for (var key in Touchable.Mixin) {
                if (typeof Touchable.Mixin[key] === 'function') {
                  _this[key] = Touchable.Mixin[key].bind(_this);
                }
              }
              _this.touchableHandleActivePressIn = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: true
                });
              };

              _this.touchableHandleActivePressOut = function () {
                if (_this.props.suppressHighlighting || !_this._hasPressHandler()) {
                  return;
                }
                _this.setState({
                  isHighlighted: false
                });
              };

              _this.touchableHandlePress = function (e) {
                _this.props.onPress && _this.props.onPress(e);
              };

              _this.touchableHandleLongPress = function (e) {
                _this.props.onLongPress && _this.props.onLongPress(e);
              };

              _this.touchableGetPressRectOffset = function () {
                return this.props.pressRetentionOffset || PRESS_RECT_OFFSET;
              };
            }
            return setResponder;
          },
          onResponderGrant: function (e, dispatchID) {
            this.touchableHandleResponderGrant(e, dispatchID);
            this.props.onResponderGrant && this.props.onResponderGrant.apply(this, arguments);
          }.bind(this),
          onResponderMove: function (e) {
            this.touchableHandleResponderMove(e);
            this.props.onResponderMove && this.props.onResponderMove.apply(this, arguments);
          }.bind(this),
          onResponderRelease: function (e) {
            this.touchableHandleResponderRelease(e);
            this.props.onResponderRelease && this.props.onResponderRelease.apply(this, arguments);
          }.bind(this),
          onResponderTerminate: function (e) {
            this.touchableHandleResponderTerminate(e);
            this.props.onResponderTerminate && this.props.onResponderTerminate.apply(this, arguments);
          }.bind(this),
          onResponderTerminationRequest: function () {
            var allowTermination = this.touchableHandleResponderTerminationRequest();
            if (allowTermination && this.props.onResponderTerminationRequest) {
              allowTermination = this.props.onResponderTerminationRequest.apply(this, arguments);
            }
            return allowTermination;
          }.bind(this)
        };
      }
      newProps = babelHelpers.extends({}, this.props, this._handlers, {
        isHighlighted: this.state.isHighlighted
      });
    }
    if (newProps.selectionColor != null) {
      newProps = babelHelpers.extends({}, newProps, {
        selectionColor: processColor(newProps.selectionColor)
      });
    }
    if (Touchable.TOUCH_TARGET_DEBUG && newProps.onPress) {
      newProps = babelHelpers.extends({}, newProps, {
        style: [this.props.style, { color: 'magenta' }]
      });
    }
    if (this.context.isInAParentText) {
      return React.createElement(RCTVirtualText, babelHelpers.extends({}, newProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 342
        }
      }));
    } else {
      return React.createElement(RCTText, babelHelpers.extends({}, newProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 344
        }
      }));
    }
  }
});

var PRESS_RECT_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var RCTText = createReactNativeComponentClass(viewConfig);
var RCTVirtualText = RCTText;

if (Platform.OS === 'android') {
  RCTVirtualText = createReactNativeComponentClass({
    validAttributes: mergeFast(ReactNativeViewAttributes.UIView, {
      isHighlighted: true
    }),
    uiViewClassName: 'RCTVirtualText'
  });
}

module.exports = Text;
}, 188, null, "Text");
__d(/* Touchable */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Touchable/Touchable.js';
var BoundingDimensions = require(190                 ); // 190 = BoundingDimensions
var Platform = require(56        ); // 56 = Platform
var Position = require(191       ); // 191 = Position
var React = require(103    ); // 103 = React
var TVEventHandler = require(192             ); // 192 = TVEventHandler
var TouchEventUtils = require(193                       ); // 193 = fbjs/lib/TouchEventUtils
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View

var findNodeHandle = require(101             ); // 101 = findNodeHandle
var keyMirror = require(110                 ); // 110 = fbjs/lib/keyMirror
var normalizeColor = require(49              ); // 49 = normalizeColor

var States = keyMirror({
  NOT_RESPONDER: null,
  RESPONDER_INACTIVE_PRESS_IN: null,
  RESPONDER_INACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_PRESS_IN: null,
  RESPONDER_ACTIVE_PRESS_OUT: null,
  RESPONDER_ACTIVE_LONG_PRESS_IN: null,
  RESPONDER_ACTIVE_LONG_PRESS_OUT: null,
  ERROR: null
});

var IsActive = {
  RESPONDER_ACTIVE_PRESS_OUT: true,
  RESPONDER_ACTIVE_PRESS_IN: true
};

var IsPressingIn = {
  RESPONDER_INACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_PRESS_IN: true,
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var IsLongPressingIn = {
  RESPONDER_ACTIVE_LONG_PRESS_IN: true
};

var Signals = keyMirror({
  DELAY: null,
  RESPONDER_GRANT: null,
  RESPONDER_RELEASE: null,
  RESPONDER_TERMINATED: null,
  ENTER_PRESS_RECT: null,
  LEAVE_PRESS_RECT: null,
  LONG_PRESS_DETECTED: null
});

var Transitions = {
  NOT_RESPONDER: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.ERROR,
    RESPONDER_TERMINATED: States.ERROR,
    ENTER_PRESS_RECT: States.ERROR,
    LEAVE_PRESS_RECT: States.ERROR,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_IN: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_IN,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_INACTIVE_PRESS_OUT: {
    DELAY: States.RESPONDER_ACTIVE_PRESS_OUT,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_INACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  RESPONDER_ACTIVE_LONG_PRESS_IN: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.RESPONDER_ACTIVE_LONG_PRESS_IN
  },
  RESPONDER_ACTIVE_LONG_PRESS_OUT: {
    DELAY: States.ERROR,
    RESPONDER_GRANT: States.ERROR,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_IN,
    LEAVE_PRESS_RECT: States.RESPONDER_ACTIVE_LONG_PRESS_OUT,
    LONG_PRESS_DETECTED: States.ERROR
  },
  error: {
    DELAY: States.NOT_RESPONDER,
    RESPONDER_GRANT: States.RESPONDER_INACTIVE_PRESS_IN,
    RESPONDER_RELEASE: States.NOT_RESPONDER,
    RESPONDER_TERMINATED: States.NOT_RESPONDER,
    ENTER_PRESS_RECT: States.NOT_RESPONDER,
    LEAVE_PRESS_RECT: States.NOT_RESPONDER,
    LONG_PRESS_DETECTED: States.NOT_RESPONDER
  }
};

var HIGHLIGHT_DELAY_MS = 130;

var PRESS_EXPAND_PX = 20;

var LONG_PRESS_THRESHOLD = 500;

var LONG_PRESS_DELAY_MS = LONG_PRESS_THRESHOLD - HIGHLIGHT_DELAY_MS;

var LONG_PRESS_ALLOWED_MOVEMENT = 10;

var TouchableMixin = {
  componentDidMount: function componentDidMount() {
    if (!Platform.isTVOS) {
      return;
    }

    this._tvEventHandler = new TVEventHandler();
    this._tvEventHandler.enable(this, function (cmp, evt) {
      var myTag = findNodeHandle(cmp);
      evt.dispatchConfig = {};
      if (myTag === evt.tag) {
        if (evt.eventType === 'focus') {
          cmp.touchableHandleActivePressIn && cmp.touchableHandleActivePressIn(evt);
        } else if (evt.eventType === 'blur') {
          cmp.touchableHandleActivePressOut && cmp.touchableHandleActivePressOut(evt);
        } else if (evt.eventType === 'select') {
          cmp.touchableHandlePress && cmp.touchableHandlePress(evt);
        }
      }
    });
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._tvEventHandler) {
      this._tvEventHandler.disable();
      delete this._tvEventHandler;
    }
    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
  },

  touchableGetInitialState: function touchableGetInitialState() {
    return {
      touchable: { touchState: undefined, responderID: null }
    };
  },

  touchableHandleResponderTerminationRequest: function touchableHandleResponderTerminationRequest() {
    return !this.props.rejectResponderTermination;
  },

  touchableHandleStartShouldSetResponder: function touchableHandleStartShouldSetResponder() {
    return !this.props.disabled;
  },

  touchableLongPressCancelsPress: function touchableLongPressCancelsPress() {
    return true;
  },

  touchableHandleResponderGrant: function touchableHandleResponderGrant(e) {
    var dispatchID = e.currentTarget;

    e.persist();

    this.pressOutDelayTimeout && clearTimeout(this.pressOutDelayTimeout);
    this.pressOutDelayTimeout = null;

    this.state.touchable.touchState = States.NOT_RESPONDER;
    this.state.touchable.responderID = dispatchID;
    this._receiveSignal(Signals.RESPONDER_GRANT, e);
    var delayMS = this.touchableGetHighlightDelayMS !== undefined ? Math.max(this.touchableGetHighlightDelayMS(), 0) : HIGHLIGHT_DELAY_MS;
    delayMS = isNaN(delayMS) ? HIGHLIGHT_DELAY_MS : delayMS;
    if (delayMS !== 0) {
      this.touchableDelayTimeout = setTimeout(this._handleDelay.bind(this, e), delayMS);
    } else {
      this._handleDelay(e);
    }

    var longDelayMS = this.touchableGetLongPressDelayMS !== undefined ? Math.max(this.touchableGetLongPressDelayMS(), 10) : LONG_PRESS_DELAY_MS;
    longDelayMS = isNaN(longDelayMS) ? LONG_PRESS_DELAY_MS : longDelayMS;
    this.longPressDelayTimeout = setTimeout(this._handleLongDelay.bind(this, e), longDelayMS + delayMS);
  },

  touchableHandleResponderRelease: function touchableHandleResponderRelease(e) {
    this._receiveSignal(Signals.RESPONDER_RELEASE, e);
  },

  touchableHandleResponderTerminate: function touchableHandleResponderTerminate(e) {
    this._receiveSignal(Signals.RESPONDER_TERMINATED, e);
  },

  touchableHandleResponderMove: function touchableHandleResponderMove(e) {
    if (this.state.touchable.touchState === States.RESPONDER_INACTIVE_PRESS_IN) {
      return;
    }

    if (!this.state.touchable.positionOnActivate) {
      return;
    }

    var positionOnActivate = this.state.touchable.positionOnActivate;
    var dimensionsOnActivate = this.state.touchable.dimensionsOnActivate;
    var pressRectOffset = this.touchableGetPressRectOffset ? this.touchableGetPressRectOffset() : {
      left: PRESS_EXPAND_PX,
      right: PRESS_EXPAND_PX,
      top: PRESS_EXPAND_PX,
      bottom: PRESS_EXPAND_PX
    };

    var pressExpandLeft = pressRectOffset.left;
    var pressExpandTop = pressRectOffset.top;
    var pressExpandRight = pressRectOffset.right;
    var pressExpandBottom = pressRectOffset.bottom;

    var hitSlop = this.touchableGetHitSlop ? this.touchableGetHitSlop() : null;

    if (hitSlop) {
      pressExpandLeft += hitSlop.left;
      pressExpandTop += hitSlop.top;
      pressExpandRight += hitSlop.right;
      pressExpandBottom += hitSlop.bottom;
    }

    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;

    if (this.pressInLocation) {
      var movedDistance = this._getDistanceBetweenPoints(pageX, pageY, this.pressInLocation.pageX, this.pressInLocation.pageY);
      if (movedDistance > LONG_PRESS_ALLOWED_MOVEMENT) {
        this._cancelLongPressDelayTimeout();
      }
    }

    var isTouchWithinActive = pageX > positionOnActivate.left - pressExpandLeft && pageY > positionOnActivate.top - pressExpandTop && pageX < positionOnActivate.left + dimensionsOnActivate.width + pressExpandRight && pageY < positionOnActivate.top + dimensionsOnActivate.height + pressExpandBottom;
    if (isTouchWithinActive) {
      this._receiveSignal(Signals.ENTER_PRESS_RECT, e);
      var curState = this.state.touchable.touchState;
      if (curState === States.RESPONDER_INACTIVE_PRESS_IN) {
        this._cancelLongPressDelayTimeout();
      }
    } else {
      this._cancelLongPressDelayTimeout();
      this._receiveSignal(Signals.LEAVE_PRESS_RECT, e);
    }
  },

  _remeasureMetricsOnActivation: function _remeasureMetricsOnActivation() {
    var tag = this.state.touchable.responderID;
    if (tag == null) {
      return;
    }

    UIManager.measure(tag, this._handleQueryLayout);
  },

  _handleQueryLayout: function _handleQueryLayout(l, t, w, h, globalX, globalY) {
    this.state.touchable.positionOnActivate && Position.release(this.state.touchable.positionOnActivate);
    this.state.touchable.dimensionsOnActivate && BoundingDimensions.release(this.state.touchable.dimensionsOnActivate);
    this.state.touchable.positionOnActivate = Position.getPooled(globalX, globalY);
    this.state.touchable.dimensionsOnActivate = BoundingDimensions.getPooled(w, h);
  },

  _handleDelay: function _handleDelay(e) {
    this.touchableDelayTimeout = null;
    this._receiveSignal(Signals.DELAY, e);
  },

  _handleLongDelay: function _handleLongDelay(e) {
    this.longPressDelayTimeout = null;
    var curState = this.state.touchable.touchState;
    if (curState !== States.RESPONDER_ACTIVE_PRESS_IN && curState !== States.RESPONDER_ACTIVE_LONG_PRESS_IN) {
      console.error('Attempted to transition from state `' + curState + '` to `' + States.RESPONDER_ACTIVE_LONG_PRESS_IN + '`, which is not supported. This is ' + 'most likely due to `Touchable.longPressDelayTimeout` not being cancelled.');
    } else {
      this._receiveSignal(Signals.LONG_PRESS_DETECTED, e);
    }
  },

  _receiveSignal: function _receiveSignal(signal, e) {
    var responderID = this.state.touchable.responderID;
    var curState = this.state.touchable.touchState;
    var nextState = Transitions[curState] && Transitions[curState][signal];
    if (!responderID && signal === Signals.RESPONDER_RELEASE) {
      return;
    }
    if (!nextState) {
      throw new Error('Unrecognized signal `' + signal + '` or state `' + curState + '` for Touchable responder `' + responderID + '`');
    }
    if (nextState === States.ERROR) {
      throw new Error('Touchable cannot transition from `' + curState + '` to `' + signal + '` for responder `' + responderID + '`');
    }
    if (curState !== nextState) {
      this._performSideEffectsForTransition(curState, nextState, signal, e);
      this.state.touchable.touchState = nextState;
    }
  },

  _cancelLongPressDelayTimeout: function _cancelLongPressDelayTimeout() {
    this.longPressDelayTimeout && clearTimeout(this.longPressDelayTimeout);
    this.longPressDelayTimeout = null;
  },

  _isHighlight: function _isHighlight(state) {
    return state === States.RESPONDER_ACTIVE_PRESS_IN || state === States.RESPONDER_ACTIVE_LONG_PRESS_IN;
  },

  _savePressInLocation: function _savePressInLocation(e) {
    var touch = TouchEventUtils.extractSingleTouch(e.nativeEvent);
    var pageX = touch && touch.pageX;
    var pageY = touch && touch.pageY;
    var locationX = touch && touch.locationX;
    var locationY = touch && touch.locationY;
    this.pressInLocation = { pageX: pageX, pageY: pageY, locationX: locationX, locationY: locationY };
  },

  _getDistanceBetweenPoints: function _getDistanceBetweenPoints(aX, aY, bX, bY) {
    var deltaX = aX - bX;
    var deltaY = aY - bY;
    return Math.sqrt(deltaX * deltaX + deltaY * deltaY);
  },

  _performSideEffectsForTransition: function _performSideEffectsForTransition(curState, nextState, signal, e) {
    var curIsHighlight = this._isHighlight(curState);
    var newIsHighlight = this._isHighlight(nextState);

    var isFinalSignal = signal === Signals.RESPONDER_TERMINATED || signal === Signals.RESPONDER_RELEASE;

    if (isFinalSignal) {
      this._cancelLongPressDelayTimeout();
    }

    if (!IsActive[curState] && IsActive[nextState]) {
      this._remeasureMetricsOnActivation();
    }

    if (IsPressingIn[curState] && signal === Signals.LONG_PRESS_DETECTED) {
      this.touchableHandleLongPress && this.touchableHandleLongPress(e);
    }

    if (newIsHighlight && !curIsHighlight) {
      this._startHighlight(e);
    } else if (!newIsHighlight && curIsHighlight) {
      this._endHighlight(e);
    }

    if (IsPressingIn[curState] && signal === Signals.RESPONDER_RELEASE) {
      var hasLongPressHandler = !!this.props.onLongPress;
      var pressIsLongButStillCallOnPress = IsLongPressingIn[curState] && (!hasLongPressHandler || !this.touchableLongPressCancelsPress());

      var shouldInvokePress = !IsLongPressingIn[curState] || pressIsLongButStillCallOnPress;
      if (shouldInvokePress && this.touchableHandlePress) {
        if (!newIsHighlight && !curIsHighlight) {
          this._startHighlight(e);
          this._endHighlight(e);
        }
        this.touchableHandlePress(e);
      }
    }

    this.touchableDelayTimeout && clearTimeout(this.touchableDelayTimeout);
    this.touchableDelayTimeout = null;
  },

  _startHighlight: function _startHighlight(e) {
    this._savePressInLocation(e);
    this.touchableHandleActivePressIn && this.touchableHandleActivePressIn(e);
  },

  _endHighlight: function _endHighlight(e) {
    var _this = this;

    if (this.touchableHandleActivePressOut) {
      if (this.touchableGetPressOutDelayMS && this.touchableGetPressOutDelayMS()) {
        this.pressOutDelayTimeout = setTimeout(function () {
          _this.touchableHandleActivePressOut(e);
        }, this.touchableGetPressOutDelayMS());
      } else {
        this.touchableHandleActivePressOut(e);
      }
    }
  }

};

var Touchable = {
  Mixin: TouchableMixin,
  TOUCH_TARGET_DEBUG: false,
  renderDebugView: function renderDebugView(_ref) {
    var color = _ref.color,
        hitSlop = _ref.hitSlop;

    if (!Touchable.TOUCH_TARGET_DEBUG) {
      return null;
    }
    if (!__DEV__) {
      throw Error('Touchable.TOUCH_TARGET_DEBUG should not be enabled in prod!');
    }
    var debugHitSlopStyle = {};
    hitSlop = hitSlop || { top: 0, bottom: 0, left: 0, right: 0 };
    for (var key in hitSlop) {
      debugHitSlopStyle[key] = -hitSlop[key];
    }
    var hexColor = '#' + ('00000000' + normalizeColor(color).toString(16)).substr(-8);
    return React.createElement(View, {
      pointerEvents: 'none',
      style: babelHelpers.extends({
        position: 'absolute',
        borderColor: hexColor.slice(0, -2) + '55',
        borderWidth: 1,
        borderStyle: 'dashed',
        backgroundColor: hexColor.slice(0, -2) + '0F' }, debugHitSlopStyle),
      __source: {
        fileName: _jsxFileName,
        lineNumber: 789
      }
    });
  }
};

module.exports = Touchable;
}, 189, null, "Touchable");
__d(/* BoundingDimensions */function(global, require, module, exports) {

'use strict';

var PooledClass = require(16                     ); // 16 = react/lib/PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function BoundingDimensions(width, height) {
  this.width = width;
  this.height = height;
}

BoundingDimensions.prototype.destructor = function () {
  this.width = null;
  this.height = null;
};

BoundingDimensions.getPooledFromElement = function (element) {
  return BoundingDimensions.getPooled(element.offsetWidth, element.offsetHeight);
};

PooledClass.addPoolingTo(BoundingDimensions, twoArgumentPooler);

module.exports = BoundingDimensions;
}, 190, null, "BoundingDimensions");
__d(/* Position */function(global, require, module, exports) {

'use strict';

var PooledClass = require(16                     ); // 16 = react/lib/PooledClass

var twoArgumentPooler = PooledClass.twoArgumentPooler;

function Position(left, top) {
  this.left = left;
  this.top = top;
}

Position.prototype.destructor = function () {
  this.left = null;
  this.top = null;
};

PooledClass.addPoolingTo(Position, twoArgumentPooler);

module.exports = Position;
}, 191, null, "Position");
__d(/* TVEventHandler */function(global, require, module, exports) {
'use strict';

function TVEventHandler() {}

TVEventHandler.prototype.enable = function (component, callback) {};

TVEventHandler.prototype.disable = function () {};

module.exports = TVEventHandler;
}, 192, null, "TVEventHandler");
__d(/* fbjs/lib/TouchEventUtils.js */function(global, require, module, exports) {"use strict";

var TouchEventUtils = {
  extractSingleTouch: function extractSingleTouch(nativeEvent) {
    var touches = nativeEvent.touches;
    var changedTouches = nativeEvent.changedTouches;
    var hasTouches = touches && touches.length > 0;
    var hasChangedTouches = changedTouches && changedTouches.length > 0;

    return !hasTouches && hasChangedTouches ? changedTouches[0] : hasTouches ? touches[0] : nativeEvent;
  }
};

module.exports = TouchEventUtils;
}, 193, null, "fbjs/lib/TouchEventUtils.js");
__d(/* mergeFast */function(global, require, module, exports) {
'use strict';

var mergeFast = function mergeFast(one, two) {
  var ret = {};
  for (var keyOne in one) {
    ret[keyOne] = one[keyOne];
  }
  for (var keyTwo in two) {
    ret[keyTwo] = two[keyTwo];
  }
  return ret;
};

module.exports = mergeFast;
}, 194, null, "mergeFast");
__d(/* TouchableNativeFeedback */function(global, require, module, exports) {
'use strict';

var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var Touchable = require(189        ); // 189 = Touchable
var TouchableWithoutFeedback = require(252                       ); // 252 = TouchableWithoutFeedback
var UIManager = require(100        ); // 100 = UIManager

var ensurePositiveDelayProps = require(254                       ); // 254 = ensurePositiveDelayProps
var processColor = require(119           ); // 119 = processColor

var PropTypes = React.PropTypes;

var rippleBackgroundPropType = PropTypes.shape({
  type: React.PropTypes.oneOf(['RippleAndroid']),
  color: PropTypes.number,
  borderless: PropTypes.bool
});

var themeAttributeBackgroundPropType = PropTypes.shape({
  type: React.PropTypes.oneOf(['ThemeAttrAndroid']),
  attribute: PropTypes.string.isRequired
});

var backgroundPropType = PropTypes.oneOfType([rippleBackgroundPropType, themeAttributeBackgroundPropType]);

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableNativeFeedback = React.createClass({
  displayName: 'TouchableNativeFeedback',

  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    background: backgroundPropType,

    useForeground: PropTypes.bool
  }),

  statics: {
    SelectableBackground: function SelectableBackground() {
      return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackground' };
    },

    SelectableBackgroundBorderless: function SelectableBackgroundBorderless() {
      return { type: 'ThemeAttrAndroid', attribute: 'selectableItemBackgroundBorderless' };
    },

    Ripple: function Ripple(color, borderless) {
      return { type: 'RippleAndroid', color: processColor(color), borderless: borderless };
    },

    canUseNativeForeground: function canUseNativeForeground() {
      return Platform.OS === 'android' && Platform.Version >= 23;
    }
  },

  mixins: [Touchable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return {
      background: this.SelectableBackground()
    };
  },

  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
    this._dispatchPressedStateChange(true);
    this._dispatchHotspotUpdate(this.pressInLocation.locationX, this.pressInLocation.locationY);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
    this._dispatchPressedStateChange(false);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _handleResponderMove: function _handleResponderMove(e) {
    this.touchableHandleResponderMove(e);
    this._dispatchHotspotUpdate(e.nativeEvent.locationX, e.nativeEvent.locationY);
  },

  _dispatchHotspotUpdate: function _dispatchHotspotUpdate(destX, destY) {
    UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.hotspotUpdate, [destX || 0, destY || 0]);
  },

  _dispatchPressedStateChange: function _dispatchPressedStateChange(pressed) {
    UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(this), UIManager.RCTView.Commands.setPressed, [pressed]);
  },

  render: function render() {
    var _babelHelpers$extends;

    var child = React.Children.only(this.props.children);
    var children = child.props.children;
    if (Touchable.TOUCH_TARGET_DEBUG && child.type.displayName === 'View') {
      if (!Array.isArray(children)) {
        children = [children];
      }
      children.push(Touchable.renderDebugView({ color: 'brown', hitSlop: this.props.hitSlop }));
    }
    if (this.props.useForeground && !TouchableNativeFeedback.canUseNativeForeground()) {
      console.warn('Requested foreground ripple, but it is not available on this version of Android. ' + 'Consider calling TouchableNativeFeedback.canUseNativeForeground() and using a different ' + 'Touchable if the result is false.');
    }
    var drawableProp = this.props.useForeground && TouchableNativeFeedback.canUseNativeForeground() ? 'nativeForegroundAndroid' : 'nativeBackgroundAndroid';
    var childProps = babelHelpers.extends({}, child.props, (_babelHelpers$extends = {}, babelHelpers.defineProperty(_babelHelpers$extends, drawableProp, this.props.background), babelHelpers.defineProperty(_babelHelpers$extends, 'accessible', this.props.accessible !== false), babelHelpers.defineProperty(_babelHelpers$extends, 'accessibilityLabel', this.props.accessibilityLabel), babelHelpers.defineProperty(_babelHelpers$extends, 'accessibilityComponentType', this.props.accessibilityComponentType), babelHelpers.defineProperty(_babelHelpers$extends, 'accessibilityTraits', this.props.accessibilityTraits), babelHelpers.defineProperty(_babelHelpers$extends, 'children', children), babelHelpers.defineProperty(_babelHelpers$extends, 'testID', this.props.testID), babelHelpers.defineProperty(_babelHelpers$extends, 'onLayout', this.props.onLayout), babelHelpers.defineProperty(_babelHelpers$extends, 'hitSlop', this.props.hitSlop), babelHelpers.defineProperty(_babelHelpers$extends, 'onStartShouldSetResponder', this.touchableHandleStartShouldSetResponder), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderTerminationRequest', this.touchableHandleResponderTerminationRequest), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderGrant', this.touchableHandleResponderGrant), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderMove', this._handleResponderMove), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderRelease', this.touchableHandleResponderRelease), babelHelpers.defineProperty(_babelHelpers$extends, 'onResponderTerminate', this.touchableHandleResponderTerminate), _babelHelpers$extends));

    return React.cloneElement(child, childProps);
  }
});

module.exports = TouchableNativeFeedback;
}, 195, null, "TouchableNativeFeedback");
__d(/* ReactNative */function(global, require, module, exports) {
'use strict';

var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree
var ReactNativeDefaultInjection = require(197                          ); // 197 = ReactNativeDefaultInjection

var ReactNativeMount = require(226               ); // 226 = ReactNativeMount
var ReactUpdates = require(147           ); // 147 = ReactUpdates

var findNodeHandle = require(101             ); // 101 = findNodeHandle

ReactNativeDefaultInjection.inject();

var render = function render(element, mountInto, callback) {
  return ReactNativeMount.renderComponent(element, mountInto, callback);
};

var ReactNative = {
  hasReactNativeInitialized: false,
  findNodeHandle: findNodeHandle,
  render: render,
  unmountComponentAtNode: ReactNativeMount.unmountComponentAtNode,

  unstable_batchedUpdates: ReactUpdates.batchedUpdates,


  unmountComponentAtNodeAndRemoveContainer: ReactNativeMount.unmountComponentAtNodeAndRemoveContainer
};

if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.inject === 'function') {
  __REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
    ComponentTree: {
      getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
        return ReactNativeComponentTree.getClosestInstanceFromNode(node);
      },
      getNodeFromInstance: function getNodeFromInstance(inst) {
        while (inst._renderedComponent) {
          inst = inst._renderedComponent;
        }
        if (inst) {
          return ReactNativeComponentTree.getNodeFromInstance(inst);
        } else {
          return null;
        }
      }
    },
    Mount: ReactNativeMount,
    Reconciler: require(151              ) // 151 = ReactReconciler
  });
}

module.exports = ReactNative;
}, 196, null, "ReactNative");
__d(/* ReactNativeDefaultInjection */function(global, require, module, exports) {
'use strict';

require(198             ); // 198 = InitializeCore

var EventPluginHub = require(139             ); // 139 = EventPluginHub
var EventPluginUtils = require(141               ); // 141 = EventPluginUtils
var RCTEventEmitter = require(235              ); // 235 = RCTEventEmitter
var React = require(103    ); // 103 = React
var ReactComponentEnvironment = require(157                        ); // 157 = ReactComponentEnvironment
var ReactDefaultBatchingStrategy = require(236                           ); // 236 = ReactDefaultBatchingStrategy
var ReactEmptyComponent = require(167                  ); // 167 = ReactEmptyComponent
var ReactNativeBridgeEventPlugin = require(237                           ); // 237 = ReactNativeBridgeEventPlugin
var ReactHostComponent = require(168                 ); // 168 = ReactHostComponent
var ReactNativeComponentEnvironment = require(240                              ); // 240 = ReactNativeComponentEnvironment
var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree
var ReactNativeEventEmitter = require(138                      ); // 138 = ReactNativeEventEmitter
var ReactNativeEventPluginOrder = require(243                          ); // 243 = ReactNativeEventPluginOrder
var ReactNativeGlobalResponderHandler = require(244                                ); // 244 = ReactNativeGlobalResponderHandler
var ReactNativeTextComponent = require(245                       ); // 245 = ReactNativeTextComponent
var ReactNativeTreeTraversal = require(246                       ); // 246 = ReactNativeTreeTraversal
var ReactSimpleEmptyComponent = require(247                        ); // 247 = ReactSimpleEmptyComponent
var ReactUpdates = require(147           ); // 147 = ReactUpdates
var ResponderEventPlugin = require(248                   ); // 248 = ResponderEventPlugin

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function inject() {
  RCTEventEmitter.register(ReactNativeEventEmitter);

  EventPluginHub.injection.injectEventPluginOrder(ReactNativeEventPluginOrder);
  EventPluginUtils.injection.injectComponentTree(ReactNativeComponentTree);
  EventPluginUtils.injection.injectTreeTraversal(ReactNativeTreeTraversal);

  ResponderEventPlugin.injection.injectGlobalResponderHandler(ReactNativeGlobalResponderHandler);

  EventPluginHub.injection.injectEventPluginsByName({
    'ResponderEventPlugin': ResponderEventPlugin,
    'ReactNativeBridgeEventPlugin': ReactNativeBridgeEventPlugin
  });

  ReactUpdates.injection.injectReconcileTransaction(ReactNativeComponentEnvironment.ReactReconcileTransaction);

  ReactUpdates.injection.injectBatchingStrategy(ReactDefaultBatchingStrategy);

  ReactComponentEnvironment.injection.injectEnvironment(ReactNativeComponentEnvironment);

  var EmptyComponent = function EmptyComponent(instantiate) {
    var View = require(124   ); // 124 = View
    return new ReactSimpleEmptyComponent(React.createElement(View, {
      collapsable: true,
      style: { position: 'absolute' }
    }), instantiate);
  };

  ReactEmptyComponent.injection.injectEmptyComponentFactory(EmptyComponent);

  ReactHostComponent.injection.injectTextComponentClass(ReactNativeTextComponent);
  ReactHostComponent.injection.injectGenericComponentClass(function (tag) {
    var info = '';
    if (typeof tag === 'string' && /^[a-z]/.test(tag)) {
      info += ' Each component name should start with an uppercase letter.';
    }
    invariant(false, 'Expected a component class, got %s.%s', tag, info);
  });
}

module.exports = {
  inject: inject
};
}, 197, null, "ReactNativeDefaultInjection");
__d(/* InitializeCore */function(global, require, module, exports) {
'use strict';

if (global.GLOBAL === undefined) {
  global.GLOBAL = global;
}

if (global.window === undefined) {
  global.window = global;
}

var defineLazyObjectProperty = require(99                        ); // 99 = defineLazyObjectProperty

function defineProperty(object, name, getValue, eager) {
  var descriptor = Object.getOwnPropertyDescriptor(object, name);
  if (descriptor) {
    var backupName = 'original' + name[0].toUpperCase() + name.substr(1);
    Object.defineProperty(object, backupName, babelHelpers.extends({}, descriptor, {
      value: object[name]
    }));
  }

  var _ref = descriptor || {},
      enumerable = _ref.enumerable,
      writable = _ref.writable,
      configurable = _ref.configurable;

  if (descriptor && !configurable) {
    console.error('Failed to set polyfill. ' + name + ' is not configurable.');
    return;
  }

  if (eager === true) {
    Object.defineProperty(object, name, {
      configurable: true,
      enumerable: enumerable !== false,
      writable: writable !== false,
      value: getValue()
    });
  } else {
    defineLazyObjectProperty(object, name, {
      get: getValue,
      enumerable: enumerable !== false,
      writable: writable !== false
    });
  }
}

global.process = global.process || {};
global.process.env = global.process.env || {};
if (!global.process.env.NODE_ENV) {
  global.process.env.NODE_ENV = __DEV__ ? 'development' : 'production';
}

var Systrace = require(62        ); // 62 = Systrace
Systrace.setEnabled(global.__RCTProfileIsProfiling || false);

var ExceptionsManager = require(199                ); // 199 = ExceptionsManager
ExceptionsManager.installConsoleErrorReporter();

require(204     ); // 204 = RCTLog

if (!global.__fbDisableExceptionsManager) {
  var handleError = function handleError(e, isFatal) {
    try {
      ExceptionsManager.handleException(e, isFatal);
    } catch (ee) {
      console.log('Failed to print error: ', ee.message);

      throw e;
    }
  };

  var ErrorUtils = require(60          ); // 60 = ErrorUtils
  ErrorUtils.setGlobalHandler(handleError);
}

var defineLazyTimer = function defineLazyTimer(name) {
  defineProperty(global, name, function () {
    return require(69        )[name]; // 69 = JSTimers
  });
};
defineLazyTimer('setTimeout');
defineLazyTimer('setInterval');
defineLazyTimer('setImmediate');
defineLazyTimer('clearTimeout');
defineLazyTimer('clearInterval');
defineLazyTimer('clearImmediate');
defineLazyTimer('requestAnimationFrame');
defineLazyTimer('cancelAnimationFrame');
defineLazyTimer('requestIdleCallback');
defineLazyTimer('cancelIdleCallback');

if (!global.alert) {
  global.alert = function (text) {
    require(205    ).alert('Alert', '' + text); // 205 = Alert
  };
}

defineProperty(global, 'Promise', function () {
  return require(207      ); // 207 = Promise
});

defineProperty(global, 'regeneratorRuntime', function () {
  delete global.regeneratorRuntime;
  require(213                          ); // 213 = regenerator-runtime/runtime
  return global.regeneratorRuntime;
});

defineProperty(global, 'XMLHttpRequest', function () {
  return require(214             ); // 214 = XMLHttpRequest
});
defineProperty(global, 'FormData', function () {
  return require(216       ); // 216 = FormData
});

defineProperty(global, 'fetch', function () {
  return require(202    ).fetch; // 202 = fetch
});
defineProperty(global, 'Headers', function () {
  return require(202    ).Headers; // 202 = fetch
});
defineProperty(global, 'Request', function () {
  return require(202    ).Request; // 202 = fetch
});
defineProperty(global, 'Response', function () {
  return require(202    ).Response; // 202 = fetch
});
defineProperty(global, 'WebSocket', function () {
  return require(78         ); // 78 = WebSocket
});

var navigator = global.navigator;
if (navigator === undefined) {
  global.navigator = navigator = {};
}

defineProperty(navigator, 'product', function () {
  return 'ReactNative';
}, true);
defineProperty(navigator, 'geolocation', function () {
  return require(218          ); // 218 = Geolocation
});

defineProperty(global, 'Map', function () {
  return require(219  ); // 219 = Map
}, true);
defineProperty(global, 'Set', function () {
  return require(224  ); // 224 = Set
}, true);

if (__DEV__) {
  if (!window.document) {
    var setupDevtools = require(225            ); // 225 = setupDevtools
    setupDevtools();
  }

  require(229                         ); // 229 = RCTDebugComponentOwnership
}

if (__DEV__) {
  var JSInspector = require(230          ); // 230 = JSInspector
  JSInspector.registerAgent(require(231           )); // 231 = NetworkAgent
}

require(84                     ); // 84 = RCTDeviceEventEmitter
require(233                       ); // 233 = RCTNativeAppEventEmitter
require(234                ); // 234 = PerformanceLogger
}, 198, null, "InitializeCore");
__d(/* ExceptionsManager */function(global, require, module, exports) {
'use strict';

var exceptionID = 0;
function reportException(e, isFatal) {
  var _require = require(57             ), // 57 = NativeModules
      ExceptionsManager = _require.ExceptionsManager;

  if (ExceptionsManager) {
    var parseErrorStack = require(70               ); // 70 = parseErrorStack
    var stack = parseErrorStack(e);
    var currentExceptionID = ++exceptionID;
    if (isFatal) {
      ExceptionsManager.reportFatalException(e.message, stack, currentExceptionID);
    } else {
      ExceptionsManager.reportSoftException(e.message, stack, currentExceptionID);
    }
    if (__DEV__) {
      var symbolicateStackTrace = require(200                    ); // 200 = symbolicateStackTrace
      symbolicateStackTrace(stack).then(function (prettyStack) {
        if (prettyStack) {
          ExceptionsManager.updateExceptionMessage(e.message, prettyStack, currentExceptionID);
        } else {
          throw new Error('The stack is null');
        }
      }).catch(function (error) {
        return console.warn('Unable to symbolicate stack trace: ' + error.message);
      });
    }
  }
}

function handleException(e, isFatal) {
  if (!e.message) {
    e = new Error(e);
  }
  if (console._errorOriginal) {
    console._errorOriginal(e.message);
  } else {
    console.error(e.message);
  }
  reportException(e, isFatal);
}

function reactConsoleErrorHandler() {
  console._errorOriginal.apply(console, arguments);
  if (!console.reportErrorsAsExceptions) {
    return;
  }

  if (arguments[0] && arguments[0].stack) {
    reportException(arguments[0], false);
  } else {
    var stringifySafe = require(74             ); // 74 = stringifySafe
    var str = Array.prototype.map.call(arguments, stringifySafe).join(', ');
    if (str.slice(0, 10) === '"Warning: ') {
      return;
    }
    var error = new Error('console.error: ' + str);
    error.framesToPop = 1;
    reportException(error, false);
  }
}

function installConsoleErrorReporter() {
  if (console._errorOriginal) {
    return;
  }

  console._errorOriginal = console.error.bind(console);
  console.error = reactConsoleErrorHandler;
  if (console.reportErrorsAsExceptions === undefined) {
    console.reportErrorsAsExceptions = true;
  }
}

module.exports = { handleException: handleException, installConsoleErrorReporter: installConsoleErrorReporter };
}, 199, null, "ExceptionsManager");
__d(/* symbolicateStackTrace */function(global, require, module, exports) {
'use strict';

var getDevServer = require(201           ); // 201 = getDevServer

var _require = require(57             ), // 57 = NativeModules
    SourceCode = _require.SourceCode;

var fetch = void 0;

function isSourcedFromDisk(sourcePath) {
  return !/^http/.test(sourcePath) && /[\\/]/.test(sourcePath);
}

function symbolicateStackTrace(stack) {
  var devServer, stackCopy, foundInternalSource, response, json;
  return regeneratorRuntime.async(function symbolicateStackTrace$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!fetch) {
            fetch = global.fetch || require(202    ).fetch; // 202 = fetch
          }

          devServer = getDevServer();

          if (devServer.bundleLoadedFromServer) {
            _context.next = 4;
            break;
          }

          throw new Error('Bundle was not loaded from the packager');

        case 4:
          stackCopy = stack;


          if (SourceCode.scriptURL) {
            foundInternalSource = false;

            stackCopy = stack.map(function (frame) {
              if (!foundInternalSource && isSourcedFromDisk(frame.file)) {
                return babelHelpers.extends({}, frame, { file: SourceCode.scriptURL });
              }

              foundInternalSource = true;
              return frame;
            });
          }

          _context.next = 8;
          return regeneratorRuntime.awrap(fetch(devServer.url + 'symbolicate', {
            method: 'POST',
            body: JSON.stringify({ stack: stackCopy })
          }));

        case 8:
          response = _context.sent;
          _context.next = 11;
          return regeneratorRuntime.awrap(response.json());

        case 11:
          json = _context.sent;
          return _context.abrupt('return', json.stack);

        case 13:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}

module.exports = symbolicateStackTrace;
}, 200, null, "symbolicateStackTrace");
__d(/* getDevServer */function(global, require, module, exports) {
'use strict';

var _require = require(57             ), // 57 = NativeModules
    SourceCode = _require.SourceCode;

var _cachedDevServerURL = void 0;
var FALLBACK = 'http://localhost:8081/';

function getDevServer() {
  if (_cachedDevServerURL === undefined) {
    var match = SourceCode.scriptURL && SourceCode.scriptURL.match(/^https?:\/\/.*?\//);
    _cachedDevServerURL = match ? match[0] : null;
  }

  return {
    url: _cachedDevServerURL || FALLBACK,
    bundleLoadedFromServer: _cachedDevServerURL !== null
  };
}

module.exports = getDevServer;
}, 201, null, "getDevServer");
__d(/* fetch */function(global, require, module, exports) {
'use strict';

require(203           ); // 203 = whatwg-fetch

module.exports = { fetch: fetch, Headers: Headers, Request: Request, Response: Response };
}, 202, null, "fetch");
__d(/* whatwg-fetch/fetch.js */function(global, require, module, exports) {(function (self) {
  'use strict';

  if (self.fetch) {
    return;
  }

  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob: 'FileReader' in self && 'Blob' in self && function () {
      try {
        new Blob();
        return true;
      } catch (e) {
        return false;
      }
    }(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  if (support.arrayBuffer) {
    var viewClasses = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]'];

    var isDataView = function isDataView(obj) {
      return obj && DataView.prototype.isPrototypeOf(obj);
    };

    var isArrayBufferView = ArrayBuffer.isView || function (obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1;
    };
  }

  function normalizeName(name) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.\^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name');
    }
    return name.toLowerCase();
  }

  function normalizeValue(value) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value;
  }

  function iteratorFor(items) {
    var iterator = {
      next: function next() {
        var value = items.shift();
        return { done: value === undefined, value: value };
      }
    };

    if (support.iterable) {
      iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = function () {
        return iterator;
      };
    }

    return iterator;
  }

  function Headers(headers) {
    this.map = {};

    if (headers instanceof Headers) {
      headers.forEach(function (value, name) {
        this.append(name, value);
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name) {
        this.append(name, headers[name]);
      }, this);
    }
  }

  Headers.prototype.append = function (name, value) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var list = this.map[name];
    if (!list) {
      list = [];
      this.map[name] = list;
    }
    list.push(value);
  };

  Headers.prototype['delete'] = function (name) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name) {
    var values = this.map[normalizeName(name)];
    return values ? values[0] : null;
  };

  Headers.prototype.getAll = function (name) {
    return this.map[normalizeName(name)] || [];
  };

  Headers.prototype.has = function (name) {
    return this.map.hasOwnProperty(normalizeName(name));
  };

  Headers.prototype.set = function (name, value) {
    this.map[normalizeName(name)] = [normalizeValue(value)];
  };

  Headers.prototype.forEach = function (callback, thisArg) {
    Object.getOwnPropertyNames(this.map).forEach(function (name) {
      this.map[name].forEach(function (value) {
        callback.call(thisArg, value, name, this);
      }, this);
    }, this);
  };

  Headers.prototype.keys = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push(name);
    });
    return iteratorFor(items);
  };

  Headers.prototype.values = function () {
    var items = [];
    this.forEach(function (value) {
      items.push(value);
    });
    return iteratorFor(items);
  };

  Headers.prototype.entries = function () {
    var items = [];
    this.forEach(function (value, name) {
      items.push([name, value]);
    });
    return iteratorFor(items);
  };

  if (support.iterable) {
    Headers.prototype[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator'] = Headers.prototype.entries;
  }

  function consumed(body) {
    if (body.bodyUsed) {
      return Promise.reject(new TypeError('Already read'));
    }
    body.bodyUsed = true;
  }

  function fileReaderReady(reader) {
    return new Promise(function (resolve, reject) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    });
  }

  function readBlobAsArrayBuffer(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise;
  }

  function readBlobAsText(blob) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise;
  }

  function readArrayBufferAsText(buf) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('');
  }

  function bufferClone(buf) {
    if (buf.slice) {
      return buf.slice(0);
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer;
    }
  }

  function Body() {
    this.bodyUsed = false;

    this._initBody = function (body) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);

        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        throw new Error('unsupported BodyInit type');
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      this.blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return rejected;
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      this.arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          return consumed(this) || Promise.resolve(this._bodyArrayBuffer);
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    this.text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return rejected;
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text');
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      this.formData = function () {
        return this.text().then(decode);
      };
    }

    this.json = function () {
      return this.text().then(JSON.parse);
    };

    return this;
  }

  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method;
  }

  function Request(input, options) {
    options = options || {};
    var body = options.body;

    if (typeof input === 'string') {
      this.url = input;
    } else {
      if (input.bodyUsed) {
        throw new TypeError('Already read');
      }
      this.url = input.url;
      this.credentials = input.credentials;
      if (!options.headers) {
        this.headers = new Headers(input.headers);
      }
      this.method = input.method;
      this.mode = input.mode;
      if (!body && input._bodyInit != null) {
        body = input._bodyInit;
        input.bodyUsed = true;
      }
    }

    this.credentials = options.credentials || this.credentials || 'omit';
    if (options.headers || !this.headers) {
      this.headers = new Headers(options.headers);
    }
    this.method = normalizeMethod(options.method || this.method || 'GET');
    this.mode = options.mode || this.mode || null;
    this.referrer = null;

    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests');
    }
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    return new Request(this, { body: this._bodyInit });
  };

  function decode(body) {
    var form = new FormData();
    body.trim().split('&').forEach(function (bytes) {
      if (bytes) {
        var split = bytes.split('=');
        var name = split.shift().replace(/\+/g, ' ');
        var value = split.join('=').replace(/\+/g, ' ');
        form.append(decodeURIComponent(name), decodeURIComponent(value));
      }
    });
    return form;
  }

  function parseHeaders(rawHeaders) {
    var headers = new Headers();
    rawHeaders.split('\r\n').forEach(function (line) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers;
  }

  Body.call(Request.prototype);

  function Response(bodyInit, options) {
    if (!options) {
      options = {};
    }

    this.type = 'default';
    this.status = 'status' in options ? options.status : 200;
    this.ok = this.status >= 200 && this.status < 300;
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    this.headers = new Headers(options.headers);
    this.url = options.url || '';
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      headers: new Headers(this.headers),
      url: this.url
    });
  };

  Response.error = function () {
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response;
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url, status) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code');
    }

    return new Response(null, { status: status, headers: { location: url } });
  };

  self.Headers = Headers;
  self.Request = Request;
  self.Response = Response;

  self.fetch = function (input, init) {
    return new Promise(function (resolve, reject) {
      var request = new Request(input, init);
      var xhr = new XMLHttpRequest();

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : xhr.responseText;
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value, name) {
        xhr.setRequestHeader(name, value);
      });

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    });
  };
  self.fetch.polyfill = true;
})(typeof self !== 'undefined' ? self : this);
}, 203, null, "whatwg-fetch/fetch.js");
__d(/* RCTLog */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var levelsMap = {
  log: 'log',
  info: 'info',
  warn: 'warn',
  error: 'error',
  fatal: 'error'
};

var RCTLog = function () {
  function RCTLog() {
    babelHelpers.classCallCheck(this, RCTLog);
  }

  babelHelpers.createClass(RCTLog, null, [{
    key: 'logIfNoNativeHook',
    value: function logIfNoNativeHook() {
      var args = Array.prototype.slice.call(arguments);
      var level = args.shift();
      var logFn = levelsMap[level];
      invariant(logFn, 'Level "' + level + '" not one of ' + Object.keys(levelsMap));
      if (typeof global.nativeLoggingHook === 'undefined') {
        console[logFn].apply(console, args);
      }

      return true;
    }
  }]);
  return RCTLog;
}();

BatchedBridge.registerCallableModule('RCTLog', RCTLog);

module.exports = RCTLog;
}, 204, null, "RCTLog");
__d(/* Alert */function(global, require, module, exports) {
'use strict';

var AlertIOS = require(206       ); // 206 = AlertIOS
var Platform = require(56        ); // 56 = Platform
var DialogModuleAndroid = require(57             ).DialogManagerAndroid; // 57 = NativeModules

var Alert = function () {
  function Alert() {
    babelHelpers.classCallCheck(this, Alert);
  }

  babelHelpers.createClass(Alert, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options, type) {
      if (Platform.OS === 'ios') {
        if (typeof type !== 'undefined') {
          console.warn('Alert.alert() with a 5th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
          AlertIOS.alert(title, message, buttons, type);
          return;
        }
        AlertIOS.alert(title, message, buttons);
      } else if (Platform.OS === 'android') {
        AlertAndroid.alert(title, message, buttons, options);
      }
    }
  }]);
  return Alert;
}();

var AlertAndroid = function () {
  function AlertAndroid() {
    babelHelpers.classCallCheck(this, AlertAndroid);
  }

  babelHelpers.createClass(AlertAndroid, null, [{
    key: 'alert',
    value: function alert(title, message, buttons, options) {
      var config = {
        title: title || '',
        message: message || ''
      };

      if (options) {
        config = babelHelpers.extends({}, config, { cancelable: options.cancelable });
      }

      var validButtons = buttons ? buttons.slice(0, 3) : [{ text: 'OK' }];
      var buttonPositive = validButtons.pop();
      var buttonNegative = validButtons.pop();
      var buttonNeutral = validButtons.pop();
      if (buttonNeutral) {
        config = babelHelpers.extends({}, config, { buttonNeutral: buttonNeutral.text || '' });
      }
      if (buttonNegative) {
        config = babelHelpers.extends({}, config, { buttonNegative: buttonNegative.text || '' });
      }
      if (buttonPositive) {
        config = babelHelpers.extends({}, config, { buttonPositive: buttonPositive.text || '' });
      }
      DialogModuleAndroid.showAlert(config, function (errorMessage) {
        return console.warn(errorMessage);
      }, function (action, buttonKey) {
        if (action !== DialogModuleAndroid.buttonClicked) {
          return;
        }
        if (buttonKey === DialogModuleAndroid.buttonNeutral) {
          buttonNeutral.onPress && buttonNeutral.onPress();
        } else if (buttonKey === DialogModuleAndroid.buttonNegative) {
          buttonNegative.onPress && buttonNegative.onPress();
        } else if (buttonKey === DialogModuleAndroid.buttonPositive) {
          buttonPositive.onPress && buttonPositive.onPress();
        }
      });
    }
  }]);
  return AlertAndroid;
}();

module.exports = Alert;
}, 205, null, "Alert");
__d(/* AlertIOS */function(global, require, module, exports) {
'use strict';

var RCTAlertManager = require(57             ).AlertManager; // 57 = NativeModules

var AlertIOS = function () {
  function AlertIOS() {
    babelHelpers.classCallCheck(this, AlertIOS);
  }

  babelHelpers.createClass(AlertIOS, null, [{
    key: 'alert',
    value: function alert(title, message, callbackOrButtons, type) {
      if (typeof type !== 'undefined') {
        console.warn('AlertIOS.alert() with a 4th "type" parameter is deprecated and will be removed. Use AlertIOS.prompt() instead.');
        this.prompt(title, message, callbackOrButtons, type);
        return;
      }
      this.prompt(title, message, callbackOrButtons, 'default');
    }
  }, {
    key: 'prompt',
    value: function prompt(title, message, callbackOrButtons) {
      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';
      var defaultValue = arguments[4];
      var keyboardType = arguments[5];

      if (typeof type === 'function') {
        console.warn('You passed a callback function as the "type" argument to AlertIOS.prompt(). React Native is ' + 'assuming  you want to use the deprecated AlertIOS.prompt(title, defaultValue, buttons, callback) ' + 'signature. The current signature is AlertIOS.prompt(title, message, callbackOrButtons, type, defaultValue, ' + 'keyboardType) and the old syntax will be removed in a future version.');

        var callback = type;
        var defaultValue = message;
        RCTAlertManager.alertWithArgs({
          title: title || undefined,
          type: 'plain-text',
          defaultValue: defaultValue
        }, function (id, value) {
          callback(value);
        });
        return;
      }

      var callbacks = [];
      var buttons = [];
      var cancelButtonKey;
      var destructiveButtonKey;
      if (typeof callbackOrButtons === 'function') {
        callbacks = [callbackOrButtons];
      } else if (callbackOrButtons instanceof Array) {
        callbackOrButtons.forEach(function (btn, index) {
          callbacks[index] = btn.onPress;
          if (btn.style === 'cancel') {
            cancelButtonKey = String(index);
          } else if (btn.style === 'destructive') {
            destructiveButtonKey = String(index);
          }
          if (btn.text || index < (callbackOrButtons || []).length - 1) {
            var btnDef = {};
            btnDef[index] = btn.text || '';
            buttons.push(btnDef);
          }
        });
      }

      RCTAlertManager.alertWithArgs({
        title: title || undefined,
        message: message || undefined,
        buttons: buttons,
        type: type || undefined,
        defaultValue: defaultValue,
        cancelButtonKey: cancelButtonKey,
        destructiveButtonKey: destructiveButtonKey,
        keyboardType: keyboardType
      }, function (id, value) {
        var cb = callbacks[id];
        cb && cb(value);
      });
    }
  }]);
  return AlertIOS;
}();

module.exports = AlertIOS;
}, 206, null, "AlertIOS");
__d(/* Promise */function(global, require, module, exports) {
'use strict';

var Promise = require(208                      ); // 208 = fbjs/lib/Promise.native

if (__DEV__) {
  require(212                                      ).enable({ // 212 = promise/setimmediate/rejection-tracking
    allRejections: true,
    onUnhandled: function onUnhandled(id) {
      var error = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var _error$message = error.message,
          message = _error$message === undefined ? null : _error$message,
          _error$stack = error.stack,
          stack = _error$stack === undefined ? null : _error$stack;

      var warning = 'Possible Unhandled Promise Rejection (id: ' + id + '):\n' + (message == null ? '' : message + '\n') + (stack == null ? '' : stack);
      console.warn(warning);
    },
    onHandled: function onHandled(id) {
      var warning = 'Promise Rejection Handled (id: ' + id + ')\n' + 'This means you can ignore any previous messages of the form ' + ('"Possible Unhandled Promise Rejection (id: ' + id + '):"');
      console.warn(warning);
    }
  });
}

module.exports = Promise;
}, 207, null, "Promise");
__d(/* fbjs/lib/Promise.native.js */function(global, require, module, exports) {

'use strict';

var Promise = require(209                                  ); // 209 = promise/setimmediate/es6-extensions
require(211                        ); // 211 = promise/setimmediate/done

Promise.prototype['finally'] = function (onSettled) {
  return this.then(onSettled, onSettled);
};

module.exports = Promise;
}, 208, null, "fbjs/lib/Promise.native.js");
__d(/* promise/setimmediate/es6-extensions.js */function(global, require, module, exports) {'use strict';

var Promise = require(210        ); // 210 = ./core.js

module.exports = Promise;

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._81 = 1;
  p._65 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._81 === 3) {
            val = val._65;
          }
          if (val._81 === 1) return res(i, val._65);
          if (val._81 === 2) reject(val._65);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function (value) {
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};
}, 209, null, "promise/setimmediate/es6-extensions.js");
__d(/* promise/setimmediate/core.js */function(global, require, module, exports) {'use strict';

function noop() {}

var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('not a function');
  }
  this._45 = 0;
  this._81 = 0;
  this._65 = null;
  this._54 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._10 = null;
Promise._97 = null;
Promise._61 = noop;

Promise.prototype.then = function (onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
};
function handle(self, deferred) {
  while (self._81 === 3) {
    self = self._65;
  }
  if (Promise._10) {
    Promise._10(self);
  }
  if (self._81 === 0) {
    if (self._45 === 0) {
      self._45 = 1;
      self._54 = deferred;
      return;
    }
    if (self._45 === 1) {
      self._45 = 2;
      self._54 = [self._54, deferred];
      return;
    }
    self._54.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  setImmediate(function () {
    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._81 === 1) {
        resolve(deferred.promise, self._65);
      } else {
        reject(deferred.promise, self._65);
      }
      return;
    }
    var ret = tryCallOne(cb, self._65);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  if (newValue === self) {
    return reject(self, new TypeError('A promise cannot be resolved with itself.'));
  }
  if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (then === self.then && newValue instanceof Promise) {
      self._81 = 3;
      self._65 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._81 = 1;
  self._65 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._81 = 2;
  self._65 = newValue;
  if (Promise._97) {
    Promise._97(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._45 === 1) {
    handle(self, self._54);
    self._54 = null;
  }
  if (self._45 === 2) {
    for (var i = 0; i < self._54.length; i++) {
      handle(self, self._54[i]);
    }
    self._54 = null;
  }
}

function Handler(onFulfilled, onRejected, promise) {
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  });
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}
}, 210, null, "promise/setimmediate/core.js");
__d(/* promise/setimmediate/done.js */function(global, require, module, exports) {'use strict';

var Promise = require(210        ); // 210 = ./core.js

module.exports = Promise;
Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this;
  self.then(null, function (err) {
    setTimeout(function () {
      throw err;
    }, 0);
  });
};
}, 211, null, "promise/setimmediate/done.js");
__d(/* promise/setimmediate/rejection-tracking.js */function(global, require, module, exports) {'use strict';

var Promise = require(210     ); // 210 = ./core

var DEFAULT_WHITELIST = [ReferenceError, TypeError, RangeError];

var enabled = false;
exports.disable = disable;
function disable() {
  enabled = false;
  Promise._10 = null;
  Promise._97 = null;
}

exports.enable = enable;
function enable(options) {
  options = options || {};
  if (enabled) disable();
  enabled = true;
  var id = 0;
  var displayId = 0;
  var rejections = {};
  Promise._10 = function (promise) {
    if (promise._81 === 2 && rejections[promise._72]) {
      if (rejections[promise._72].logged) {
        onHandled(promise._72);
      } else {
        clearTimeout(rejections[promise._72].timeout);
      }
      delete rejections[promise._72];
    }
  };
  Promise._97 = function (promise, err) {
    if (promise._45 === 0) {
      promise._72 = id++;
      rejections[promise._72] = {
        displayId: null,
        error: err,
        timeout: setTimeout(onUnhandled.bind(null, promise._72), matchWhitelist(err, DEFAULT_WHITELIST) ? 100 : 2000),
        logged: false
      };
    }
  };
  function onUnhandled(id) {
    if (options.allRejections || matchWhitelist(rejections[id].error, options.whitelist || DEFAULT_WHITELIST)) {
      rejections[id].displayId = displayId++;
      if (options.onUnhandled) {
        rejections[id].logged = true;
        options.onUnhandled(rejections[id].displayId, rejections[id].error);
      } else {
        rejections[id].logged = true;
        logError(rejections[id].displayId, rejections[id].error);
      }
    }
  }
  function onHandled(id) {
    if (rejections[id].logged) {
      if (options.onHandled) {
        options.onHandled(rejections[id].displayId, rejections[id].error);
      } else if (!rejections[id].onUnhandled) {
        console.warn('Promise Rejection Handled (id: ' + rejections[id].displayId + '):');
        console.warn('  This means you can ignore any previous messages of the form "Possible Unhandled Promise Rejection" with id ' + rejections[id].displayId + '.');
      }
    }
  }
}

function logError(id, error) {
  console.warn('Possible Unhandled Promise Rejection (id: ' + id + '):');
  var errStr = (error && (error.stack || error)) + '';
  errStr.split('\n').forEach(function (line) {
    console.warn('  ' + line);
  });
}

function matchWhitelist(error, list) {
  return list.some(function (cls) {
    return error instanceof cls;
  });
}
}, 212, null, "promise/setimmediate/rejection-tracking.js");
__d(/* regenerator-runtime/runtime.js */function(global, require, module, exports) {

!function (global) {
  "use strict";

  var hasOwn = Object.prototype.hasOwnProperty;
  var undefined;
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      module.exports = runtime;
    }

    return;
  }

  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  var ContinueSentinel = {};

  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype;
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] = GeneratorFunction.displayName = "GeneratorFunction";

  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      prototype[method] = function (arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function (genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor ? ctor === GeneratorFunction || (ctor.displayName || ctor.name) === "GeneratorFunction" : false;
  };

  runtime.mark = function (genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  runtime.awrap = function (arg) {
    return new AwaitArgument(arg);
  };

  function AwaitArgument(arg) {
    this.arg = arg;
  }

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value instanceof AwaitArgument) {
          return Promise.resolve(value.arg).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function (unwrapped) {
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function (resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
    }

    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);

  runtime.async = function (innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList));

    return runtime.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" || method === "throw" && delegate.iterator[method] === undefined) {
            context.delegate = null;

            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              continue;
            }
          }

          var record = tryCatch(delegate.iterator[method], delegate.iterator, arg);

          if (record.type === "throw") {
            context.delegate = null;

            method = "throw";
            arg = record.arg;
            continue;
          }

          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          context.sent = context._sent = arg;
        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            method = "next";
            arg = undefined;
          }
        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          state = context.done ? GenStateCompleted : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              arg = undefined;
            }
          } else {
            return info;
          }
        } else if (record.type === "throw") {
          state = GenStateCompleted;

          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  defineIteratorMethods(Gp);

  Gp[iteratorSymbol] = function () {
    return this;
  };

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function () {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function (object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1,
            next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function reset(skipTempReset) {
      this.prev = 0;
      this.next = 0;

      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          if (name.charAt(0) === "t" && hasOwn.call(this, name) && !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function stop() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function dispatchException(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }
          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }
          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function abrupt(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry && (type === "break" || type === "continue") && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc) {
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function complete(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" || record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function finish(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function _catch(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      throw new Error("illegal catch attempt");
    },

    delegateYield: function delegateYield(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
}(typeof global === "object" ? global : typeof window === "object" ? window : typeof self === "object" ? self : this);
}, 213, null, "regenerator-runtime/runtime.js");
__d(/* XMLHttpRequest */function(global, require, module, exports) {
'use strict';

var EventTarget = require(93                 ); // 93 = event-target-shim
var RCTNetworking = require(215            ); // 215 = RCTNetworking

var base64 = require(92         ); // 92 = base64-js
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var UNSENT = 0;
var OPENED = 1;
var HEADERS_RECEIVED = 2;
var LOADING = 3;
var DONE = 4;

var SUPPORTED_RESPONSE_TYPES = {
  arraybuffer: typeof global.ArrayBuffer === 'function',
  blob: typeof global.Blob === 'function',
  document: false,
  json: true,
  text: true,
  '': true
};

var REQUEST_EVENTS = ['abort', 'error', 'load', 'loadstart', 'progress', 'timeout', 'loadend'];

var XHR_EVENTS = REQUEST_EVENTS.concat('readystatechange');

var XMLHttpRequestEventTarget = function (_EventTarget) {
  babelHelpers.inherits(XMLHttpRequestEventTarget, _EventTarget);

  function XMLHttpRequestEventTarget() {
    babelHelpers.classCallCheck(this, XMLHttpRequestEventTarget);
    return babelHelpers.possibleConstructorReturn(this, (XMLHttpRequestEventTarget.__proto__ || Object.getPrototypeOf(XMLHttpRequestEventTarget)).apply(this, arguments));
  }

  return XMLHttpRequestEventTarget;
}(EventTarget.apply(undefined, REQUEST_EVENTS));

var XMLHttpRequest = function (_EventTarget2) {
  babelHelpers.inherits(XMLHttpRequest, _EventTarget2);
  babelHelpers.createClass(XMLHttpRequest, null, [{
    key: 'setInterceptor',
    value: function setInterceptor(interceptor) {
      XMLHttpRequest._interceptor = interceptor;
    }
  }]);

  function XMLHttpRequest() {
    babelHelpers.classCallCheck(this, XMLHttpRequest);

    var _this2 = babelHelpers.possibleConstructorReturn(this, (XMLHttpRequest.__proto__ || Object.getPrototypeOf(XMLHttpRequest)).call(this));

    _this2.UNSENT = UNSENT;
    _this2.OPENED = OPENED;
    _this2.HEADERS_RECEIVED = HEADERS_RECEIVED;
    _this2.LOADING = LOADING;
    _this2.DONE = DONE;
    _this2.readyState = UNSENT;
    _this2.status = 0;
    _this2.timeout = 0;
    _this2.upload = new XMLHttpRequestEventTarget();
    _this2._aborted = false;
    _this2._hasError = false;
    _this2._method = null;
    _this2._response = '';
    _this2._url = null;
    _this2._timedOut = false;
    _this2._trackingName = 'unknown';
    _this2._incrementalEvents = false;

    _this2._reset();
    return _this2;
  }

  babelHelpers.createClass(XMLHttpRequest, [{
    key: '_reset',
    value: function _reset() {
      this.readyState = this.UNSENT;
      this.responseHeaders = undefined;
      this.status = 0;
      delete this.responseURL;

      this._requestId = null;

      this._cachedResponse = undefined;
      this._hasError = false;
      this._headers = {};
      this._response = '';
      this._responseType = '';
      this._sent = false;
      this._lowerCaseResponseHeaders = {};

      this._clearSubscriptions();
      this._timedOut = false;
    }
  }, {
    key: '__didCreateRequest',
    value: function __didCreateRequest(requestId) {
      this._requestId = requestId;

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.requestSent(requestId, this._url || '', this._method || 'GET', this._headers);
    }
  }, {
    key: '__didUploadProgress',
    value: function __didUploadProgress(requestId, progress, total) {
      if (requestId === this._requestId) {
        this.upload.dispatchEvent({
          type: 'progress',
          lengthComputable: true,
          loaded: progress,
          total: total
        });
      }
    }
  }, {
    key: '__didReceiveResponse',
    value: function __didReceiveResponse(requestId, status, responseHeaders, responseURL) {
      if (requestId === this._requestId) {
        this.status = status;
        this.setResponseHeaders(responseHeaders);
        this.setReadyState(this.HEADERS_RECEIVED);
        if (responseURL || responseURL === '') {
          this.responseURL = responseURL;
        } else {
          delete this.responseURL;
        }

        XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.responseReceived(requestId, responseURL || this._url || '', status, responseHeaders || {});
      }
    }
  }, {
    key: '__didReceiveData',
    value: function __didReceiveData(requestId, response) {
      if (requestId !== this._requestId) {
        return;
      }
      this._response = response;
      this._cachedResponse = undefined;
      this.setReadyState(this.LOADING);

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, response);
    }
  }, {
    key: '__didReceiveIncrementalData',
    value: function __didReceiveIncrementalData(requestId, responseText, progress, total) {
      if (requestId !== this._requestId) {
        return;
      }
      if (!this._response) {
        this._response = responseText;
      } else {
        this._response += responseText;
      }

      XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.dataReceived(requestId, responseText);

      this.setReadyState(this.LOADING);
      this.__didReceiveDataProgress(requestId, progress, total);
    }
  }, {
    key: '__didReceiveDataProgress',
    value: function __didReceiveDataProgress(requestId, loaded, total) {
      if (requestId !== this._requestId) {
        return;
      }
      this.dispatchEvent({
        type: 'progress',
        lengthComputable: total >= 0,
        loaded: loaded,
        total: total
      });
    }
  }, {
    key: '__didCompleteResponse',
    value: function __didCompleteResponse(requestId, error, timeOutError) {
      if (requestId === this._requestId) {
        if (error) {
          if (this._responseType === '' || this._responseType === 'text') {
            this._response = error;
          }
          this._hasError = true;
          if (timeOutError) {
            this._timedOut = true;
          }
        }
        this._clearSubscriptions();
        this._requestId = null;
        this.setReadyState(this.DONE);

        if (error) {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFailed(requestId, error);
        } else {
          XMLHttpRequest._interceptor && XMLHttpRequest._interceptor.loadingFinished(requestId, this._response.length);
        }
      }
    }
  }, {
    key: '_clearSubscriptions',
    value: function _clearSubscriptions() {
      (this._subscriptions || []).forEach(function (sub) {
        sub.remove();
      });
      this._subscriptions = [];
    }
  }, {
    key: 'getAllResponseHeaders',
    value: function getAllResponseHeaders() {
      if (!this.responseHeaders) {
        return null;
      }
      var headers = this.responseHeaders || {};
      return Object.keys(headers).map(function (headerName) {
        return headerName + ': ' + headers[headerName];
      }).join('\r\n');
    }
  }, {
    key: 'getResponseHeader',
    value: function getResponseHeader(header) {
      var value = this._lowerCaseResponseHeaders[header.toLowerCase()];
      return value !== undefined ? value : null;
    }
  }, {
    key: 'setRequestHeader',
    value: function setRequestHeader(header, value) {
      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      this._headers[header.toLowerCase()] = String(value);
    }
  }, {
    key: 'setTrackingName',
    value: function setTrackingName(trackingName) {
      this._trackingName = trackingName;
      return this;
    }
  }, {
    key: 'open',
    value: function open(method, url, async) {
      if (this.readyState !== this.UNSENT) {
        throw new Error('Cannot open, already sending');
      }
      if (async !== undefined && !async) {
        throw new Error('Synchronous http requests are not supported');
      }
      if (!url) {
        throw new Error('Cannot load an empty url');
      }
      this._method = method.toUpperCase();
      this._url = url;
      this._aborted = false;
      this.setReadyState(this.OPENED);
    }
  }, {
    key: 'send',
    value: function send(data) {
      var _this3 = this;

      if (this.readyState !== this.OPENED) {
        throw new Error('Request has not been opened');
      }
      if (this._sent) {
        throw new Error('Request has already been sent');
      }
      this._sent = true;
      var incrementalEvents = this._incrementalEvents || !!this.onreadystatechange || !!this.onprogress;

      this._subscriptions.push(RCTNetworking.addListener('didSendNetworkData', function (args) {
        return _this3.__didUploadProgress.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkResponse', function (args) {
        return _this3.__didReceiveResponse.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkData', function (args) {
        return _this3.__didReceiveData.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkIncrementalData', function (args) {
        return _this3.__didReceiveIncrementalData.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didReceiveNetworkDataProgress', function (args) {
        return _this3.__didReceiveDataProgress.apply(_this3, babelHelpers.toConsumableArray(args));
      }));
      this._subscriptions.push(RCTNetworking.addListener('didCompleteNetworkResponse', function (args) {
        return _this3.__didCompleteResponse.apply(_this3, babelHelpers.toConsumableArray(args));
      }));

      var nativeResponseType = 'text';
      if (this._responseType === 'arraybuffer' || this._responseType === 'blob') {
        nativeResponseType = 'base64';
      }

      invariant(this._method, 'Request method needs to be defined.');
      invariant(this._url, 'Request URL needs to be defined.');
      RCTNetworking.sendRequest(this._method, this._trackingName, this._url, this._headers, data, nativeResponseType, incrementalEvents, this.timeout, this.__didCreateRequest.bind(this));
    }
  }, {
    key: 'abort',
    value: function abort() {
      this._aborted = true;
      if (this._requestId) {
        RCTNetworking.abortRequest(this._requestId);
      }

      if (!(this.readyState === this.UNSENT || this.readyState === this.OPENED && !this._sent || this.readyState === this.DONE)) {
        this._reset();
        this.setReadyState(this.DONE);
      }

      this._reset();
    }
  }, {
    key: 'setResponseHeaders',
    value: function setResponseHeaders(responseHeaders) {
      this.responseHeaders = responseHeaders || null;
      var headers = responseHeaders || {};
      this._lowerCaseResponseHeaders = Object.keys(headers).reduce(function (lcaseHeaders, headerName) {
        lcaseHeaders[headerName.toLowerCase()] = headers[headerName];
        return lcaseHeaders;
      }, {});
    }
  }, {
    key: 'setReadyState',
    value: function setReadyState(newState) {
      this.readyState = newState;
      this.dispatchEvent({ type: 'readystatechange' });
      if (newState === this.DONE) {
        if (this._aborted) {
          this.dispatchEvent({ type: 'abort' });
        } else if (this._hasError) {
          if (this._timedOut) {
            this.dispatchEvent({ type: 'timeout' });
          } else {
            this.dispatchEvent({ type: 'error' });
          }
        } else {
          this.dispatchEvent({ type: 'load' });
        }
        this.dispatchEvent({ type: 'loadend' });
      }
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, listener) {
      if (type === 'readystatechange' || type === 'progress') {
        this._incrementalEvents = true;
      }
      babelHelpers.get(XMLHttpRequest.prototype.__proto__ || Object.getPrototypeOf(XMLHttpRequest.prototype), 'addEventListener', this).call(this, type, listener);
    }
  }, {
    key: 'responseType',
    get: function get() {
      return this._responseType;
    },
    set: function set(responseType) {
      if (this._sent) {
        throw new Error('Failed to set the \'responseType\' property on \'XMLHttpRequest\': The ' + 'response type cannot be set after the request has been sent.');
      }
      if (!SUPPORTED_RESPONSE_TYPES.hasOwnProperty(responseType)) {
        warning(false, 'The provided value \'' + responseType + '\' is not a valid \'responseType\'.');
        return;
      }

      invariant(SUPPORTED_RESPONSE_TYPES[responseType] || responseType === 'document', 'The provided value \'' + responseType + '\' is unsupported in this environment.');
      this._responseType = responseType;
    }
  }, {
    key: 'responseText',
    get: function get() {
      if (this._responseType !== '' && this._responseType !== 'text') {
        throw new Error("The 'responseText' property is only available if 'responseType' " + ('is set to \'\' or \'text\', but it is \'' + this._responseType + '\'.'));
      }
      if (this.readyState < LOADING) {
        return '';
      }
      return this._response;
    }
  }, {
    key: 'response',
    get: function get() {
      var responseType = this.responseType;

      if (responseType === '' || responseType === 'text') {
        return this.readyState < LOADING || this._hasError ? '' : this._response;
      }

      if (this.readyState !== DONE) {
        return null;
      }

      if (this._cachedResponse !== undefined) {
        return this._cachedResponse;
      }

      switch (responseType) {
        case 'document':
          this._cachedResponse = null;
          break;

        case 'arraybuffer':
          this._cachedResponse = base64.toByteArray(this._response).buffer;
          break;

        case 'blob':
          this._cachedResponse = new global.Blob([base64.toByteArray(this._response).buffer], { type: this.getResponseHeader('content-type') || '' });
          break;

        case 'json':
          try {
            this._cachedResponse = JSON.parse(this._response);
          } catch (_) {
            this._cachedResponse = null;
          }
          break;

        default:
          this._cachedResponse = null;
      }

      return this._cachedResponse;
    }
  }]);
  return XMLHttpRequest;
}(EventTarget.apply(undefined, babelHelpers.toConsumableArray(XHR_EVENTS)));

XMLHttpRequest.UNSENT = UNSENT;
XMLHttpRequest.OPENED = OPENED;
XMLHttpRequest.HEADERS_RECEIVED = HEADERS_RECEIVED;
XMLHttpRequest.LOADING = LOADING;
XMLHttpRequest.DONE = DONE;
XMLHttpRequest._interceptor = null;


module.exports = XMLHttpRequest;
}, 214, null, "XMLHttpRequest");
__d(/* RCTNetworking */function(global, require, module, exports) {
'use strict';

var FormData = require(216       ); // 216 = FormData
var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var RCTNetworkingNative = require(57             ).Networking; // 57 = NativeModules
var convertRequestBody = require(217                 ); // 217 = convertRequestBody

function convertHeadersMapToArray(headers) {
  var headerArray = [];
  for (var name in headers) {
    headerArray.push([name, headers[name]]);
  }
  return headerArray;
}

var _requestId = 1;
function generateRequestId() {
  return _requestId++;
}

var RCTNetworking = function (_NativeEventEmitter) {
  babelHelpers.inherits(RCTNetworking, _NativeEventEmitter);

  function RCTNetworking() {
    babelHelpers.classCallCheck(this, RCTNetworking);
    return babelHelpers.possibleConstructorReturn(this, (RCTNetworking.__proto__ || Object.getPrototypeOf(RCTNetworking)).call(this, RCTNetworkingNative));
  }

  babelHelpers.createClass(RCTNetworking, [{
    key: 'sendRequest',
    value: function sendRequest(method, trackingName, url, headers, data, responseType, incrementalUpdates, timeout, callback) {
      var body = convertRequestBody(data);
      if (body && body.formData) {
        body.formData = body.formData.map(function (part) {
          return babelHelpers.extends({}, part, {
            headers: convertHeadersMapToArray(part.headers)
          });
        });
      }
      var requestId = generateRequestId();
      RCTNetworkingNative.sendRequest(method, url, requestId, convertHeadersMapToArray(headers), babelHelpers.extends({}, body, { trackingName: trackingName }), responseType, incrementalUpdates, timeout);
      callback(requestId);
    }
  }, {
    key: 'abortRequest',
    value: function abortRequest(requestId) {
      RCTNetworkingNative.abortRequest(requestId);
    }
  }, {
    key: 'clearCookies',
    value: function clearCookies(callback) {
      RCTNetworkingNative.clearCookies(callback);
    }
  }]);
  return RCTNetworking;
}(NativeEventEmitter);

module.exports = new RCTNetworking();
}, 215, null, "RCTNetworking");
__d(/* FormData */function(global, require, module, exports) {
'use strict';

var FormData = function () {
  function FormData() {
    babelHelpers.classCallCheck(this, FormData);

    this._parts = [];
  }

  babelHelpers.createClass(FormData, [{
    key: 'append',
    value: function append(key, value) {
      this._parts.push([key, value]);
    }
  }, {
    key: 'getParts',
    value: function getParts() {
      return this._parts.map(function (_ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 2),
            name = _ref2[0],
            value = _ref2[1];

        var contentDisposition = 'form-data; name="' + name + '"';

        var headers = { 'content-disposition': contentDisposition };

        if (typeof value === 'object') {
          if (typeof value.name === 'string') {
            headers['content-disposition'] += '; filename="' + value.name + '"';
          }
          if (typeof value.type === 'string') {
            headers['content-type'] = value.type;
          }
          return babelHelpers.extends({}, value, { headers: headers, fieldName: name });
        }

        return { string: String(value), headers: headers, fieldName: name };
      });
    }
  }]);
  return FormData;
}();

module.exports = FormData;
}, 216, null, "FormData");
__d(/* convertRequestBody */function(global, require, module, exports) {
'use strict';

var binaryToBase64 = require(91              ); // 91 = binaryToBase64

var FormData = require(216       ); // 216 = FormData

function convertRequestBody(body) {
  if (typeof body === 'string') {
    return { string: body };
  }
  if (body instanceof FormData) {
    return { formData: body.getParts() };
  }
  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {
    return { base64: binaryToBase64(body) };
  }
  return body;
}

module.exports = convertRequestBody;
}, 217, null, "convertRequestBody");
__d(/* Geolocation */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var RCTLocationObserver = require(57             ).LocationObserver; // 57 = NativeModules

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var logError = require(89        ); // 89 = logError
var warning = require(21                ); // 21 = fbjs/lib/warning

var LocationEventEmitter = new NativeEventEmitter(RCTLocationObserver);

var subscriptions = [];
var updatesEnabled = false;

var Geolocation = {
  getCurrentPosition: function getCurrentPosition(geo_success, geo_error, geo_options) {
    invariant(typeof geo_success === 'function', 'Must provide a valid geo_success callback.');
    RCTLocationObserver.getCurrentPosition(geo_options || {}, geo_success, geo_error || logError);
  },

  watchPosition: function watchPosition(success, error, options) {
    if (!updatesEnabled) {
      RCTLocationObserver.startObserving(options || {});
      updatesEnabled = true;
    }
    var watchID = subscriptions.length;
    subscriptions.push([LocationEventEmitter.addListener('geolocationDidChange', success), error ? LocationEventEmitter.addListener('geolocationError', error) : null]);
    return watchID;
  },

  clearWatch: function clearWatch(watchID) {
    var sub = subscriptions[watchID];
    if (!sub) {
      return;
    }

    sub[0].remove();

    var sub1 = sub[1];sub1 && sub1.remove();
    subscriptions[watchID] = undefined;
    var noWatchers = true;
    for (var ii = 0; ii < subscriptions.length; ii++) {
      if (subscriptions[ii]) {
        noWatchers = false;
      }
    }
    if (noWatchers) {
      Geolocation.stopObserving();
    }
  },

  stopObserving: function stopObserving() {
    if (updatesEnabled) {
      RCTLocationObserver.stopObserving();
      updatesEnabled = false;
      for (var ii = 0; ii < subscriptions.length; ii++) {
        var sub = subscriptions[ii];
        if (sub) {
          warning('Called stopObserving with existing subscriptions.');
          sub[0].remove();

          var sub1 = sub[1];sub1 && sub1.remove();
        }
      }
      subscriptions = [];
    }
  }
};

module.exports = Geolocation;
}, 218, null, "Geolocation");
__d(/* Map */function(global, require, module, exports) {

'use strict';

var _shouldPolyfillES6Collection = require(220                           ); // 220 = _shouldPolyfillES6Collection
var guid = require(221   ); // 221 = guid
var isNode = require(222              ); // 222 = fbjs/lib/isNode
var toIterator = require(223         ); // 223 = toIterator

module.exports = function (global, undefined) {
  if (!_shouldPolyfillES6Collection('Map')) {
    return global.Map;
  }

  var KIND_KEY = 'key';
  var KIND_VALUE = 'value';
  var KIND_KEY_VALUE = 'key+value';

  var KEY_PREFIX = '$map_';

  var SECRET_SIZE_PROP;
  if (__DEV__) {
    SECRET_SIZE_PROP = '$size' + guid();
  }

  var OLD_IE_HASH_PREFIX = 'IE_HASH_';

  var Map = function () {
    function Map(iterable) {
      babelHelpers.classCallCheck(this, Map);

      if (!isObject(this)) {
        throw new TypeError('Wrong map object type.');
      }

      initMap(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          if (!isObject(next.value)) {
            throw new TypeError('Expected iterable items to be pair objects.');
          }
          this.set(next.value[0], next.value[1]);
        }
      }
    }

    babelHelpers.createClass(Map, [{
      key: 'clear',
      value: function clear() {
        initMap(this);
      }
    }, {
      key: 'has',
      value: function has(key) {
        var index = getIndex(this, key);
        return !!(index != null && this._mapData[index]);
      }
    }, {
      key: 'set',
      value: function set(key, value) {
        var index = getIndex(this, key);

        if (index != null && this._mapData[index]) {
          this._mapData[index][1] = value;
        } else {
          index = this._mapData.push([key, value]) - 1;
          setIndex(this, key, index);
          if (__DEV__) {
            this[SECRET_SIZE_PROP] += 1;
          } else {
            this.size += 1;
          }
        }

        return this;
      }
    }, {
      key: 'get',
      value: function get(key) {
        var index = getIndex(this, key);
        if (index == null) {
          return undefined;
        } else {
          return this._mapData[index][1];
        }
      }
    }, {
      key: 'delete',
      value: function _delete(key) {
        var index = getIndex(this, key);
        if (index != null && this._mapData[index]) {
          setIndex(this, key, undefined);
          this._mapData[index] = undefined;
          if (__DEV__) {
            this[SECRET_SIZE_PROP] -= 1;
          } else {
            this.size -= 1;
          }
          return true;
        } else {
          return false;
        }
      }
    }, {
      key: 'entries',
      value: function entries() {
        return new MapIterator(this, KIND_KEY_VALUE);
      }
    }, {
      key: 'keys',
      value: function keys() {
        return new MapIterator(this, KIND_KEY);
      }
    }, {
      key: 'values',
      value: function values() {
        return new MapIterator(this, KIND_VALUE);
      }
    }, {
      key: 'forEach',
      value: function forEach(callback, thisArg) {
        if (typeof callback !== 'function') {
          throw new TypeError('Callback must be callable.');
        }

        var boundCallback = callback.bind(thisArg || undefined);
        var mapData = this._mapData;

        for (var i = 0; i < mapData.length; i++) {
          var entry = mapData[i];
          if (entry != null) {
            boundCallback(entry[1], entry[0], this);
          }
        }
      }
    }]);
    return Map;
  }();

  Map.prototype[toIterator.ITERATOR_SYMBOL] = Map.prototype.entries;

  var MapIterator = function () {
    function MapIterator(map, kind) {
      babelHelpers.classCallCheck(this, MapIterator);

      if (!(isObject(map) && map._mapData)) {
        throw new TypeError('Object is not a map.');
      }

      if ([KIND_KEY, KIND_KEY_VALUE, KIND_VALUE].indexOf(kind) === -1) {
        throw new Error('Invalid iteration kind.');
      }

      this._map = map;
      this._nextIndex = 0;
      this._kind = kind;
    }

    babelHelpers.createClass(MapIterator, [{
      key: 'next',
      value: function next() {
        if (!this instanceof Map) {
          throw new TypeError('Expected to be called on a MapIterator.');
        }

        var map = this._map;
        var index = this._nextIndex;
        var kind = this._kind;

        if (map == null) {
          return createIterResultObject(undefined, true);
        }

        var entries = map._mapData;

        while (index < entries.length) {
          var record = entries[index];

          index += 1;
          this._nextIndex = index;

          if (record) {
            if (kind === KIND_KEY) {
              return createIterResultObject(record[0], false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(record[1], false);
            } else if (kind) {
              return createIterResultObject(record, false);
            }
          }
        }

        this._map = undefined;

        return createIterResultObject(undefined, true);
      }
    }]);
    return MapIterator;
  }();

  MapIterator.prototype[toIterator.ITERATOR_SYMBOL] = function () {
    return this;
  };

  function getIndex(map, key) {
    if (isObject(key)) {
      var hash = getHash(key);
      return map._objectIndex[hash];
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        return map._stringIndex[prefixedKey];
      } else {
        return map._otherIndex[prefixedKey];
      }
    }
  }

  function setIndex(map, key, index) {
    var shouldDelete = index == null;

    if (isObject(key)) {
      var hash = getHash(key);
      if (shouldDelete) {
        delete map._objectIndex[hash];
      } else {
        map._objectIndex[hash] = index;
      }
    } else {
      var prefixedKey = KEY_PREFIX + key;
      if (typeof key === 'string') {
        if (shouldDelete) {
          delete map._stringIndex[prefixedKey];
        } else {
          map._stringIndex[prefixedKey] = index;
        }
      } else {
        if (shouldDelete) {
          delete map._otherIndex[prefixedKey];
        } else {
          map._otherIndex[prefixedKey] = index;
        }
      }
    }
  }

  function initMap(map) {
    map._mapData = [];

    map._objectIndex = {};

    map._stringIndex = {};

    map._otherIndex = {};

    if (__DEV__) {
      if (isES5) {
        if (map.hasOwnProperty(SECRET_SIZE_PROP)) {
          map[SECRET_SIZE_PROP] = 0;
        } else {
          Object.defineProperty(map, SECRET_SIZE_PROP, {
            value: 0,
            writable: true
          });
          Object.defineProperty(map, 'size', {
            set: function set(v) {
              console.error('PLEASE FIX ME: You are changing the map size property which ' + 'should not be writable and will break in production.');
              throw new Error('The map size property is not writable.');
            },
            get: function get() {
              return map[SECRET_SIZE_PROP];
            }
          });
        }

        return;
      }
    }

    map.size = 0;
  }

  function isObject(o) {
    return o != null && (typeof o === 'object' || typeof o === 'function');
  }

  function createIterResultObject(value, done) {
    return { value: value, done: done };
  }

  var isES5 = function () {
    try {
      Object.defineProperty({}, 'x', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  function isExtensible(o) {
    if (!isES5) {
      return true;
    } else {
      return Object.isExtensible(o);
    }
  }

  function getIENodeHash(node) {
    var uniqueID;
    switch (node.nodeType) {
      case 1:
        uniqueID = node.uniqueID;
        break;
      case 9:
        uniqueID = node.documentElement.uniqueID;
        break;
      default:
        return null;
    }

    if (uniqueID) {
      return OLD_IE_HASH_PREFIX + uniqueID;
    } else {
      return null;
    }
  }

  var getHash = function () {
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    var hashProperty = guid();
    var hashCounter = 0;

    return function getHash(o) {
      if (o[hashProperty]) {
        return o[hashProperty];
      } else if (!isES5 && o.propertyIsEnumerable && o.propertyIsEnumerable[hashProperty]) {
        return o.propertyIsEnumerable[hashProperty];
      } else if (!isES5 && isNode(o) && getIENodeHash(o)) {
        return getIENodeHash(o);
      } else if (!isES5 && o[hashProperty]) {
        return o[hashProperty];
      }

      if (isExtensible(o)) {
        hashCounter += 1;
        if (isES5) {
          Object.defineProperty(o, hashProperty, {
            enumerable: false,
            writable: false,
            configurable: false,
            value: hashCounter
          });
        } else if (o.propertyIsEnumerable) {
          o.propertyIsEnumerable = function () {
            return propIsEnumerable.apply(this, arguments);
          };
          o.propertyIsEnumerable[hashProperty] = hashCounter;
        } else if (isNode(o)) {
          o[hashProperty] = hashCounter;
        } else {
          throw new Error('Unable to set a non-enumerable property on object.');
        }
        return hashCounter;
      } else {
        throw new Error('Non-extensible objects are not allowed as keys.');
      }
    };
  }();

  return Map;
}(Function('return this')());
}, 219, null, "Map");
__d(/* _shouldPolyfillES6Collection */function(global, require, module, exports) {
'use strict';

function shouldPolyfillES6Collection(collectionName) {
  var Collection = global[collectionName];
  if (Collection == null) {
    return true;
  }

  if (typeof global.Symbol !== 'function') {
    return true;
  }

  var proto = Collection.prototype;

  return Collection == null || typeof Collection !== 'function' || typeof proto.clear !== 'function' || new Collection().size !== 0 || typeof proto.keys !== 'function' || typeof proto.forEach !== 'function';
}

module.exports = shouldPolyfillES6Collection;
}, 220, null, "_shouldPolyfillES6Collection");
__d(/* guid */function(global, require, module, exports) {

'use strict';

function guid() {
  return 'f' + (Math.random() * (1 << 30)).toString(16).replace('.', '');
}

module.exports = guid;
}, 221, null, "guid");
__d(/* fbjs/lib/isNode.js */function(global, require, module, exports) {'use strict';

function isNode(object) {
  var doc = object ? object.ownerDocument || object : document;
  var defaultView = doc.defaultView || window;
  return !!(object && (typeof defaultView.Node === 'function' ? object instanceof defaultView.Node : typeof object === 'object' && typeof object.nodeType === 'number' && typeof object.nodeName === 'string'));
}

module.exports = isNode;
}, 222, null, "fbjs/lib/isNode.js");
__d(/* toIterator */function(global, require, module, exports) {
'use strict';

var KIND_KEY = 'key';
var KIND_VALUE = 'value';
var KIND_KEY_VAL = 'key+value';

var ITERATOR_SYMBOL = typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator';

var toIterator = function () {
  if (!(Array.prototype[ITERATOR_SYMBOL] && String.prototype[ITERATOR_SYMBOL])) {
    return function () {
      var ArrayIterator = function () {
        function ArrayIterator(array, kind) {
          babelHelpers.classCallCheck(this, ArrayIterator);

          if (!Array.isArray(array)) {
            throw new TypeError('Object is not an Array');
          }
          this._iteratedObject = array;
          this._kind = kind;
          this._nextIndex = 0;
        }

        babelHelpers.createClass(ArrayIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof ArrayIterator) {
              throw new TypeError('Object is not an ArrayIterator');
            }

            if (this._iteratedObject == null) {
              return createIterResultObject(undefined, true);
            }

            var array = this._iteratedObject;
            var len = this._iteratedObject.length;
            var index = this._nextIndex;
            var kind = this._kind;

            if (index >= len) {
              this._iteratedObject = undefined;
              return createIterResultObject(undefined, true);
            }

            this._nextIndex = index + 1;

            if (kind === KIND_KEY) {
              return createIterResultObject(index, false);
            } else if (kind === KIND_VALUE) {
              return createIterResultObject(array[index], false);
            } else if (kind === KIND_KEY_VAL) {
              return createIterResultObject([index, array[index]], false);
            }
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);
        return ArrayIterator;
      }();

      var StringIterator = function () {
        function StringIterator(string) {
          babelHelpers.classCallCheck(this, StringIterator);

          if (typeof string !== 'string') {
            throw new TypeError('Object is not a string');
          }
          this._iteratedString = string;
          this._nextIndex = 0;
        }

        babelHelpers.createClass(StringIterator, [{
          key: 'next',
          value: function next() {
            if (!this instanceof StringIterator) {
              throw new TypeError('Object is not a StringIterator');
            }

            if (this._iteratedString == null) {
              return createIterResultObject(undefined, true);
            }

            var index = this._nextIndex;
            var s = this._iteratedString;
            var len = s.length;

            if (index >= len) {
              this._iteratedString = undefined;
              return createIterResultObject(undefined, true);
            }

            var ret;
            var first = s.charCodeAt(index);

            if (first < 0xD800 || first > 0xDBFF || index + 1 === len) {
              ret = s[index];
            } else {
              var second = s.charCodeAt(index + 1);
              if (second < 0xDC00 || second > 0xDFFF) {
                ret = s[index];
              } else {
                ret = s[index] + s[index + 1];
              }
            }

            this._nextIndex = index + ret.length;

            return createIterResultObject(ret, false);
          }
        }, {
          key: '@@iterator',
          value: function iterator() {
            return this;
          }
        }]);
        return StringIterator;
      }();

      function createIterResultObject(value, done) {
        return { value: value, done: done };
      }

      return function (object, kind) {
        if (typeof object === 'string') {
          return new StringIterator(object);
        } else if (Array.isArray(object)) {
          return new ArrayIterator(object, kind || KIND_VALUE);
        } else {
          return object[ITERATOR_SYMBOL]();
        }
      };
    }();
  } else {
    return function (object) {
      return object[ITERATOR_SYMBOL]();
    };
  }
}();

babelHelpers.extends(toIterator, {
  KIND_KEY: KIND_KEY,
  KIND_VALUE: KIND_VALUE,
  KIND_KEY_VAL: KIND_KEY_VAL,
  ITERATOR_SYMBOL: ITERATOR_SYMBOL
});

module.exports = toIterator;
}, 223, null, "toIterator");
__d(/* Set */function(global, require, module, exports) {

'use strict';

var Map = require(219  ); // 219 = Map

var _shouldPolyfillES6Collection = require(220                           ); // 220 = _shouldPolyfillES6Collection
var toIterator = require(223         ); // 223 = toIterator

module.exports = function (global) {
  if (!_shouldPolyfillES6Collection('Set')) {
    return global.Set;
  }

  var Set = function () {
    function Set(iterable) {
      babelHelpers.classCallCheck(this, Set);

      if (this == null || typeof this !== 'object' && typeof this !== 'function') {
        throw new TypeError('Wrong set object type.');
      }

      initSet(this);

      if (iterable != null) {
        var it = toIterator(iterable);
        var next;
        while (!(next = it.next()).done) {
          this.add(next.value);
        }
      }
    }

    babelHelpers.createClass(Set, [{
      key: 'add',
      value: function add(value) {
        this._map.set(value, value);
        this.size = this._map.size;
        return this;
      }
    }, {
      key: 'clear',
      value: function clear() {
        initSet(this);
      }
    }, {
      key: 'delete',
      value: function _delete(value) {
        var ret = this._map.delete(value);
        this.size = this._map.size;
        return ret;
      }
    }, {
      key: 'entries',
      value: function entries() {
        return this._map.entries();
      }
    }, {
      key: 'forEach',
      value: function forEach(callback) {
        var thisArg = arguments[1];
        var it = this._map.keys();
        var next;
        while (!(next = it.next()).done) {
          callback.call(thisArg, next.value, next.value, this);
        }
      }
    }, {
      key: 'has',
      value: function has(value) {
        return this._map.has(value);
      }
    }, {
      key: 'values',
      value: function values() {
        return this._map.values();
      }
    }]);
    return Set;
  }();

  Set.prototype[toIterator.ITERATOR_SYMBOL] = Set.prototype.values;

  Set.prototype.keys = Set.prototype.values;

  function initSet(set) {
    set._map = new Map();
    set.size = set._map.size;
  }

  return Set;
}(Function('return this')());
}, 224, null, "Set");
__d(/* setupDevtools */function(global, require, module, exports) {
'use strict';

var NativeModules = require(57             ); // 57 = NativeModules
var Platform = require(56        ); // 56 = Platform

function setupDevtools() {
  var messageListeners = [];
  var closeListeners = [];
  var hostname = 'localhost';
  if (Platform.OS === 'android' && NativeModules.AndroidConstants) {
    hostname = NativeModules.AndroidConstants.ServerHost.split(':')[0];
  }
  var port = window.__REACT_DEVTOOLS_PORT__ || 8097;
  var ws = new window.WebSocket('ws://' + hostname + ':' + port + '/devtools');

  var FOR_BACKEND = {
    resolveRNStyle: require(54            ), // 54 = flattenStyle
    wall: {
      listen: function listen(fn) {
        messageListeners.push(fn);
      },
      onClose: function onClose(fn) {
        closeListeners.push(fn);
      },
      send: function send(data) {
        ws.send(JSON.stringify(data));
      }
    }
  };
  ws.onclose = handleClose;
  ws.onerror = handleClose;
  ws.onopen = function () {
    tryToConnect();
  };

  var hasClosed = false;
  function handleClose() {
    if (!hasClosed) {
      hasClosed = true;
      setTimeout(setupDevtools, 2000);
      closeListeners.forEach(function (fn) {
        return fn();
      });
    }
  }

  function tryToConnect() {
    ws.send('attach:agent');
    var _interval = setInterval(function () {
      return ws.send('attach:agent');
    }, 500);
    ws.onmessage = function (evt) {
      if (evt.data.indexOf('eval:') === 0) {
        clearInterval(_interval);
        initialize(evt.data.slice('eval:'.length));
      }
    };
  }

  function initialize(text) {
    try {
      eval(text);
    } catch (e) {
      console.error('Failed to eval: ' + e.message);
      return;
    }

    var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree
    window.__REACT_DEVTOOLS_GLOBAL_HOOK__.inject({
      ComponentTree: {
        getClosestInstanceFromNode: function getClosestInstanceFromNode(node) {
          return ReactNativeComponentTree.getClosestInstanceFromNode(node);
        },
        getNodeFromInstance: function getNodeFromInstance(inst) {
          while (inst._renderedComponent) {
            inst = inst._renderedComponent;
          }
          if (inst) {
            return ReactNativeComponentTree.getNodeFromInstance(inst);
          } else {
            return null;
          }
        }
      },
      Mount: require(226               ), // 226 = ReactNativeMount
      Reconciler: require(151              ) // 151 = ReactReconciler
    });
    ws.onmessage = handleMessage;
  }

  function handleMessage(evt) {
    var data;
    try {
      data = JSON.parse(evt.data);
    } catch (e) {
      return console.error('failed to parse json: ' + evt.data);
    }

    if (data.$close || data.$error) {
      closeListeners.forEach(function (fn) {
        return fn();
      });
      window.__REACT_DEVTOOLS_GLOBAL_HOOK__.emit('shutdown');
      tryToConnect();
      return;
    }
    if (data.$open) {
      return;
    }
    messageListeners.forEach(function (fn) {
      try {
        fn(data);
      } catch (e) {
        console.log(data);
        throw e;
      }
    });
  }
}

module.exports = setupDevtools;
}, 225, null, "setupDevtools");
__d(/* ReactNativeMount */function(global, require, module, exports) {
'use strict';

var React = require(103    ); // 103 = React
var ReactInstrumentation = require(154                   ); // 154 = ReactInstrumentation
var ReactNativeContainerInfo = require(227                       ); // 227 = ReactNativeContainerInfo
var ReactNativeTagHandles = require(146                    ); // 146 = ReactNativeTagHandles
var ReactReconciler = require(151              ); // 151 = ReactReconciler
var ReactUpdateQueue = require(228               ); // 228 = ReactUpdateQueue
var ReactUpdates = require(147           ); // 147 = ReactUpdates
var UIManager = require(100        ); // 100 = UIManager

var emptyObject = require(30                    ); // 30 = fbjs/lib/emptyObject
var instantiateReactComponent = require(159                        ); // 159 = instantiateReactComponent
var shouldUpdateReactComponent = require(166                         ); // 166 = shouldUpdateReactComponent

var TopLevelWrapper = function TopLevelWrapper() {};
TopLevelWrapper.prototype.isReactComponent = {};
if (__DEV__) {
  TopLevelWrapper.displayName = 'TopLevelWrapper';
}
TopLevelWrapper.prototype.render = function () {
  return this.props.child;
};
TopLevelWrapper.isReactTopLevelWrapper = true;

function mountComponentIntoNode(componentInstance, containerTag, transaction) {
  var markup = ReactReconciler.mountComponent(componentInstance, transaction, null, ReactNativeContainerInfo(containerTag), emptyObject, 0);
  componentInstance._renderedComponent._topLevelWrapper = componentInstance;
  ReactNativeMount._mountImageIntoNode(markup, containerTag);
}

function batchedMountComponentIntoNode(componentInstance, containerTag) {
  var transaction = ReactUpdates.ReactReconcileTransaction.getPooled();
  transaction.perform(mountComponentIntoNode, null, componentInstance, containerTag, transaction);
  ReactUpdates.ReactReconcileTransaction.release(transaction);
}

var ReactNativeMount = {
  _instancesByContainerID: {},

  findNodeHandle: require(101             ), // 101 = findNodeHandle

  renderComponent: function renderComponent(nextElement, containerTag, callback) {
    var nextWrappedElement = React.createElement(TopLevelWrapper, { child: nextElement });

    var topRootNodeID = containerTag;
    var prevComponent = ReactNativeMount._instancesByContainerID[topRootNodeID];
    if (prevComponent) {
      var prevWrappedElement = prevComponent._currentElement;
      var prevElement = prevWrappedElement.props.child;
      if (shouldUpdateReactComponent(prevElement, nextElement)) {
        ReactUpdateQueue.enqueueElementInternal(prevComponent, nextWrappedElement, emptyObject);
        if (callback) {
          ReactUpdateQueue.enqueueCallbackInternal(prevComponent, callback);
        }
        return prevComponent;
      } else {
        ReactNativeMount.unmountComponentAtNode(containerTag);
      }
    }

    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
      console.error('You cannot render into anything but a top root');
      return null;
    }

    ReactNativeTagHandles.assertRootTag(containerTag);

    var instance = instantiateReactComponent(nextWrappedElement, false);
    ReactNativeMount._instancesByContainerID[containerTag] = instance;

    ReactUpdates.batchedUpdates(batchedMountComponentIntoNode, instance, containerTag);
    var component = instance.getPublicInstance();
    if (callback) {
      callback.call(component);
    }
    return component;
  },

  _mountImageIntoNode: function _mountImageIntoNode(mountImage, containerID) {
    var childTag = mountImage;
    UIManager.setChildren(containerID, [childTag]);
  },

  unmountComponentAtNodeAndRemoveContainer: function unmountComponentAtNodeAndRemoveContainer(containerTag) {
    ReactNativeMount.unmountComponentAtNode(containerTag);

    UIManager.removeRootView(containerTag);
  },

  unmountComponentAtNode: function unmountComponentAtNode(containerTag) {
    if (!ReactNativeTagHandles.reactTagIsNativeTopRootID(containerTag)) {
      console.error('You cannot render into anything but a top root');
      return false;
    }

    var instance = ReactNativeMount._instancesByContainerID[containerTag];
    if (!instance) {
      return false;
    }
    if (__DEV__) {
      ReactInstrumentation.debugTool.onBeginFlush();
    }
    ReactNativeMount.unmountComponentFromNode(instance, containerTag);
    delete ReactNativeMount._instancesByContainerID[containerTag];
    if (__DEV__) {
      ReactInstrumentation.debugTool.onEndFlush();
    }
    return true;
  },

  unmountComponentFromNode: function unmountComponentFromNode(instance, containerID) {
    ReactReconciler.unmountComponent(instance);
    UIManager.removeSubviewsFromContainerWithID(containerID);
  }

};

module.exports = ReactNativeMount;
}, 226, null, "ReactNativeMount");
__d(/* ReactNativeContainerInfo */function(global, require, module, exports) {
'use strict';

function ReactNativeContainerInfo(tag) {
  var info = {
    _tag: tag
  };
  return info;
}

module.exports = ReactNativeContainerInfo;
}, 227, null, "ReactNativeContainerInfo");
__d(/* ReactUpdateQueue */function(global, require, module, exports) {

'use strict';

var ReactCurrentOwner = require(20                           ); // 20 = react/lib/ReactCurrentOwner
var ReactInstanceMap = require(102               ); // 102 = ReactInstanceMap
var ReactInstrumentation = require(154                   ); // 154 = ReactInstrumentation
var ReactUpdates = require(147           ); // 147 = ReactUpdates

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

function enqueueUpdate(internalInstance) {
  ReactUpdates.enqueueUpdate(internalInstance);
}

function formatUnexpectedArgument(arg) {
  var type = typeof arg;
  if (type !== 'object') {
    return type;
  }
  var displayName = arg.constructor && arg.constructor.name || type;
  var keys = Object.keys(arg);
  if (keys.length > 0 && keys.length < 20) {
    return displayName + ' (keys: ' + keys.join(', ') + ')';
  }
  return displayName;
}

function getInternalInstanceReadyForUpdate(publicInstance, callerName) {
  var internalInstance = ReactInstanceMap.get(publicInstance);
  if (!internalInstance) {
    if (__DEV__) {
      var ctor = publicInstance.constructor;

      warning(!callerName, '%s(...): Can only update a mounted or mounting component. ' + 'This usually means you called %s() on an unmounted component. ' + 'This is a no-op. Please check the code for the %s component.', callerName, callerName, ctor && (ctor.displayName || ctor.name) || 'ReactClass');
    }
    return null;
  }

  if (__DEV__) {
    warning(ReactCurrentOwner.current == null, '%s(...): Cannot update during an existing state transition (such as ' + 'within `render` or another component\'s constructor). Render methods ' + 'should be a pure function of props and state; constructor ' + 'side-effects are an anti-pattern, but can be moved to ' + '`componentWillMount`.', callerName);
  }

  return internalInstance;
}

var ReactUpdateQueue = {
  isMounted: function isMounted(publicInstance) {
    if (__DEV__) {
      var owner = ReactCurrentOwner.current;
      if (owner !== null) {
        warning(owner._warnedAboutRefsInRender, '%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', owner.getName() || 'A component');
        owner._warnedAboutRefsInRender = true;
      }
    }
    var internalInstance = ReactInstanceMap.get(publicInstance);
    if (internalInstance) {
      return !!internalInstance._renderedComponent;
    } else {
      return false;
    }
  },

  enqueueCallback: function enqueueCallback(publicInstance, callback, callerName) {
    ReactUpdateQueue.validateCallback(callback, callerName);
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance);

    if (!internalInstance) {
      return null;
    }

    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }

    enqueueUpdate(internalInstance);
  },

  enqueueCallbackInternal: function enqueueCallbackInternal(internalInstance, callback) {
    if (internalInstance._pendingCallbacks) {
      internalInstance._pendingCallbacks.push(callback);
    } else {
      internalInstance._pendingCallbacks = [callback];
    }
    enqueueUpdate(internalInstance);
  },

  enqueueForceUpdate: function enqueueForceUpdate(publicInstance) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'forceUpdate');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingForceUpdate = true;

    enqueueUpdate(internalInstance);
  },

  enqueueReplaceState: function enqueueReplaceState(publicInstance, completeState) {
    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'replaceState');

    if (!internalInstance) {
      return;
    }

    internalInstance._pendingStateQueue = [completeState];
    internalInstance._pendingReplaceState = true;

    enqueueUpdate(internalInstance);
  },

  enqueueSetState: function enqueueSetState(publicInstance, partialState) {
    if (__DEV__) {
      ReactInstrumentation.debugTool.onSetState();
      warning(partialState != null, 'setState(...): You passed an undefined or null state object; ' + 'instead, use forceUpdate().');
    }

    var internalInstance = getInternalInstanceReadyForUpdate(publicInstance, 'setState');

    if (!internalInstance) {
      return;
    }

    var queue = internalInstance._pendingStateQueue || (internalInstance._pendingStateQueue = []);
    queue.push(partialState);

    enqueueUpdate(internalInstance);
  },

  enqueueElementInternal: function enqueueElementInternal(internalInstance, nextElement, nextContext) {
    internalInstance._pendingElement = nextElement;

    internalInstance._context = nextContext;
    enqueueUpdate(internalInstance);
  },

  validateCallback: function validateCallback(callback, callerName) {
    invariant(!callback || typeof callback === 'function', '%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, formatUnexpectedArgument(callback));
  }

};

module.exports = ReactUpdateQueue;
}, 228, null, "ReactUpdateQueue");
__d(/* RCTDebugComponentOwnership */function(global, require, module, exports) {

'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge

var RCTDebugComponentOwnership = {
  getOwnerHierarchy: function getOwnerHierarchy(requestID, tag) {
    throw new Error('This seems to be unused. Will disable until it is needed again.');
  }
};

BatchedBridge.registerCallableModule('RCTDebugComponentOwnership', RCTDebugComponentOwnership);

module.exports = RCTDebugComponentOwnership;
}, 229, null, "RCTDebugComponentOwnership");
__d(/* JSInspector */function(global, require, module, exports) {
'use strict';

var JSInspector = {
  registerAgent: function registerAgent(type) {
    if (global.__registerInspectorAgent) {
      global.__registerInspectorAgent(type);
    }
  },
  getTimestamp: function getTimestamp() {
    return global.__inspectorTimestamp();
  }
};

module.exports = JSInspector;
}, 230, null, "JSInspector");
__d(/* NetworkAgent */function(global, require, module, exports) {
'use strict';

var InspectorAgent = require(232             ); // 232 = InspectorAgent
var JSInspector = require(230          ); // 230 = JSInspector
var Map = require(219  ); // 219 = Map
var XMLHttpRequest = require(214             ); // 214 = XMLHttpRequest

var Interceptor = function () {
  function Interceptor(agent) {
    babelHelpers.classCallCheck(this, Interceptor);

    this._agent = agent;
    this._requests = new Map();
  }

  babelHelpers.createClass(Interceptor, [{
    key: 'getData',
    value: function getData(requestId) {
      return this._requests.get(requestId);
    }
  }, {
    key: 'requestSent',
    value: function requestSent(id, url, method, headers) {
      var requestId = String(id);
      this._requests.set(requestId, '');

      var request = {
        url: url,
        method: method,
        headers: headers,
        initialPriority: 'Medium'
      };
      var event = {
        requestId: requestId,
        documentURL: '',
        frameId: '1',
        loaderId: '1',
        request: request,
        timestamp: JSInspector.getTimestamp(),
        initiator: {
          type: 'other'
        },
        type: 'Other'
      };
      this._agent.sendEvent('requestWillBeSent', event);
    }
  }, {
    key: 'responseReceived',
    value: function responseReceived(id, url, status, headers) {
      var requestId = String(id);
      var response = {
        url: url,
        status: status,
        statusText: String(status),
        headers: headers,

        requestHeaders: {},
        mimeType: this._getMimeType(headers),
        connectionReused: false,
        connectionId: -1,
        encodedDataLength: 0,
        securityState: 'unknown'
      };

      var event = {
        requestId: requestId,
        frameId: '1',
        loaderId: '1',
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        response: response
      };
      this._agent.sendEvent('responseReceived', event);
    }
  }, {
    key: 'dataReceived',
    value: function dataReceived(id, data) {
      var requestId = String(id);
      var existingData = this._requests.get(requestId) || '';
      this._requests.set(requestId, existingData.concat(data));
      var event = {
        requestId: requestId,
        timestamp: JSInspector.getTimestamp(),
        dataLength: data.length,
        encodedDataLength: data.length
      };
      this._agent.sendEvent('dataReceived', event);
    }
  }, {
    key: 'loadingFinished',
    value: function loadingFinished(id, encodedDataLength) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        encodedDataLength: encodedDataLength
      };
      this._agent.sendEvent('loadingFinished', event);
    }
  }, {
    key: 'loadingFailed',
    value: function loadingFailed(id, error) {
      var event = {
        requestId: String(id),
        timestamp: JSInspector.getTimestamp(),
        type: 'Other',
        errorText: error
      };
      this._agent.sendEvent('loadingFailed', event);
    }
  }, {
    key: '_getMimeType',
    value: function _getMimeType(headers) {
      var contentType = headers['Content-Type'] || '';
      return contentType.split(';')[0];
    }
  }]);
  return Interceptor;
}();

var NetworkAgent = function (_InspectorAgent) {
  babelHelpers.inherits(NetworkAgent, _InspectorAgent);

  function NetworkAgent() {
    babelHelpers.classCallCheck(this, NetworkAgent);
    return babelHelpers.possibleConstructorReturn(this, (NetworkAgent.__proto__ || Object.getPrototypeOf(NetworkAgent)).apply(this, arguments));
  }

  babelHelpers.createClass(NetworkAgent, [{
    key: 'enable',
    value: function enable(_ref) {
      var maxResourceBufferSize = _ref.maxResourceBufferSize,
          maxTotalBufferSize = _ref.maxTotalBufferSize;

      this._interceptor = new Interceptor(this);
      XMLHttpRequest.setInterceptor(this._interceptor);
    }
  }, {
    key: 'disable',
    value: function disable() {
      XMLHttpRequest.setInterceptor(null);
      this._interceptor = null;
    }
  }, {
    key: 'getResponseBody',
    value: function getResponseBody(_ref2) {
      var requestId = _ref2.requestId;

      return { body: this.interceptor().getData(requestId), base64Encoded: false };
    }
  }, {
    key: 'interceptor',
    value: function interceptor() {
      if (this._interceptor) {
        return this._interceptor;
      } else {
        throw Error('_interceptor can not be null');
      }
    }
  }]);
  return NetworkAgent;
}(InspectorAgent);

NetworkAgent.DOMAIN = 'Network';


module.exports = NetworkAgent;
}, 231, null, "NetworkAgent");
__d(/* InspectorAgent */function(global, require, module, exports) {
'use strict';

var InspectorAgent = function () {
  function InspectorAgent(eventSender) {
    babelHelpers.classCallCheck(this, InspectorAgent);

    this._eventSender = eventSender;
  }

  babelHelpers.createClass(InspectorAgent, [{
    key: 'sendEvent',
    value: function sendEvent(name, params) {
      this._eventSender(name, params);
    }
  }]);
  return InspectorAgent;
}();

module.exports = InspectorAgent;
}, 232, null, "InspectorAgent");
__d(/* RCTNativeAppEventEmitter */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge
var RCTDeviceEventEmitter = require(84                     ); // 84 = RCTDeviceEventEmitter

var RCTNativeAppEventEmitter = RCTDeviceEventEmitter;

BatchedBridge.registerCallableModule('RCTNativeAppEventEmitter', RCTNativeAppEventEmitter);

module.exports = RCTNativeAppEventEmitter;
}, 233, null, "RCTNativeAppEventEmitter");
__d(/* PerformanceLogger */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge
var performanceNow = global.nativePerformanceNow || require(67                       ); // 67 = fbjs/lib/performanceNow

var timespans = {};
var extras = {};

var PerformanceLogger = {
  addTimespan: function addTimespan(key, lengthInMs, description) {
    if (timespans[key]) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to add a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      totalTime: lengthInMs
    };
  },
  startTimespan: function startTimespan(key, description) {
    if (timespans[key]) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to start a timespan that already exists ', key);
      }
      return;
    }

    timespans[key] = {
      description: description,
      startTime: performanceNow()
    };
  },
  stopTimespan: function stopTimespan(key) {
    if (!timespans[key] || !timespans[key].startTime) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to end a timespan that has not started ', key);
      }
      return;
    }
    if (timespans[key].endTime) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to end a timespan that has already ended ', key);
      }
      return;
    }

    timespans[key].endTime = performanceNow();
    timespans[key].totalTime = timespans[key].endTime - timespans[key].startTime;
  },
  clear: function clear() {
    timespans = {};
    extras = {};
  },
  clearExceptTimespans: function clearExceptTimespans(keys) {
    timespans = Object.keys(timespans).reduce(function (previous, key) {
      if (keys.indexOf(key) !== -1) {
        previous[key] = timespans[key];
      }
      return previous;
    }, {});
    extras = {};
  },
  getTimespans: function getTimespans() {
    return timespans;
  },
  hasTimespan: function hasTimespan(key) {
    return !!timespans[key];
  },
  logTimespans: function logTimespans() {
    for (var key in timespans) {
      if (timespans[key].totalTime) {
        console.log(key + ': ' + timespans[key].totalTime + 'ms');
      }
    }
  },
  addTimespans: function addTimespans(newTimespans, labels) {
    for (var i = 0, l = newTimespans.length; i < l; i += 2) {
      var label = labels[i / 2];
      PerformanceLogger.addTimespan(label, newTimespans[i + 1] - newTimespans[i], label);
    }
  },
  setExtra: function setExtra(key, value) {
    if (extras[key]) {
      if (__DEV__) {
        console.log('PerformanceLogger: Attempting to set an extra that already exists ', key);
      }
      return;
    }
    extras[key] = value;
  },
  getExtras: function getExtras() {
    return extras;
  }
};

BatchedBridge.registerCallableModule('PerformanceLogger', PerformanceLogger);

module.exports = PerformanceLogger;
}, 234, null, "PerformanceLogger");
__d(/* RCTEventEmitter */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge

var RCTEventEmitter = {
  register: function register(eventEmitter) {
    BatchedBridge.registerCallableModule('RCTEventEmitter', eventEmitter);
  }
};

module.exports = RCTEventEmitter;
}, 235, null, "RCTEventEmitter");
__d(/* ReactDefaultBatchingStrategy */function(global, require, module, exports) {

'use strict';

var ReactUpdates = require(147           ); // 147 = ReactUpdates
var Transaction = require(155          ); // 155 = Transaction

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction

var RESET_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: function close() {
    ReactDefaultBatchingStrategy.isBatchingUpdates = false;
  }
};

var FLUSH_BATCHED_UPDATES = {
  initialize: emptyFunction,
  close: ReactUpdates.flushBatchedUpdates.bind(ReactUpdates)
};

var TRANSACTION_WRAPPERS = [FLUSH_BATCHED_UPDATES, RESET_BATCHED_UPDATES];

function ReactDefaultBatchingStrategyTransaction() {
  this.reinitializeTransaction();
}

babelHelpers.extends(ReactDefaultBatchingStrategyTransaction.prototype, Transaction, {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  }
});

var transaction = new ReactDefaultBatchingStrategyTransaction();

var ReactDefaultBatchingStrategy = {
  isBatchingUpdates: false,

  batchedUpdates: function batchedUpdates(callback, a, b, c, d, e) {
    var alreadyBatchingUpdates = ReactDefaultBatchingStrategy.isBatchingUpdates;

    ReactDefaultBatchingStrategy.isBatchingUpdates = true;

    if (alreadyBatchingUpdates) {
      return callback(a, b, c, d, e);
    } else {
      return transaction.perform(callback, null, a, b, c, d, e);
    }
  }
};

module.exports = ReactDefaultBatchingStrategy;
}, 236, null, "ReactDefaultBatchingStrategy");
__d(/* ReactNativeBridgeEventPlugin */function(global, require, module, exports) {
'use strict';

var EventPropagators = require(238               ); // 238 = EventPropagators
var SyntheticEvent = require(239             ); // 239 = SyntheticEvent
var UIManager = require(100        ); // 100 = UIManager

var warning = require(21                ); // 21 = fbjs/lib/warning

var customBubblingEventTypes = UIManager.customBubblingEventTypes;
var customDirectEventTypes = UIManager.customDirectEventTypes;

var allTypesByEventName = {};

for (var bubblingTypeName in customBubblingEventTypes) {
  allTypesByEventName[bubblingTypeName] = customBubblingEventTypes[bubblingTypeName];
}

for (var directTypeName in customDirectEventTypes) {
  warning(!customBubblingEventTypes[directTypeName], 'Event cannot be both direct and bubbling: %s', directTypeName);
  allTypesByEventName[directTypeName] = customDirectEventTypes[directTypeName];
}

var ReactNativeBridgeEventPlugin = {

  eventTypes: babelHelpers.extends({}, customBubblingEventTypes, customDirectEventTypes),

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    var bubbleDispatchConfig = customBubblingEventTypes[topLevelType];
    var directDispatchConfig = customDirectEventTypes[topLevelType];
    var event = SyntheticEvent.getPooled(bubbleDispatchConfig || directDispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    if (bubbleDispatchConfig) {
      EventPropagators.accumulateTwoPhaseDispatches(event);
    } else if (directDispatchConfig) {
      EventPropagators.accumulateDirectDispatches(event);
    } else {
      return null;
    }
    return event;
  }
};

module.exports = ReactNativeBridgeEventPlugin;
}, 237, null, "ReactNativeBridgeEventPlugin");
__d(/* EventPropagators */function(global, require, module, exports) {

'use strict';

var EventPluginHub = require(139             ); // 139 = EventPluginHub
var EventPluginUtils = require(141               ); // 141 = EventPluginUtils

var accumulateInto = require(143             ); // 143 = accumulateInto
var forEachAccumulated = require(144                 ); // 144 = forEachAccumulated
var warning = require(21                ); // 21 = fbjs/lib/warning

var getListener = EventPluginHub.getListener;

function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}

function accumulateDirectionalDispatches(inst, phase, event) {
  if (__DEV__) {
    warning(inst, 'Dispatching inst must not be null');
  }
  var listener = listenerAtPhase(inst, event, phase);
  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}

function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    EventPluginUtils.traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}

function accumulateTwoPhaseDispatchesSingleSkipTarget(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    var targetInst = event._targetInst;
    var parentInst = targetInst ? EventPluginUtils.getParentInstance(targetInst) : null;
    EventPluginUtils.traverseTwoPhase(parentInst, accumulateDirectionalDispatches, event);
  }
}

function accumulateDispatches(inst, ignoredDirection, event) {
  if (event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);
    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}

function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}

function accumulateTwoPhaseDispatchesSkipTarget(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingleSkipTarget);
}

function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  EventPluginUtils.traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}

function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

var EventPropagators = {
  accumulateTwoPhaseDispatches: accumulateTwoPhaseDispatches,
  accumulateTwoPhaseDispatchesSkipTarget: accumulateTwoPhaseDispatchesSkipTarget,
  accumulateDirectDispatches: accumulateDirectDispatches,
  accumulateEnterLeaveDispatches: accumulateEnterLeaveDispatches
};

module.exports = EventPropagators;
}, 238, null, "EventPropagators");
__d(/* SyntheticEvent */function(global, require, module, exports) {

'use strict';

var PooledClass = require(149          ); // 149 = PooledClass

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var warning = require(21                ); // 21 = fbjs/lib/warning

var didWarnForAddedNewProperty = false;
var isProxySupported = typeof Proxy === 'function';

var shouldBeReleasedProperties = ['dispatchConfig', '_targetInst', 'nativeEvent', 'isDefaultPrevented', 'isPropagationStopped', '_dispatchListeners', '_dispatchInstances'];

var EventInterface = {
  type: null,
  target: null,

  currentTarget: emptyFunction.thatReturnsNull,
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function timeStamp(event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  if (__DEV__) {
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;

  var Interface = this.constructor.Interface;
  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }
    if (__DEV__) {
      delete this[propName];
    }
    var normalize = Interface[propName];
    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
  if (defaultPrevented) {
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  } else {
    this.isDefaultPrevented = emptyFunction.thatReturnsFalse;
  }
  this.isPropagationStopped = emptyFunction.thatReturnsFalse;
  return this;
}

babelHelpers.extends(SyntheticEvent.prototype, {

  preventDefault: function preventDefault() {
    this.defaultPrevented = true;
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }
    this.isDefaultPrevented = emptyFunction.thatReturnsTrue;
  },

  stopPropagation: function stopPropagation() {
    var event = this.nativeEvent;
    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      event.cancelBubble = true;
    }

    this.isPropagationStopped = emptyFunction.thatReturnsTrue;
  },

  persist: function persist() {
    this.isPersistent = emptyFunction.thatReturnsTrue;
  },

  isPersistent: emptyFunction.thatReturnsFalse,

  destructor: function destructor() {
    var Interface = this.constructor.Interface;
    for (var propName in Interface) {
      if (__DEV__) {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      } else {
        this[propName] = null;
      }
    }
    for (var i = 0; i < shouldBeReleasedProperties.length; i++) {
      this[shouldBeReleasedProperties[i]] = null;
    }
    if (__DEV__) {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', emptyFunction));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', emptyFunction));
    }
  }

});

SyntheticEvent.Interface = EventInterface;

if (__DEV__) {
  if (isProxySupported) {
    SyntheticEvent = new Proxy(SyntheticEvent, {
      construct: function construct(target, args) {
        return this.apply(target, Object.create(target.prototype), args);
      },
      apply: function apply(constructor, that, args) {
        return new Proxy(constructor.apply(that, args), {
          set: function set(target, prop, value) {
            if (prop !== 'isPersistent' && !target.constructor.Interface.hasOwnProperty(prop) && shouldBeReleasedProperties.indexOf(prop) === -1) {
              warning(didWarnForAddedNewProperty || target.isPersistent(), 'This synthetic event is reused for performance reasons. If you\'re ' + 'seeing this, you\'re adding a new property in the synthetic event object. ' + 'The property is never released. See ' + 'https://fb.me/react-event-pooling for more information.');
              didWarnForAddedNewProperty = true;
            }
            target[prop] = value;
            return true;
          }
        });
      }
    });
  }
}

SyntheticEvent.augmentClass = function (Class, Interface) {
  var Super = this;

  var E = function E() {};
  E.prototype = Super.prototype;
  var prototype = new E();

  babelHelpers.extends(prototype, Class.prototype);
  Class.prototype = prototype;
  Class.prototype.constructor = Class;

  Class.Interface = babelHelpers.extends({}, Super.Interface, Interface);
  Class.augmentClass = Super.augmentClass;

  PooledClass.addPoolingTo(Class, PooledClass.fourArgumentPooler);
};

PooledClass.addPoolingTo(SyntheticEvent, PooledClass.fourArgumentPooler);

module.exports = SyntheticEvent;

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    var warningCondition = false;
    warning(warningCondition, 'This synthetic event is reused for performance reasons. If you\'re seeing this, ' + 'you\'re %s `%s` on a released/nullified synthetic event. %s. ' + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
  }
}
}, 239, null, "SyntheticEvent");
__d(/* ReactNativeComponentEnvironment */function(global, require, module, exports) {
'use strict';

var ReactNativeDOMIDOperations = require(241                         ); // 241 = ReactNativeDOMIDOperations
var ReactNativeReconcileTransaction = require(242                              ); // 242 = ReactNativeReconcileTransaction

var ReactNativeComponentEnvironment = {

  processChildrenUpdates: ReactNativeDOMIDOperations.dangerouslyProcessChildrenUpdates,

  replaceNodeWithMarkup: ReactNativeDOMIDOperations.dangerouslyReplaceNodeWithMarkupByID,

  clearNode: function clearNode() {},

  ReactReconcileTransaction: ReactNativeReconcileTransaction
};

module.exports = ReactNativeComponentEnvironment;
}, 240, null, "ReactNativeComponentEnvironment");
__d(/* ReactNativeDOMIDOperations */function(global, require, module, exports) {
'use strict';

var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree
var UIManager = require(100        ); // 100 = UIManager

var dangerouslyProcessChildrenUpdates = function dangerouslyProcessChildrenUpdates(inst, childrenUpdates) {
  if (!childrenUpdates.length) {
    return;
  }

  var containerTag = ReactNativeComponentTree.getNodeFromInstance(inst);

  var moveFromIndices;
  var moveToIndices;
  var addChildTags;
  var addAtIndices;
  var removeAtIndices;

  for (var i = 0; i < childrenUpdates.length; i++) {
    var update = childrenUpdates[i];
    if (update.type === 'MOVE_EXISTING') {
      (moveFromIndices || (moveFromIndices = [])).push(update.fromIndex);
      (moveToIndices || (moveToIndices = [])).push(update.toIndex);
    } else if (update.type === 'REMOVE_NODE') {
      (removeAtIndices || (removeAtIndices = [])).push(update.fromIndex);
    } else if (update.type === 'INSERT_MARKUP') {
      var mountImage = update.content;
      var tag = mountImage;
      (addAtIndices || (addAtIndices = [])).push(update.toIndex);
      (addChildTags || (addChildTags = [])).push(tag);
    }
  }

  UIManager.manageChildren(containerTag, moveFromIndices, moveToIndices, addChildTags, addAtIndices, removeAtIndices);
};

var ReactNativeDOMIDOperations = {
  dangerouslyProcessChildrenUpdates: dangerouslyProcessChildrenUpdates,

  dangerouslyReplaceNodeWithMarkupByID: function dangerouslyReplaceNodeWithMarkupByID(id, mountImage) {
    var oldTag = id;
    UIManager.replaceExistingNonRootView(oldTag, mountImage);
  }
};

module.exports = ReactNativeDOMIDOperations;
}, 241, null, "ReactNativeDOMIDOperations");
__d(/* ReactNativeReconcileTransaction */function(global, require, module, exports) {
'use strict';

var CallbackQueue = require(148            ); // 148 = CallbackQueue
var PooledClass = require(149          ); // 149 = PooledClass
var Transaction = require(155          ); // 155 = Transaction
var ReactInstrumentation = require(154                   ); // 154 = ReactInstrumentation
var ReactUpdateQueue = require(228               ); // 228 = ReactUpdateQueue

var ON_DOM_READY_QUEUEING = {
  initialize: function initialize() {
    this.reactMountReady.reset();
  },

  close: function close() {
    this.reactMountReady.notifyAll();
  }
};

var TRANSACTION_WRAPPERS = [ON_DOM_READY_QUEUEING];

if (__DEV__) {
  TRANSACTION_WRAPPERS.push({
    initialize: ReactInstrumentation.debugTool.onBeginFlush,
    close: ReactInstrumentation.debugTool.onEndFlush
  });
}

function ReactNativeReconcileTransaction() {
  this.reinitializeTransaction();
  this.reactMountReady = CallbackQueue.getPooled(null);
}

var Mixin = {
  getTransactionWrappers: function getTransactionWrappers() {
    return TRANSACTION_WRAPPERS;
  },

  getReactMountReady: function getReactMountReady() {
    return this.reactMountReady;
  },

  getUpdateQueue: function getUpdateQueue() {
    return ReactUpdateQueue;
  },

  checkpoint: function checkpoint() {
    return this.reactMountReady.checkpoint();
  },

  rollback: function rollback(checkpoint) {
    this.reactMountReady.rollback(checkpoint);
  },

  destructor: function destructor() {
    CallbackQueue.release(this.reactMountReady);
    this.reactMountReady = null;
  }
};

babelHelpers.extends(ReactNativeReconcileTransaction.prototype, Transaction, ReactNativeReconcileTransaction, Mixin);

PooledClass.addPoolingTo(ReactNativeReconcileTransaction);

module.exports = ReactNativeReconcileTransaction;
}, 242, null, "ReactNativeReconcileTransaction");
__d(/* ReactNativeEventPluginOrder */function(global, require, module, exports) {
'use strict';

var ReactNativeEventPluginOrder = ['ResponderEventPlugin', 'ReactNativeBridgeEventPlugin'];

module.exports = ReactNativeEventPluginOrder;
}, 243, null, "ReactNativeEventPluginOrder");
__d(/* ReactNativeGlobalResponderHandler */function(global, require, module, exports) {
'use strict';

var UIManager = require(100        ); // 100 = UIManager

var ReactNativeGlobalResponderHandler = {
  onChange: function onChange(from, to, blockNativeResponder) {
    if (to !== null) {
      UIManager.setJSResponder(to._rootNodeID, blockNativeResponder);
    } else {
      UIManager.clearJSResponder();
    }
  }
};

module.exports = ReactNativeGlobalResponderHandler;
}, 244, null, "ReactNativeGlobalResponderHandler");
__d(/* ReactNativeTextComponent */function(global, require, module, exports) {

'use strict';

var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree
var ReactNativeTagHandles = require(146                    ); // 146 = ReactNativeTagHandles
var UIManager = require(100        ); // 100 = UIManager

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var ReactNativeTextComponent = function ReactNativeTextComponent(text) {
  this._currentElement = text;
  this._stringText = '' + text;
  this._hostParent = null;
  this._rootNodeID = 0;
};

babelHelpers.extends(ReactNativeTextComponent.prototype, {

  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context) {
    invariant(context.isInAParentText, 'RawText "%s" must be wrapped in an explicit <Text> component.', this._stringText);
    this._hostParent = hostParent;
    var tag = ReactNativeTagHandles.allocateTag();
    this._rootNodeID = tag;
    var nativeTopRootTag = hostContainerInfo._tag;
    UIManager.createView(tag, 'RCTRawText', nativeTopRootTag, { text: this._stringText });

    ReactNativeComponentTree.precacheNode(this, tag);

    return tag;
  },

  getHostNode: function getHostNode() {
    return this._rootNodeID;
  },

  receiveComponent: function receiveComponent(nextText, transaction, context) {
    if (nextText !== this._currentElement) {
      this._currentElement = nextText;
      var nextStringText = '' + nextText;
      if (nextStringText !== this._stringText) {
        this._stringText = nextStringText;
        UIManager.updateView(this._rootNodeID, 'RCTRawText', { text: this._stringText });
      }
    }
  },

  unmountComponent: function unmountComponent() {
    ReactNativeComponentTree.uncacheNode(this);
    this._currentElement = null;
    this._stringText = null;
    this._rootNodeID = 0;
  }

});

module.exports = ReactNativeTextComponent;
}, 245, null, "ReactNativeTextComponent");
__d(/* ReactNativeTreeTraversal */function(global, require, module, exports) {

'use strict';

function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;
  for (var tempA = instA; tempA; tempA = tempA._hostParent) {
    depthA++;
  }
  var depthB = 0;
  for (var tempB = instB; tempB; tempB = tempB._hostParent) {
    depthB++;
  }

  while (depthA - depthB > 0) {
    instA = instA._hostParent;
    depthA--;
  }

  while (depthB - depthA > 0) {
    instB = instB._hostParent;
    depthB--;
  }

  var depth = depthA;
  while (depth--) {
    if (instA === instB) {
      return instA;
    }
    instA = instA._hostParent;
    instB = instB._hostParent;
  }
  return null;
}

function isAncestor(instA, instB) {
  while (instB) {
    if (instB === instA) {
      return true;
    }
    instB = instB._hostParent;
  }
  return false;
}

function getParentInstance(inst) {
  return inst._hostParent;
}

function traverseTwoPhase(inst, fn, arg) {
  var path = [];
  while (inst) {
    path.push(inst);
    inst = inst._hostParent;
  }
  var i;
  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }
  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];
  while (from && from !== common) {
    pathFrom.push(from);
    from = from._hostParent;
  }
  var pathTo = [];
  while (to && to !== common) {
    pathTo.push(to);
    to = to._hostParent;
  }
  var i;
  for (i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }
  for (i = pathTo.length; i-- > 0;) {
    fn(pathTo[i], 'captured', argTo);
  }
}

module.exports = {
  isAncestor: isAncestor,
  getLowestCommonAncestor: getLowestCommonAncestor,
  getParentInstance: getParentInstance,
  traverseTwoPhase: traverseTwoPhase,
  traverseEnterLeave: traverseEnterLeave
};
}, 246, null, "ReactNativeTreeTraversal");
__d(/* ReactSimpleEmptyComponent */function(global, require, module, exports) {

'use strict';

var ReactReconciler = require(151              ); // 151 = ReactReconciler

var ReactSimpleEmptyComponent = function ReactSimpleEmptyComponent(placeholderElement, instantiate) {
  this._currentElement = null;
  this._renderedComponent = instantiate(placeholderElement);
};
babelHelpers.extends(ReactSimpleEmptyComponent.prototype, {
  mountComponent: function mountComponent(transaction, hostParent, hostContainerInfo, context, parentDebugID) {
    return ReactReconciler.mountComponent(this._renderedComponent, transaction, hostParent, hostContainerInfo, context, parentDebugID);
  },
  receiveComponent: function receiveComponent() {},
  getHostNode: function getHostNode() {
    return ReactReconciler.getHostNode(this._renderedComponent);
  },
  unmountComponent: function unmountComponent() {
    ReactReconciler.unmountComponent(this._renderedComponent);
    this._renderedComponent = null;
  }
});

module.exports = ReactSimpleEmptyComponent;
}, 247, null, "ReactSimpleEmptyComponent");
__d(/* ResponderEventPlugin */function(global, require, module, exports) {

'use strict';

var EventPluginUtils = require(141               ); // 141 = EventPluginUtils
var EventPropagators = require(238               ); // 238 = EventPropagators
var ResponderSyntheticEvent = require(249                      ); // 249 = ResponderSyntheticEvent
var ResponderTouchHistoryStore = require(250                         ); // 250 = ResponderTouchHistoryStore

var accumulate = require(251         ); // 251 = accumulate

var isStartish = EventPluginUtils.isStartish;
var isMoveish = EventPluginUtils.isMoveish;
var isEndish = EventPluginUtils.isEndish;
var executeDirectDispatch = EventPluginUtils.executeDirectDispatch;
var hasDispatches = EventPluginUtils.hasDispatches;
var executeDispatchesInOrderStopAtTrue = EventPluginUtils.executeDispatchesInOrderStopAtTrue;

var responderInst = null;

var trackedTouchCount = 0;

var previousActiveTouches = 0;

var changeResponder = function changeResponder(nextResponderInst, blockHostResponder) {
  var oldResponderInst = responderInst;
  responderInst = nextResponderInst;
  if (ResponderEventPlugin.GlobalResponderHandler !== null) {
    ResponderEventPlugin.GlobalResponderHandler.onChange(oldResponderInst, nextResponderInst, blockHostResponder);
  }
};

var eventTypes = {
  startShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onStartShouldSetResponder',
      captured: 'onStartShouldSetResponderCapture'
    }
  },

  scrollShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onScrollShouldSetResponder',
      captured: 'onScrollShouldSetResponderCapture'
    }
  },

  selectionChangeShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onSelectionChangeShouldSetResponder',
      captured: 'onSelectionChangeShouldSetResponderCapture'
    }
  },

  moveShouldSetResponder: {
    phasedRegistrationNames: {
      bubbled: 'onMoveShouldSetResponder',
      captured: 'onMoveShouldSetResponderCapture'
    }
  },

  responderStart: { registrationName: 'onResponderStart' },
  responderMove: { registrationName: 'onResponderMove' },
  responderEnd: { registrationName: 'onResponderEnd' },
  responderRelease: { registrationName: 'onResponderRelease' },
  responderTerminationRequest: {
    registrationName: 'onResponderTerminationRequest'
  },
  responderGrant: { registrationName: 'onResponderGrant' },
  responderReject: { registrationName: 'onResponderReject' },
  responderTerminate: { registrationName: 'onResponderTerminate' }
};

function setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var shouldSetEventType = isStartish(topLevelType) ? eventTypes.startShouldSetResponder : isMoveish(topLevelType) ? eventTypes.moveShouldSetResponder : topLevelType === 'topSelectionChange' ? eventTypes.selectionChangeShouldSetResponder : eventTypes.scrollShouldSetResponder;

  var bubbleShouldSetFrom = !responderInst ? targetInst : EventPluginUtils.getLowestCommonAncestor(responderInst, targetInst);

  var skipOverBubbleShouldSetFrom = bubbleShouldSetFrom === responderInst;
  var shouldSetEvent = ResponderSyntheticEvent.getPooled(shouldSetEventType, bubbleShouldSetFrom, nativeEvent, nativeEventTarget);
  shouldSetEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
  if (skipOverBubbleShouldSetFrom) {
    EventPropagators.accumulateTwoPhaseDispatchesSkipTarget(shouldSetEvent);
  } else {
    EventPropagators.accumulateTwoPhaseDispatches(shouldSetEvent);
  }
  var wantsResponderInst = executeDispatchesInOrderStopAtTrue(shouldSetEvent);
  if (!shouldSetEvent.isPersistent()) {
    shouldSetEvent.constructor.release(shouldSetEvent);
  }

  if (!wantsResponderInst || wantsResponderInst === responderInst) {
    return null;
  }
  var extracted;
  var grantEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderGrant, wantsResponderInst, nativeEvent, nativeEventTarget);
  grantEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;

  EventPropagators.accumulateDirectDispatches(grantEvent);
  var blockHostResponder = executeDirectDispatch(grantEvent) === true;
  if (responderInst) {

    var terminationRequestEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminationRequest, responderInst, nativeEvent, nativeEventTarget);
    terminationRequestEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
    EventPropagators.accumulateDirectDispatches(terminationRequestEvent);
    var shouldSwitch = !hasDispatches(terminationRequestEvent) || executeDirectDispatch(terminationRequestEvent);
    if (!terminationRequestEvent.isPersistent()) {
      terminationRequestEvent.constructor.release(terminationRequestEvent);
    }

    if (shouldSwitch) {
      var terminateEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderTerminate, responderInst, nativeEvent, nativeEventTarget);
      terminateEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(terminateEvent);
      extracted = accumulate(extracted, [grantEvent, terminateEvent]);
      changeResponder(wantsResponderInst, blockHostResponder);
    } else {
      var rejectEvent = ResponderSyntheticEvent.getPooled(eventTypes.responderReject, wantsResponderInst, nativeEvent, nativeEventTarget);
      rejectEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(rejectEvent);
      extracted = accumulate(extracted, rejectEvent);
    }
  } else {
    extracted = accumulate(extracted, grantEvent);
    changeResponder(wantsResponderInst, blockHostResponder);
  }
  return extracted;
}

function canTriggerTransfer(topLevelType, topLevelInst, nativeEvent) {
  return topLevelInst && (topLevelType === 'topScroll' && !nativeEvent.responderIgnoreScroll || trackedTouchCount > 0 && topLevelType === 'topSelectionChange' || isStartish(topLevelType) || isMoveish(topLevelType));
}

function noResponderTouches(nativeEvent) {
  var touches = nativeEvent.touches;
  if (!touches || touches.length === 0) {
    return true;
  }
  for (var i = 0; i < touches.length; i++) {
    var activeTouch = touches[i];
    var target = activeTouch.target;
    if (target !== null && target !== undefined && target !== 0) {
      var targetInst = EventPluginUtils.getInstanceFromNode(target);
      if (EventPluginUtils.isAncestor(responderInst, targetInst)) {
        return false;
      }
    }
  }
  return true;
}

var ResponderEventPlugin = {
  _getResponderID: function _getResponderID() {
    return responderInst ? responderInst._rootNodeID : null;
  },

  eventTypes: eventTypes,

  extractEvents: function extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
    if (isStartish(topLevelType)) {
      trackedTouchCount += 1;
    } else if (isEndish(topLevelType)) {
      if (trackedTouchCount >= 0) {
        trackedTouchCount -= 1;
      } else {
        console.error('Ended a touch event which was not counted in `trackedTouchCount`.');
        return null;
      }
    }

    ResponderTouchHistoryStore.recordTouchTrack(topLevelType, nativeEvent);

    var extracted = canTriggerTransfer(topLevelType, targetInst, nativeEvent) ? setResponderAndExtractTransfer(topLevelType, targetInst, nativeEvent, nativeEventTarget) : null;

    var isResponderTouchStart = responderInst && isStartish(topLevelType);
    var isResponderTouchMove = responderInst && isMoveish(topLevelType);
    var isResponderTouchEnd = responderInst && isEndish(topLevelType);
    var incrementalTouch = isResponderTouchStart ? eventTypes.responderStart : isResponderTouchMove ? eventTypes.responderMove : isResponderTouchEnd ? eventTypes.responderEnd : null;

    if (incrementalTouch) {
      var gesture = ResponderSyntheticEvent.getPooled(incrementalTouch, responderInst, nativeEvent, nativeEventTarget);
      gesture.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(gesture);
      extracted = accumulate(extracted, gesture);
    }

    var isResponderTerminate = responderInst && topLevelType === 'topTouchCancel';
    var isResponderRelease = responderInst && !isResponderTerminate && isEndish(topLevelType) && noResponderTouches(nativeEvent);
    var finalTouch = isResponderTerminate ? eventTypes.responderTerminate : isResponderRelease ? eventTypes.responderRelease : null;
    if (finalTouch) {
      var finalEvent = ResponderSyntheticEvent.getPooled(finalTouch, responderInst, nativeEvent, nativeEventTarget);
      finalEvent.touchHistory = ResponderTouchHistoryStore.touchHistory;
      EventPropagators.accumulateDirectDispatches(finalEvent);
      extracted = accumulate(extracted, finalEvent);
      changeResponder(null);
    }

    var numberActiveTouches = ResponderTouchHistoryStore.touchHistory.numberActiveTouches;
    if (ResponderEventPlugin.GlobalInteractionHandler && numberActiveTouches !== previousActiveTouches) {
      ResponderEventPlugin.GlobalInteractionHandler.onChange(numberActiveTouches);
    }
    previousActiveTouches = numberActiveTouches;

    return extracted;
  },

  GlobalResponderHandler: null,
  GlobalInteractionHandler: null,

  injection: {
    injectGlobalResponderHandler: function injectGlobalResponderHandler(GlobalResponderHandler) {
      ResponderEventPlugin.GlobalResponderHandler = GlobalResponderHandler;
    },

    injectGlobalInteractionHandler: function injectGlobalInteractionHandler(GlobalInteractionHandler) {
      ResponderEventPlugin.GlobalInteractionHandler = GlobalInteractionHandler;
    }
  }
};

module.exports = ResponderEventPlugin;
}, 248, null, "ResponderEventPlugin");
__d(/* ResponderSyntheticEvent */function(global, require, module, exports) {

'use strict';

var SyntheticEvent = require(239             ); // 239 = SyntheticEvent

var ResponderEventInterface = {
  touchHistory: function touchHistory(nativeEvent) {
    return null;
  }
};

function ResponderSyntheticEvent(dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget) {
  return SyntheticEvent.call(this, dispatchConfig, dispatchMarker, nativeEvent, nativeEventTarget);
}

SyntheticEvent.augmentClass(ResponderSyntheticEvent, ResponderEventInterface);

module.exports = ResponderSyntheticEvent;
}, 249, null, "ResponderSyntheticEvent");
__d(/* ResponderTouchHistoryStore */function(global, require, module, exports) {

'use strict';

var EventPluginUtils = require(141               ); // 141 = EventPluginUtils

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var isEndish = EventPluginUtils.isEndish,
    isMoveish = EventPluginUtils.isMoveish,
    isStartish = EventPluginUtils.isStartish;


var MAX_TOUCH_BANK = 20;
var touchBank = [];
var touchHistory = {
  touchBank: touchBank,
  numberActiveTouches: 0,

  indexOfSingleActiveTouch: -1,
  mostRecentTimeStamp: 0
};

function timestampForTouch(touch) {
  return touch.timeStamp || touch.timestamp;
}

function createTouchRecord(touch) {
  return {
    touchActive: true,
    startPageX: touch.pageX,
    startPageY: touch.pageY,
    startTimeStamp: timestampForTouch(touch),
    currentPageX: touch.pageX,
    currentPageY: touch.pageY,
    currentTimeStamp: timestampForTouch(touch),
    previousPageX: touch.pageX,
    previousPageY: touch.pageY,
    previousTimeStamp: timestampForTouch(touch)
  };
}

function resetTouchRecord(touchRecord, touch) {
  touchRecord.touchActive = true;
  touchRecord.startPageX = touch.pageX;
  touchRecord.startPageY = touch.pageY;
  touchRecord.startTimeStamp = timestampForTouch(touch);
  touchRecord.currentPageX = touch.pageX;
  touchRecord.currentPageY = touch.pageY;
  touchRecord.currentTimeStamp = timestampForTouch(touch);
  touchRecord.previousPageX = touch.pageX;
  touchRecord.previousPageY = touch.pageY;
  touchRecord.previousTimeStamp = timestampForTouch(touch);
}

function getTouchIdentifier(_ref) {
  var identifier = _ref.identifier;

  invariant(identifier != null, 'Touch object is missing identifier.');
  warning(identifier <= MAX_TOUCH_BANK, 'Touch identifier %s is greater than maximum supported %s which causes ' + 'performance issues backfilling array locations for all of the indices.', identifier, MAX_TOUCH_BANK);
  return identifier;
}

function recordTouchStart(touch) {
  var identifier = getTouchIdentifier(touch);
  var touchRecord = touchBank[identifier];
  if (touchRecord) {
    resetTouchRecord(touchRecord, touch);
  } else {
    touchBank[identifier] = createTouchRecord(touch);
  }
  touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
}

function recordTouchMove(touch) {
  var touchRecord = touchBank[getTouchIdentifier(touch)];
  if (touchRecord) {
    touchRecord.touchActive = true;
    touchRecord.previousPageX = touchRecord.currentPageX;
    touchRecord.previousPageY = touchRecord.currentPageY;
    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
    touchRecord.currentPageX = touch.pageX;
    touchRecord.currentPageY = touch.pageY;
    touchRecord.currentTimeStamp = timestampForTouch(touch);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  } else {
    console.error('Cannot record touch move without a touch start.\n' + 'Touch Move: %s\n', 'Touch Bank: %s', printTouch(touch), printTouchBank());
  }
}

function recordTouchEnd(touch) {
  var touchRecord = touchBank[getTouchIdentifier(touch)];
  if (touchRecord) {
    touchRecord.touchActive = false;
    touchRecord.previousPageX = touchRecord.currentPageX;
    touchRecord.previousPageY = touchRecord.currentPageY;
    touchRecord.previousTimeStamp = touchRecord.currentTimeStamp;
    touchRecord.currentPageX = touch.pageX;
    touchRecord.currentPageY = touch.pageY;
    touchRecord.currentTimeStamp = timestampForTouch(touch);
    touchHistory.mostRecentTimeStamp = timestampForTouch(touch);
  } else {
    console.error('Cannot record touch end without a touch start.\n' + 'Touch End: %s\n', 'Touch Bank: %s', printTouch(touch), printTouchBank());
  }
}

function printTouch(touch) {
  return JSON.stringify({
    identifier: touch.identifier,
    pageX: touch.pageX,
    pageY: touch.pageY,
    timestamp: timestampForTouch(touch)
  });
}

function printTouchBank() {
  var printed = JSON.stringify(touchBank.slice(0, MAX_TOUCH_BANK));
  if (touchBank.length > MAX_TOUCH_BANK) {
    printed += ' (original size: ' + touchBank.length + ')';
  }
  return printed;
}

var ResponderTouchHistoryStore = {
  recordTouchTrack: function recordTouchTrack(topLevelType, nativeEvent) {
    if (isMoveish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchMove);
    } else if (isStartish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchStart);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        touchHistory.indexOfSingleActiveTouch = nativeEvent.touches[0].identifier;
      }
    } else if (isEndish(topLevelType)) {
      nativeEvent.changedTouches.forEach(recordTouchEnd);
      touchHistory.numberActiveTouches = nativeEvent.touches.length;
      if (touchHistory.numberActiveTouches === 1) {
        for (var i = 0; i < touchBank.length; i++) {
          var touchTrackToCheck = touchBank[i];
          if (touchTrackToCheck != null && touchTrackToCheck.touchActive) {
            touchHistory.indexOfSingleActiveTouch = i;
            break;
          }
        }
        if (__DEV__) {
          var activeRecord = touchBank[touchHistory.indexOfSingleActiveTouch];
          warning(activeRecord != null && activeRecord.touchActive, 'Cannot find single active touch.');
        }
      }
    }
  },


  touchHistory: touchHistory
};

module.exports = ResponderTouchHistoryStore;
}, 250, null, "ResponderTouchHistoryStore");
__d(/* accumulate */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

function accumulate(current, next) {
  invariant(next != null, 'accumulate(...): Accumulated items must be not be null or undefined.');

  if (current == null) {
    return next;
  }

  if (Array.isArray(current)) {
    return current.concat(next);
  }

  if (Array.isArray(next)) {
    return [current].concat(next);
  }

  return [current, next];
}

module.exports = accumulate;
}, 251, null, "accumulate");
__d(/* TouchableWithoutFeedback */function(global, require, module, exports) {
'use strict';

var EdgeInsetsPropType = require(125                 ); // 125 = EdgeInsetsPropType
var React = require(103    ); // 103 = React
var TimerMixin = require(253                ); // 253 = react-timer-mixin
var Touchable = require(189        ); // 189 = Touchable
var View = require(124   ); // 124 = View

var ensurePositiveDelayProps = require(254                       ); // 254 = ensurePositiveDelayProps
var warning = require(21                ); // 21 = fbjs/lib/warning

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableWithoutFeedback = React.createClass({
  displayName: 'TouchableWithoutFeedback',

  mixins: [TimerMixin, Touchable.Mixin],

  propTypes: {
    accessible: React.PropTypes.bool,
    accessibilityComponentType: React.PropTypes.oneOf(View.AccessibilityComponentType),
    accessibilityTraits: React.PropTypes.oneOfType([React.PropTypes.oneOf(View.AccessibilityTraits), React.PropTypes.arrayOf(React.PropTypes.oneOf(View.AccessibilityTraits))]),

    disabled: React.PropTypes.bool,

    onPress: React.PropTypes.func,
    onPressIn: React.PropTypes.func,
    onPressOut: React.PropTypes.func,

    onLayout: React.PropTypes.func,

    onLongPress: React.PropTypes.func,

    delayPressIn: React.PropTypes.number,

    delayPressOut: React.PropTypes.number,

    delayLongPress: React.PropTypes.number,

    pressRetentionOffset: EdgeInsetsPropType,

    hitSlop: EdgeInsetsPropType
  },

  getInitialState: function getInitialState() {
    return this.touchableGetInitialState();
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut || 0;
  },

  render: function render() {
    var child = React.Children.only(this.props.children);
    var children = child.props.children;
    warning(!child.type || child.type.displayName !== 'Text', 'TouchableWithoutFeedback does not work well with Text children. Wrap children in a View instead. See ' + (child._owner && child._owner.getName && child._owner.getName() || '<unknown>'));
    if (Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'View') {
      children = React.Children.toArray(children);
      children.push(Touchable.renderDebugView({ color: 'red', hitSlop: this.props.hitSlop }));
    }
    var style = Touchable.TOUCH_TARGET_DEBUG && child.type && child.type.displayName === 'Text' ? [child.props.style, { color: 'red' }] : child.props.style;
    return React.cloneElement(child, {
      accessible: this.props.accessible !== false,
      accessibilityLabel: this.props.accessibilityLabel,
      accessibilityComponentType: this.props.accessibilityComponentType,
      accessibilityTraits: this.props.accessibilityTraits,
      testID: this.props.testID,
      onLayout: this.props.onLayout,
      hitSlop: this.props.hitSlop,
      onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
      onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
      onResponderGrant: this.touchableHandleResponderGrant,
      onResponderMove: this.touchableHandleResponderMove,
      onResponderRelease: this.touchableHandleResponderRelease,
      onResponderTerminate: this.touchableHandleResponderTerminate,
      style: style,
      children: children
    });
  }
});

module.exports = TouchableWithoutFeedback;
}, 252, null, "TouchableWithoutFeedback");
__d(/* react-timer-mixin/TimerMixin.js */function(global, require, module, exports) {
'use strict';

var GLOBAL = typeof window === 'undefined' ? global : window;

var setter = function setter(_setter, _clearer, array) {
  return function (callback, delta) {
    var id = _setter(function () {
      _clearer.call(this, id);
      callback.apply(this, arguments);
    }.bind(this), delta);

    if (!this[array]) {
      this[array] = [id];
    } else {
      this[array].push(id);
    }
    return id;
  };
};

var clearer = function clearer(_clearer, array) {
  return function (id) {
    if (this[array]) {
      var index = this[array].indexOf(id);
      if (index !== -1) {
        this[array].splice(index, 1);
      }
    }
    _clearer(id);
  };
};

var _timeouts = 'TimerMixin_timeouts';
var _clearTimeout = clearer(GLOBAL.clearTimeout, _timeouts);
var _setTimeout = setter(GLOBAL.setTimeout, _clearTimeout, _timeouts);

var _intervals = 'TimerMixin_intervals';
var _clearInterval = clearer(GLOBAL.clearInterval, _intervals);
var _setInterval = setter(GLOBAL.setInterval, function () {}, _intervals);

var _immediates = 'TimerMixin_immediates';
var _clearImmediate = clearer(GLOBAL.clearImmediate, _immediates);
var _setImmediate = setter(GLOBAL.setImmediate, _clearImmediate, _immediates);

var _rafs = 'TimerMixin_rafs';
var _cancelAnimationFrame = clearer(GLOBAL.cancelAnimationFrame, _rafs);
var _requestAnimationFrame = setter(GLOBAL.requestAnimationFrame, _cancelAnimationFrame, _rafs);

var TimerMixin = {
  componentWillUnmount: function componentWillUnmount() {
    this[_timeouts] && this[_timeouts].forEach(function (id) {
      GLOBAL.clearTimeout(id);
    });
    this[_timeouts] = null;
    this[_intervals] && this[_intervals].forEach(function (id) {
      GLOBAL.clearInterval(id);
    });
    this[_intervals] = null;
    this[_immediates] && this[_immediates].forEach(function (id) {
      GLOBAL.clearImmediate(id);
    });
    this[_immediates] = null;
    this[_rafs] && this[_rafs].forEach(function (id) {
      GLOBAL.cancelAnimationFrame(id);
    });
    this[_rafs] = null;
  },

  setTimeout: _setTimeout,
  clearTimeout: _clearTimeout,

  setInterval: _setInterval,
  clearInterval: _clearInterval,

  setImmediate: _setImmediate,
  clearImmediate: _clearImmediate,

  requestAnimationFrame: _requestAnimationFrame,
  cancelAnimationFrame: _cancelAnimationFrame
};

module.exports = TimerMixin;
}, 253, null, "react-timer-mixin/TimerMixin.js");
__d(/* ensurePositiveDelayProps */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var ensurePositiveDelayProps = function ensurePositiveDelayProps(props) {
  invariant(!(props.delayPressIn < 0 || props.delayPressOut < 0 || props.delayLongPress < 0), 'Touchable components cannot have negative delay properties');
};

module.exports = ensurePositiveDelayProps;
}, 254, null, "ensurePositiveDelayProps");
__d(/* TouchableOpacity */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Touchable/TouchableOpacity.js';


var Animated = require(256       ); // 256 = Animated
var Easing = require(266     ); // 266 = Easing
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var React = require(103    ); // 103 = React
var TimerMixin = require(253                ); // 253 = react-timer-mixin
var Touchable = require(189        ); // 189 = Touchable
var TouchableWithoutFeedback = require(252                       ); // 252 = TouchableWithoutFeedback

var ensurePositiveDelayProps = require(254                       ); // 254 = ensurePositiveDelayProps
var flattenStyle = require(54            ); // 54 = flattenStyle

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableOpacity = React.createClass({
  displayName: 'TouchableOpacity',

  mixins: [TimerMixin, Touchable.Mixin, NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: React.PropTypes.number,
    focusedOpacity: React.PropTypes.number,

    tvParallaxProperties: React.PropTypes.object
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      activeOpacity: 0.2,
      focusedOpacity: 0.7
    };
  },

  getInitialState: function getInitialState() {
    return babelHelpers.extends({}, this.touchableGetInitialState(), {
      anim: new Animated.Value(1)
    });
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
  },

  setOpacityTo: function setOpacityTo(value, duration) {
    Animated.timing(this.state.anim, {
      toValue: value,
      duration: duration,
      easing: Easing.inOut(Easing.quad),
      useNativeDriver: true
    }).start();
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    if (e.dispatchConfig.registrationName === 'onResponderGrant') {
      this._opacityActive(0);
    } else {
      this._opacityActive(150);
    }
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    this._opacityInactive(250);
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn || 0;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress === 0 ? 0 : this.props.delayLongPress || 500;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _opacityActive: function _opacityActive(duration) {
    this.setOpacityTo(this.props.activeOpacity, duration);
  },

  _opacityInactive: function _opacityInactive(duration) {
    var childStyle = flattenStyle(this.props.style) || {};
    this.setOpacityTo(childStyle.opacity === undefined ? 1 : childStyle.opacity, duration);
  },

  _opacityFocused: function _opacityFocused() {
    this.setOpacityTo(this.props.focusedOpacity);
  },

  render: function render() {
    return React.createElement(
      Animated.View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        style: [this.props.style, { opacity: this.state.anim }],
        testID: this.props.testID,
        onLayout: this.props.onLayout,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hitSlop: this.props.hitSlop,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate, __source: {
          fileName: _jsxFileName,
          lineNumber: 171
        }
      },
      this.props.children,
      Touchable.renderDebugView({ color: 'cyan', hitSlop: this.props.hitSlop })
    );
  }
});

module.exports = TouchableOpacity;
}, 255, null, "TouchableOpacity");
__d(/* Animated */function(global, require, module, exports) {
'use strict';

var AnimatedImplementation = require(257                     ); // 257 = AnimatedImplementation
var Image = require(268    ); // 268 = Image
var Text = require(188   ); // 188 = Text
var View = require(124   ); // 124 = View
var ScrollView = require(270         ); // 270 = ScrollView

module.exports = babelHelpers.extends({}, AnimatedImplementation, {
  View: AnimatedImplementation.createAnimatedComponent(View),
  Text: AnimatedImplementation.createAnimatedComponent(Text),
  Image: AnimatedImplementation.createAnimatedComponent(Image),
  ScrollView: AnimatedImplementation.createAnimatedComponent(ScrollView)
});
}, 256, null, "Animated");
__d(/* AnimatedImplementation */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Animated/src/AnimatedImplementation.js';
var InteractionManager = require(258                 ); // 258 = InteractionManager
var Interpolation = require(261            ); // 261 = Interpolation
var NativeAnimatedHelper = require(262                   ); // 262 = NativeAnimatedHelper
var React = require(103    ); // 103 = React
var Set = require(224  ); // 224 = Set
var SpringConfig = require(263           ); // 263 = SpringConfig
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var findNodeHandle = require(101             ); // 101 = findNodeHandle
var flattenStyle = require(54            ); // 54 = flattenStyle
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var requestAnimationFrame = require(264                             ); // 264 = fbjs/lib/requestAnimationFrame

var NativeAnimatedAPI = NativeAnimatedHelper.API;

var warnedMissingNativeAnimated = false;

function shouldUseNativeDriver(config) {
  if (config.useNativeDriver && !NativeAnimatedHelper.isNativeAnimatedAvailable()) {
    if (!warnedMissingNativeAnimated) {
      console.warn('Animated: `useNativeDriver` is not supported because the native ' + 'animated module is missing. Falling back to JS-based animation. To ' + 'resolve this, add `RCTAnimation` module to this app, or remove ' + '`useNativeDriver`. ' + 'More info: https://github.com/facebook/react-native/issues/11094#issuecomment-263240420');
      warnedMissingNativeAnimated = true;
    }
    return false;
  }

  return config.useNativeDriver || false;
}

var Animated = function () {
  function Animated() {
    babelHelpers.classCallCheck(this, Animated);
  }

  babelHelpers.createClass(Animated, [{
    key: '__attach',
    value: function __attach() {}
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this.__nativeTag != null) {
        NativeAnimatedAPI.dropAnimatedNode(this.__nativeTag);
        this.__nativeTag = undefined;
      }
    }
  }, {
    key: '__getValue',
    value: function __getValue() {}
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this.__getValue();
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {}
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {}
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return [];
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        throw new Error('This node cannot be made a "native" animated node');
      }
    }
  }, {
    key: '__getNativeTag',
    value: function __getNativeTag() {
      NativeAnimatedHelper.assertNativeAnimatedModule();
      invariant(this.__isNative, 'Attempt to get native tag from node not marked as "native"');
      if (this.__nativeTag == null) {
        var nativeTag = NativeAnimatedHelper.generateNewNodeTag();
        NativeAnimatedAPI.createAnimatedNode(nativeTag, this.__getNativeConfig());
        this.__nativeTag = nativeTag;
      }
      return this.__nativeTag;
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      throw new Error('This JS animated node type cannot be used as native animated node');
    }
  }, {
    key: 'toJSON',
    value: function toJSON() {
      return this.__getValue();
    }
  }]);
  return Animated;
}();

var Animation = function () {
  function Animation() {
    babelHelpers.classCallCheck(this, Animation);
  }

  babelHelpers.createClass(Animation, [{
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {}
  }, {
    key: 'stop',
    value: function stop() {
      if (this.__nativeId) {
        NativeAnimatedAPI.stopAnimation(this.__nativeId);
      }
    }
  }, {
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      throw new Error('This animation type cannot be offloaded to native');
    }
  }, {
    key: '__debouncedOnEnd',
    value: function __debouncedOnEnd(result) {
      var onEnd = this.__onEnd;
      this.__onEnd = null;
      onEnd && onEnd(result);
    }
  }, {
    key: '__startNativeAnimation',
    value: function __startNativeAnimation(animatedValue) {
      animatedValue.__makeNative();
      this.__nativeId = NativeAnimatedHelper.generateNewAnimationId();
      NativeAnimatedAPI.startAnimatingNode(this.__nativeId, animatedValue.__getNativeTag(), this.__getNativeAnimationConfig(), this.__debouncedOnEnd.bind(this));
    }
  }]);
  return Animation;
}();

var AnimatedWithChildren = function (_Animated) {
  babelHelpers.inherits(AnimatedWithChildren, _Animated);

  function AnimatedWithChildren() {
    babelHelpers.classCallCheck(this, AnimatedWithChildren);

    var _this = babelHelpers.possibleConstructorReturn(this, (AnimatedWithChildren.__proto__ || Object.getPrototypeOf(AnimatedWithChildren)).call(this));

    _this._children = [];
    return _this;
  }

  babelHelpers.createClass(AnimatedWithChildren, [{
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var _iterator = this._children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
          var _ref;

          if (_isArray) {
            if (_i >= _iterator.length) break;
            _ref = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            _ref = _i.value;
          }

          var child = _ref;

          child.__makeNative();
          NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
        }
      }
    }
  }, {
    key: '__addChild',
    value: function __addChild(child) {
      if (this._children.length === 0) {
        this.__attach();
      }
      this._children.push(child);
      if (this.__isNative) {
        child.__makeNative();
        NativeAnimatedAPI.connectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
    }
  }, {
    key: '__removeChild',
    value: function __removeChild(child) {
      var index = this._children.indexOf(child);
      if (index === -1) {
        console.warn('Trying to remove a child that doesn\'t exist');
        return;
      }
      if (this.__isNative && child.__isNative) {
        NativeAnimatedAPI.disconnectAnimatedNodes(this.__getNativeTag(), child.__getNativeTag());
      }
      this._children.splice(index, 1);
      if (this._children.length === 0) {
        this.__detach();
      }
    }
  }, {
    key: '__getChildren',
    value: function __getChildren() {
      return this._children;
    }
  }]);
  return AnimatedWithChildren;
}(Animated);

function _flush(rootNode) {
  var animatedStyles = new Set();
  function findAnimatedStyles(node) {
    if (typeof node.update === 'function') {
      animatedStyles.add(node);
    } else {
      node.__getChildren().forEach(findAnimatedStyles);
    }
  }
  findAnimatedStyles(rootNode);

  animatedStyles.forEach(function (animatedStyle) {
    return animatedStyle.update();
  });
}

var _easeInOut = void 0;
function easeInOut() {
  if (!_easeInOut) {
    var Easing = require(266     ); // 266 = Easing
    _easeInOut = Easing.inOut(Easing.ease);
  }
  return _easeInOut;
}

var TimingAnimation = function (_Animation) {
  babelHelpers.inherits(TimingAnimation, _Animation);

  function TimingAnimation(config) {
    babelHelpers.classCallCheck(this, TimingAnimation);

    var _this2 = babelHelpers.possibleConstructorReturn(this, (TimingAnimation.__proto__ || Object.getPrototypeOf(TimingAnimation)).call(this));

    _this2._toValue = config.toValue;
    _this2._easing = config.easing !== undefined ? config.easing : easeInOut();
    _this2._duration = config.duration !== undefined ? config.duration : 500;
    _this2._delay = config.delay !== undefined ? config.delay : 0;
    _this2.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    _this2._useNativeDriver = shouldUseNativeDriver(config);
    return _this2;
  }

  babelHelpers.createClass(TimingAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      var frameDuration = 1000.0 / 60.0;
      var frames = [];
      for (var dt = 0.0; dt < this._duration; dt += frameDuration) {
        frames.push(this._easing(dt / this._duration));
      }
      frames.push(this._easing(1));
      return {
        type: 'frames',
        frames: frames,
        toValue: this._toValue,
        delay: this._delay
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      var _this3 = this;

      this.__active = true;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;

      var start = function start() {
        if (_this3._duration === 0 && !_this3._useNativeDriver) {
          _this3._onUpdate(_this3._toValue);
          _this3.__debouncedOnEnd({ finished: true });
        } else {
          _this3._startTime = Date.now();
          if (_this3._useNativeDriver) {
            _this3.__startNativeAnimation(animatedValue);
          } else {
            _this3._animationFrame = requestAnimationFrame(_this3.onUpdate.bind(_this3));
          }
        }
      };
      if (this._delay) {
        this._timeout = setTimeout(start, this._delay);
      } else {
        start();
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();
      if (now >= this._startTime + this._duration) {
        if (this._duration === 0) {
          this._onUpdate(this._toValue);
        } else {
          this._onUpdate(this._fromValue + this._easing(1) * (this._toValue - this._fromValue));
        }
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._onUpdate(this._fromValue + this._easing((now - this._startTime) / this._duration) * (this._toValue - this._fromValue));
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(TimingAnimation.prototype.__proto__ || Object.getPrototypeOf(TimingAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      clearTimeout(this._timeout);
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return TimingAnimation;
}(Animation);

var DecayAnimation = function (_Animation2) {
  babelHelpers.inherits(DecayAnimation, _Animation2);

  function DecayAnimation(config) {
    babelHelpers.classCallCheck(this, DecayAnimation);

    var _this4 = babelHelpers.possibleConstructorReturn(this, (DecayAnimation.__proto__ || Object.getPrototypeOf(DecayAnimation)).call(this));

    _this4._deceleration = config.deceleration !== undefined ? config.deceleration : 0.998;
    _this4._velocity = config.velocity;
    _this4._useNativeDriver = shouldUseNativeDriver(config);
    _this4.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;
    return _this4;
  }

  babelHelpers.createClass(DecayAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'decay',
        deceleration: this._deceleration,
        velocity: this._velocity
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._lastValue = fromValue;
      this._fromValue = fromValue;
      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._startTime = Date.now();
      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var now = Date.now();

      var value = this._fromValue + this._velocity / (1 - this._deceleration) * (1 - Math.exp(-(1 - this._deceleration) * (now - this._startTime)));

      this._onUpdate(value);

      if (Math.abs(this._lastValue - value) < 0.1) {
        this.__debouncedOnEnd({ finished: true });
        return;
      }

      this._lastValue = value;
      if (this.__active) {
        this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
      }
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(DecayAnimation.prototype.__proto__ || Object.getPrototypeOf(DecayAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return DecayAnimation;
}(Animation);

function withDefault(value, defaultValue) {
  if (value === undefined || value === null) {
    return defaultValue;
  }
  return value;
}

var SpringAnimation = function (_Animation3) {
  babelHelpers.inherits(SpringAnimation, _Animation3);

  function SpringAnimation(config) {
    babelHelpers.classCallCheck(this, SpringAnimation);

    var _this5 = babelHelpers.possibleConstructorReturn(this, (SpringAnimation.__proto__ || Object.getPrototypeOf(SpringAnimation)).call(this));

    _this5._overshootClamping = withDefault(config.overshootClamping, false);
    _this5._restDisplacementThreshold = withDefault(config.restDisplacementThreshold, 0.001);
    _this5._restSpeedThreshold = withDefault(config.restSpeedThreshold, 0.001);
    _this5._initialVelocity = config.velocity;
    _this5._lastVelocity = withDefault(config.velocity, 0);
    _this5._toValue = config.toValue;
    _this5._useNativeDriver = shouldUseNativeDriver(config);
    _this5.__isInteraction = config.isInteraction !== undefined ? config.isInteraction : true;

    var springConfig;
    if (config.bounciness !== undefined || config.speed !== undefined) {
      invariant(config.tension === undefined && config.friction === undefined, 'You can only define bounciness/speed or tension/friction but not both');
      springConfig = SpringConfig.fromBouncinessAndSpeed(withDefault(config.bounciness, 8), withDefault(config.speed, 12));
    } else {
      springConfig = SpringConfig.fromOrigamiTensionAndFriction(withDefault(config.tension, 40), withDefault(config.friction, 7));
    }
    _this5._tension = springConfig.tension;
    _this5._friction = springConfig.friction;
    return _this5;
  }

  babelHelpers.createClass(SpringAnimation, [{
    key: '__getNativeAnimationConfig',
    value: function __getNativeAnimationConfig() {
      return {
        type: 'spring',
        overshootClamping: this._overshootClamping,
        restDisplacementThreshold: this._restDisplacementThreshold,
        restSpeedThreshold: this._restSpeedThreshold,
        tension: this._tension,
        friction: this._friction,
        initialVelocity: withDefault(this._initialVelocity, this._lastVelocity),
        toValue: this._toValue
      };
    }
  }, {
    key: 'start',
    value: function start(fromValue, onUpdate, onEnd, previousAnimation, animatedValue) {
      this.__active = true;
      this._startPosition = fromValue;
      this._lastPosition = this._startPosition;

      this._onUpdate = onUpdate;
      this.__onEnd = onEnd;
      this._lastTime = Date.now();

      if (previousAnimation instanceof SpringAnimation) {
        var internalState = previousAnimation.getInternalState();
        this._lastPosition = internalState.lastPosition;
        this._lastVelocity = internalState.lastVelocity;
        this._lastTime = internalState.lastTime;
      }
      if (this._initialVelocity !== undefined && this._initialVelocity !== null) {
        this._lastVelocity = this._initialVelocity;
      }
      if (this._useNativeDriver) {
        this.__startNativeAnimation(animatedValue);
      } else {
        this.onUpdate();
      }
    }
  }, {
    key: 'getInternalState',
    value: function getInternalState() {
      return {
        lastPosition: this._lastPosition,
        lastVelocity: this._lastVelocity,
        lastTime: this._lastTime
      };
    }
  }, {
    key: 'onUpdate',
    value: function onUpdate() {
      var position = this._lastPosition;
      var velocity = this._lastVelocity;

      var tempPosition = this._lastPosition;
      var tempVelocity = this._lastVelocity;

      var MAX_STEPS = 64;
      var now = Date.now();
      if (now > this._lastTime + MAX_STEPS) {
        now = this._lastTime + MAX_STEPS;
      }

      var TIMESTEP_MSEC = 1;
      var numSteps = Math.floor((now - this._lastTime) / TIMESTEP_MSEC);

      for (var i = 0; i < numSteps; ++i) {
        var step = TIMESTEP_MSEC / 1000;

        var aVelocity = velocity;
        var aAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        var tempPosition = position + aVelocity * step / 2;
        var tempVelocity = velocity + aAcceleration * step / 2;

        var bVelocity = tempVelocity;
        var bAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + bVelocity * step / 2;
        tempVelocity = velocity + bAcceleration * step / 2;

        var cVelocity = tempVelocity;
        var cAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dVelocity = tempVelocity;
        var dAcceleration = this._tension * (this._toValue - tempPosition) - this._friction * tempVelocity;
        tempPosition = position + cVelocity * step / 2;
        tempVelocity = velocity + cAcceleration * step / 2;

        var dxdt = (aVelocity + 2 * (bVelocity + cVelocity) + dVelocity) / 6;
        var dvdt = (aAcceleration + 2 * (bAcceleration + cAcceleration) + dAcceleration) / 6;

        position += dxdt * step;
        velocity += dvdt * step;
      }

      this._lastTime = now;
      this._lastPosition = position;
      this._lastVelocity = velocity;

      this._onUpdate(position);
      if (!this.__active) {
        return;
      }

      var isOvershooting = false;
      if (this._overshootClamping && this._tension !== 0) {
        if (this._startPosition < this._toValue) {
          isOvershooting = position > this._toValue;
        } else {
          isOvershooting = position < this._toValue;
        }
      }
      var isVelocity = Math.abs(velocity) <= this._restSpeedThreshold;
      var isDisplacement = true;
      if (this._tension !== 0) {
        isDisplacement = Math.abs(this._toValue - position) <= this._restDisplacementThreshold;
      }

      if (isOvershooting || isVelocity && isDisplacement) {
        if (this._tension !== 0) {
          this._onUpdate(this._toValue);
        }

        this.__debouncedOnEnd({ finished: true });
        return;
      }
      this._animationFrame = requestAnimationFrame(this.onUpdate.bind(this));
    }
  }, {
    key: 'stop',
    value: function stop() {
      babelHelpers.get(SpringAnimation.prototype.__proto__ || Object.getPrototypeOf(SpringAnimation.prototype), 'stop', this).call(this);
      this.__active = false;
      global.cancelAnimationFrame(this._animationFrame);
      this.__debouncedOnEnd({ finished: false });
    }
  }]);
  return SpringAnimation;
}(Animation);

var _uniqueId = 1;

var AnimatedValue = function (_AnimatedWithChildren) {
  babelHelpers.inherits(AnimatedValue, _AnimatedWithChildren);

  function AnimatedValue(value) {
    babelHelpers.classCallCheck(this, AnimatedValue);

    var _this6 = babelHelpers.possibleConstructorReturn(this, (AnimatedValue.__proto__ || Object.getPrototypeOf(AnimatedValue)).call(this));

    _this6._value = value;
    _this6._offset = 0;
    _this6._animation = null;
    _this6._listeners = {};
    return _this6;
  }

  babelHelpers.createClass(AnimatedValue, [{
    key: '__detach',
    value: function __detach() {
      this.stopAnimation();
      babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._value + this._offset;
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedValue.prototype.__proto__ || Object.getPrototypeOf(AnimatedValue.prototype), '__makeNative', this).call(this);

      if (Object.keys(this._listeners).length) {
        this._startListeningToNativeValueUpdates();
      }
    }
  }, {
    key: 'setValue',
    value: function setValue(value) {
      if (this._animation) {
        this._animation.stop();
        this._animation = null;
      }
      this._updateValue(value, !this.__isNative);
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeValue(this.__getNativeTag(), value);
      }
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this._offset = offset;
      if (this.__isNative) {
        NativeAnimatedAPI.setAnimatedNodeOffset(this.__getNativeTag(), offset);
      }
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this._value += this._offset;
      this._offset = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.flattenAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'extractOffset',
    value: function extractOffset() {
      this._offset += this._value;
      this._value = 0;
      if (this.__isNative) {
        NativeAnimatedAPI.extractAnimatedNodeOffset(this.__getNativeTag());
      }
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var id = String(_uniqueId++);
      this._listeners[id] = callback;
      if (this.__isNative) {
        this._startListeningToNativeValueUpdates();
      }
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      delete this._listeners[id];
      if (this.__isNative && Object.keys(this._listeners).length === 0) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this._listeners = {};
      if (this.__isNative) {
        this._stopListeningForNativeValueUpdates();
      }
    }
  }, {
    key: '_startListeningToNativeValueUpdates',
    value: function _startListeningToNativeValueUpdates() {
      var _this7 = this;

      if (this.__nativeAnimatedValueListener) {
        return;
      }

      NativeAnimatedAPI.startListeningToAnimatedNodeValue(this.__getNativeTag());
      this.__nativeAnimatedValueListener = NativeAnimatedHelper.nativeEventEmitter.addListener('onAnimatedValueUpdate', function (data) {
        if (data.tag !== _this7.__getNativeTag()) {
          return;
        }
        _this7._updateValue(data.value, false);
      });
    }
  }, {
    key: '_stopListeningForNativeValueUpdates',
    value: function _stopListeningForNativeValueUpdates() {
      if (!this.__nativeAnimatedValueListener) {
        return;
      }

      this.__nativeAnimatedValueListener.remove();
      this.__nativeAnimatedValueListener = null;
      NativeAnimatedAPI.stopListeningToAnimatedNodeValue(this.__getNativeTag());
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.stopTracking();
      this._animation && this._animation.stop();
      this._animation = null;
      callback && callback(this.__getValue());
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: 'animate',
    value: function animate(animation, callback) {
      var _this8 = this;

      var handle = null;
      if (animation.__isInteraction) {
        handle = InteractionManager.createInteractionHandle();
      }
      var previousAnimation = this._animation;
      this._animation && this._animation.stop();
      this._animation = animation;
      animation.start(this._value, function (value) {
        _this8._updateValue(value, true);
      }, function (result) {
        _this8._animation = null;
        if (handle !== null) {
          InteractionManager.clearInteractionHandle(handle);
        }
        callback && callback(result);
      }, previousAnimation, this);
    }
  }, {
    key: 'stopTracking',
    value: function stopTracking() {
      this._tracking && this._tracking.__detach();
      this._tracking = null;
    }
  }, {
    key: 'track',
    value: function track(tracking) {
      this.stopTracking();
      this._tracking = tracking;
    }
  }, {
    key: '_updateValue',
    value: function _updateValue(value, flush) {
      this._value = value;
      if (flush) {
        _flush(this);
      }
      for (var key in this._listeners) {
        this._listeners[key]({ value: this.__getValue() });
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'value',
        value: this._value,
        offset: this._offset
      };
    }
  }]);
  return AnimatedValue;
}(AnimatedWithChildren);

var AnimatedValueXY = function (_AnimatedWithChildren2) {
  babelHelpers.inherits(AnimatedValueXY, _AnimatedWithChildren2);

  function AnimatedValueXY(valueIn) {
    babelHelpers.classCallCheck(this, AnimatedValueXY);

    var _this9 = babelHelpers.possibleConstructorReturn(this, (AnimatedValueXY.__proto__ || Object.getPrototypeOf(AnimatedValueXY)).call(this));

    var value = valueIn || { x: 0, y: 0 };
    if (typeof value.x === 'number' && typeof value.y === 'number') {
      _this9.x = new AnimatedValue(value.x);
      _this9.y = new AnimatedValue(value.y);
    } else {
      invariant(value.x instanceof AnimatedValue && value.y instanceof AnimatedValue, 'AnimatedValueXY must be initalized with an object of numbers or ' + 'AnimatedValues.');
      _this9.x = value.x;
      _this9.y = value.y;
    }
    _this9._listeners = {};
    return _this9;
  }

  babelHelpers.createClass(AnimatedValueXY, [{
    key: 'setValue',
    value: function setValue(value) {
      this.x.setValue(value.x);
      this.y.setValue(value.y);
    }
  }, {
    key: 'setOffset',
    value: function setOffset(offset) {
      this.x.setOffset(offset.x);
      this.y.setOffset(offset.y);
    }
  }, {
    key: 'flattenOffset',
    value: function flattenOffset() {
      this.x.flattenOffset();
      this.y.flattenOffset();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return {
        x: this.x.__getValue(),
        y: this.y.__getValue()
      };
    }
  }, {
    key: 'stopAnimation',
    value: function stopAnimation(callback) {
      this.x.stopAnimation();
      this.y.stopAnimation();
      callback && callback(this.__getValue());
    }
  }, {
    key: 'addListener',
    value: function addListener(callback) {
      var _this10 = this;

      var id = String(_uniqueId++);
      var jointCallback = function jointCallback(_ref2) {
        var number = _ref2.value;

        callback(_this10.__getValue());
      };
      this._listeners[id] = {
        x: this.x.addListener(jointCallback),
        y: this.y.addListener(jointCallback)
      };
      return id;
    }
  }, {
    key: 'removeListener',
    value: function removeListener(id) {
      this.x.removeListener(this._listeners[id].x);
      this.y.removeListener(this._listeners[id].y);
      delete this._listeners[id];
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners() {
      this.x.removeAllListeners();
      this.y.removeAllListeners();
      this._listeners = {};
    }
  }, {
    key: 'getLayout',
    value: function getLayout() {
      return {
        left: this.x,
        top: this.y
      };
    }
  }, {
    key: 'getTranslateTransform',
    value: function getTranslateTransform() {
      return [{ translateX: this.x }, { translateY: this.y }];
    }
  }]);
  return AnimatedValueXY;
}(AnimatedWithChildren);

var AnimatedInterpolation = function (_AnimatedWithChildren3) {
  babelHelpers.inherits(AnimatedInterpolation, _AnimatedWithChildren3);

  function AnimatedInterpolation(parent, config) {
    babelHelpers.classCallCheck(this, AnimatedInterpolation);

    var _this11 = babelHelpers.possibleConstructorReturn(this, (AnimatedInterpolation.__proto__ || Object.getPrototypeOf(AnimatedInterpolation)).call(this));

    _this11._parent = parent;
    _this11._config = config;
    _this11._interpolation = Interpolation.create(config);
    return _this11;
  }

  babelHelpers.createClass(AnimatedInterpolation, [{
    key: '__getValue',
    value: function __getValue() {
      var parentValue = this._parent.__getValue();
      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');

      return this._interpolation(parentValue);
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      babelHelpers.get(AnimatedInterpolation.prototype.__proto__ || Object.getPrototypeOf(AnimatedInterpolation.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__transformDataType',
    value: function __transformDataType(range) {
      return range.map(function (value) {
        if (typeof value !== 'string') {
          return value;
        }
        if (/deg$/.test(value)) {
          var degrees = parseFloat(value, 10) || 0;
          var radians = degrees * Math.PI / 180.0;
          return radians;
        } else {
          return parseFloat(value, 10) || 0;
        }
      });
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      if (__DEV__) {
        NativeAnimatedHelper.validateInterpolation(this._config);
      }

      return {
        inputRange: this._config.inputRange,

        outputRange: this.__transformDataType(this._config.outputRange),
        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',
        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',
        type: 'interpolation'
      };
    }
  }]);
  return AnimatedInterpolation;
}(AnimatedWithChildren);

var AnimatedAddition = function (_AnimatedWithChildren4) {
  babelHelpers.inherits(AnimatedAddition, _AnimatedWithChildren4);

  function AnimatedAddition(a, b) {
    babelHelpers.classCallCheck(this, AnimatedAddition);

    var _this12 = babelHelpers.possibleConstructorReturn(this, (AnimatedAddition.__proto__ || Object.getPrototypeOf(AnimatedAddition)).call(this));

    _this12._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this12._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this12;
  }

  babelHelpers.createClass(AnimatedAddition, [{
    key: '__makeNative',
    value: function __makeNative() {
      this._a.__makeNative();
      this._b.__makeNative();
      babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__makeNative', this).call(this);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() + this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedAddition.prototype.__proto__ || Object.getPrototypeOf(AnimatedAddition.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'addition',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedAddition;
}(AnimatedWithChildren);

var AnimatedDivision = function (_AnimatedWithChildren5) {
  babelHelpers.inherits(AnimatedDivision, _AnimatedWithChildren5);

  function AnimatedDivision(a, b) {
    babelHelpers.classCallCheck(this, AnimatedDivision);

    var _this13 = babelHelpers.possibleConstructorReturn(this, (AnimatedDivision.__proto__ || Object.getPrototypeOf(AnimatedDivision)).call(this));

    _this13._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this13._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this13;
  }

  babelHelpers.createClass(AnimatedDivision, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
      this._b.__makeNative();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var a = this._a.__getValue();
      var b = this._b.__getValue();
      if (b === 0) {
        console.error('Detected division by zero in AnimatedDivision');
      }
      return a / b;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedDivision.prototype.__proto__ || Object.getPrototypeOf(AnimatedDivision.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'division',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedDivision;
}(AnimatedWithChildren);

var AnimatedMultiplication = function (_AnimatedWithChildren6) {
  babelHelpers.inherits(AnimatedMultiplication, _AnimatedWithChildren6);

  function AnimatedMultiplication(a, b) {
    babelHelpers.classCallCheck(this, AnimatedMultiplication);

    var _this14 = babelHelpers.possibleConstructorReturn(this, (AnimatedMultiplication.__proto__ || Object.getPrototypeOf(AnimatedMultiplication)).call(this));

    _this14._a = typeof a === 'number' ? new AnimatedValue(a) : a;
    _this14._b = typeof b === 'number' ? new AnimatedValue(b) : b;
    return _this14;
  }

  babelHelpers.createClass(AnimatedMultiplication, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
      this._b.__makeNative();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._a.__getValue() * this._b.__getValue();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
      this._b.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
      this._b.__removeChild(this);
      babelHelpers.get(AnimatedMultiplication.prototype.__proto__ || Object.getPrototypeOf(AnimatedMultiplication.prototype), '__detach', this).call(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'multiplication',
        input: [this._a.__getNativeTag(), this._b.__getNativeTag()]
      };
    }
  }]);
  return AnimatedMultiplication;
}(AnimatedWithChildren);

var AnimatedModulo = function (_AnimatedWithChildren7) {
  babelHelpers.inherits(AnimatedModulo, _AnimatedWithChildren7);

  function AnimatedModulo(a, modulus) {
    babelHelpers.classCallCheck(this, AnimatedModulo);

    var _this15 = babelHelpers.possibleConstructorReturn(this, (AnimatedModulo.__proto__ || Object.getPrototypeOf(AnimatedModulo)).call(this));

    _this15._a = a;
    _this15._modulus = modulus;
    return _this15;
  }

  babelHelpers.createClass(AnimatedModulo, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedModulo.prototype.__proto__ || Object.getPrototypeOf(AnimatedModulo.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return (this._a.__getValue() % this._modulus + this._modulus) % this._modulus;
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'modulus',
        input: this._a.__getNativeTag(),
        modulus: this._modulus
      };
    }
  }]);
  return AnimatedModulo;
}(AnimatedWithChildren);

var AnimatedDiffClamp = function (_AnimatedWithChildren8) {
  babelHelpers.inherits(AnimatedDiffClamp, _AnimatedWithChildren8);

  function AnimatedDiffClamp(a, min, max) {
    babelHelpers.classCallCheck(this, AnimatedDiffClamp);

    var _this16 = babelHelpers.possibleConstructorReturn(this, (AnimatedDiffClamp.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp)).call(this));

    _this16._a = a;
    _this16._min = min;
    _this16._max = max;
    _this16._value = _this16._lastValue = _this16._a.__getValue();
    return _this16;
  }

  babelHelpers.createClass(AnimatedDiffClamp, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedDiffClamp.prototype.__proto__ || Object.getPrototypeOf(AnimatedDiffClamp.prototype), '__makeNative', this).call(this);
      this._a.__makeNative();
    }
  }, {
    key: 'interpolate',
    value: function interpolate(config) {
      return new AnimatedInterpolation(this, config);
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      var value = this._a.__getValue();
      var diff = value - this._lastValue;
      this._lastValue = value;
      this._value = Math.min(Math.max(this._value + diff, this._min), this._max);
      return this._value;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._a.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._a.__removeChild(this);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      return {
        type: 'diffclamp',
        input: this._a.__getNativeTag(),
        min: this._min,
        max: this._max
      };
    }
  }]);
  return AnimatedDiffClamp;
}(AnimatedWithChildren);

var AnimatedTransform = function (_AnimatedWithChildren9) {
  babelHelpers.inherits(AnimatedTransform, _AnimatedWithChildren9);

  function AnimatedTransform(transforms) {
    babelHelpers.classCallCheck(this, AnimatedTransform);

    var _this17 = babelHelpers.possibleConstructorReturn(this, (AnimatedTransform.__proto__ || Object.getPrototypeOf(AnimatedTransform)).call(this));

    _this17._transforms = transforms;
    return _this17;
  }

  babelHelpers.createClass(AnimatedTransform, [{
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedTransform.prototype.__proto__ || Object.getPrototypeOf(AnimatedTransform.prototype), '__makeNative', this).call(this);
      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
      });
    }
  }, {
    key: '__getValue',
    value: function __getValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      return this._transforms.map(function (transform) {
        var result = {};
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            result[key] = value.__getAnimatedValue();
          } else {
            result[key] = value;
          }
        }
        return result;
      });
    }
  }, {
    key: '__attach',
    value: function __attach() {
      var _this18 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__addChild(_this18);
          }
        }
      });
    }
  }, {
    key: '__detach',
    value: function __detach() {
      var _this19 = this;

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            value.__removeChild(_this19);
          }
        }
      });
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var transConfigs = [];

      this._transforms.forEach(function (transform) {
        for (var key in transform) {
          var value = transform[key];
          if (value instanceof Animated) {
            transConfigs.push({
              type: 'animated',
              property: key,
              nodeTag: value.__getNativeTag()
            });
          } else {
            transConfigs.push({
              type: 'static',
              property: key,
              value: value
            });
          }
        }
      });

      NativeAnimatedHelper.validateTransform(transConfigs);
      return {
        type: 'transform',
        transforms: transConfigs
      };
    }
  }]);
  return AnimatedTransform;
}(AnimatedWithChildren);

var AnimatedStyle = function (_AnimatedWithChildren10) {
  babelHelpers.inherits(AnimatedStyle, _AnimatedWithChildren10);

  function AnimatedStyle(style) {
    babelHelpers.classCallCheck(this, AnimatedStyle);

    var _this20 = babelHelpers.possibleConstructorReturn(this, (AnimatedStyle.__proto__ || Object.getPrototypeOf(AnimatedStyle)).call(this));

    style = flattenStyle(style) || {};
    if (style.transform) {
      style = babelHelpers.extends({}, style, {
        transform: new AnimatedTransform(style.transform)
      });
    }
    _this20._style = style;
    return _this20;
  }

  babelHelpers.createClass(AnimatedStyle, [{
    key: '__getValue',
    value: function __getValue() {
      var style = {};
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          if (!value.__isNative) {
            style[key] = value.__getValue();
          }
        } else {
          style[key] = value;
        }
      }
      return style;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      var style = {};
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          style[key] = value.__getAnimatedValue();
        }
      }
      return style;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      babelHelpers.get(AnimatedStyle.prototype.__proto__ || Object.getPrototypeOf(AnimatedStyle.prototype), '__makeNative', this).call(this);
      for (var key in this._style) {
        var value = this._style[key];
        if (value instanceof Animated) {
          value.__makeNative();
        }
      }
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var styleConfig = {};
      for (var styleKey in this._style) {
        if (this._style[styleKey] instanceof Animated) {
          styleConfig[styleKey] = this._style[styleKey].__getNativeTag();
        }
      }
      NativeAnimatedHelper.validateStyles(styleConfig);
      return {
        type: 'style',
        style: styleConfig
      };
    }
  }]);
  return AnimatedStyle;
}(AnimatedWithChildren);

var AnimatedProps = function (_Animated2) {
  babelHelpers.inherits(AnimatedProps, _Animated2);

  function AnimatedProps(props, callback) {
    babelHelpers.classCallCheck(this, AnimatedProps);

    var _this21 = babelHelpers.possibleConstructorReturn(this, (AnimatedProps.__proto__ || Object.getPrototypeOf(AnimatedProps)).call(this));

    if (props.style) {
      props = babelHelpers.extends({}, props, {
        style: new AnimatedStyle(props.style)
      });
    }
    _this21._props = props;
    _this21._callback = callback;
    _this21.__attach();
    return _this21;
  }

  babelHelpers.createClass(AnimatedProps, [{
    key: '__getValue',
    value: function __getValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          if (!value.__isNative || value instanceof AnimatedStyle) {
            props[key] = value.__getValue();
          }
        } else if (value instanceof AnimatedEvent) {
          props[key] = value.__getHandler();
        } else {
          props[key] = value;
        }
      }
      return props;
    }
  }, {
    key: '__getAnimatedValue',
    value: function __getAnimatedValue() {
      var props = {};
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          props[key] = value.__getAnimatedValue();
        }
      }
      return props;
    }
  }, {
    key: '__attach',
    value: function __attach() {
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__addChild(this);
        }
      }
    }
  }, {
    key: '__detach',
    value: function __detach() {
      if (this.__isNative && this._animatedView) {
        this.__disconnectAnimatedView();
      }
      for (var key in this._props) {
        var value = this._props[key];
        if (value instanceof Animated) {
          value.__removeChild(this);
        }
      }
      babelHelpers.get(AnimatedProps.prototype.__proto__ || Object.getPrototypeOf(AnimatedProps.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._callback();
    }
  }, {
    key: '__makeNative',
    value: function __makeNative() {
      if (!this.__isNative) {
        this.__isNative = true;
        for (var key in this._props) {
          var value = this._props[key];
          if (value instanceof Animated) {
            value.__makeNative();
          }
        }
        if (this._animatedView) {
          this.__connectAnimatedView();
        }
      }
    }
  }, {
    key: 'setNativeView',
    value: function setNativeView(animatedView) {
      invariant(this._animatedView === undefined, 'Animated view already set.');
      this._animatedView = animatedView;
      if (this.__isNative) {
        this.__connectAnimatedView();
      }
    }
  }, {
    key: '__connectAnimatedView',
    value: function __connectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.connectAnimatedNodeToView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__disconnectAnimatedView',
    value: function __disconnectAnimatedView() {
      invariant(this.__isNative, 'Expected node to be marked as "native"');
      var nativeViewTag = findNodeHandle(this._animatedView);
      invariant(nativeViewTag != null, 'Unable to locate attached view in the native tree');
      NativeAnimatedAPI.disconnectAnimatedNodeFromView(this.__getNativeTag(), nativeViewTag);
    }
  }, {
    key: '__getNativeConfig',
    value: function __getNativeConfig() {
      var propsConfig = {};
      for (var propKey in this._props) {
        var value = this._props[propKey];
        if (value instanceof Animated) {
          propsConfig[propKey] = value.__getNativeTag();
        }
      }
      return {
        type: 'props',
        props: propsConfig
      };
    }
  }]);
  return AnimatedProps;
}(Animated);

function createAnimatedComponent(Component) {
  var AnimatedComponent = function (_React$Component) {
    babelHelpers.inherits(AnimatedComponent, _React$Component);

    function AnimatedComponent(props) {
      babelHelpers.classCallCheck(this, AnimatedComponent);

      var _this22 = babelHelpers.possibleConstructorReturn(this, (AnimatedComponent.__proto__ || Object.getPrototypeOf(AnimatedComponent)).call(this, props));

      _this22._setComponentRef = _this22._setComponentRef.bind(_this22);
      return _this22;
    }

    babelHelpers.createClass(AnimatedComponent, [{
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._propsAnimated && this._propsAnimated.__detach();
        this._detachNativeEvents(this.props);
      }
    }, {
      key: 'setNativeProps',
      value: function setNativeProps(props) {
        this._component.setNativeProps(props);
      }
    }, {
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._attachProps(this.props);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._propsAnimated.setNativeView(this._component);

        this._attachNativeEvents(this.props);
      }
    }, {
      key: '_attachNativeEvents',
      value: function _attachNativeEvents(newProps) {
        if (newProps !== this.props) {
          this._detachNativeEvents(this.props);
        }

        var ref = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        for (var _key in newProps) {
          var prop = newProps[_key];
          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__attach(ref, _key);
          }
        }
      }
    }, {
      key: '_detachNativeEvents',
      value: function _detachNativeEvents(props) {
        var ref = this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;

        for (var _key2 in props) {
          var prop = props[_key2];
          if (prop instanceof AnimatedEvent && prop.__isNative) {
            prop.__detach(ref, _key2);
          }
        }
      }
    }, {
      key: '_attachProps',
      value: function _attachProps(nextProps) {
        var _this23 = this;

        var oldPropsAnimated = this._propsAnimated;

        var callback = function callback() {
          if (_this23._component.setNativeProps) {
            if (!_this23._propsAnimated.__isNative) {
              _this23._component.setNativeProps(_this23._propsAnimated.__getAnimatedValue());
            } else {
              throw new Error('Attempting to run JS driven animation on animated ' + 'node that has been moved to "native" earlier by starting an ' + 'animation with `useNativeDriver: true`');
            }
          } else {
            _this23.forceUpdate();
          }
        };

        this._propsAnimated = new AnimatedProps(nextProps, callback);

        if (this._component) {
          this._propsAnimated.setNativeView(this._component);
        }

        oldPropsAnimated && oldPropsAnimated.__detach();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._attachProps(nextProps);
        this._attachNativeEvents(nextProps);
      }
    }, {
      key: 'render',
      value: function render() {
        return React.createElement(Component, babelHelpers.extends({}, this._propsAnimated.__getValue(), {
          ref: this._setComponentRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 1802
          }
        }));
      }
    }, {
      key: '_setComponentRef',
      value: function _setComponentRef(c) {
        this._component = c;
      }
    }, {
      key: 'getNode',
      value: function getNode() {
        return this._component;
      }
    }]);
    return AnimatedComponent;
  }(React.Component);

  AnimatedComponent.propTypes = {
    style: function style(props, propName, componentName) {
      if (!Component.propTypes) {
        return;
      }

      for (var key in ViewStylePropTypes) {
        if (!Component.propTypes[key] && props[key] !== undefined) {
          console.warn('You are setting the style `{ ' + key + ': ... }` as a prop. You ' + 'should nest it in a style object. ' + 'E.g. `{ style: { ' + key + ': ... } }`');
        }
      }
    }
  };

  return AnimatedComponent;
}

var AnimatedTracking = function (_Animated3) {
  babelHelpers.inherits(AnimatedTracking, _Animated3);

  function AnimatedTracking(value, parent, animationClass, animationConfig, callback) {
    babelHelpers.classCallCheck(this, AnimatedTracking);

    var _this24 = babelHelpers.possibleConstructorReturn(this, (AnimatedTracking.__proto__ || Object.getPrototypeOf(AnimatedTracking)).call(this));

    _this24._value = value;
    _this24._parent = parent;
    _this24._animationClass = animationClass;
    _this24._animationConfig = animationConfig;
    _this24._callback = callback;
    _this24.__attach();
    return _this24;
  }

  babelHelpers.createClass(AnimatedTracking, [{
    key: '__getValue',
    value: function __getValue() {
      return this._parent.__getValue();
    }
  }, {
    key: '__attach',
    value: function __attach() {
      this._parent.__addChild(this);
    }
  }, {
    key: '__detach',
    value: function __detach() {
      this._parent.__removeChild(this);
      babelHelpers.get(AnimatedTracking.prototype.__proto__ || Object.getPrototypeOf(AnimatedTracking.prototype), '__detach', this).call(this);
    }
  }, {
    key: 'update',
    value: function update() {
      this._value.animate(new this._animationClass(babelHelpers.extends({}, this._animationConfig, {
        toValue: this._animationConfig.toValue.__getValue()
      })), this._callback);
    }
  }]);
  return AnimatedTracking;
}(Animated);

var add = function add(a, b) {
  return new AnimatedAddition(a, b);
};

var divide = function divide(a, b) {
  return new AnimatedDivision(a, b);
};

var multiply = function multiply(a, b) {
  return new AnimatedMultiplication(a, b);
};

var modulo = function modulo(a, modulus) {
  return new AnimatedModulo(a, modulus);
};

var diffClamp = function diffClamp(a, min, max) {
  return new AnimatedDiffClamp(a, min, max);
};

var _combineCallbacks = function _combineCallbacks(callback, config) {
  if (callback && config.onComplete) {
    return function () {
      config.onComplete && config.onComplete.apply(config, arguments);
      callback && callback.apply(undefined, arguments);
    };
  } else {
    return callback || config.onComplete;
  }
};

var maybeVectorAnim = function maybeVectorAnim(value, config, anim) {
  if (value instanceof AnimatedValueXY) {
    var configX = babelHelpers.extends({}, config);
    var configY = babelHelpers.extends({}, config);
    for (var key in config) {
      var _config$key = config[key],
          x = _config$key.x,
          y = _config$key.y;

      if (x !== undefined && y !== undefined) {
        configX[key] = x;
        configY[key] = y;
      }
    }
    var aX = anim(value.x, configX);
    var aY = anim(value.y, configY);

    return parallel([aX, aY], { stopTogether: false });
  }
  return null;
};

var spring = function spring(value, config) {
  return maybeVectorAnim(value, config, spring) || {
    start: function start(callback) {
      callback = _combineCallbacks(callback, config);
      var singleValue = value;
      var singleConfig = config;
      singleValue.stopTracking();
      if (config.toValue instanceof Animated) {
        singleValue.track(new AnimatedTracking(singleValue, config.toValue, SpringAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new SpringAnimation(singleConfig), callback);
      }
    },

    stop: function stop() {
      value.stopAnimation();
    }
  };
};

var timing = function timing(value, config) {
  return maybeVectorAnim(value, config, timing) || {
    start: function start(callback) {
      callback = _combineCallbacks(callback, config);
      var singleValue = value;
      var singleConfig = config;
      singleValue.stopTracking();
      if (config.toValue instanceof Animated) {
        singleValue.track(new AnimatedTracking(singleValue, config.toValue, TimingAnimation, singleConfig, callback));
      } else {
        singleValue.animate(new TimingAnimation(singleConfig), callback);
      }
    },

    stop: function stop() {
      value.stopAnimation();
    }
  };
};

var decay = function decay(value, config) {
  return maybeVectorAnim(value, config, decay) || {
    start: function start(callback) {
      callback = _combineCallbacks(callback, config);
      var singleValue = value;
      var singleConfig = config;
      singleValue.stopTracking();
      singleValue.animate(new DecayAnimation(singleConfig), callback);
    },

    stop: function stop() {
      value.stopAnimation();
    }
  };
};

var sequence = function sequence(animations) {
  var current = 0;
  return {
    start: function start(callback) {
      var onComplete = function onComplete(result) {
        if (!result.finished) {
          callback && callback(result);
          return;
        }

        current++;

        if (current === animations.length) {
          callback && callback(result);
          return;
        }

        animations[current].start(onComplete);
      };

      if (animations.length === 0) {
        callback && callback({ finished: true });
      } else {
        animations[current].start(onComplete);
      }
    },

    stop: function stop() {
      if (current < animations.length) {
        animations[current].stop();
      }
    }
  };
};

var parallel = function parallel(animations, config) {
  var doneCount = 0;

  var hasEnded = {};
  var stopTogether = !(config && config.stopTogether === false);

  var result = {
    start: function start(callback) {
      if (doneCount === animations.length) {
        callback && callback({ finished: true });
        return;
      }

      animations.forEach(function (animation, idx) {
        var cb = function cb(endResult) {
          hasEnded[idx] = true;
          doneCount++;
          if (doneCount === animations.length) {
            doneCount = 0;
            callback && callback(endResult);
            return;
          }

          if (!endResult.finished && stopTogether) {
            result.stop();
          }
        };

        if (!animation) {
          cb({ finished: true });
        } else {
          animation.start(cb);
        }
      });
    },

    stop: function stop() {
      animations.forEach(function (animation, idx) {
        !hasEnded[idx] && animation.stop();
        hasEnded[idx] = true;
      });
    }
  };

  return result;
};

var delay = function delay(time) {
  return timing(new AnimatedValue(0), { toValue: 0, delay: time, duration: 0 });
};

var stagger = function stagger(time, animations) {
  return parallel(animations.map(function (animation, i) {
    return sequence([delay(time * i), animation]);
  }));
};

var AnimatedEvent = function () {
  function AnimatedEvent(argMapping) {
    var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    babelHelpers.classCallCheck(this, AnimatedEvent);

    this._argMapping = argMapping;
    this._listener = config.listener;
    this.__isNative = shouldUseNativeDriver(config);

    if (this.__isNative) {
      invariant(!this._listener, 'Listener is not supported for native driven events.');
    }

    if (__DEV__) {
      this._validateMapping();
    }
  }

  babelHelpers.createClass(AnimatedEvent, [{
    key: '__attach',
    value: function __attach(viewRef, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be attached.');

      var eventMappings = [];

      var traverse = function traverse(value, path) {
        if (value instanceof AnimatedValue) {
          value.__makeNative();

          eventMappings.push({
            nativeEventPath: path,
            animatedValueTag: value.__getNativeTag()
          });
        } else if (typeof value === 'object') {
          for (var _key3 in value) {
            traverse(value[_key3], path.concat(_key3));
          }
        }
      };

      invariant(this._argMapping[0] && this._argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.');

      traverse(this._argMapping[0].nativeEvent, []);

      var viewTag = findNodeHandle(viewRef);

      eventMappings.forEach(function (mapping) {
        NativeAnimatedAPI.addAnimatedEventToView(viewTag, eventName, mapping);
      });
    }
  }, {
    key: '__detach',
    value: function __detach(viewTag, eventName) {
      invariant(this.__isNative, 'Only native driven events need to be detached.');

      NativeAnimatedAPI.removeAnimatedEventFromView(viewTag, eventName);
    }
  }, {
    key: '__getHandler',
    value: function __getHandler() {
      var _this25 = this;

      return function () {
        for (var _len = arguments.length, args = Array(_len), _key4 = 0; _key4 < _len; _key4++) {
          args[_key4] = arguments[_key4];
        }

        var traverse = function traverse(recMapping, recEvt, key) {
          if (typeof recEvt === 'number' && recMapping instanceof AnimatedValue) {
            recMapping.setValue(recEvt);
          } else if (typeof recMapping === 'object') {
            for (var mappingKey in recMapping) {
              traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
            }
          }
        };

        if (!_this25.__isNative) {
          _this25._argMapping.forEach(function (mapping, idx) {
            traverse(mapping, args[idx], 'arg' + idx);
          });
        }

        if (_this25._listener) {
          _this25._listener.apply(null, args);
        }
      };
    }
  }, {
    key: '_validateMapping',
    value: function _validateMapping() {
      var traverse = function traverse(recMapping, recEvt, key) {
        if (typeof recEvt === 'number') {
          invariant(recMapping instanceof AnimatedValue, 'Bad mapping of type ' + typeof recMapping + ' for key ' + key + ', event value must map to AnimatedValue');
          return;
        }
        invariant(typeof recMapping === 'object', 'Bad mapping of type ' + typeof recMapping + ' for key ' + key);
        invariant(typeof recEvt === 'object', 'Bad event of type ' + typeof recEvt + ' for key ' + key);
        for (var mappingKey in recMapping) {
          traverse(recMapping[mappingKey], recEvt[mappingKey], mappingKey);
        }
      };
    }
  }]);
  return AnimatedEvent;
}();

var event = function event(argMapping, config) {
  var animatedEvent = new AnimatedEvent(argMapping, config);
  if (animatedEvent.__isNative) {
    return animatedEvent;
  } else {
    return animatedEvent.__getHandler();
  }
};

module.exports = {
  Value: AnimatedValue,

  ValueXY: AnimatedValueXY,

  decay: decay,

  timing: timing,

  spring: spring,

  add: add,

  divide: divide,

  multiply: multiply,

  modulo: modulo,

  diffClamp: diffClamp,

  delay: delay,

  sequence: sequence,

  parallel: parallel,

  stagger: stagger,

  event: event,

  createAnimatedComponent: createAnimatedComponent,

  __PropsOnlyForTests: AnimatedProps
};
}, 257, null, "AnimatedImplementation");
__d(/* InteractionManager */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge
var EventEmitter = require(80            ); // 80 = EventEmitter
var Set = require(224  ); // 224 = Set
var TaskQueue = require(259        ); // 259 = TaskQueue

var infoLog = require(260      ); // 260 = infoLog
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var keyMirror = require(110                 ); // 110 = fbjs/lib/keyMirror

var _emitter = new EventEmitter();

var DEBUG_DELAY = 0;
var DEBUG = false;

var InteractionManager = {
  Events: keyMirror({
    interactionStart: true,
    interactionComplete: true
  }),

  runAfterInteractions: function runAfterInteractions(task) {
    var tasks = [];
    var promise = new Promise(function (resolve) {
      _scheduleUpdate();
      if (task) {
        tasks.push(task);
      }
      tasks.push({ run: resolve, name: 'resolve ' + (task && task.name || '?') });
      _taskQueue.enqueueTasks(tasks);
    });
    return {
      then: promise.then.bind(promise),
      done: function done() {
        if (promise.done) {
          return promise.done.apply(promise, arguments);
        } else {
          console.warn('Tried to call done when not supported by current Promise implementation.');
        }
      },
      cancel: function cancel() {
        _taskQueue.cancelTasks(tasks);
      }
    };
  },
  createInteractionHandle: function createInteractionHandle() {
    DEBUG && infoLog('create interaction handle');
    _scheduleUpdate();
    var handle = ++_inc;
    _addInteractionSet.add(handle);
    return handle;
  },
  clearInteractionHandle: function clearInteractionHandle(handle) {
    DEBUG && infoLog('clear interaction handle');
    invariant(!!handle, 'Must provide a handle to clear.');
    _scheduleUpdate();
    _addInteractionSet.delete(handle);
    _deleteInteractionSet.add(handle);
  },


  addListener: _emitter.addListener.bind(_emitter),

  setDeadline: function setDeadline(deadline) {
    _deadline = deadline;
  }
};

var _interactionSet = new Set();
var _addInteractionSet = new Set();
var _deleteInteractionSet = new Set();
var _taskQueue = new TaskQueue({ onMoreTasks: _scheduleUpdate });
var _nextUpdateHandle = 0;
var _inc = 0;
var _deadline = -1;

function _scheduleUpdate() {
  if (!_nextUpdateHandle) {
    if (_deadline > 0) {
      _nextUpdateHandle = setTimeout(_processUpdate, 0 + DEBUG_DELAY);
    } else {
      _nextUpdateHandle = setImmediate(_processUpdate);
    }
  }
}

function _processUpdate() {
  _nextUpdateHandle = 0;

  var interactionCount = _interactionSet.size;
  _addInteractionSet.forEach(function (handle) {
    return _interactionSet.add(handle);
  });
  _deleteInteractionSet.forEach(function (handle) {
    return _interactionSet.delete(handle);
  });
  var nextInteractionCount = _interactionSet.size;

  if (interactionCount !== 0 && nextInteractionCount === 0) {
    _emitter.emit(InteractionManager.Events.interactionComplete);
  } else if (interactionCount === 0 && nextInteractionCount !== 0) {
    _emitter.emit(InteractionManager.Events.interactionStart);
  }

  if (nextInteractionCount === 0) {
    while (_taskQueue.hasTasksToProcess()) {
      _taskQueue.processNext();
      if (_deadline > 0 && BatchedBridge.getEventLoopRunningTime() >= _deadline) {
        _scheduleUpdate();
        break;
      }
    }
  }
  _addInteractionSet.clear();
  _deleteInteractionSet.clear();
}

module.exports = InteractionManager;
}, 258, null, "InteractionManager");
__d(/* TaskQueue */function(global, require, module, exports) {
'use strict';

var infoLog = require(260      ); // 260 = infoLog
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var DEBUG = false;

var TaskQueue = function () {
  function TaskQueue(_ref) {
    var onMoreTasks = _ref.onMoreTasks;
    babelHelpers.classCallCheck(this, TaskQueue);

    this._onMoreTasks = onMoreTasks;
    this._queueStack = [{ tasks: [], popable: false }];
  }

  babelHelpers.createClass(TaskQueue, [{
    key: 'enqueue',
    value: function enqueue(task) {
      this._getCurrentQueue().push(task);
    }
  }, {
    key: 'enqueueTasks',
    value: function enqueueTasks(tasks) {
      var _this = this;

      tasks.forEach(function (task) {
        return _this.enqueue(task);
      });
    }
  }, {
    key: 'cancelTasks',
    value: function cancelTasks(tasksToCancel) {
      this._queueStack = this._queueStack.map(function (queue) {
        return babelHelpers.extends({}, queue, {
          tasks: queue.tasks.filter(function (task) {
            return tasksToCancel.indexOf(task) === -1;
          })
        });
      }).filter(function (queue, idx) {
        return queue.tasks.length > 0 || idx === 0;
      });
    }
  }, {
    key: 'hasTasksToProcess',
    value: function hasTasksToProcess() {
      return this._getCurrentQueue().length > 0;
    }
  }, {
    key: 'processNext',
    value: function processNext() {
      var queue = this._getCurrentQueue();
      if (queue.length) {
        var task = queue.shift();
        try {
          if (task.gen) {
            DEBUG && infoLog('genPromise for task ' + task.name);
            this._genPromise(task);
          } else if (task.run) {
            DEBUG && infoLog('run task ' + task.name);
            task.run();
          } else {
            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\n' + JSON.stringify(task, null, 2));
            DEBUG && infoLog('run anonymous task');
            task();
          }
        } catch (e) {
          e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;
          throw e;
        }
      }
    }
  }, {
    key: '_getCurrentQueue',
    value: function _getCurrentQueue() {
      var stackIdx = this._queueStack.length - 1;
      var queue = this._queueStack[stackIdx];
      if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {
        this._queueStack.pop();
        DEBUG && infoLog('popped queue: ', { stackIdx: stackIdx, queueStackSize: this._queueStack.length });
        return this._getCurrentQueue();
      } else {
        return queue.tasks;
      }
    }
  }, {
    key: '_genPromise',
    value: function _genPromise(task) {
      var _this2 = this;

      this._queueStack.push({ tasks: [], popable: false });
      var stackIdx = this._queueStack.length - 1;
      DEBUG && infoLog('push new queue: ', { stackIdx: stackIdx });
      DEBUG && infoLog('exec gen task ' + task.name);
      task.gen().then(function () {
        DEBUG && infoLog('onThen for gen task ' + task.name, { stackIdx: stackIdx, queueStackSize: _this2._queueStack.length });
        _this2._queueStack[stackIdx].popable = true;
        _this2.hasTasksToProcess() && _this2._onMoreTasks();
      }).catch(function (ex) {
        ex.message = 'TaskQueue: Error resolving Promise in task ' + task.name + ': ' + ex.message;
        throw ex;
      }).done();
    }
  }]);
  return TaskQueue;
}();

module.exports = TaskQueue;
}, 259, null, "TaskQueue");
__d(/* infoLog */function(global, require, module, exports) {
'use strict';

function infoLog() {
  var _console;

  return (_console = console).log.apply(_console, arguments);
}

module.exports = infoLog;
}, 260, null, "infoLog");
__d(/* Interpolation */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var normalizeColor = require(49              ); // 49 = normalizeColor

var linear = function linear(t) {
  return t;
};

var Interpolation = function () {
  function Interpolation() {
    babelHelpers.classCallCheck(this, Interpolation);
  }

  babelHelpers.createClass(Interpolation, null, [{
    key: 'create',
    value: function create(config) {

      if (config.outputRange && typeof config.outputRange[0] === 'string') {
        return createInterpolationFromStringOutputRange(config);
      }

      var outputRange = config.outputRange;
      checkInfiniteRange('outputRange', outputRange);

      var inputRange = config.inputRange;
      checkInfiniteRange('inputRange', inputRange);
      checkValidInputRange(inputRange);

      invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');

      var easing = config.easing || linear;

      var extrapolateLeft = 'extend';
      if (config.extrapolateLeft !== undefined) {
        extrapolateLeft = config.extrapolateLeft;
      } else if (config.extrapolate !== undefined) {
        extrapolateLeft = config.extrapolate;
      }

      var extrapolateRight = 'extend';
      if (config.extrapolateRight !== undefined) {
        extrapolateRight = config.extrapolateRight;
      } else if (config.extrapolate !== undefined) {
        extrapolateRight = config.extrapolate;
      }

      return function (input) {
        invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');

        var range = findRange(input, inputRange);
        return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);
      };
    }
  }]);
  return Interpolation;
}();

function interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {
  var result = input;

  if (result < inputMin) {
    if (extrapolateLeft === 'identity') {
      return result;
    } else if (extrapolateLeft === 'clamp') {
      result = inputMin;
    } else if (extrapolateLeft === 'extend') {}
  }

  if (result > inputMax) {
    if (extrapolateRight === 'identity') {
      return result;
    } else if (extrapolateRight === 'clamp') {
      result = inputMax;
    } else if (extrapolateRight === 'extend') {}
  }

  if (outputMin === outputMax) {
    return outputMin;
  }

  if (inputMin === inputMax) {
    if (input <= inputMin) {
      return outputMin;
    }
    return outputMax;
  }

  if (inputMin === -Infinity) {
    result = -result;
  } else if (inputMax === Infinity) {
    result = result - inputMin;
  } else {
    result = (result - inputMin) / (inputMax - inputMin);
  }

  result = easing(result);

  if (outputMin === -Infinity) {
    result = -result;
  } else if (outputMax === Infinity) {
    result = result + outputMin;
  } else {
    result = result * (outputMax - outputMin) + outputMin;
  }

  return result;
}

function colorToRgba(input) {
  var int32Color = normalizeColor(input);
  if (int32Color === null) {
    return input;
  }

  int32Color = int32Color || 0;

  var r = (int32Color & 0xff000000) >>> 24;
  var g = (int32Color & 0x00ff0000) >>> 16;
  var b = (int32Color & 0x0000ff00) >>> 8;
  var a = (int32Color & 0x000000ff) / 255;

  return 'rgba(' + r + ', ' + g + ', ' + b + ', ' + a + ')';
}

var stringShapeRegex = /[0-9\.-]+/g;

function createInterpolationFromStringOutputRange(config) {
  var outputRange = config.outputRange;
  invariant(outputRange.length >= 2, 'Bad output range');
  outputRange = outputRange.map(colorToRgba);
  checkPattern(outputRange);

  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {
    return [];
  });
  outputRange.forEach(function (value) {
    value.match(stringShapeRegex).forEach(function (number, i) {
      outputRanges[i].push(+number);
    });
  });

  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {
    return Interpolation.create(babelHelpers.extends({}, config, {
      outputRange: outputRanges[i]
    }));
  });

  var shouldRound = isRgbOrRgba(outputRange[0]);

  return function (input) {
    var i = 0;

    return outputRange[0].replace(stringShapeRegex, function () {
      var val = +interpolations[i++](input);
      var rounded = shouldRound && i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;
      return String(rounded);
    });
  };
}

function isRgbOrRgba(range) {
  return typeof range === 'string' && range.startsWith('rgb');
}

function checkPattern(arr) {
  var pattern = arr[0].replace(stringShapeRegex, '');
  for (var i = 1; i < arr.length; ++i) {
    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);
  }
}

function findRange(input, inputRange) {
  for (var i = 1; i < inputRange.length - 1; ++i) {
    if (inputRange[i] >= input) {
      break;
    }
  }
  return i - 1;
}

function checkValidInputRange(arr) {
  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');
  for (var i = 1; i < arr.length; ++i) {
    invariant(arr[i] >= arr[i - 1], 'inputRange must be monotonically increasing ' + arr);
  }
}

function checkInfiniteRange(name, arr) {
  invariant(arr.length >= 2, name + ' must have at least 2 elements');
  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);
}

module.exports = Interpolation;
}, 261, null, "Interpolation");
__d(/* NativeAnimatedHelper */function(global, require, module, exports) {
'use strict';

var NativeAnimatedModule = require(57             ).NativeAnimatedModule; // 57 = NativeModules
var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var __nativeAnimatedNodeTagCount = 1;
var __nativeAnimationIdCount = 1;

var nativeEventEmitter = void 0;

var API = {
  createAnimatedNode: function createAnimatedNode(tag, config) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.createAnimatedNode(tag, config);
  },
  startListeningToAnimatedNodeValue: function startListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startListeningToAnimatedNodeValue(tag);
  },
  stopListeningToAnimatedNodeValue: function stopListeningToAnimatedNodeValue(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopListeningToAnimatedNodeValue(tag);
  },
  connectAnimatedNodes: function connectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodes(parentTag, childTag);
  },
  disconnectAnimatedNodes: function disconnectAnimatedNodes(parentTag, childTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodes(parentTag, childTag);
  },
  startAnimatingNode: function startAnimatingNode(animationId, nodeTag, config, endCallback) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.startAnimatingNode(animationId, nodeTag, config, endCallback);
  },
  stopAnimation: function stopAnimation(animationId) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.stopAnimation(animationId);
  },
  setAnimatedNodeValue: function setAnimatedNodeValue(nodeTag, value) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeValue(nodeTag, value);
  },
  setAnimatedNodeOffset: function setAnimatedNodeOffset(nodeTag, offset) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.setAnimatedNodeOffset(nodeTag, offset);
  },
  flattenAnimatedNodeOffset: function flattenAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.flattenAnimatedNodeOffset(nodeTag);
  },
  extractAnimatedNodeOffset: function extractAnimatedNodeOffset(nodeTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.extractAnimatedNodeOffset(nodeTag);
  },
  connectAnimatedNodeToView: function connectAnimatedNodeToView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.connectAnimatedNodeToView(nodeTag, viewTag);
  },
  disconnectAnimatedNodeFromView: function disconnectAnimatedNodeFromView(nodeTag, viewTag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.disconnectAnimatedNodeFromView(nodeTag, viewTag);
  },
  dropAnimatedNode: function dropAnimatedNode(tag) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.dropAnimatedNode(tag);
  },
  addAnimatedEventToView: function addAnimatedEventToView(viewTag, eventName, eventMapping) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.addAnimatedEventToView(viewTag, eventName, eventMapping);
  },
  removeAnimatedEventFromView: function removeAnimatedEventFromView(viewTag, eventName) {
    assertNativeAnimatedModule();
    NativeAnimatedModule.removeAnimatedEventFromView(viewTag, eventName);
  }
};

var STYLES_WHITELIST = {
  opacity: true,
  transform: true,

  scaleX: true,
  scaleY: true,
  translateX: true,
  translateY: true
};

var TRANSFORM_WHITELIST = {
  translateX: true,
  translateY: true,
  scale: true,
  scaleX: true,
  scaleY: true,
  rotate: true,
  rotateX: true,
  rotateY: true,
  perspective: true
};

function validateTransform(configs) {
  configs.forEach(function (config) {
    if (!TRANSFORM_WHITELIST.hasOwnProperty(config.property)) {
      throw new Error('Property \'' + config.property + '\' is not supported by native animated module');
    }
  });
}

function validateStyles(styles) {
  for (var key in styles) {
    if (!STYLES_WHITELIST.hasOwnProperty(key)) {
      throw new Error('Style property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function validateInterpolation(config) {
  var SUPPORTED_INTERPOLATION_PARAMS = {
    inputRange: true,
    outputRange: true,
    extrapolate: true,
    extrapolateRight: true,
    extrapolateLeft: true
  };
  for (var key in config) {
    if (!SUPPORTED_INTERPOLATION_PARAMS.hasOwnProperty(key)) {
      throw new Error('Interpolation property \'' + key + '\' is not supported by native animated module');
    }
  }
}

function generateNewNodeTag() {
  return __nativeAnimatedNodeTagCount++;
}

function generateNewAnimationId() {
  return __nativeAnimationIdCount++;
}

function assertNativeAnimatedModule() {
  invariant(NativeAnimatedModule, 'Native animated module is not available');
}

function isNativeAnimatedAvailable() {
  return !!NativeAnimatedModule;
}

module.exports = {
  API: API,
  validateStyles: validateStyles,
  validateTransform: validateTransform,
  validateInterpolation: validateInterpolation,
  generateNewNodeTag: generateNewNodeTag,
  generateNewAnimationId: generateNewAnimationId,
  assertNativeAnimatedModule: assertNativeAnimatedModule,
  isNativeAnimatedAvailable: isNativeAnimatedAvailable,
  get nativeEventEmitter() {
    if (!nativeEventEmitter) {
      nativeEventEmitter = new NativeEventEmitter(NativeAnimatedModule);
    }
    return nativeEventEmitter;
  }
};
}, 262, null, "NativeAnimatedHelper");
__d(/* SpringConfig */function(global, require, module, exports) {

'use strict';

function tensionFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}

function frictionFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}

function fromOrigamiTensionAndFriction(tension, friction) {
  return {
    tension: tensionFromOrigamiValue(tension),
    friction: frictionFromOrigamiValue(friction)
  };
}

function fromBouncinessAndSpeed(bounciness, speed) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }

  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }

  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }

  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }

  function b3Friction1(x) {
    return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }

  function b3Friction2(x) {
    return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2;
  }

  function b3Friction3(x) {
    return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }

  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }

  var b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  var s = normalize(speed / 1.7, 0, 20);
  var bouncyTension = projectNormal(s, 0.5, 200);
  var bouncyFriction = quadraticOutInterpolation(b, b3Nobounce(bouncyTension), 0.01);

  return {
    tension: tensionFromOrigamiValue(bouncyTension),
    friction: frictionFromOrigamiValue(bouncyFriction)
  };
}

module.exports = {
  fromOrigamiTensionAndFriction: fromOrigamiTensionAndFriction,
  fromBouncinessAndSpeed: fromBouncinessAndSpeed
};
}, 263, null, "SpringConfig");
__d(/* fbjs/lib/requestAnimationFrame.js */function(global, require, module, exports) {'use strict';

var emptyFunction = require(22               ); // 22 = ./emptyFunction
var nativeRequestAnimationFrame = require(265                            ); // 265 = ./nativeRequestAnimationFrame

var lastTime = 0;

var requestAnimationFrame = nativeRequestAnimationFrame || function (callback) {
  var currTime = Date.now();
  var timeDelay = Math.max(0, 16 - (currTime - lastTime));
  lastTime = currTime + timeDelay;
  return global.setTimeout(function () {
    callback(Date.now());
  }, timeDelay);
};

requestAnimationFrame(emptyFunction);

module.exports = requestAnimationFrame;
}, 264, null, "fbjs/lib/requestAnimationFrame.js");
__d(/* fbjs/lib/nativeRequestAnimationFrame.js */function(global, require, module, exports) {"use strict";

var nativeRequestAnimationFrame = global.requestAnimationFrame || global.webkitRequestAnimationFrame || global.mozRequestAnimationFrame || global.oRequestAnimationFrame || global.msRequestAnimationFrame;

module.exports = nativeRequestAnimationFrame;
}, 265, null, "fbjs/lib/nativeRequestAnimationFrame.js");
__d(/* Easing */function(global, require, module, exports) {
'use strict';

var _ease = void 0;

var Easing = function () {
  function Easing() {
    babelHelpers.classCallCheck(this, Easing);
  }

  babelHelpers.createClass(Easing, null, [{
    key: 'step0',
    value: function step0(n) {
      return n > 0 ? 1 : 0;
    }
  }, {
    key: 'step1',
    value: function step1(n) {
      return n >= 1 ? 1 : 0;
    }
  }, {
    key: 'linear',
    value: function linear(t) {
      return t;
    }
  }, {
    key: 'ease',
    value: function ease(t) {
      if (!_ease) {
        _ease = Easing.bezier(0.42, 0, 1, 1);
      }
      return _ease(t);
    }
  }, {
    key: 'quad',
    value: function quad(t) {
      return t * t;
    }
  }, {
    key: 'cubic',
    value: function cubic(t) {
      return t * t * t;
    }
  }, {
    key: 'poly',
    value: function poly(n) {
      return function (t) {
        return Math.pow(t, n);
      };
    }
  }, {
    key: 'sin',
    value: function sin(t) {
      return 1 - Math.cos(t * Math.PI / 2);
    }
  }, {
    key: 'circle',
    value: function circle(t) {
      return 1 - Math.sqrt(1 - t * t);
    }
  }, {
    key: 'exp',
    value: function exp(t) {
      return Math.pow(2, 10 * (t - 1));
    }
  }, {
    key: 'elastic',
    value: function elastic() {
      var bounciness = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;

      var p = bounciness * Math.PI;
      return function (t) {
        return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
      };
    }
  }, {
    key: 'back',
    value: function back(s) {
      if (s === undefined) {
        s = 1.70158;
      }
      return function (t) {
        return t * t * ((s + 1) * t - s);
      };
    }
  }, {
    key: 'bounce',
    value: function bounce(t) {
      if (t < 1 / 2.75) {
        return 7.5625 * t * t;
      }

      if (t < 2 / 2.75) {
        t -= 1.5 / 2.75;
        return 7.5625 * t * t + 0.75;
      }

      if (t < 2.5 / 2.75) {
        t -= 2.25 / 2.75;
        return 7.5625 * t * t + 0.9375;
      }

      t -= 2.625 / 2.75;
      return 7.5625 * t * t + 0.984375;
    }
  }, {
    key: 'bezier',
    value: function bezier(x1, y1, x2, y2) {
      var _bezier = require(267     ); // 267 = bezier
      return _bezier(x1, y1, x2, y2);
    }
  }, {
    key: 'in',
    value: function _in(easing) {
      return easing;
    }
  }, {
    key: 'out',
    value: function out(easing) {
      return function (t) {
        return 1 - easing(1 - t);
      };
    }
  }, {
    key: 'inOut',
    value: function inOut(easing) {
      return function (t) {
        if (t < 0.5) {
          return easing(t * 2) / 2;
        }
        return 1 - easing((1 - t) * 2) / 2;
      };
    }
  }]);
  return Easing;
}();

module.exports = Easing;
}, 266, null, "Easing");
__d(/* bezier */function(global, require, module, exports) {
'use strict';

var NEWTON_ITERATIONS = 4;
var NEWTON_MIN_SLOPE = 0.001;
var SUBDIVISION_PRECISION = 0.0000001;
var SUBDIVISION_MAX_ITERATIONS = 10;

var kSplineTableSize = 11;
var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);

var float32ArraySupported = typeof Float32Array === 'function';

function A(aA1, aA2) {
  return 1.0 - 3.0 * aA2 + 3.0 * aA1;
}
function B(aA1, aA2) {
  return 3.0 * aA2 - 6.0 * aA1;
}
function C(aA1) {
  return 3.0 * aA1;
}

function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}

function getSlope(aT, aA1, aA2) {
  return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B(aA1, aA2) * aT + C(aA1);
}

function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX,
      currentT,
      i = 0;
  do {
    currentT = aA + (aB - aA) / 2.0;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0.0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}

function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0.0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}

module.exports = function bezier(mX1, mY1, mX2, mY2) {
  if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
    throw new Error('bezier x values must be in [0, 1] range');
  }

  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }

  function getTForX(aX) {
    var intervalStart = 0.0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;

    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;

    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;

    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0.0) {
      return guessForT;
    } else {
      return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
    }
  }

  return function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }

    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  };
};
}, 267, null, "bezier");
__d(/* Image */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Image/Image.android.js';
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var NativeModules = require(57             ); // 57 = NativeModules
var ImageResizeMode = require(109              ); // 109 = ImageResizeMode
var ImageStylePropTypes = require(108                  ); // 108 = ImageStylePropTypes
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes
var React = require(103    ); // 103 = React
var ReactNativeViewAttributes = require(130                        ); // 130 = ReactNativeViewAttributes
var StyleSheet = require(104         ); // 104 = StyleSheet
var StyleSheetPropType = require(131                 ); // 131 = StyleSheetPropType
var View = require(124   ); // 124 = View

var flattenStyle = require(54            ); // 54 = flattenStyle
var merge = require(127    ); // 127 = merge
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent
var resolveAssetSource = require(176                 ); // 176 = resolveAssetSource
var Set = require(224  ); // 224 = Set
var filterObject = require(269                    ); // 269 = fbjs/lib/filterObject

var PropTypes = React.PropTypes;
var ImageLoader = NativeModules.ImageLoader;


var _requestId = 1;
function generateRequestId() {
  return _requestId++;
}

var ImageViewAttributes = merge(ReactNativeViewAttributes.UIView, {
  src: true,
  loadingIndicatorSrc: true,
  resizeMethod: true,
  resizeMode: true,
  progressiveRenderingEnabled: true,
  fadeDuration: true,
  shouldNotifyLoadEvents: true
});

var ViewStyleKeys = new Set(Object.keys(ViewStylePropTypes));
var ImageSpecificStyleKeys = new Set(Object.keys(ImageStylePropTypes).filter(function (x) {
  return !ViewStyleKeys.has(x);
}));

var Image = React.createClass({
  displayName: 'Image',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    style: StyleSheetPropType(ImageStylePropTypes),

    source: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string
    }), PropTypes.number, PropTypes.arrayOf(PropTypes.shape({
      uri: PropTypes.string,
      width: PropTypes.number,
      height: PropTypes.number
    }))]),

    loadingIndicatorSource: PropTypes.oneOfType([PropTypes.shape({
      uri: PropTypes.string
    }), PropTypes.number]),
    progressiveRenderingEnabled: PropTypes.bool,
    fadeDuration: PropTypes.number,

    onLoadStart: PropTypes.func,

    onError: PropTypes.func,

    onLoad: PropTypes.func,

    onLoadEnd: PropTypes.func,

    testID: PropTypes.string,

    resizeMethod: PropTypes.oneOf(['auto', 'resize', 'scale']),

    resizeMode: PropTypes.oneOf(['cover', 'contain', 'stretch', 'center'])
  }),

  statics: {
    resizeMode: ImageResizeMode,

    getSize: function getSize(url, success, failure) {
      return ImageLoader.getSize(url).then(function (sizes) {
        success(sizes.width, sizes.height);
      }).catch(failure || function () {
        console.warn('Failed to get size for image: ' + url);
      });
    },
    prefetch: function prefetch(url, callback) {
      var requestId = generateRequestId();
      callback && callback(requestId);
      return ImageLoader.prefetchImage(url, requestId);
    },
    abortPrefetch: function abortPrefetch(requestId) {
      ImageLoader.abortRequest(requestId);
    },
    queryCache: function queryCache(urls) {
      return regeneratorRuntime.async(function queryCache$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return regeneratorRuntime.awrap(ImageLoader.queryCache(urls));

            case 2:
              return _context.abrupt('return', _context.sent);

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    },

    resolveAssetSource: resolveAssetSource
  },

  mixins: [NativeMethodsMixin],

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  _updateViewConfig: function _updateViewConfig(props) {
    if (props.children) {
      this.viewConfig = {
        uiViewClassName: 'RCTView',
        validAttributes: ReactNativeViewAttributes.RCTView
      };
    } else {
      this.viewConfig = {
        uiViewClassName: 'RCTImageView',
        validAttributes: ImageViewAttributes
      };
    }
  },

  componentWillMount: function componentWillMount() {
    this._updateViewConfig(this.props);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    this._updateViewConfig(nextProps);
  },

  contextTypes: {
    isInAParentText: React.PropTypes.bool
  },

  render: function render() {
    var source = resolveAssetSource(this.props.source);
    var loadingIndicatorSource = resolveAssetSource(this.props.loadingIndicatorSource);

    if (source && source.uri === '') {
      console.warn('source.uri should not be an empty string');
    }

    if (this.props.src) {
      console.warn('The <Image> component requires a `source` property rather than `src`.');
    }

    if (source && (source.uri || Array.isArray(source))) {
      var style = void 0;
      var sources = void 0;
      if (source.uri) {
        var _width = source.width,
            _height = source.height;

        style = flattenStyle([{ width: _width, height: _height }, styles.base, this.props.style]);
        sources = [{ uri: source.uri }];
      } else {
        style = flattenStyle([styles.base, this.props.style]);
        sources = source;
      }

      var _props = this.props,
          onLoadStart = _props.onLoadStart,
          onLoad = _props.onLoad,
          onLoadEnd = _props.onLoadEnd,
          onError = _props.onError;

      var nativeProps = merge(this.props, {
        style: style,
        shouldNotifyLoadEvents: !!(onLoadStart || onLoad || onLoadEnd || onError),
        src: sources,
        loadingIndicatorSrc: loadingIndicatorSource ? loadingIndicatorSource.uri : null
      });

      if (nativeProps.children) {
        var containerStyle = filterObject(style, function (val, key) {
          return !ImageSpecificStyleKeys.has(key);
        });
        var imageStyle = filterObject(style, function (val, key) {
          return ImageSpecificStyleKeys.has(key);
        });
        var imageProps = merge(nativeProps, {
          style: [imageStyle, styles.absoluteImage],
          children: undefined
        });

        return React.createElement(
          View,
          { style: containerStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 316
            }
          },
          React.createElement(RKImage, babelHelpers.extends({}, imageProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 317
            }
          })),
          this.props.children
        );
      } else {
        if (this.context.isInAParentText) {
          return React.createElement(RCTTextInlineImage, babelHelpers.extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 323
            }
          }));
        } else {
          return React.createElement(RKImage, babelHelpers.extends({}, nativeProps, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 325
            }
          }));
        }
      }
    }
    return null;
  }
});

var styles = StyleSheet.create({
  base: {
    overflow: 'hidden'
  },
  absoluteImage: {
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    position: 'absolute'
  }
});

var cfg = {
  nativeOnly: {
    src: true,
    loadingIndicatorSrc: true,
    shouldNotifyLoadEvents: true
  }
};
var RKImage = requireNativeComponent('RCTImageView', Image, cfg);
var RCTTextInlineImage = requireNativeComponent('RCTTextInlineImage', Image, cfg);

module.exports = Image;
}, 268, null, "Image");
__d(/* fbjs/lib/filterObject.js */function(global, require, module, exports) {

'use strict';

var hasOwnProperty = Object.prototype.hasOwnProperty;

function filterObject(object, callback, context) {
  if (!object) {
    return null;
  }
  var result = {};
  for (var name in object) {
    if (hasOwnProperty.call(object, name) && callback.call(context, object[name], name, object)) {
      result[name] = object[name];
    }
  }
  return result;
}

module.exports = filterObject;
}, 269, null, "fbjs/lib/filterObject.js");
__d(/* ScrollView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var EdgeInsetsPropType = require(125                 ); // 125 = EdgeInsetsPropType
var Platform = require(56        ); // 56 = Platform
var PointPropType = require(271            ); // 271 = PointPropType
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var ScrollResponder = require(272              ); // 272 = ScrollResponder
var StyleSheet = require(104         ); // 104 = StyleSheet
var StyleSheetPropType = require(131                 ); // 131 = StyleSheetPropType
var View = require(124   ); // 124 = View
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var dismissKeyboard = require(87               ); // 87 = dismissKeyboard
var flattenStyle = require(54            ); // 54 = flattenStyle
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var processDecelerationRate = require(274                      ); // 274 = processDecelerationRate
var PropTypes = React.PropTypes;
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var ScrollView = React.createClass({
  displayName: 'ScrollView',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    automaticallyAdjustContentInsets: PropTypes.bool,

    contentInset: EdgeInsetsPropType,

    contentOffset: PointPropType,

    bounces: PropTypes.bool,

    bouncesZoom: PropTypes.bool,

    alwaysBounceHorizontal: PropTypes.bool,

    alwaysBounceVertical: PropTypes.bool,

    centerContent: PropTypes.bool,

    contentContainerStyle: StyleSheetPropType(ViewStylePropTypes),

    decelerationRate: PropTypes.oneOfType([PropTypes.oneOf(['fast', 'normal']), PropTypes.number]),

    horizontal: PropTypes.bool,

    indicatorStyle: PropTypes.oneOf(['default', 'black', 'white']),

    directionalLockEnabled: PropTypes.bool,

    canCancelContentTouches: PropTypes.bool,

    keyboardDismissMode: PropTypes.oneOf(['none', 'interactive', 'on-drag']),

    keyboardShouldPersistTaps: PropTypes.oneOf(['always', 'never', 'handled', false, true]),

    maximumZoomScale: PropTypes.number,

    minimumZoomScale: PropTypes.number,

    onScroll: PropTypes.func,

    onScrollAnimationEnd: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    pagingEnabled: PropTypes.bool,

    scrollEnabled: PropTypes.bool,

    scrollEventThrottle: PropTypes.number,

    scrollIndicatorInsets: EdgeInsetsPropType,

    scrollsToTop: PropTypes.bool,

    showsHorizontalScrollIndicator: PropTypes.bool,

    showsVerticalScrollIndicator: PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number),
    style: StyleSheetPropType(ViewStylePropTypes),

    snapToInterval: PropTypes.number,

    snapToAlignment: PropTypes.oneOf(['start', 'center', 'end']),

    removeClippedSubviews: PropTypes.bool,

    zoomScale: PropTypes.number,

    refreshControl: PropTypes.element,

    endFillColor: ColorPropType,

    scrollPerfTag: PropTypes.string,

    overScrollMode: PropTypes.oneOf(['auto', 'always', 'never'])
  }),

  mixins: [ScrollResponder.Mixin],

  getInitialState: function getInitialState() {
    return this.scrollResponderMixinGetInitialState();
  },

  setNativeProps: function setNativeProps(props) {
    this._scrollViewRef && this._scrollViewRef.setNativeProps(props);
  },

  getScrollResponder: function getScrollResponder() {
    return this;
  },

  getScrollableNode: function getScrollableNode() {
    return ReactNative.findNodeHandle(this._scrollViewRef);
  },

  getInnerViewNode: function getInnerViewNode() {
    return ReactNative.findNodeHandle(this._innerViewRef);
  },

  scrollTo: function scrollTo(y, x, animated) {
    if (typeof y === 'number') {
      console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = y || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    this.getScrollResponder().scrollResponderScrollTo({ x: x || 0, y: y || 0, animated: animated !== false });
  },

  scrollToEnd: function scrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    this.getScrollResponder().scrollResponderScrollToEnd({
      animated: animated
    });
  },

  scrollWithoutAnimationTo: function scrollWithoutAnimationTo() {
    var y = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

    console.warn('`scrollWithoutAnimationTo` is deprecated. Use `scrollTo` instead');
    this.scrollTo({ x: x, y: y, animated: false });
  },

  _handleScroll: function _handleScroll(e) {
    if (__DEV__) {
      if (this.props.onScroll && this.props.scrollEventThrottle == null && Platform.OS === 'ios') {
        console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + 'cause frame drops, use a bigger number if you don\'t need as ' + 'much precision.');
      }
    }
    if (Platform.OS === 'android') {
      if (this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    }
    this.scrollResponderHandleScroll(e);
  },

  _handleContentOnLayout: function _handleContentOnLayout(e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
        width = _e$nativeEvent$layout.width,
        height = _e$nativeEvent$layout.height;

    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _scrollViewRef: null,
  _setScrollViewRef: function _setScrollViewRef(ref) {
    this._scrollViewRef = ref;
  },

  _innerViewRef: null,
  _setInnerViewRef: function _setInnerViewRef(ref) {
    this._innerViewRef = ref;
  },

  render: function render() {
    var contentContainerStyle = [this.props.horizontal && styles.contentContainerHorizontal, this.props.contentContainerStyle];
    var style = void 0,
        childLayoutProps = void 0;
    if (__DEV__ && this.props.style) {
      style = flattenStyle(this.props.style);
      childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {
        return style && style[prop] !== undefined;
      });
      invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');
    }

    var contentSizeChangeProps = {};
    if (this.props.onContentSizeChange) {
      contentSizeChangeProps = {
        onLayout: this._handleContentOnLayout
      };
    }

    var contentContainer = React.createElement(
      View,
      babelHelpers.extends({}, contentSizeChangeProps, {
        ref: this._setInnerViewRef,
        style: contentContainerStyle,
        removeClippedSubviews: this.props.removeClippedSubviews,
        collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 510
        }
      }),
      this.props.children
    );

    var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;

    var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;

    var baseStyle = this.props.horizontal ? styles.baseHorizontal : styles.baseVertical;
    var props = babelHelpers.extends({}, this.props, {
      alwaysBounceHorizontal: alwaysBounceHorizontal,
      alwaysBounceVertical: alwaysBounceVertical,
      style: [baseStyle, this.props.style],

      onContentSizeChange: null,
      onTouchStart: this.scrollResponderHandleTouchStart,
      onTouchMove: this.scrollResponderHandleTouchMove,
      onTouchEnd: this.scrollResponderHandleTouchEnd,
      onScrollBeginDrag: this.scrollResponderHandleScrollBeginDrag,
      onScrollEndDrag: this.scrollResponderHandleScrollEndDrag,
      onMomentumScrollBegin: this.scrollResponderHandleMomentumScrollBegin,
      onMomentumScrollEnd: this.scrollResponderHandleMomentumScrollEnd,
      onStartShouldSetResponder: this.scrollResponderHandleStartShouldSetResponder,
      onStartShouldSetResponderCapture: this.scrollResponderHandleStartShouldSetResponderCapture,
      onScrollShouldSetResponder: this.scrollResponderHandleScrollShouldSetResponder,
      onScroll: this._handleScroll,
      onResponderGrant: this.scrollResponderHandleResponderGrant,
      onResponderTerminationRequest: this.scrollResponderHandleTerminationRequest,
      onResponderTerminate: this.scrollResponderHandleTerminate,
      onResponderRelease: this.scrollResponderHandleResponderRelease,
      onResponderReject: this.scrollResponderHandleResponderReject,
      sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false
    });

    var decelerationRate = this.props.decelerationRate;

    if (decelerationRate) {
      props.decelerationRate = processDecelerationRate(decelerationRate);
    }

    var ScrollViewClass = void 0;
    if (Platform.OS === 'ios') {
      ScrollViewClass = RCTScrollView;
    } else if (Platform.OS === 'android') {
      if (this.props.horizontal) {
        ScrollViewClass = AndroidHorizontalScrollView;
      } else {
        ScrollViewClass = AndroidScrollView;
      }
    }
    invariant(ScrollViewClass !== undefined, 'ScrollViewClass must not be undefined');

    var refreshControl = this.props.refreshControl;
    if (refreshControl) {
      if (Platform.OS === 'ios') {
        return React.createElement(
          ScrollViewClass,
          babelHelpers.extends({}, props, { ref: this._setScrollViewRef, __source: {
              fileName: _jsxFileName,
              lineNumber: 582
            }
          }),
          refreshControl,
          contentContainer
        );
      } else if (Platform.OS === 'android') {

        return React.cloneElement(refreshControl, { style: props.style }, React.createElement(
          ScrollViewClass,
          babelHelpers.extends({}, props, { style: baseStyle, ref: this._setScrollViewRef, __source: {
              fileName: _jsxFileName,
              lineNumber: 597
            }
          }),
          contentContainer
        ));
      }
    }
    return React.createElement(
      ScrollViewClass,
      babelHelpers.extends({}, props, { ref: this._setScrollViewRef, __source: {
          fileName: _jsxFileName,
          lineNumber: 604
        }
      }),
      contentContainer
    );
  }
});

var styles = StyleSheet.create({
  baseVertical: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'column',
    overflow: 'scroll'
  },
  baseHorizontal: {
    flexGrow: 1,
    flexShrink: 1,
    flexDirection: 'row',
    overflow: 'scroll'
  },
  contentContainerHorizontal: {
    flexDirection: 'row'
  }
});

var nativeOnlyProps = void 0,
    AndroidScrollView = void 0,
    AndroidHorizontalScrollView = void 0,
    RCTScrollView = void 0;
if (Platform.OS === 'android') {
  nativeOnlyProps = {
    nativeOnly: {
      sendMomentumEvents: true
    }
  };
  AndroidScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
  AndroidHorizontalScrollView = requireNativeComponent('AndroidHorizontalScrollView', ScrollView, nativeOnlyProps);
} else if (Platform.OS === 'ios') {
  nativeOnlyProps = {
    nativeOnly: {
      onMomentumScrollBegin: true,
      onMomentumScrollEnd: true,
      onScrollBeginDrag: true,
      onScrollEndDrag: true
    }
  };
  RCTScrollView = requireNativeComponent('RCTScrollView', ScrollView, nativeOnlyProps);
}

module.exports = ScrollView;
}, 270, null, "ScrollView");
__d(/* PointPropType */function(global, require, module, exports) {
'use strict';

var PropTypes = require(103    ).PropTypes; // 103 = React

var createStrictShapeTypeChecker = require(126                           ); // 126 = createStrictShapeTypeChecker

var PointPropType = createStrictShapeTypeChecker({
  x: PropTypes.number,
  y: PropTypes.number
});

module.exports = PointPropType;
}, 271, null, "PointPropType");
__d(/* ScrollResponder */function(global, require, module, exports) {
'use strict';

var Dimensions = require(106         ); // 106 = Dimensions
var Platform = require(56        ); // 56 = Platform
var Keyboard = require(86        ); // 86 = Keyboard
var ReactNative = require(196          ); // 196 = ReactNative
var Subscribable = require(273           ); // 273 = Subscribable
var TextInputState = require(55              ); // 55 = TextInputState
var UIManager = require(100        ); // 100 = UIManager
var warning = require(21                ); // 21 = fbjs/lib/warning

var _require = require(137                       ), // 137 = ReactNativeComponentTree
    getInstanceFromNode = _require.getInstanceFromNode;

var _require2 = require(57             ), // 57 = NativeModules
    ScrollViewManager = _require2.ScrollViewManager;

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;

function isTagInstanceOfTextInput(tag) {
  var instance = getInstanceFromNode(tag);
  return instance && instance.viewConfig && (instance.viewConfig.uiViewClassName === 'AndroidTextInput' || instance.viewConfig.uiViewClassName === 'RCTTextView' || instance.viewConfig.uiViewClassName === 'RCTTextField');
}

var ScrollResponderMixin = {
  mixins: [Subscribable.Mixin],
  scrollResponderMixinGetInitialState: function scrollResponderMixinGetInitialState() {
    return {
      isTouching: false,
      lastMomentumScrollBeginTime: 0,
      lastMomentumScrollEndTime: 0,

      observedScrollSinceBecomingResponder: false,
      becameResponderWhileAnimating: false
    };
  },

  scrollResponderHandleScrollShouldSetResponder: function scrollResponderHandleScrollShouldSetResponder() {
    return this.state.isTouching;
  },

  scrollResponderHandleStartShouldSetResponder: function scrollResponderHandleStartShouldSetResponder(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();

    if (this.props.keyboardShouldPersistTaps === 'handled' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput) {
      return true;
    }
    return false;
  },

  scrollResponderHandleStartShouldSetResponderCapture: function scrollResponderHandleStartShouldSetResponderCapture(e) {
    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';
    if (keyboardNeverPersistTaps && currentlyFocusedTextInput != null && !isTagInstanceOfTextInput(e.target)) {
      return true;
    }
    return this.scrollResponderIsAnimating();
  },

  scrollResponderHandleResponderReject: function scrollResponderHandleResponderReject() {},

  scrollResponderHandleTerminationRequest: function scrollResponderHandleTerminationRequest() {
    return !this.state.observedScrollSinceBecomingResponder;
  },

  scrollResponderHandleTouchEnd: function scrollResponderHandleTouchEnd(e) {
    var nativeEvent = e.nativeEvent;
    this.state.isTouching = nativeEvent.touches.length !== 0;
    this.props.onTouchEnd && this.props.onTouchEnd(e);
  },

  scrollResponderHandleResponderRelease: function scrollResponderHandleResponderRelease(e) {
    this.props.onResponderRelease && this.props.onResponderRelease(e);

    var currentlyFocusedTextInput = TextInputState.currentlyFocusedField();
    if (this.props.keyboardShouldPersistTaps !== true && this.props.keyboardShouldPersistTaps !== 'always' && currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && !this.state.observedScrollSinceBecomingResponder && !this.state.becameResponderWhileAnimating) {
      this.props.onScrollResponderKeyboardDismissed && this.props.onScrollResponderKeyboardDismissed(e);
      TextInputState.blurTextInput(currentlyFocusedTextInput);
    }
  },

  scrollResponderHandleScroll: function scrollResponderHandleScroll(e) {
    this.state.observedScrollSinceBecomingResponder = true;
    this.props.onScroll && this.props.onScroll(e);
  },

  scrollResponderHandleResponderGrant: function scrollResponderHandleResponderGrant(e) {
    this.state.observedScrollSinceBecomingResponder = false;
    this.props.onResponderGrant && this.props.onResponderGrant(e);
    this.state.becameResponderWhileAnimating = this.scrollResponderIsAnimating();
  },

  scrollResponderHandleScrollBeginDrag: function scrollResponderHandleScrollBeginDrag(e) {
    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);
  },

  scrollResponderHandleScrollEndDrag: function scrollResponderHandleScrollEndDrag(e) {
    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);
  },

  scrollResponderHandleMomentumScrollBegin: function scrollResponderHandleMomentumScrollBegin(e) {
    this.state.lastMomentumScrollBeginTime = Date.now();
    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);
  },

  scrollResponderHandleMomentumScrollEnd: function scrollResponderHandleMomentumScrollEnd(e) {
    this.state.lastMomentumScrollEndTime = Date.now();
    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);
  },

  scrollResponderHandleTouchStart: function scrollResponderHandleTouchStart(e) {
    this.state.isTouching = true;
    this.props.onTouchStart && this.props.onTouchStart(e);
  },

  scrollResponderHandleTouchMove: function scrollResponderHandleTouchMove(e) {
    this.props.onTouchMove && this.props.onTouchMove(e);
  },

  scrollResponderIsAnimating: function scrollResponderIsAnimating() {
    var now = Date.now();
    var timeSinceLastMomentumScrollEnd = now - this.state.lastMomentumScrollEndTime;
    var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || this.state.lastMomentumScrollEndTime < this.state.lastMomentumScrollBeginTime;
    return isAnimating;
  },

  scrollResponderGetScrollableNode: function scrollResponderGetScrollableNode() {
    return this.getScrollableNode ? this.getScrollableNode() : ReactNative.findNodeHandle(this);
  },

  scrollResponderScrollTo: function scrollResponderScrollTo(x, y, animated) {
    if (typeof x === 'number') {
      console.warn('`scrollResponderScrollTo(x, y, animated)` is deprecated. Use `scrollResponderScrollTo({x: 5, y: 5, animated: true})` instead.');
    } else {
      var _ref = x || {};

      x = _ref.x;
      y = _ref.y;
      animated = _ref.animated;
    }
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollTo, [x || 0, y || 0, animated !== false]);
  },

  scrollResponderScrollToEnd: function scrollResponderScrollToEnd(options) {
    var animated = (options && options.animated) !== false;
    UIManager.dispatchViewManagerCommand(this.scrollResponderGetScrollableNode(), UIManager.RCTScrollView.Commands.scrollToEnd, [animated]);
  },

  scrollResponderScrollWithoutAnimationTo: function scrollResponderScrollWithoutAnimationTo(offsetX, offsetY) {
    console.warn('`scrollResponderScrollWithoutAnimationTo` is deprecated. Use `scrollResponderScrollTo` instead');
    this.scrollResponderScrollTo({ x: offsetX, y: offsetY, animated: false });
  },

  scrollResponderZoomTo: function scrollResponderZoomTo(rect, animated) {
    invariant(ScrollViewManager && ScrollViewManager.zoomToRect, 'zoomToRect is not implemented');
    if ('animated' in rect) {
      var animated = rect.animated,
          rect = babelHelpers.objectWithoutProperties(rect, ['animated']);
    } else if (typeof animated !== 'undefined') {
      console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');
    }
    ScrollViewManager.zoomToRect(this.scrollResponderGetScrollableNode(), rect, animated !== false);
  },

  scrollResponderScrollNativeHandleToKeyboard: function scrollResponderScrollNativeHandleToKeyboard(nodeHandle, additionalOffset, preventNegativeScrollOffset) {
    this.additionalScrollOffset = additionalOffset || 0;
    this.preventNegativeScrollOffset = !!preventNegativeScrollOffset;
    UIManager.measureLayout(nodeHandle, ReactNative.findNodeHandle(this.getInnerViewNode()), this.scrollResponderTextInputFocusError, this.scrollResponderInputMeasureAndScrollToKeyboard);
  },

  scrollResponderInputMeasureAndScrollToKeyboard: function scrollResponderInputMeasureAndScrollToKeyboard(left, top, width, height) {
    var keyboardScreenY = Dimensions.get('window').height;
    if (this.keyboardWillOpenTo) {
      keyboardScreenY = this.keyboardWillOpenTo.endCoordinates.screenY;
    }
    var scrollOffsetY = top - keyboardScreenY + height + this.additionalScrollOffset;

    if (this.preventNegativeScrollOffset) {
      scrollOffsetY = Math.max(0, scrollOffsetY);
    }
    this.scrollResponderScrollTo({ x: 0, y: scrollOffsetY, animated: true });

    this.additionalOffset = 0;
    this.preventNegativeScrollOffset = false;
  },

  scrollResponderTextInputFocusError: function scrollResponderTextInputFocusError(e) {
    console.error('Error measuring text field: ', e);
  },

  componentWillMount: function componentWillMount() {
    var keyboardShouldPersistTaps = this.props.keyboardShouldPersistTaps;

    warning(typeof keyboardShouldPersistTaps !== 'boolean', '\'keyboardShouldPersistTaps={' + keyboardShouldPersistTaps + '}\' is deprecated. ' + ('Use \'keyboardShouldPersistTaps="' + (keyboardShouldPersistTaps ? "always" : "never") + '"\' instead'));

    this.keyboardWillOpenTo = null;
    this.additionalScrollOffset = 0;
    this.addListenerOn(Keyboard, 'keyboardWillShow', this.scrollResponderKeyboardWillShow);
    this.addListenerOn(Keyboard, 'keyboardWillHide', this.scrollResponderKeyboardWillHide);
    this.addListenerOn(Keyboard, 'keyboardDidShow', this.scrollResponderKeyboardDidShow);
    this.addListenerOn(Keyboard, 'keyboardDidHide', this.scrollResponderKeyboardDidHide);
  },

  scrollResponderKeyboardWillShow: function scrollResponderKeyboardWillShow(e) {
    this.keyboardWillOpenTo = e;
    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);
  },

  scrollResponderKeyboardWillHide: function scrollResponderKeyboardWillHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);
  },

  scrollResponderKeyboardDidShow: function scrollResponderKeyboardDidShow(e) {
    if (e) {
      this.keyboardWillOpenTo = e;
    }
    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);
  },

  scrollResponderKeyboardDidHide: function scrollResponderKeyboardDidHide(e) {
    this.keyboardWillOpenTo = null;
    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);
  }

};

var ScrollResponder = {
  Mixin: ScrollResponderMixin
};

module.exports = ScrollResponder;
}, 272, null, "ScrollResponder");
__d(/* Subscribable */function(global, require, module, exports) {
'use strict';

var Subscribable = {};

Subscribable.Mixin = {

  componentWillMount: function componentWillMount() {
    this._subscribableSubscriptions = [];
  },

  componentWillUnmount: function componentWillUnmount() {
    this._subscribableSubscriptions.forEach(function (subscription) {
      return subscription.remove();
    });
    this._subscribableSubscriptions = null;
  },

  addListenerOn: function addListenerOn(eventEmitter, eventType, listener, context) {
    this._subscribableSubscriptions.push(eventEmitter.addListener(eventType, listener, context));
  }
};

module.exports = Subscribable;
}, 273, null, "Subscribable");
__d(/* processDecelerationRate */function(global, require, module, exports) {
'use strict';

function processDecelerationRate(decelerationRate) {
  if (decelerationRate === 'normal') {
    decelerationRate = 0.998;
  } else if (decelerationRate === 'fast') {
    decelerationRate = 0.99;
  }
  return decelerationRate;
}

module.exports = processDecelerationRate;
}, 274, null, "processDecelerationRate");
__d(/* DatePickerIOS */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/DatePicker/DatePickerIOS.android.js';
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var View = require(124   ); // 124 = View

var DummyDatePickerIOS = function (_React$Component) {
  babelHelpers.inherits(DummyDatePickerIOS, _React$Component);

  function DummyDatePickerIOS() {
    babelHelpers.classCallCheck(this, DummyDatePickerIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummyDatePickerIOS.__proto__ || Object.getPrototypeOf(DummyDatePickerIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummyDatePickerIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummyDatePickerIOS, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 22
          }
        },
        React.createElement(
          Text,
          { style: styles.datePickerText, __source: {
              fileName: _jsxFileName,
              lineNumber: 23
            }
          },
          'DatePickerIOS is not supported on this platform!'
        )
      );
    }
  }]);
  return DummyDatePickerIOS;
}(React.Component);

var styles = StyleSheet.create({
  dummyDatePickerIOS: {
    height: 100,
    width: 300,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center',
    margin: 10
  },
  datePickerText: {
    color: '#333333',
    margin: 20
  }
});

module.exports = DummyDatePickerIOS;
}, 275, null, "DatePickerIOS");
__d(/* DrawerLayoutAndroid */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/DrawerAndroid/DrawerLayoutAndroid.android.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var StatusBar = require(277        ); // 277 = StatusBar
var StyleSheet = require(104         ); // 104 = StyleSheet
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View

var DrawerConsts = UIManager.AndroidDrawerLayout.Constants;

var dismissKeyboard = require(87               ); // 87 = dismissKeyboard
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var RK_DRAWER_REF = 'drawerlayout';
var INNERVIEW_REF = 'innerView';

var DRAWER_STATES = ['Idle', 'Dragging', 'Settling'];

var DrawerLayoutAndroid = React.createClass({
  displayName: 'DrawerLayoutAndroid',

  statics: {
    positions: DrawerConsts.DrawerPosition
  },

  propTypes: babelHelpers.extends({}, View.propTypes, {
    keyboardDismissMode: ReactPropTypes.oneOf(['none', 'on-drag']),

    drawerBackgroundColor: ColorPropType,

    drawerPosition: ReactPropTypes.oneOf([DrawerConsts.DrawerPosition.Left, DrawerConsts.DrawerPosition.Right]),

    drawerWidth: ReactPropTypes.number,

    drawerLockMode: ReactPropTypes.oneOf(['unlocked', 'locked-closed', 'locked-open']),

    onDrawerSlide: ReactPropTypes.func,

    onDrawerStateChanged: ReactPropTypes.func,

    onDrawerOpen: ReactPropTypes.func,

    onDrawerClose: ReactPropTypes.func,

    renderNavigationView: ReactPropTypes.func.isRequired,

    statusBarBackgroundColor: ColorPropType
  }),

  mixins: [NativeMethodsMixin],

  getDefaultProps: function getDefaultProps() {
    return {
      drawerBackgroundColor: 'white'
    };
  },

  getInitialState: function getInitialState() {
    return { statusBarBackgroundColor: undefined };
  },

  getInnerViewNode: function getInnerViewNode() {
    return this.refs[INNERVIEW_REF].getInnerViewNode();
  },

  componentDidMount: function componentDidMount() {
    this._updateStatusBarBackground();
  },

  componentDidReceiveProps: function componentDidReceiveProps() {
    this._updateStatusBarBackground();
  },

  render: function render() {
    var drawStatusBar = Platform.Version >= 21 && this.props.statusBarBackgroundColor;
    var drawerViewWrapper = React.createElement(
      View,
      {
        style: [styles.drawerSubview, { width: this.props.drawerWidth, backgroundColor: this.props.drawerBackgroundColor }],
        collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 182
        }
      },
      this.props.renderNavigationView(),
      drawStatusBar && React.createElement(View, { style: styles.drawerStatusBar, __source: {
          fileName: _jsxFileName,
          lineNumber: 189
        }
      })
    );
    var childrenWrapper = React.createElement(
      View,
      { ref: INNERVIEW_REF, style: styles.mainSubview, collapsable: false, __source: {
          fileName: _jsxFileName,
          lineNumber: 192
        }
      },
      drawStatusBar && React.createElement(StatusBar, {
        translucent: true,
        backgroundColor: this.state.statusBarBackgroundColor,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 194
        }
      }),
      drawStatusBar && React.createElement(View, { style: [styles.statusBar, { backgroundColor: this.props.statusBarBackgroundColor }], __source: {
          fileName: _jsxFileName,
          lineNumber: 199
        }
      }),
      this.props.children
    );
    return React.createElement(
      AndroidDrawerLayout,
      babelHelpers.extends({}, this.props, {
        ref: RK_DRAWER_REF,
        drawerWidth: this.props.drawerWidth,
        drawerPosition: this.props.drawerPosition,
        drawerLockMode: this.props.drawerLockMode,
        style: [styles.base, this.props.style],
        onDrawerSlide: this._onDrawerSlide,
        onDrawerOpen: this._onDrawerOpen,
        onDrawerClose: this._onDrawerClose,
        onDrawerStateChanged: this._onDrawerStateChanged, __source: {
          fileName: _jsxFileName,
          lineNumber: 206
        }
      }),
      childrenWrapper,
      drawerViewWrapper
    );
  },

  _onDrawerSlide: function _onDrawerSlide(event) {
    if (this.props.onDrawerSlide) {
      this.props.onDrawerSlide(event);
    }
    if (this.props.keyboardDismissMode === 'on-drag') {
      dismissKeyboard();
    }
  },

  _onDrawerOpen: function _onDrawerOpen() {
    if (this.props.onDrawerOpen) {
      this.props.onDrawerOpen();
    }
  },

  _onDrawerClose: function _onDrawerClose() {
    if (this.props.onDrawerClose) {
      this.props.onDrawerClose();
    }
  },

  _onDrawerStateChanged: function _onDrawerStateChanged(event) {
    if (this.props.onDrawerStateChanged) {
      this.props.onDrawerStateChanged(DRAWER_STATES[event.nativeEvent.drawerState]);
    }
  },

  openDrawer: function openDrawer() {
    UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.openDrawer, null);
  },

  closeDrawer: function closeDrawer() {
    UIManager.dispatchViewManagerCommand(this._getDrawerLayoutHandle(), UIManager.AndroidDrawerLayout.Commands.closeDrawer, null);
  },

  _getDrawerLayoutHandle: function _getDrawerLayoutHandle() {
    return ReactNative.findNodeHandle(this.refs[RK_DRAWER_REF]);
  },

  _updateStatusBarBackground: function _updateStatusBarBackground() {
    var _this = this;

    if (Platform.Version >= 21 && this.props.statusBarBackgroundColor) {
      if (this.state.statusBarBackgroundColor !== 'transparent') {
        requestAnimationFrame(function () {
          _this.setState({ statusBarBackgroundColor: 'transparent' });
        });
      }
    } else {
      this.setState({ statusBarBackgroundColor: undefined });
    }
  }
});

var styles = StyleSheet.create({
  base: {
    flex: 1,
    elevation: 16
  },
  mainSubview: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  drawerSubview: {
    position: 'absolute',
    top: 0,
    bottom: 0
  },
  statusBar: {
    height: StatusBar.currentHeight
  },
  drawerStatusBar: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    height: StatusBar.currentHeight,
    backgroundColor: 'rgba(0, 0, 0, 0.251)'
  }
});

var AndroidDrawerLayout = requireNativeComponent('AndroidDrawerLayout', DrawerLayoutAndroid);

module.exports = DrawerLayoutAndroid;
}, 276, null, "DrawerLayoutAndroid");
__d(/* StatusBar */function(global, require, module, exports) {
'use strict';

var React = require(103    ); // 103 = React
var ColorPropType = require(48             ); // 48 = ColorPropType
var Platform = require(56        ); // 56 = Platform

var processColor = require(119           ); // 119 = processColor

var StatusBarManager = require(57             ).StatusBarManager; // 57 = NativeModules

function mergePropsStack(propsStack, defaultValues) {
  return propsStack.reduce(function (prev, cur) {
    for (var prop in cur) {
      if (cur[prop] != null) {
        prev[prop] = cur[prop];
      }
    }
    return prev;
  }, babelHelpers.extends({}, defaultValues));
}

function createStackEntry(props) {
  return {
    backgroundColor: props.backgroundColor != null ? {
      value: props.backgroundColor,
      animated: props.animated
    } : null,
    barStyle: props.barStyle != null ? {
      value: props.barStyle,
      animated: props.animated
    } : null,
    translucent: props.translucent,
    hidden: props.hidden != null ? {
      value: props.hidden,
      animated: props.animated,
      transition: props.showHideTransition
    } : null,
    networkActivityIndicatorVisible: props.networkActivityIndicatorVisible
  };
}

var StatusBar = function (_React$Component) {
  babelHelpers.inherits(StatusBar, _React$Component);

  function StatusBar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, StatusBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = StatusBar.__proto__ || Object.getPrototypeOf(StatusBar)).call.apply(_ref, [this].concat(args))), _this), _this._stackEntry = null, _this._updatePropsStack = function () {
      clearImmediate(StatusBar._updateImmediate);
      StatusBar._updateImmediate = setImmediate(function () {
        var oldProps = StatusBar._currentValues;
        var mergedProps = mergePropsStack(StatusBar._propsStack, StatusBar._defaultProps);

        if (Platform.OS === 'ios') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value, mergedProps.barStyle.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value, mergedProps.hidden.animated ? mergedProps.hidden.transition : 'none');
          }

          if (!oldProps || oldProps.networkActivityIndicatorVisible !== mergedProps.networkActivityIndicatorVisible) {
            StatusBarManager.setNetworkActivityIndicatorVisible(mergedProps.networkActivityIndicatorVisible);
          }
        } else if (Platform.OS === 'android') {
          if (!oldProps || oldProps.barStyle.value !== mergedProps.barStyle.value) {
            StatusBarManager.setStyle(mergedProps.barStyle.value);
          }
          if (!oldProps || oldProps.backgroundColor.value !== mergedProps.backgroundColor.value) {
            StatusBarManager.setColor(processColor(mergedProps.backgroundColor.value), mergedProps.backgroundColor.animated);
          }
          if (!oldProps || oldProps.hidden.value !== mergedProps.hidden.value) {
            StatusBarManager.setHidden(mergedProps.hidden.value);
          }
          if (!oldProps || oldProps.translucent !== mergedProps.translucent) {
            StatusBarManager.setTranslucent(mergedProps.translucent);
          }
        }

        StatusBar._currentValues = mergedProps;
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(StatusBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack.push(this._stackEntry);
      this._updatePropsStack();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      StatusBar._propsStack.splice(index, 1);

      this._updatePropsStack();
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var index = StatusBar._propsStack.indexOf(this._stackEntry);
      this._stackEntry = createStackEntry(this.props);
      StatusBar._propsStack[index] = this._stackEntry;

      this._updatePropsStack();
    }
  }, {
    key: 'render',
    value: function render() {
      return null;
    }
  }], [{
    key: 'setHidden',
    value: function setHidden(hidden, animation) {
      animation = animation || 'none';
      StatusBar._defaultProps.hidden.value = hidden;
      if (Platform.OS === 'ios') {
        StatusBarManager.setHidden(hidden, animation);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setHidden(hidden);
      }
    }
  }, {
    key: 'setBarStyle',
    value: function setBarStyle(style, animated) {
      animated = animated || false;
      StatusBar._defaultProps.barStyle.value = style;
      if (Platform.OS === 'ios') {
        StatusBarManager.setStyle(style, animated);
      } else if (Platform.OS === 'android') {
        StatusBarManager.setStyle(style);
      }
    }
  }, {
    key: 'setNetworkActivityIndicatorVisible',
    value: function setNetworkActivityIndicatorVisible(visible) {
      if (Platform.OS !== 'ios') {
        console.warn('`setNetworkActivityIndicatorVisible` is only available on iOS');
        return;
      }
      StatusBar._defaultProps.networkActivityIndicatorVisible = visible;
      StatusBarManager.setNetworkActivityIndicatorVisible(visible);
    }
  }, {
    key: 'setBackgroundColor',
    value: function setBackgroundColor(color, animated) {
      if (Platform.OS !== 'android') {
        console.warn('`setBackgroundColor` is only available on Android');
        return;
      }
      animated = animated || false;
      StatusBar._defaultProps.backgroundColor.value = color;
      StatusBarManager.setColor(processColor(color), animated);
    }
  }, {
    key: 'setTranslucent',
    value: function setTranslucent(translucent) {
      if (Platform.OS !== 'android') {
        console.warn('`setTranslucent` is only available on Android');
        return;
      }
      StatusBar._defaultProps.translucent = translucent;
      StatusBarManager.setTranslucent(translucent);
    }
  }]);
  return StatusBar;
}(React.Component);

StatusBar._propsStack = [];
StatusBar._defaultProps = createStackEntry({
  animated: false,
  showHideTransition: 'fade',
  backgroundColor: 'black',
  barStyle: 'default',
  translucent: false,
  hidden: false,
  networkActivityIndicatorVisible: false
});
StatusBar._updateImmediate = null;
StatusBar._currentValues = null;
StatusBar.currentHeight = StatusBarManager.HEIGHT;
StatusBar.propTypes = {
  hidden: React.PropTypes.bool,

  animated: React.PropTypes.bool,

  backgroundColor: ColorPropType,

  translucent: React.PropTypes.bool,

  barStyle: React.PropTypes.oneOf(['default', 'light-content', 'dark-content']),

  networkActivityIndicatorVisible: React.PropTypes.bool,

  showHideTransition: React.PropTypes.oneOf(['fade', 'slide'])
};
StatusBar.defaultProps = {
  animated: false,
  showHideTransition: 'fade'
};


module.exports = StatusBar;
}, 277, null, "StatusBar");
__d(/* ImageEditor */function(global, require, module, exports) {
'use strict';

var RCTImageEditingManager = require(57             ).ImageEditingManager; // 57 = NativeModules

var ImageEditor = function () {
  function ImageEditor() {
    babelHelpers.classCallCheck(this, ImageEditor);
  }

  babelHelpers.createClass(ImageEditor, null, [{
    key: 'cropImage',
    value: function cropImage(uri, cropData, success, failure) {
      RCTImageEditingManager.cropImage(uri, cropData, success, failure);
    }
  }]);
  return ImageEditor;
}();

module.exports = ImageEditor;
}, 278, null, "ImageEditor");
__d(/* ImageStore */function(global, require, module, exports) {
'use strict';

var RCTImageStoreManager = require(57             ).ImageStoreManager; // 57 = NativeModules

var ImageStore = function () {
  function ImageStore() {
    babelHelpers.classCallCheck(this, ImageStore);
  }

  babelHelpers.createClass(ImageStore, null, [{
    key: 'hasImageForTag',
    value: function hasImageForTag(uri, callback) {
      if (RCTImageStoreManager.hasImageForTag) {
        RCTImageStoreManager.hasImageForTag(uri, callback);
      } else {
        console.warn('hasImageForTag() not implemented');
      }
    }
  }, {
    key: 'removeImageForTag',
    value: function removeImageForTag(uri) {
      if (RCTImageStoreManager.removeImageForTag) {
        RCTImageStoreManager.removeImageForTag(uri);
      } else {
        console.warn('removeImageForTag() not implemented');
      }
    }
  }, {
    key: 'addImageFromBase64',
    value: function addImageFromBase64(base64ImageData, success, failure) {
      RCTImageStoreManager.addImageFromBase64(base64ImageData, success, failure);
    }
  }, {
    key: 'getBase64ForTag',
    value: function getBase64ForTag(uri, success, failure) {
      RCTImageStoreManager.getBase64ForTag(uri, success, failure);
    }
  }]);
  return ImageStore;
}();

module.exports = ImageStore;
}, 279, null, "ImageStore");
__d(/* KeyboardAvoidingView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Keyboard/KeyboardAvoidingView.js';
var Keyboard = require(86        ); // 86 = Keyboard
var LayoutAnimation = require(281              ); // 281 = LayoutAnimation
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var TimerMixin = require(253                ); // 253 = react-timer-mixin
var View = require(124   ); // 124 = View

var PropTypes = React.PropTypes;

var viewRef = 'VIEW';

var KeyboardAvoidingView = React.createClass({
  displayName: 'KeyboardAvoidingView',

  mixins: [TimerMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    behavior: PropTypes.oneOf(['height', 'position', 'padding']),

    contentContainerStyle: View.propTypes.style,

    keyboardVerticalOffset: PropTypes.number.isRequired
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      keyboardVerticalOffset: 0
    };
  },
  getInitialState: function getInitialState() {
    return {
      bottom: 0
    };
  },


  subscriptions: [],
  frame: null,

  relativeKeyboardHeight: function relativeKeyboardHeight(keyboardFrame) {
    var frame = this.frame;
    if (!frame || !keyboardFrame) {
      return 0;
    }

    var y1 = Math.max(frame.y, keyboardFrame.screenY - this.props.keyboardVerticalOffset);
    var y2 = Math.min(frame.y + frame.height, keyboardFrame.screenY + keyboardFrame.height - this.props.keyboardVerticalOffset);
    if (frame.y > keyboardFrame.screenY) {
      return frame.y + frame.height - keyboardFrame.screenY - this.props.keyboardVerticalOffset;
    }
    return Math.max(y2 - y1, 0);
  },
  onKeyboardChange: function onKeyboardChange(event) {
    if (!event) {
      this.setState({ bottom: 0 });
      return;
    }

    var duration = event.duration,
        easing = event.easing,
        endCoordinates = event.endCoordinates;

    var height = this.relativeKeyboardHeight(endCoordinates);

    if (duration && easing) {
      LayoutAnimation.configureNext({
        duration: duration,
        update: {
          duration: duration,
          type: LayoutAnimation.Types[easing] || 'keyboard'
        }
      });
    }
    this.setState({ bottom: height });
  },
  onLayout: function onLayout(event) {
    this.frame = event.nativeEvent.layout;
  },
  componentWillUpdate: function componentWillUpdate(nextProps, nextState, nextContext) {
    if (nextState.bottom === this.state.bottom && this.props.behavior === 'height' && nextProps.behavior === 'height') {
      nextState.bottom = 0;
    }
  },
  componentWillMount: function componentWillMount() {
    if (Platform.OS === 'ios') {
      this.subscriptions = [Keyboard.addListener('keyboardWillChangeFrame', this.onKeyboardChange)];
    } else {
      this.subscriptions = [Keyboard.addListener('keyboardDidHide', this.onKeyboardChange), Keyboard.addListener('keyboardDidShow', this.onKeyboardChange)];
    }
  },
  componentWillUnmount: function componentWillUnmount() {
    this.subscriptions.forEach(function (sub) {
      return sub.remove();
    });
  },
  render: function render() {
    var _props = this.props,
        behavior = _props.behavior,
        children = _props.children,
        style = _props.style,
        props = babelHelpers.objectWithoutProperties(_props, ['behavior', 'children', 'style']);


    switch (behavior) {
      case 'height':
        var heightStyle = void 0;
        if (this.frame) {
          heightStyle = { height: this.frame.height - this.state.bottom, flex: 0 };
        }
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: [style, heightStyle], onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 169
            }
          }),
          children
        );

      case 'position':
        var positionStyle = { bottom: this.state.bottom };
        var contentContainerStyle = this.props.contentContainerStyle;


        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: style, onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 179
            }
          }),
          React.createElement(
            View,
            { style: [contentContainerStyle, positionStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 180
              }
            },
            children
          )
        );

      case 'padding':
        var paddingStyle = { paddingBottom: this.state.bottom };
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, style: [style, paddingStyle], onLayout: this.onLayout }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 189
            }
          }),
          children
        );

      default:
        return React.createElement(
          View,
          babelHelpers.extends({ ref: viewRef, onLayout: this.onLayout, style: style }, props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 196
            }
          }),
          children
        );
    }
  }
});

module.exports = KeyboardAvoidingView;
}, 280, null, "KeyboardAvoidingView");
__d(/* LayoutAnimation */function(global, require, module, exports) {
'use strict';

var _require = require(103    ), // 103 = React
    PropTypes = _require.PropTypes;

var UIManager = require(100        ); // 100 = UIManager

var createStrictShapeTypeChecker = require(126                           ); // 126 = createStrictShapeTypeChecker
var keyMirror = require(110                 ); // 110 = fbjs/lib/keyMirror

var TypesEnum = {
  spring: true,
  linear: true,
  easeInEaseOut: true,
  easeIn: true,
  easeOut: true,
  keyboard: true
};
var Types = keyMirror(TypesEnum);

var PropertiesEnum = {
  opacity: true,
  scaleXY: true
};
var Properties = keyMirror(PropertiesEnum);

var animChecker = createStrictShapeTypeChecker({
  duration: PropTypes.number,
  delay: PropTypes.number,
  springDamping: PropTypes.number,
  initialVelocity: PropTypes.number,
  type: PropTypes.oneOf(Object.keys(Types)).isRequired,
  property: PropTypes.oneOf(Object.keys(Properties))
});

var configChecker = createStrictShapeTypeChecker({
  duration: PropTypes.number.isRequired,
  create: animChecker,
  update: animChecker,
  delete: animChecker
});

function configureNext(config, onAnimationDidEnd) {
  configChecker({ config: config }, 'config', 'LayoutAnimation.configureNext');
  UIManager.configureNextLayoutAnimation(config, onAnimationDidEnd || function () {}, function () {});
}

function create(duration, type, creationProp) {
  return {
    duration: duration,
    create: {
      type: type,
      property: creationProp
    },
    update: {
      type: type
    },
    delete: {
      type: type,
      property: creationProp
    }
  };
}

var Presets = {
  easeInEaseOut: create(300, Types.easeInEaseOut, Properties.opacity),
  linear: create(500, Types.linear, Properties.opacity),
  spring: {
    duration: 700,
    create: {
      type: Types.linear,
      property: Properties.opacity
    },
    update: {
      type: Types.spring,
      springDamping: 0.4
    },
    delete: {
      type: Types.linear,
      property: Properties.opacity
    }
  }
};

var LayoutAnimation = {
  configureNext: configureNext,

  create: create,
  Types: Types,
  Properties: Properties,
  configChecker: configChecker,
  Presets: Presets,
  easeInEaseOut: configureNext.bind(null, Presets.easeInEaseOut),
  linear: configureNext.bind(null, Presets.linear),
  spring: configureNext.bind(null, Presets.spring)
};

module.exports = LayoutAnimation;
}, 281, null, "LayoutAnimation");
__d(/* ListView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/ListView/ListView.js';
var ListViewDataSource = require(283                 ); // 283 = ListViewDataSource
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var RCTScrollViewManager = require(57             ).ScrollViewManager; // 57 = NativeModules
var ScrollView = require(270         ); // 270 = ScrollView
var ScrollResponder = require(272              ); // 272 = ScrollResponder
var StaticRenderer = require(285             ); // 285 = StaticRenderer
var TimerMixin = require(253                ); // 253 = react-timer-mixin

var cloneReferencedElement = require(286                             ); // 286 = react-clone-referenced-element
var isEmpty = require(284      ); // 284 = isEmpty
var merge = require(127    ); // 127 = merge

var PropTypes = React.PropTypes;

var DEFAULT_PAGE_SIZE = 1;
var DEFAULT_INITIAL_ROWS = 10;
var DEFAULT_SCROLL_RENDER_AHEAD = 1000;
var DEFAULT_END_REACHED_THRESHOLD = 1000;
var DEFAULT_SCROLL_CALLBACK_THROTTLE = 50;

var ListView = React.createClass({
  displayName: 'ListView',

  _childFrames: [],
  _sentEndForContentLength: null,
  _scrollComponent: null,
  _prevRenderedRowsCount: 0,
  _visibleRows: {},
  scrollProperties: {},

  mixins: [ScrollResponder.Mixin, TimerMixin],

  statics: {
    DataSource: ListViewDataSource
  },

  propTypes: babelHelpers.extends({}, ScrollView.propTypes, {
    dataSource: PropTypes.instanceOf(ListViewDataSource).isRequired,

    renderSeparator: PropTypes.func,

    renderRow: PropTypes.func.isRequired,

    initialListSize: PropTypes.number.isRequired,

    onEndReached: PropTypes.func,

    onEndReachedThreshold: PropTypes.number.isRequired,

    pageSize: PropTypes.number.isRequired,

    renderFooter: PropTypes.func,
    renderHeader: PropTypes.func,

    renderSectionHeader: PropTypes.func,

    renderScrollComponent: React.PropTypes.func.isRequired,

    scrollRenderAheadDistance: React.PropTypes.number.isRequired,

    onChangeVisibleRows: React.PropTypes.func,

    removeClippedSubviews: React.PropTypes.bool,

    stickySectionHeadersEnabled: React.PropTypes.bool,

    stickyHeaderIndices: PropTypes.arrayOf(PropTypes.number).isRequired,

    enableEmptySections: PropTypes.bool
  }),

  getMetrics: function getMetrics() {
    return {
      contentLength: this.scrollProperties.contentLength,
      totalRows: this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount(),
      renderedRows: this.state.curRenderedRowsCount,
      visibleRows: Object.keys(this._visibleRows).length
    };
  },

  getScrollResponder: function getScrollResponder() {
    if (this._scrollComponent && this._scrollComponent.getScrollResponder) {
      return this._scrollComponent.getScrollResponder();
    }
  },

  getScrollableNode: function getScrollableNode() {
    if (this._scrollComponent && this._scrollComponent.getScrollableNode) {
      return this._scrollComponent.getScrollableNode();
    } else {
      return ReactNative.findNodeHandle(this._scrollComponent);
    }
  },

  scrollTo: function scrollTo() {
    if (this._scrollComponent && this._scrollComponent.scrollTo) {
      var _scrollComponent;

      (_scrollComponent = this._scrollComponent).scrollTo.apply(_scrollComponent, arguments);
    }
  },

  scrollToEnd: function scrollToEnd(options) {
    if (this._scrollComponent) {
      if (this._scrollComponent.scrollToEnd) {
        this._scrollComponent.scrollToEnd(options);
      } else {
        console.warn('The scroll component used by the ListView does not support ' + 'scrollToEnd. Check the renderScrollComponent prop of your ListView.');
      }
    }
  },

  setNativeProps: function setNativeProps(props) {
    if (this._scrollComponent) {
      this._scrollComponent.setNativeProps(props);
    }
  },

  getDefaultProps: function getDefaultProps() {
    return {
      initialListSize: DEFAULT_INITIAL_ROWS,
      pageSize: DEFAULT_PAGE_SIZE,
      renderScrollComponent: function renderScrollComponent(props) {
        return React.createElement(ScrollView, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 329
          }
        }));
      },
      scrollRenderAheadDistance: DEFAULT_SCROLL_RENDER_AHEAD,
      onEndReachedThreshold: DEFAULT_END_REACHED_THRESHOLD,
      stickySectionHeadersEnabled: true,
      stickyHeaderIndices: []
    };
  },

  getInitialState: function getInitialState() {
    return {
      curRenderedRowsCount: this.props.initialListSize,
      highlightedRow: {}
    };
  },

  getInnerViewNode: function getInnerViewNode() {
    return this._scrollComponent.getInnerViewNode();
  },

  componentWillMount: function componentWillMount() {
    this.scrollProperties = {
      visibleLength: null,
      contentLength: null,
      offset: 0
    };
    this._childFrames = [];
    this._visibleRows = {};
    this._prevRenderedRowsCount = 0;
    this._sentEndForContentLength = null;
  },

  componentDidMount: function componentDidMount() {
    var _this = this;

    this.requestAnimationFrame(function () {
      _this._measureAndUpdateScrollProps();
    });
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    var _this2 = this;

    if (this.props.dataSource !== nextProps.dataSource || this.props.initialListSize !== nextProps.initialListSize) {
      this.setState(function (state, props) {
        _this2._prevRenderedRowsCount = 0;
        return {
          curRenderedRowsCount: Math.min(Math.max(state.curRenderedRowsCount, props.initialListSize), props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount())
        };
      }, function () {
        return _this2._renderMoreRowsIfNeeded();
      });
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var _this3 = this;

    this.requestAnimationFrame(function () {
      _this3._measureAndUpdateScrollProps();
    });
  },

  _onRowHighlighted: function _onRowHighlighted(sectionID, rowID) {
    this.setState({ highlightedRow: { sectionID: sectionID, rowID: rowID } });
  },

  render: function render() {
    var bodyComponents = [];

    var dataSource = this.props.dataSource;
    var allRowIDs = dataSource.rowIdentities;
    var rowCount = 0;
    var stickySectionHeaderIndices = [];

    var header = this.props.renderHeader && this.props.renderHeader();
    var footer = this.props.renderFooter && this.props.renderFooter();
    var totalIndex = header ? 1 : 0;

    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        if (this.props.enableEmptySections === undefined) {
          var warning = require(21                ); // 21 = fbjs/lib/warning
          warning(false, 'In next release empty section headers will be rendered.' + ' In this release you can use \'enableEmptySections\' flag to render empty section headers.');
          continue;
        } else {
          var invariant = require(18                  ); // 18 = fbjs/lib/invariant
          invariant(this.props.enableEmptySections, 'In next release \'enableEmptySections\' flag will be deprecated, empty section headers will always be rendered.' + ' If empty section headers are not desirable their indices should be excluded from sectionIDs object.' + ' In this release \'enableEmptySections\' may only have value \'true\' to allow empty section headers rendering.');
        }
      }

      if (this.props.renderSectionHeader) {
        var shouldUpdateHeader = rowCount >= this._prevRenderedRowsCount && dataSource.sectionHeaderShouldUpdate(sectionIdx);
        bodyComponents.push(React.createElement(StaticRenderer, {
          key: 's_' + sectionID,
          shouldUpdate: !!shouldUpdateHeader,
          render: this.props.renderSectionHeader.bind(null, dataSource.getSectionHeaderData(sectionIdx), sectionID),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 432
          }
        }));
        if (this.props.stickySectionHeadersEnabled) {
          stickySectionHeaderIndices.push(totalIndex++);
        }
      }

      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var comboID = sectionID + '_' + rowID;
        var shouldUpdateRow = rowCount >= this._prevRenderedRowsCount && dataSource.rowShouldUpdate(sectionIdx, rowIdx);
        var row = React.createElement(StaticRenderer, {
          key: 'r_' + comboID,
          shouldUpdate: !!shouldUpdateRow,
          render: this.props.renderRow.bind(null, dataSource.getRowData(sectionIdx, rowIdx), sectionID, rowID, this._onRowHighlighted),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 453
          }
        });
        bodyComponents.push(row);
        totalIndex++;

        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          var adjacentRowHighlighted = this.state.highlightedRow.sectionID === sectionID && (this.state.highlightedRow.rowID === rowID || this.state.highlightedRow.rowID === rowIDs[rowIdx + 1]);
          var separator = this.props.renderSeparator(sectionID, rowID, adjacentRowHighlighted);
          if (separator) {
            bodyComponents.push(separator);
            totalIndex++;
          }
        }
        if (++rowCount === this.state.curRenderedRowsCount) {
          break;
        }
      }
      if (rowCount >= this.state.curRenderedRowsCount) {
        break;
      }
    }

    var _props = this.props,
        renderScrollComponent = _props.renderScrollComponent,
        props = babelHelpers.objectWithoutProperties(_props, ['renderScrollComponent']);

    if (!props.scrollEventThrottle) {
      props.scrollEventThrottle = DEFAULT_SCROLL_CALLBACK_THROTTLE;
    }
    if (props.removeClippedSubviews === undefined) {
      props.removeClippedSubviews = true;
    }
    babelHelpers.extends(props, {
      onScroll: this._onScroll,
      stickyHeaderIndices: this.props.stickyHeaderIndices.concat(stickySectionHeaderIndices),

      onKeyboardWillShow: undefined,
      onKeyboardWillHide: undefined,
      onKeyboardDidShow: undefined,
      onKeyboardDidHide: undefined
    });

    return cloneReferencedElement(renderScrollComponent(props), {
      ref: this._setScrollComponentRef,
      onContentSizeChange: this._onContentSizeChange,
      onLayout: this._onLayout
    }, header, bodyComponents, footer);
  },

  _measureAndUpdateScrollProps: function _measureAndUpdateScrollProps() {
    var scrollComponent = this.getScrollResponder();
    if (!scrollComponent || !scrollComponent.getInnerViewNode) {
      return;
    }

    RCTScrollViewManager && RCTScrollViewManager.calculateChildFrames && RCTScrollViewManager.calculateChildFrames(ReactNative.findNodeHandle(scrollComponent), this._updateVisibleRows);
  },

  _setScrollComponentRef: function _setScrollComponentRef(scrollComponent) {
    this._scrollComponent = scrollComponent;
  },

  _onContentSizeChange: function _onContentSizeChange(width, height) {
    var contentLength = !this.props.horizontal ? height : width;
    if (contentLength !== this.scrollProperties.contentLength) {
      this.scrollProperties.contentLength = contentLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onContentSizeChange && this.props.onContentSizeChange(width, height);
  },

  _onLayout: function _onLayout(event) {
    var _event$nativeEvent$la = event.nativeEvent.layout,
        width = _event$nativeEvent$la.width,
        height = _event$nativeEvent$la.height;

    var visibleLength = !this.props.horizontal ? height : width;
    if (visibleLength !== this.scrollProperties.visibleLength) {
      this.scrollProperties.visibleLength = visibleLength;
      this._updateVisibleRows();
      this._renderMoreRowsIfNeeded();
    }
    this.props.onLayout && this.props.onLayout(event);
  },

  _maybeCallOnEndReached: function _maybeCallOnEndReached(event) {
    if (this.props.onEndReached && this.scrollProperties.contentLength !== this._sentEndForContentLength && this._getDistanceFromEnd(this.scrollProperties) < this.props.onEndReachedThreshold && this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._sentEndForContentLength = this.scrollProperties.contentLength;
      this.props.onEndReached(event);
      return true;
    }
    return false;
  },

  _renderMoreRowsIfNeeded: function _renderMoreRowsIfNeeded() {
    if (this.scrollProperties.contentLength === null || this.scrollProperties.visibleLength === null || this.state.curRenderedRowsCount === (this.props.enableEmptySections ? this.props.dataSource.getRowAndSectionCount() : this.props.dataSource.getRowCount())) {
      this._maybeCallOnEndReached();
      return;
    }

    var distanceFromEnd = this._getDistanceFromEnd(this.scrollProperties);
    if (distanceFromEnd < this.props.scrollRenderAheadDistance) {
      this._pageInNewRows();
    }
  },

  _pageInNewRows: function _pageInNewRows() {
    var _this4 = this;

    this.setState(function (state, props) {
      var rowsToRender = Math.min(state.curRenderedRowsCount + props.pageSize, props.enableEmptySections ? props.dataSource.getRowAndSectionCount() : props.dataSource.getRowCount());
      _this4._prevRenderedRowsCount = state.curRenderedRowsCount;
      return {
        curRenderedRowsCount: rowsToRender
      };
    }, function () {
      _this4._measureAndUpdateScrollProps();
      _this4._prevRenderedRowsCount = _this4.state.curRenderedRowsCount;
    });
  },

  _getDistanceFromEnd: function _getDistanceFromEnd(scrollProperties) {
    return scrollProperties.contentLength - scrollProperties.visibleLength - scrollProperties.offset;
  },

  _updateVisibleRows: function _updateVisibleRows(updatedFrames) {
    var _this5 = this;

    if (!this.props.onChangeVisibleRows) {
      return;
    }
    if (updatedFrames) {
      updatedFrames.forEach(function (newFrame) {
        _this5._childFrames[newFrame.index] = merge(newFrame);
      });
    }
    var isVertical = !this.props.horizontal;
    var dataSource = this.props.dataSource;
    var visibleMin = this.scrollProperties.offset;
    var visibleMax = visibleMin + this.scrollProperties.visibleLength;
    var allRowIDs = dataSource.rowIdentities;

    var header = this.props.renderHeader && this.props.renderHeader();
    var totalIndex = header ? 1 : 0;
    var visibilityChanged = false;
    var changedRows = {};
    for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
      var rowIDs = allRowIDs[sectionIdx];
      if (rowIDs.length === 0) {
        continue;
      }
      var sectionID = dataSource.sectionIdentities[sectionIdx];
      if (this.props.renderSectionHeader) {
        totalIndex++;
      }
      var visibleSection = this._visibleRows[sectionID];
      if (!visibleSection) {
        visibleSection = {};
      }
      for (var rowIdx = 0; rowIdx < rowIDs.length; rowIdx++) {
        var rowID = rowIDs[rowIdx];
        var frame = this._childFrames[totalIndex];
        totalIndex++;
        if (this.props.renderSeparator && (rowIdx !== rowIDs.length - 1 || sectionIdx === allRowIDs.length - 1)) {
          totalIndex++;
        }
        if (!frame) {
          break;
        }
        var rowVisible = visibleSection[rowID];
        var min = isVertical ? frame.y : frame.x;
        var max = min + (isVertical ? frame.height : frame.width);
        if (!min && !max || min === max) {
          break;
        }
        if (min > visibleMax || max < visibleMin) {
          if (rowVisible) {
            visibilityChanged = true;
            delete visibleSection[rowID];
            if (!changedRows[sectionID]) {
              changedRows[sectionID] = {};
            }
            changedRows[sectionID][rowID] = false;
          }
        } else if (!rowVisible) {
          visibilityChanged = true;
          visibleSection[rowID] = true;
          if (!changedRows[sectionID]) {
            changedRows[sectionID] = {};
          }
          changedRows[sectionID][rowID] = true;
        }
      }
      if (!isEmpty(visibleSection)) {
        this._visibleRows[sectionID] = visibleSection;
      } else if (this._visibleRows[sectionID]) {
        delete this._visibleRows[sectionID];
      }
    }
    visibilityChanged && this.props.onChangeVisibleRows(this._visibleRows, changedRows);
  },

  _onScroll: function _onScroll(e) {
    var isVertical = !this.props.horizontal;
    this.scrollProperties.visibleLength = e.nativeEvent.layoutMeasurement[isVertical ? 'height' : 'width'];
    this.scrollProperties.contentLength = e.nativeEvent.contentSize[isVertical ? 'height' : 'width'];
    this.scrollProperties.offset = e.nativeEvent.contentOffset[isVertical ? 'y' : 'x'];
    this._updateVisibleRows(e.nativeEvent.updatedChildFrames);
    if (!this._maybeCallOnEndReached(e)) {
      this._renderMoreRowsIfNeeded();
    }

    if (this.props.onEndReached && this._getDistanceFromEnd(this.scrollProperties) > this.props.onEndReachedThreshold) {
      this._sentEndForContentLength = null;
    }

    this.props.onScroll && this.props.onScroll(e);
  }
});

module.exports = ListView;
}, 282, null, "ListView");
__d(/* ListViewDataSource */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var isEmpty = require(284      ); // 284 = isEmpty
var warning = require(21                ); // 21 = fbjs/lib/warning

function defaultGetRowData(dataBlob, sectionID, rowID) {
  return dataBlob[sectionID][rowID];
}

function defaultGetSectionHeaderData(dataBlob, sectionID) {
  return dataBlob[sectionID];
}

var ListViewDataSource = function () {
  function ListViewDataSource(params) {
    babelHelpers.classCallCheck(this, ListViewDataSource);

    invariant(params && typeof params.rowHasChanged === 'function', 'Must provide a rowHasChanged function.');
    this._rowHasChanged = params.rowHasChanged;
    this._getRowData = params.getRowData || defaultGetRowData;
    this._sectionHeaderHasChanged = params.sectionHeaderHasChanged;
    this._getSectionHeaderData = params.getSectionHeaderData || defaultGetSectionHeaderData;

    this._dataBlob = null;
    this._dirtyRows = [];
    this._dirtySections = [];
    this._cachedRowCount = 0;

    this.rowIdentities = [];
    this.sectionIdentities = [];
  }

  babelHelpers.createClass(ListViewDataSource, [{
    key: 'cloneWithRows',
    value: function cloneWithRows(dataBlob, rowIdentities) {
      var rowIds = rowIdentities ? [rowIdentities] : null;
      if (!this._sectionHeaderHasChanged) {
        this._sectionHeaderHasChanged = function () {
          return false;
        };
      }
      return this.cloneWithRowsAndSections({ s1: dataBlob }, ['s1'], rowIds);
    }
  }, {
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      invariant(typeof this._sectionHeaderHasChanged === 'function', 'Must provide a sectionHeaderHasChanged function with section data.');
      invariant(!sectionIdentities || !rowIdentities || sectionIdentities.length === rowIdentities.length, 'row and section ids lengths must be the same');

      var newSource = new ListViewDataSource({
        getRowData: this._getRowData,
        getSectionHeaderData: this._getSectionHeaderData,
        rowHasChanged: this._rowHasChanged,
        sectionHeaderHasChanged: this._sectionHeaderHasChanged
      });
      newSource._dataBlob = dataBlob;
      if (sectionIdentities) {
        newSource.sectionIdentities = sectionIdentities;
      } else {
        newSource.sectionIdentities = Object.keys(dataBlob);
      }
      if (rowIdentities) {
        newSource.rowIdentities = rowIdentities;
      } else {
        newSource.rowIdentities = [];
        newSource.sectionIdentities.forEach(function (sectionID) {
          newSource.rowIdentities.push(Object.keys(dataBlob[sectionID]));
        });
      }
      newSource._cachedRowCount = countRows(newSource.rowIdentities);

      newSource._calculateDirtyArrays(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return newSource;
    }
  }, {
    key: 'getRowCount',
    value: function getRowCount() {
      return this._cachedRowCount;
    }
  }, {
    key: 'getRowAndSectionCount',
    value: function getRowAndSectionCount() {
      return this._cachedRowCount + this.sectionIdentities.length;
    }
  }, {
    key: 'rowShouldUpdate',
    value: function rowShouldUpdate(sectionIndex, rowIndex) {
      var needsUpdate = this._dirtyRows[sectionIndex][rowIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section, row: ' + sectionIndex + ', ' + rowIndex);
      return needsUpdate;
    }
  }, {
    key: 'getRowData',
    value: function getRowData(sectionIndex, rowIndex) {
      var sectionID = this.sectionIdentities[sectionIndex];
      var rowID = this.rowIdentities[sectionIndex][rowIndex];
      warning(sectionID !== undefined && rowID !== undefined, 'rendering invalid section, row: ' + sectionIndex + ', ' + rowIndex);
      return this._getRowData(this._dataBlob, sectionID, rowID);
    }
  }, {
    key: 'getRowIDForFlatIndex',
    value: function getRowIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.rowIdentities[ii][accessIndex];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionIDForFlatIndex',
    value: function getSectionIDForFlatIndex(index) {
      var accessIndex = index;
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        if (accessIndex >= this.rowIdentities[ii].length) {
          accessIndex -= this.rowIdentities[ii].length;
        } else {
          return this.sectionIdentities[ii];
        }
      }
      return null;
    }
  }, {
    key: 'getSectionLengths',
    value: function getSectionLengths() {
      var results = [];
      for (var ii = 0; ii < this.sectionIdentities.length; ii++) {
        results.push(this.rowIdentities[ii].length);
      }
      return results;
    }
  }, {
    key: 'sectionHeaderShouldUpdate',
    value: function sectionHeaderShouldUpdate(sectionIndex) {
      var needsUpdate = this._dirtySections[sectionIndex];
      warning(needsUpdate !== undefined, 'missing dirtyBit for section: ' + sectionIndex);
      return needsUpdate;
    }
  }, {
    key: 'getSectionHeaderData',
    value: function getSectionHeaderData(sectionIndex) {
      if (!this._getSectionHeaderData) {
        return null;
      }
      var sectionID = this.sectionIdentities[sectionIndex];
      warning(sectionID !== undefined, 'renderSection called on invalid section: ' + sectionIndex);
      return this._getSectionHeaderData(this._dataBlob, sectionID);
    }
  }, {
    key: '_calculateDirtyArrays',
    value: function _calculateDirtyArrays(prevDataBlob, prevSectionIDs, prevRowIDs) {
      var prevSectionsHash = keyedDictionaryFromArray(prevSectionIDs);
      var prevRowsHash = {};
      for (var ii = 0; ii < prevRowIDs.length; ii++) {
        var sectionID = prevSectionIDs[ii];
        warning(!prevRowsHash[sectionID], 'SectionID appears more than once: ' + sectionID);
        prevRowsHash[sectionID] = keyedDictionaryFromArray(prevRowIDs[ii]);
      }

      this._dirtySections = [];
      this._dirtyRows = [];

      var dirty;
      for (var sIndex = 0; sIndex < this.sectionIdentities.length; sIndex++) {
        var sectionID = this.sectionIdentities[sIndex];

        dirty = !prevSectionsHash[sectionID];
        var sectionHeaderHasChanged = this._sectionHeaderHasChanged;
        if (!dirty && sectionHeaderHasChanged) {
          dirty = sectionHeaderHasChanged(this._getSectionHeaderData(prevDataBlob, sectionID), this._getSectionHeaderData(this._dataBlob, sectionID));
        }
        this._dirtySections.push(!!dirty);

        this._dirtyRows[sIndex] = [];
        for (var rIndex = 0; rIndex < this.rowIdentities[sIndex].length; rIndex++) {
          var rowID = this.rowIdentities[sIndex][rIndex];

          dirty = !prevSectionsHash[sectionID] || !prevRowsHash[sectionID][rowID] || this._rowHasChanged(this._getRowData(prevDataBlob, sectionID, rowID), this._getRowData(this._dataBlob, sectionID, rowID));
          this._dirtyRows[sIndex].push(!!dirty);
        }
      }
    }
  }]);
  return ListViewDataSource;
}();

function countRows(allRowIDs) {
  var totalRows = 0;
  for (var sectionIdx = 0; sectionIdx < allRowIDs.length; sectionIdx++) {
    var rowIDs = allRowIDs[sectionIdx];
    totalRows += rowIDs.length;
  }
  return totalRows;
}

function keyedDictionaryFromArray(arr) {
  if (isEmpty(arr)) {
    return {};
  }
  var result = {};
  for (var ii = 0; ii < arr.length; ii++) {
    var key = arr[ii];
    warning(!result[key], 'Value appears more than once in array: ' + key);
    result[key] = true;
  }
  return result;
}

module.exports = ListViewDataSource;
}, 283, null, "ListViewDataSource");
__d(/* isEmpty */function(global, require, module, exports) {
'use strict';

function isEmpty(obj) {
  if (Array.isArray(obj)) {
    return obj.length === 0;
  } else if (typeof obj === 'object') {
    for (var i in obj) {
      return false;
    }
    return true;
  } else {
    return !obj;
  }
}

module.exports = isEmpty;
}, 284, null, "isEmpty");
__d(/* StaticRenderer */function(global, require, module, exports) {
'use strict';

var React = require(103    ); // 103 = React

var StaticRenderer = function (_React$Component) {
  babelHelpers.inherits(StaticRenderer, _React$Component);

  function StaticRenderer() {
    babelHelpers.classCallCheck(this, StaticRenderer);
    return babelHelpers.possibleConstructorReturn(this, (StaticRenderer.__proto__ || Object.getPrototypeOf(StaticRenderer)).apply(this, arguments));
  }

  babelHelpers.createClass(StaticRenderer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      return this.props.render();
    }
  }]);
  return StaticRenderer;
}(React.Component);

StaticRenderer.propTypes = {
  shouldUpdate: React.PropTypes.bool.isRequired,
  render: React.PropTypes.func.isRequired
};


module.exports = StaticRenderer;
}, 285, null, "StaticRenderer");
__d(/* react-clone-referenced-element/cloneReferencedElement.js */function(global, require, module, exports) {'use strict';

var React = require(12     ); // 12 = react

function cloneReferencedElement(element, config) {
  var cloneRef = config.ref;
  var originalRef = element.ref;

  for (var _len = arguments.length, children = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    children[_key - 2] = arguments[_key];
  }

  if (originalRef == null || cloneRef == null) {
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  if (typeof originalRef !== 'function') {
    if (__DEV__) {
      console.warn('Cloning an element with a ref that will be overwritten because it ' + 'is not a function. Use a composable callback-style ref instead. ' + 'Ignoring ref: ' + originalRef);
    }
    return React.cloneElement.apply(React, [element, config].concat(children));
  }

  return React.cloneElement.apply(React, [element, babelHelpers.extends({}, config, {
    ref: function ref(component) {
      cloneRef(component);
      originalRef(component);
    }
  })].concat(children));
}

module.exports = cloneReferencedElement;
}, 286, null, "react-clone-referenced-element/cloneReferencedElement.js");
__d(/* MapView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/MapView/MapView.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var EdgeInsetsPropType = require(125                 ); // 125 = EdgeInsetsPropType
var Image = require(268    ); // 268 = Image
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var deprecatedPropType = require(114                 ); // 114 = deprecatedPropType
var processColor = require(119           ); // 119 = processColor
var resolveAssetSource = require(176                 ); // 176 = resolveAssetSource
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var MapView = React.createClass({
  displayName: 'MapView',


  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    style: View.propTypes.style,

    showsUserLocation: React.PropTypes.bool,

    followUserLocation: React.PropTypes.bool,

    showsPointsOfInterest: React.PropTypes.bool,

    showsCompass: React.PropTypes.bool,

    showsAnnotationCallouts: React.PropTypes.bool,

    zoomEnabled: React.PropTypes.bool,

    rotateEnabled: React.PropTypes.bool,

    pitchEnabled: React.PropTypes.bool,

    scrollEnabled: React.PropTypes.bool,

    mapType: React.PropTypes.oneOf(['standard', 'satellite', 'hybrid']),

    region: React.PropTypes.shape({
      latitude: React.PropTypes.number.isRequired,
      longitude: React.PropTypes.number.isRequired,

      latitudeDelta: React.PropTypes.number,
      longitudeDelta: React.PropTypes.number
    }),

    annotations: React.PropTypes.arrayOf(React.PropTypes.shape({
      latitude: React.PropTypes.number.isRequired,
      longitude: React.PropTypes.number.isRequired,

      animateDrop: React.PropTypes.bool,

      draggable: React.PropTypes.bool,

      onDragStateChange: React.PropTypes.func,

      onFocus: React.PropTypes.func,

      onBlur: React.PropTypes.func,

      title: React.PropTypes.string,
      subtitle: React.PropTypes.string,

      leftCalloutView: React.PropTypes.element,
      rightCalloutView: React.PropTypes.element,
      detailCalloutView: React.PropTypes.element,

      tintColor: ColorPropType,

      image: Image.propTypes.source,

      view: React.PropTypes.element,

      id: React.PropTypes.string,

      hasLeftCallout: deprecatedPropType(React.PropTypes.bool, 'Use `leftCalloutView` instead.'),
      hasRightCallout: deprecatedPropType(React.PropTypes.bool, 'Use `rightCalloutView` instead.'),
      onLeftCalloutPress: deprecatedPropType(React.PropTypes.func, 'Use `leftCalloutView` instead.'),
      onRightCalloutPress: deprecatedPropType(React.PropTypes.func, 'Use `rightCalloutView` instead.')
    })),

    overlays: React.PropTypes.arrayOf(React.PropTypes.shape({
      coordinates: React.PropTypes.arrayOf(React.PropTypes.shape({
        latitude: React.PropTypes.number.isRequired,
        longitude: React.PropTypes.number.isRequired
      })),

      lineWidth: React.PropTypes.number,
      strokeColor: ColorPropType,
      fillColor: ColorPropType,

      id: React.PropTypes.string
    })),

    maxDelta: React.PropTypes.number,

    minDelta: React.PropTypes.number,

    legalLabelInsets: EdgeInsetsPropType,

    onRegionChange: React.PropTypes.func,

    onRegionChangeComplete: React.PropTypes.func,

    onAnnotationPress: React.PropTypes.func,

    active: React.PropTypes.bool
  }),

  statics: {
    PinColors: {
      RED: '#ff3b30',
      GREEN: '#4cd964',
      PURPLE: '#c969e0'
    }
  },

  render: function render() {
    var _this = this;

    var children = [],
        _props = this.props,
        annotations = _props.annotations,
        overlays = _props.overlays,
        followUserLocation = _props.followUserLocation;
    annotations = annotations && annotations.map(function (annotation) {
      var id = annotation.id,
          image = annotation.image,
          tintColor = annotation.tintColor,
          view = annotation.view,
          leftCalloutView = annotation.leftCalloutView,
          rightCalloutView = annotation.rightCalloutView,
          detailCalloutView = annotation.detailCalloutView;


      if (!view && image && tintColor) {
        view = React.createElement(Image, {
          style: {
            tintColor: processColor(tintColor)
          },
          source: image,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 388
          }
        });
        image = undefined;
      }
      if (view) {
        if (image) {
          console.warn('`image` and `view` both set on annotation. Image will be ignored.');
        }
        var viewIndex = children.length;
        children.push(React.cloneElement(view, {
          style: [styles.annotationView, view.props.style || {}]
        }));
      }
      if (leftCalloutView) {
        var leftCalloutViewIndex = children.length;
        children.push(React.cloneElement(leftCalloutView, {
          style: [styles.calloutView, leftCalloutView.props.style || {}]
        }));
      }
      if (rightCalloutView) {
        var rightCalloutViewIndex = children.length;
        children.push(React.cloneElement(rightCalloutView, {
          style: [styles.calloutView, rightCalloutView.props.style || {}]
        }));
      }
      if (detailCalloutView) {
        var detailCalloutViewIndex = children.length;
        children.push(React.cloneElement(detailCalloutView, {
          style: [styles.calloutView, detailCalloutView.props.style || {}]
        }));
      }

      var result = babelHelpers.extends({}, annotation, {
        tintColor: tintColor && processColor(tintColor),
        image: image,
        viewIndex: viewIndex,
        leftCalloutViewIndex: leftCalloutViewIndex,
        rightCalloutViewIndex: rightCalloutViewIndex,
        detailCalloutViewIndex: detailCalloutViewIndex,
        view: undefined,
        leftCalloutView: undefined,
        rightCalloutView: undefined,
        detailCalloutView: undefined
      });
      result.id = id || encodeURIComponent(JSON.stringify(result));
      result.image = image && resolveAssetSource(image);
      return result;
    });
    overlays = overlays && overlays.map(function (overlay) {
      var id = overlay.id,
          fillColor = overlay.fillColor,
          strokeColor = overlay.strokeColor;

      var result = babelHelpers.extends({}, overlay, {
        strokeColor: strokeColor && processColor(strokeColor),
        fillColor: fillColor && processColor(fillColor)
      });
      result.id = id || encodeURIComponent(JSON.stringify(result));
      return result;
    });

    var findByAnnotationId = function findByAnnotationId(annotationId) {
      if (!annotations) {
        return null;
      }
      for (var i = 0, l = annotations.length; i < l; i++) {
        if (annotations[i].id === annotationId) {
          return annotations[i];
        }
      }
      return null;
    };

    var onPress = void 0,
        onAnnotationDragStateChange = void 0,
        onAnnotationFocus = void 0,
        onAnnotationBlur = void 0;
    if (annotations) {
      onPress = function onPress(event) {
        if (event.nativeEvent.action === 'annotation-click') {
          _this.props.onAnnotationPress && _this.props.onAnnotationPress(event.nativeEvent.annotation);
        } else if (event.nativeEvent.action === 'callout-click') {
          var annotation = findByAnnotationId(event.nativeEvent.annotationId);
          if (annotation) {
            if (event.nativeEvent.side === 'left' && annotation.onLeftCalloutPress) {
              annotation.onLeftCalloutPress(event.nativeEvent);
            } else if (event.nativeEvent.side === 'right' && annotation.onRightCalloutPress) {
              annotation.onRightCalloutPress(event.nativeEvent);
            }
          }
        }
      };
      onAnnotationDragStateChange = function onAnnotationDragStateChange(event) {
        var annotation = findByAnnotationId(event.nativeEvent.annotationId);
        if (annotation) {
          annotation.onDragStateChange && annotation.onDragStateChange(event.nativeEvent);
        }
      };
      onAnnotationFocus = function onAnnotationFocus(event) {
        var annotation = findByAnnotationId(event.nativeEvent.annotationId);
        if (annotation && annotation.onFocus) {
          annotation.onFocus(event.nativeEvent);
        }
      };
      onAnnotationBlur = function onAnnotationBlur(event) {
        var annotation = findByAnnotationId(event.nativeEvent.annotationId);
        if (annotation && annotation.onBlur) {
          annotation.onBlur(event.nativeEvent);
        }
      };
    }

    if (this.props.onRegionChange || this.props.onRegionChangeComplete) {
      var onChange = function onChange(event) {
        if (event.nativeEvent.continuous) {
          _this.props.onRegionChange && _this.props.onRegionChange(event.nativeEvent.region);
        } else {
          _this.props.onRegionChangeComplete && _this.props.onRegionChangeComplete(event.nativeEvent.region);
        }
      };
    }

    if (followUserLocation === undefined) {
      followUserLocation = this.props.showUserLocation;
    }

    return React.createElement(RCTMap, babelHelpers.extends({}, this.props, {
      annotations: annotations,
      children: children,
      followUserLocation: followUserLocation,
      overlays: overlays,
      onPress: onPress,
      onChange: onChange,
      onAnnotationDragStateChange: onAnnotationDragStateChange,
      onAnnotationFocus: onAnnotationFocus,
      onAnnotationBlur: onAnnotationBlur,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 526
      }
    }));
  }
});

var styles = StyleSheet.create({
  annotationView: {
    position: 'absolute',
    backgroundColor: 'transparent'
  },
  calloutView: {
    position: 'absolute',
    backgroundColor: 'white'
  }
});

var RCTMap = requireNativeComponent('RCTMap', MapView, {
  nativeOnly: {
    onAnnotationDragStateChange: true,
    onAnnotationFocus: true,
    onAnnotationBlur: true,
    onChange: true,
    onPress: true
  }
});

module.exports = MapView;
}, 287, null, "MapView");
__d(/* Modal */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Modal/Modal.js',
    _container;

var AppContainer = require(289           ); // 289 = AppContainer
var I18nManager = require(310          ); // 310 = I18nManager
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var deprecatedPropType = require(114                 ); // 114 = deprecatedPropType
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent
var RCTModalHostView = requireNativeComponent('RCTModalHostView', null);

var PropTypes = React.PropTypes;

var Modal = function (_React$Component) {
  babelHelpers.inherits(Modal, _React$Component);

  function Modal() {
    babelHelpers.classCallCheck(this, Modal);
    return babelHelpers.possibleConstructorReturn(this, (Modal.__proto__ || Object.getPrototypeOf(Modal)).apply(this, arguments));
  }

  babelHelpers.createClass(Modal, [{
    key: 'render',
    value: function render() {
      if (this.props.visible === false) {
        return null;
      }

      var containerStyles = {
        backgroundColor: this.props.transparent ? 'transparent' : 'white'
      };

      var animationType = this.props.animationType;
      if (!animationType) {
        animationType = 'none';
        if (this.props.animated) {
          animationType = 'slide';
        }
      }

      var innerChildren = __DEV__ ? React.createElement(
        AppContainer,
        { rootTag: this.context.rootTag, __source: {
            fileName: _jsxFileName,
            lineNumber: 160
          }
        },
        this.props.children
      ) : this.props.children;

      return React.createElement(
        RCTModalHostView,
        {
          animationType: animationType,
          transparent: this.props.transparent,
          hardwareAccelerated: this.props.hardwareAccelerated,
          onRequestClose: this.props.onRequestClose,
          onShow: this.props.onShow,
          style: styles.modal,
          onStartShouldSetResponder: this._shouldSetResponder,
          supportedOrientations: this.props.supportedOrientations,
          onOrientationChange: this.props.onOrientationChange,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 166
          }
        },
        React.createElement(
          View,
          { style: [styles.container, containerStyles], __source: {
              fileName: _jsxFileName,
              lineNumber: 177
            }
          },
          innerChildren
        )
      );
    }
  }, {
    key: '_shouldSetResponder',
    value: function _shouldSetResponder() {
      return true;
    }
  }]);
  return Modal;
}(React.Component);

Modal.propTypes = {
  animationType: PropTypes.oneOf(['none', 'slide', 'fade']),

  transparent: PropTypes.bool,

  hardwareAccelerated: PropTypes.bool,

  visible: PropTypes.bool,

  onRequestClose: Platform.OS === 'android' ? PropTypes.func.isRequired : PropTypes.func,

  onShow: PropTypes.func,
  animated: deprecatedPropType(PropTypes.bool, 'Use the `animationType` prop instead.'),

  supportedOrientations: PropTypes.arrayOf(PropTypes.oneOf(['portrait', 'portrait-upside-down', 'landscape', 'landscape-left', 'landscape-right'])),

  onOrientationChange: PropTypes.func
};
Modal.defaultProps = {
  visible: true,
  hardwareAccelerated: false
};
Modal.contextTypes = {
  rootTag: React.PropTypes.number
};


var side = I18nManager.isRTL ? 'right' : 'left';
var styles = StyleSheet.create({
  modal: {
    position: 'absolute'
  },
  container: (_container = {
    position: 'absolute'
  }, babelHelpers.defineProperty(_container, side, 0), babelHelpers.defineProperty(_container, 'top', 0), _container)
});

module.exports = Modal;
}, 288, null, "Modal");
__d(/* AppContainer */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/ReactNative/AppContainer.js';
var EmitterSubscription = require(81                   ); // 81 = EmitterSubscription
var RCTDeviceEventEmitter = require(84                     ); // 84 = RCTDeviceEventEmitter
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var AppContainer = function (_React$Component) {
  babelHelpers.inherits(AppContainer, _React$Component);

  function AppContainer() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, AppContainer);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = AppContainer.__proto__ || Object.getPrototypeOf(AppContainer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      inspector: null,
      mainKey: 1
    }, _this._subscription = null, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(AppContainer, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        rootTag: this.props.rootTag
      };
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      if (__DEV__) {
        this._subscription = RCTDeviceEventEmitter.addListener('toggleElementInspector', function () {
          var Inspector = require(290        ); // 290 = Inspector
          var inspector = _this2.state.inspector ? null : React.createElement(Inspector, {
            inspectedViewTag: ReactNative.findNodeHandle(_this2._mainRef),
            onRequestRerenderApp: function onRequestRerenderApp(updateInspectedViewTag) {
              _this2.setState(function (s) {
                return { mainKey: s.mainKey + 1 };
              }, function () {
                return updateInspectedViewTag(ReactNative.findNodeHandle(_this2._mainRef));
              });
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 61
            }
          });
          _this2.setState({ inspector: inspector });
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subscription) {
        this._subscription.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var yellowBox = null;
      if (__DEV__) {
        var YellowBox = require(309        ); // 309 = YellowBox
        yellowBox = React.createElement(YellowBox, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 88
          }
        });
      }

      return React.createElement(
        View,
        { style: styles.appContainer, pointerEvents: 'box-none', __source: {
            fileName: _jsxFileName,
            lineNumber: 92
          }
        },
        React.createElement(
          View,
          {
            collapsable: !this.state.inspector,
            key: this.state.mainKey,
            pointerEvents: 'box-none',
            style: styles.appContainer, ref: function ref(_ref2) {
              _this3._mainRef = _ref2;
            }, __source: {
              fileName: _jsxFileName,
              lineNumber: 93
            }
          },
          this.props.children
        ),
        yellowBox,
        this.state.inspector
      );
    }
  }]);
  return AppContainer;
}(React.Component);

AppContainer.childContextTypes = {
  rootTag: React.PropTypes.number
};


var styles = StyleSheet.create({
  appContainer: {
    flex: 1
  }
});

module.exports = AppContainer;
}, 289, null, "AppContainer");
__d(/* Inspector */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/Inspector.js';
var Dimensions = require(106         ); // 106 = Dimensions
var InspectorOverlay = require(291               ); // 291 = InspectorOverlay
var InspectorPanel = require(296             ); // 296 = InspectorPanel
var InspectorUtils = require(292             ); // 292 = InspectorUtils
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Touchable = require(189        ); // 189 = Touchable
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View

if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
  window.__REACT_DEVTOOLS_GLOBAL_HOOK__.resolveRNStyle = require(54            ); // 54 = flattenStyle
}

var Inspector = function (_React$Component) {
  babelHelpers.inherits(Inspector, _React$Component);

  function Inspector(props) {
    babelHelpers.classCallCheck(this, Inspector);

    var _this = babelHelpers.possibleConstructorReturn(this, (Inspector.__proto__ || Object.getPrototypeOf(Inspector)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      devtoolsAgent: null,
      hierarchy: null,
      panelPos: 'bottom',
      inspecting: true,
      perfing: false,
      inspected: null,
      selection: null,
      inspectedViewTag: _this.props.inspectedViewTag,
      networking: false
    };
    return _this;
  }

  babelHelpers.createClass(Inspector, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
        this.attachToDevtools = this.attachToDevtools.bind(this);
        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.on('react-devtools', this.attachToDevtools);

        if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__.reactDevtoolsAgent) {
          this.attachToDevtools(window.__REACT_DEVTOOLS_GLOBAL_HOOK__.reactDevtoolsAgent);
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._subs) {
        this._subs.map(function (fn) {
          return fn();
        });
      }
      if (window.__REACT_DEVTOOLS_GLOBAL_HOOK__) {
        window.__REACT_DEVTOOLS_GLOBAL_HOOK__.off('react-devtools', this.attachToDevtools);
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(newProps) {
      this.setState({ inspectedViewTag: newProps.inspectedViewTag });
    }
  }, {
    key: 'setSelection',
    value: function setSelection(i) {
      var _this2 = this;

      var instance = this.state.hierarchy[i];

      var publicInstance = instance['_instance'] || {};
      var source = instance['_currentElement'] && instance['_currentElement']['_source'];
      UIManager.measure(instance.getHostNode(), function (x, y, width, height, left, top) {
        _this2.setState({
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: publicInstance.props ? publicInstance.props.style : {},
            source: source
          },
          selection: i
        });
      });
    }
  }, {
    key: 'onTouchInstance',
    value: function onTouchInstance(touched, frame, pointerY) {
      var hierarchy = InspectorUtils.getOwnerHierarchy(touched);
      var instance = InspectorUtils.lastNotNativeInstance(hierarchy);

      if (this.state.devtoolsAgent) {
        this.state.devtoolsAgent.selectFromReactInstance(instance, true);
      }

      var publicInstance = instance['_instance'] || {};
      var props = publicInstance.props || {};
      var source = instance['_currentElement'] && instance['_currentElement']['_source'];
      this.setState({
        panelPos: pointerY > Dimensions.get('window').height / 2 ? 'top' : 'bottom',
        selection: hierarchy.indexOf(instance),
        hierarchy: hierarchy,
        inspected: {
          style: props.style || {},
          frame: frame,
          source: source
        }
      });
    }
  }, {
    key: 'setPerfing',
    value: function setPerfing(val) {
      this.setState({
        perfing: val,
        inspecting: false,
        inspected: null,
        networking: false
      });
    }
  }, {
    key: 'setInspecting',
    value: function setInspecting(val) {
      this.setState({
        inspecting: val,
        inspected: null
      });
    }
  }, {
    key: 'setTouchTargetting',
    value: function setTouchTargetting(val) {
      var _this3 = this;

      Touchable.TOUCH_TARGET_DEBUG = val;
      this.props.onRequestRerenderApp(function (inspectedViewTag) {
        _this3.setState({ inspectedViewTag: inspectedViewTag });
      });
    }
  }, {
    key: 'setNetworking',
    value: function setNetworking(val) {
      this.setState({
        networking: val,
        perfing: false,
        inspecting: false,
        inspected: null
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var panelContainerStyle = this.state.panelPos === 'bottom' ? { bottom: 0 } : { top: Platform.OS === 'ios' ? 20 : 0 };
      return React.createElement(
        View,
        { style: styles.container, pointerEvents: 'box-none', __source: {
            fileName: _jsxFileName,
            lineNumber: 212
          }
        },
        this.state.inspecting && React.createElement(InspectorOverlay, {
          inspected: this.state.inspected,
          inspectedViewTag: this.state.inspectedViewTag,
          onTouchInstance: this.onTouchInstance.bind(this),
          __source: {
            fileName: _jsxFileName,
            lineNumber: 214
          }
        }),
        React.createElement(
          View,
          { style: [styles.panelContainer, panelContainerStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 219
            }
          },
          React.createElement(InspectorPanel, {
            devtoolsIsOpen: !!this.state.devtoolsAgent,
            inspecting: this.state.inspecting,
            perfing: this.state.perfing,
            setPerfing: this.setPerfing.bind(this),
            setInspecting: this.setInspecting.bind(this),
            inspected: this.state.inspected,
            hierarchy: this.state.hierarchy,
            selection: this.state.selection,
            setSelection: this.setSelection.bind(this),
            touchTargetting: Touchable.TOUCH_TARGET_DEBUG,
            setTouchTargetting: this.setTouchTargetting.bind(this),
            networking: this.state.networking,
            setNetworking: this.setNetworking.bind(this),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 220
            }
          })
        )
      );
    }
  }]);
  return Inspector;
}(React.Component);

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this.attachToDevtools = function (agent) {
    var _hideWait = null;
    var hlSub = agent.sub('highlight', function (_ref) {
      var node = _ref.node,
          name = _ref.name,
          props = _ref.props;

      clearTimeout(_hideWait);
      UIManager.measure(node, function (x, y, width, height, left, top) {
        _this4.setState({
          hierarchy: [],
          inspected: {
            frame: { left: left, top: top, width: width, height: height },
            style: props ? props.style : {}
          }
        });
      });
    });
    var hideSub = agent.sub('hideHighlight', function () {
      if (_this4.state.inspected === null) {
        return;
      }

      _hideWait = setTimeout(function () {
        _this4.setState({
          inspected: null
        });
      }, 100);
    });
    _this4._subs = [hlSub, hideSub];

    agent.on('shutdown', function () {
      _this4.setState({ devtoolsAgent: null });
      _this4._subs = null;
    });
    _this4.setState({
      devtoolsAgent: agent
    });
  };
};

var styles = StyleSheet.create({
  container: {
    position: 'absolute',
    backgroundColor: 'transparent',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  panelContainer: {
    position: 'absolute',
    left: 0,
    right: 0
  }
});

module.exports = Inspector;
}, 290, null, "Inspector");
__d(/* InspectorOverlay */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/InspectorOverlay.js';
var Dimensions = require(106         ); // 106 = Dimensions
var InspectorUtils = require(292             ); // 292 = InspectorUtils
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View
var ElementBox = require(293         ); // 293 = ElementBox

var PropTypes = React.PropTypes;

var InspectorOverlay = function (_React$Component) {
  babelHelpers.inherits(InspectorOverlay, _React$Component);

  function InspectorOverlay() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, InspectorOverlay);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = InspectorOverlay.__proto__ || Object.getPrototypeOf(InspectorOverlay)).call.apply(_ref, [this].concat(args))), _this), _this.findViewForTouchEvent = function (e) {
      var _e$nativeEvent$touche = e.nativeEvent.touches[0],
          locationX = _e$nativeEvent$touche.locationX,
          locationY = _e$nativeEvent$touche.locationY;

      UIManager.findSubviewIn(_this.props.inspectedViewTag, [locationX, locationY], function (nativeViewTag, left, top, width, height) {
        var instance = InspectorUtils.findInstanceByNativeTag(nativeViewTag);
        if (!instance) {
          return;
        }
        _this.props.onTouchInstance(instance, { left: left, top: top, width: width, height: height }, locationY);
      });
    }, _this.shouldSetResponser = function (e) {
      _this.findViewForTouchEvent(e);
      return true;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(InspectorOverlay, [{
    key: 'render',
    value: function render() {
      var content = null;
      if (this.props.inspected) {
        content = React.createElement(ElementBox, { frame: this.props.inspected.frame, style: this.props.inspected.style, __source: {
            fileName: _jsxFileName,
            lineNumber: 70
          }
        });
      }

      return React.createElement(
        View,
        {
          onStartShouldSetResponder: this.shouldSetResponser,
          onResponderMove: this.findViewForTouchEvent,
          style: [styles.inspector, { height: Dimensions.get('window').height }], __source: {
            fileName: _jsxFileName,
            lineNumber: 74
          }
        },
        content
      );
    }
  }]);
  return InspectorOverlay;
}(React.Component);

InspectorOverlay.propTypes = {
  inspected: PropTypes.shape({
    frame: PropTypes.object,
    style: PropTypes.any
  }),
  inspectedViewTag: PropTypes.number,
  onTouchInstance: PropTypes.func.isRequired
};


var styles = StyleSheet.create({
  inspector: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    top: 0,
    right: 0
  }
});

module.exports = InspectorOverlay;
}, 291, null, "InspectorOverlay");
__d(/* InspectorUtils */function(global, require, module, exports) {
'use strict';

var ReactNativeComponentTree = require(137                       ); // 137 = ReactNativeComponentTree

function traverseOwnerTreeUp(hierarchy, instance) {
  if (instance) {
    hierarchy.unshift(instance);
    traverseOwnerTreeUp(hierarchy, instance._currentElement._owner);
  }
}

function findInstanceByNativeTag(nativeTag) {
  return ReactNativeComponentTree.getInstanceFromNode(nativeTag);
}

function getOwnerHierarchy(instance) {
  var hierarchy = [];
  traverseOwnerTreeUp(hierarchy, instance);
  return hierarchy;
}

function lastNotNativeInstance(hierarchy) {
  for (var i = hierarchy.length - 1; i > 1; i--) {
    var instance = hierarchy[i];
    if (!instance.viewConfig) {
      return instance;
    }
  }
  return hierarchy[0];
}

module.exports = { findInstanceByNativeTag: findInstanceByNativeTag, getOwnerHierarchy: getOwnerHierarchy, lastNotNativeInstance: lastNotNativeInstance };
}, 292, null, "InspectorUtils");
__d(/* ElementBox */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/ElementBox.js';
var React = require(103    ); // 103 = React
var View = require(124   ); // 124 = View
var StyleSheet = require(104         ); // 104 = StyleSheet
var BorderBox = require(294        ); // 294 = BorderBox
var resolveBoxStyle = require(295              ); // 295 = resolveBoxStyle

var flattenStyle = require(54            ); // 54 = flattenStyle

var ElementBox = function (_React$Component) {
  babelHelpers.inherits(ElementBox, _React$Component);

  function ElementBox() {
    babelHelpers.classCallCheck(this, ElementBox);
    return babelHelpers.possibleConstructorReturn(this, (ElementBox.__proto__ || Object.getPrototypeOf(ElementBox)).apply(this, arguments));
  }

  babelHelpers.createClass(ElementBox, [{
    key: 'render',
    value: function render() {
      var style = flattenStyle(this.props.style) || {};
      var margin = resolveBoxStyle('margin', style);
      var padding = resolveBoxStyle('padding', style);
      var frameStyle = this.props.frame;
      if (margin) {
        frameStyle = {
          top: frameStyle.top - margin.top,
          left: frameStyle.left - margin.left,
          height: frameStyle.height + margin.top + margin.bottom,
          width: frameStyle.width + margin.left + margin.right
        };
      }
      var contentStyle = {
        width: this.props.frame.width,
        height: this.props.frame.height
      };
      if (padding) {
        contentStyle = {
          width: contentStyle.width - padding.left - padding.right,
          height: contentStyle.height - padding.top - padding.bottom
        };
      }
      return React.createElement(
        View,
        { style: [styles.frame, frameStyle], pointerEvents: 'none', __source: {
            fileName: _jsxFileName,
            lineNumber: 47
          }
        },
        React.createElement(
          BorderBox,
          { box: margin, style: styles.margin, __source: {
              fileName: _jsxFileName,
              lineNumber: 48
            }
          },
          React.createElement(
            BorderBox,
            { box: padding, style: styles.padding, __source: {
                fileName: _jsxFileName,
                lineNumber: 49
              }
            },
            React.createElement(View, { style: [styles.content, contentStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 50
              }
            })
          )
        )
      );
    }
  }]);
  return ElementBox;
}(React.Component);

var styles = StyleSheet.create({
  frame: {
    position: 'absolute'
  },
  content: {
    backgroundColor: 'rgba(200, 230, 255, 0.8)'
  },
  padding: {
    borderColor: 'rgba(77, 255, 0, 0.3)'
  },
  margin: {
    borderColor: 'rgba(255, 132, 0, 0.3)'
  }
});

module.exports = ElementBox;
}, 293, null, "ElementBox");
__d(/* BorderBox */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/BorderBox.js';
var React = require(103    ); // 103 = React
var View = require(124   ); // 124 = View

var BorderBox = function (_React$Component) {
  babelHelpers.inherits(BorderBox, _React$Component);

  function BorderBox() {
    babelHelpers.classCallCheck(this, BorderBox);
    return babelHelpers.possibleConstructorReturn(this, (BorderBox.__proto__ || Object.getPrototypeOf(BorderBox)).apply(this, arguments));
  }

  babelHelpers.createClass(BorderBox, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      if (!box) {
        return this.props.children;
      }
      var style = {
        borderTopWidth: box.top,
        borderBottomWidth: box.bottom,
        borderLeftWidth: box.left,
        borderRightWidth: box.right
      };
      return React.createElement(
        View,
        { style: [style, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 30
          }
        },
        this.props.children
      );
    }
  }]);
  return BorderBox;
}(React.Component);

module.exports = BorderBox;
}, 294, null, "BorderBox");
__d(/* resolveBoxStyle */function(global, require, module, exports) {
'use strict';

function resolveBoxStyle(prefix, style) {
  var res = {};
  var subs = ['top', 'left', 'bottom', 'right'];
  var set = false;
  subs.forEach(function (sub) {
    res[sub] = style[prefix] || 0;
  });
  if (style[prefix]) {
    set = true;
  }
  if (style[prefix + 'Vertical']) {
    res.top = res.bottom = style[prefix + 'Vertical'];
    set = true;
  }
  if (style[prefix + 'Horizontal']) {
    res.left = res.right = style[prefix + 'Horizontal'];
    set = true;
  }
  subs.forEach(function (sub) {
    var val = style[prefix + capFirst(sub)];
    if (val) {
      res[sub] = val;
      set = true;
    }
  });
  if (!set) {
    return;
  }
  return res;
}

function capFirst(text) {
  return text[0].toUpperCase() + text.slice(1);
}

module.exports = resolveBoxStyle;
}, 295, null, "resolveBoxStyle");
__d(/* InspectorPanel */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/InspectorPanel.js';
var ElementProperties = require(297                ); // 297 = ElementProperties
var NetworkOverlay = require(305             ); // 305 = NetworkOverlay
var PerformanceOverlay = require(308                 ); // 308 = PerformanceOverlay
var React = require(103    ); // 103 = React
var ScrollView = require(270         ); // 270 = ScrollView
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var TouchableHighlight = require(300                 ); // 300 = TouchableHighlight
var View = require(124   ); // 124 = View

var PropTypes = React.PropTypes;

var InspectorPanel = function (_React$Component) {
  babelHelpers.inherits(InspectorPanel, _React$Component);

  function InspectorPanel() {
    babelHelpers.classCallCheck(this, InspectorPanel);
    return babelHelpers.possibleConstructorReturn(this, (InspectorPanel.__proto__ || Object.getPrototypeOf(InspectorPanel)).apply(this, arguments));
  }

  babelHelpers.createClass(InspectorPanel, [{
    key: 'renderWaiting',
    value: function renderWaiting() {
      if (this.props.inspecting) {
        return React.createElement(
          Text,
          { style: styles.waitingText, __source: {
              fileName: _jsxFileName,
              lineNumber: 30
            }
          },
          'Tap something to inspect it'
        );
      }
      return React.createElement(
        Text,
        { style: styles.waitingText, __source: {
            fileName: _jsxFileName,
            lineNumber: 35
          }
        },
        'Nothing is inspected'
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var contents = void 0;
      if (this.props.inspected) {
        contents = React.createElement(
          ScrollView,
          { style: styles.properties, __source: {
              fileName: _jsxFileName,
              lineNumber: 42
            }
          },
          React.createElement(ElementProperties, {
            style: this.props.inspected.style,
            frame: this.props.inspected.frame,
            source: this.props.inspected.source,
            hierarchy: this.props.hierarchy,
            selection: this.props.selection,
            setSelection: this.props.setSelection,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 43
            }
          })
        );
      } else if (this.props.perfing) {
        contents = React.createElement(PerformanceOverlay, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 55
          }
        });
      } else if (this.props.networking) {
        contents = React.createElement(NetworkOverlay, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 59
          }
        });
      } else {
        contents = React.createElement(
          View,
          { style: styles.waiting, __source: {
              fileName: _jsxFileName,
              lineNumber: 63
            }
          },
          this.renderWaiting()
        );
      }
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        },
        !this.props.devtoolsIsOpen && contents,
        React.createElement(
          View,
          { style: styles.buttonRow, __source: {
              fileName: _jsxFileName,
              lineNumber: 71
            }
          },
          React.createElement(Button, {
            title: 'Inspect',
            pressed: this.props.inspecting,
            onClick: this.props.setInspecting,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 72
            }
          }),
          React.createElement(Button, { title: 'Perf',
            pressed: this.props.perfing,
            onClick: this.props.setPerfing,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 77
            }
          }),
          React.createElement(Button, { title: 'Network',
            pressed: this.props.networking,
            onClick: this.props.setNetworking,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          }),
          React.createElement(Button, { title: 'Touchables',
            pressed: this.props.touchTargetting,
            onClick: this.props.setTouchTargetting,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 85
            }
          })
        )
      );
    }
  }]);
  return InspectorPanel;
}(React.Component);

InspectorPanel.propTypes = {
  devtoolsIsOpen: PropTypes.bool,
  inspecting: PropTypes.bool,
  setInspecting: PropTypes.func,
  inspected: PropTypes.object,
  perfing: PropTypes.bool,
  setPerfing: PropTypes.func,
  touchTargetting: PropTypes.bool,
  setTouchTargetting: PropTypes.func,
  networking: PropTypes.bool,
  setNetworking: PropTypes.func
};

var Button = function (_React$Component2) {
  babelHelpers.inherits(Button, _React$Component2);

  function Button() {
    babelHelpers.classCallCheck(this, Button);
    return babelHelpers.possibleConstructorReturn(this, (Button.__proto__ || Object.getPrototypeOf(Button)).apply(this, arguments));
  }

  babelHelpers.createClass(Button, [{
    key: 'render',
    value: function render() {
      var _this3 = this;

      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            return _this3.props.onClick(!_this3.props.pressed);
          }, style: [styles.button, this.props.pressed && styles.buttonPressed], __source: {
            fileName: _jsxFileName,
            lineNumber: 111
          }
        },
        React.createElement(
          Text,
          { style: styles.buttonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 115
            }
          },
          this.props.title
        )
      );
    }
  }]);
  return Button;
}(React.Component);

var styles = StyleSheet.create({
  buttonRow: {
    flexDirection: 'row'
  },
  button: {
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
    margin: 2,
    height: 30,
    justifyContent: 'center',
    alignItems: 'center'
  },
  buttonPressed: {
    backgroundColor: 'rgba(255, 255, 255, 0.3)'
  },
  buttonText: {
    textAlign: 'center',
    color: 'white',
    margin: 5
  },
  container: {
    backgroundColor: 'rgba(0, 0, 0, 0.7)'
  },
  properties: {
    height: 200
  },
  waiting: {
    height: 100
  },
  waitingText: {
    fontSize: 20,
    textAlign: 'center',
    marginVertical: 20,
    color: 'white'
  }
});

module.exports = InspectorPanel;
}, 296, null, "InspectorPanel");
__d(/* ElementProperties */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/ElementProperties.js';
var BoxInspector = require(298           ); // 298 = BoxInspector
var React = require(103    ); // 103 = React
var StyleInspector = require(299             ); // 299 = StyleInspector
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var TouchableHighlight = require(300                 ); // 300 = TouchableHighlight
var TouchableWithoutFeedback = require(252                       ); // 252 = TouchableWithoutFeedback
var View = require(124   ); // 124 = View

var flattenStyle = require(54            ); // 54 = flattenStyle
var mapWithSeparator = require(303               ); // 303 = mapWithSeparator
var openFileInEditor = require(304               ); // 304 = openFileInEditor

var PropTypes = React.PropTypes;

var ElementProperties = function (_React$Component) {
  babelHelpers.inherits(ElementProperties, _React$Component);

  function ElementProperties() {
    babelHelpers.classCallCheck(this, ElementProperties);
    return babelHelpers.possibleConstructorReturn(this, (ElementProperties.__proto__ || Object.getPrototypeOf(ElementProperties)).apply(this, arguments));
  }

  babelHelpers.createClass(ElementProperties, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var style = flattenStyle(this.props.style);

      var selection = this.props.selection;
      var openFileButton = void 0;
      var source = this.props.source;

      var _ref = source || {},
          fileName = _ref.fileName,
          lineNumber = _ref.lineNumber;

      if (fileName && lineNumber) {
        var parts = fileName.split('/');
        var fileNameShort = parts[parts.length - 1];
        openFileButton = React.createElement(
          TouchableHighlight,
          {
            style: styles.openButton,
            onPress: openFileInEditor.bind(null, fileName, lineNumber), __source: {
              fileName: _jsxFileName,
              lineNumber: 63
            }
          },
          React.createElement(
            Text,
            { style: styles.openButtonTitle, numberOfLines: 1, __source: {
                fileName: _jsxFileName,
                lineNumber: 66
              }
            },
            fileNameShort,
            ':',
            lineNumber
          )
        );
      }

      return React.createElement(
        TouchableWithoutFeedback,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75
          }
        },
        React.createElement(
          View,
          { style: styles.info, __source: {
              fileName: _jsxFileName,
              lineNumber: 76
            }
          },
          React.createElement(
            View,
            { style: styles.breadcrumb, __source: {
                fileName: _jsxFileName,
                lineNumber: 77
              }
            },
            mapWithSeparator(this.props.hierarchy, function (item, i) {
              return React.createElement(
                TouchableHighlight,
                {
                  key: 'item-' + i,
                  style: [styles.breadItem, i === selection && styles.selected],

                  onPress: function onPress() {
                    return _this2.props.setSelection(i);
                  }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                  }
                },
                React.createElement(
                  Text,
                  { style: styles.breadItemText, __source: {
                      fileName: _jsxFileName,
                      lineNumber: 86
                    }
                  },
                  getInstanceName(item)
                )
              );
            }, function (i) {
              return React.createElement(
                Text,
                { key: 'sep-' + i, style: styles.breadSep, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 92
                  }
                },
                '\u25B8'
              );
            })
          ),
          React.createElement(
            View,
            { style: styles.row, __source: {
                fileName: _jsxFileName,
                lineNumber: 98
              }
            },
            React.createElement(
              View,
              { style: styles.col, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 99
                }
              },
              React.createElement(StyleInspector, { style: style, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 100
                }
              }),
              openFileButton
            ),
            React.createElement(BoxInspector, { style: style, frame: this.props.frame, __source: {
                fileName: _jsxFileName,
                lineNumber: 105
              }
            })
          )
        )
      );
    }
  }]);
  return ElementProperties;
}(React.Component);

ElementProperties.propTypes = {
  hierarchy: PropTypes.array.isRequired,
  style: PropTypes.oneOfType([PropTypes.object, PropTypes.array, PropTypes.number]),
  source: PropTypes.shape({
    fileName: PropTypes.string,
    lineNumber: PropTypes.number
  })
};


function getInstanceName(instance) {
  if (instance.getName) {
    return instance.getName();
  }
  if (instance.constructor && instance.constructor.displayName) {
    return instance.constructor.displayName;
  }
  return 'Unknown';
}

var styles = StyleSheet.create({
  breadSep: {
    fontSize: 8,
    color: 'white'
  },
  breadcrumb: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    alignItems: 'flex-start',
    marginBottom: 5
  },
  selected: {
    borderColor: 'white',
    borderRadius: 5
  },
  breadItem: {
    borderWidth: 1,
    borderColor: 'transparent',
    marginHorizontal: 2
  },
  breadItemText: {
    fontSize: 10,
    color: 'white',
    marginHorizontal: 5
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between'
  },
  col: {
    flex: 1
  },
  info: {
    padding: 10
  },
  openButton: {
    padding: 10,
    backgroundColor: '#000',
    marginVertical: 5,
    marginRight: 5,
    borderRadius: 2
  },
  openButtonTitle: {
    color: 'white',
    fontSize: 8
  }
});

module.exports = ElementProperties;
}, 297, null, "ElementProperties");
__d(/* BoxInspector */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/BoxInspector.js';
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var View = require(124   ); // 124 = View
var resolveBoxStyle = require(295              ); // 295 = resolveBoxStyle

var blank = {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};

var BoxInspector = function (_React$Component) {
  babelHelpers.inherits(BoxInspector, _React$Component);

  function BoxInspector() {
    babelHelpers.classCallCheck(this, BoxInspector);
    return babelHelpers.possibleConstructorReturn(this, (BoxInspector.__proto__ || Object.getPrototypeOf(BoxInspector)).apply(this, arguments));
  }

  babelHelpers.createClass(BoxInspector, [{
    key: 'render',
    value: function render() {
      var frame = this.props.frame;
      var style = this.props.style;
      var margin = style && resolveBoxStyle('margin', style) || blank;
      var padding = style && resolveBoxStyle('padding', style) || blank;
      return React.createElement(
        BoxContainer,
        { title: 'margin', titleStyle: styles.marginLabel, box: margin, __source: {
            fileName: _jsxFileName,
            lineNumber: 34
          }
        },
        React.createElement(
          BoxContainer,
          { title: 'padding', box: padding, __source: {
              fileName: _jsxFileName,
              lineNumber: 35
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 36
              }
            },
            React.createElement(
              Text,
              { style: styles.innerText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 37
                }
              },
              '(',
              frame.left,
              ', ',
              frame.top,
              ')'
            ),
            React.createElement(
              Text,
              { style: styles.innerText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 40
                }
              },
              frame.width,
              ' \xD7 ',
              frame.height
            )
          )
        )
      );
    }
  }]);
  return BoxInspector;
}(React.Component);

var BoxContainer = function (_React$Component2) {
  babelHelpers.inherits(BoxContainer, _React$Component2);

  function BoxContainer() {
    babelHelpers.classCallCheck(this, BoxContainer);
    return babelHelpers.possibleConstructorReturn(this, (BoxContainer.__proto__ || Object.getPrototypeOf(BoxContainer)).apply(this, arguments));
  }

  babelHelpers.createClass(BoxContainer, [{
    key: 'render',
    value: function render() {
      var box = this.props.box;
      return React.createElement(
        View,
        { style: styles.box, __source: {
            fileName: _jsxFileName,
            lineNumber: 54
          }
        },
        React.createElement(
          View,
          { style: styles.row, __source: {
              fileName: _jsxFileName,
              lineNumber: 55
            }
          },
          React.createElement(
            Text,
            { style: [this.props.titleStyle, styles.label], __source: {
                fileName: _jsxFileName,
                lineNumber: 56
              }
            },
            this.props.title
          ),
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 57
              }
            },
            box.top
          )
        ),
        React.createElement(
          View,
          { style: styles.row, __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          },
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 60
              }
            },
            box.left
          ),
          this.props.children,
          React.createElement(
            Text,
            { style: styles.boxText, __source: {
                fileName: _jsxFileName,
                lineNumber: 62
              }
            },
            box.right
          )
        ),
        React.createElement(
          Text,
          { style: styles.boxText, __source: {
              fileName: _jsxFileName,
              lineNumber: 64
            }
          },
          box.bottom
        )
      );
    }
  }]);
  return BoxContainer;
}(React.Component);

var styles = StyleSheet.create({
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  marginLabel: {
    width: 60
  },
  label: {
    fontSize: 10,
    color: 'rgb(255,100,0)',
    marginLeft: 5,
    flex: 1,
    textAlign: 'left',
    top: -3
  },
  buffer: {
    fontSize: 10,
    color: 'yellow',
    flex: 1,
    textAlign: 'center'
  },
  innerText: {
    color: 'yellow',
    fontSize: 12,
    textAlign: 'center',
    width: 70
  },
  box: {
    borderWidth: 1,
    borderColor: 'grey'
  },
  boxText: {
    color: 'white',
    fontSize: 12,
    marginHorizontal: 3,
    marginVertical: 2,
    textAlign: 'center'
  }
});

module.exports = BoxInspector;
}, 298, null, "BoxInspector");
__d(/* StyleInspector */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/StyleInspector.js';
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var View = require(124   ); // 124 = View

var StyleInspector = function (_React$Component) {
  babelHelpers.inherits(StyleInspector, _React$Component);

  function StyleInspector() {
    babelHelpers.classCallCheck(this, StyleInspector);
    return babelHelpers.possibleConstructorReturn(this, (StyleInspector.__proto__ || Object.getPrototypeOf(StyleInspector)).apply(this, arguments));
  }

  babelHelpers.createClass(StyleInspector, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      if (!this.props.style) {
        return React.createElement(
          Text,
          { style: styles.noStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 22
            }
          },
          'No style'
        );
      }
      var names = Object.keys(this.props.style);
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 26
          }
        },
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 27
            }
          },
          names.map(function (name) {
            return React.createElement(
              Text,
              { key: name, style: styles.attr, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 28
                }
              },
              name,
              ':'
            );
          })
        ),
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 31
            }
          },
          names.map(function (name) {
            var value = typeof _this2.props.style[name] === 'object' ? JSON.stringify(_this2.props.style[name]) : _this2.props.style[name];
            return React.createElement(
              Text,
              { key: name, style: styles.value, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 34
                }
              },
              value
            );
          })
        )
      );
    }
  }]);
  return StyleInspector;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    flexDirection: 'row'
  },
  row: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-around'
  },
  attr: {
    fontSize: 10,
    color: '#ccc'
  },
  value: {
    fontSize: 10,
    color: 'white',
    marginLeft: 10
  },
  noStyle: {
    color: 'white',
    fontSize: 10
  }
});

module.exports = StyleInspector;
}, 299, null, "StyleInspector");
__d(/* TouchableHighlight */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Touchable/TouchableHighlight.js';


var ColorPropType = require(48             ); // 48 = ColorPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var React = require(103    ); // 103 = React
var ReactNativeViewAttributes = require(130                        ); // 130 = ReactNativeViewAttributes
var StyleSheet = require(104         ); // 104 = StyleSheet
var TimerMixin = require(253                ); // 253 = react-timer-mixin
var Touchable = require(189        ); // 189 = Touchable
var TouchableWithoutFeedback = require(252                       ); // 252 = TouchableWithoutFeedback
var View = require(124   ); // 124 = View

var ensureComponentIsNative = require(301                      ); // 301 = ensureComponentIsNative
var ensurePositiveDelayProps = require(254                       ); // 254 = ensurePositiveDelayProps
var keyOf = require(302             ); // 302 = fbjs/lib/keyOf
var merge = require(127    ); // 127 = merge

var DEFAULT_PROPS = {
  activeOpacity: 0.85,
  underlayColor: 'black'
};

var PRESS_RETENTION_OFFSET = { top: 20, left: 20, right: 20, bottom: 30 };

var TouchableHighlight = React.createClass({
  displayName: 'TouchableHighlight',

  propTypes: babelHelpers.extends({}, TouchableWithoutFeedback.propTypes, {
    activeOpacity: React.PropTypes.number,

    underlayColor: ColorPropType,
    style: View.propTypes.style,

    onShowUnderlay: React.PropTypes.func,

    onHideUnderlay: React.PropTypes.func,

    hasTVPreferredFocus: React.PropTypes.bool,

    tvParallaxProperties: React.PropTypes.object

  }),

  mixins: [NativeMethodsMixin, TimerMixin, Touchable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return DEFAULT_PROPS;
  },

  _computeSyntheticState: function _computeSyntheticState(props) {
    return {
      activeProps: {
        style: {
          opacity: props.activeOpacity
        }
      },
      activeUnderlayProps: {
        style: {
          backgroundColor: props.underlayColor
        }
      },
      underlayStyle: [INACTIVE_UNDERLAY_PROPS.style, props.style],
      hasTVPreferredFocus: props.hasTVPreferredFocus
    };
  },

  getInitialState: function getInitialState() {
    return merge(this.touchableGetInitialState(), this._computeSyntheticState(this.props));
  },

  componentDidMount: function componentDidMount() {
    ensurePositiveDelayProps(this.props);
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentDidUpdate: function componentDidUpdate() {
    ensureComponentIsNative(this.refs[CHILD_REF]);
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    ensurePositiveDelayProps(nextProps);
    if (nextProps.activeOpacity !== this.props.activeOpacity || nextProps.underlayColor !== this.props.underlayColor || nextProps.style !== this.props.style) {
      this.setState(this._computeSyntheticState(nextProps));
    }
  },

  viewConfig: {
    uiViewClassName: 'RCTView',
    validAttributes: ReactNativeViewAttributes.RCTView
  },

  touchableHandleActivePressIn: function touchableHandleActivePressIn(e) {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    this._showUnderlay();
    this.props.onPressIn && this.props.onPressIn(e);
  },

  touchableHandleActivePressOut: function touchableHandleActivePressOut(e) {
    if (!this._hideTimeout) {
      this._hideUnderlay();
    }
    this.props.onPressOut && this.props.onPressOut(e);
  },

  touchableHandlePress: function touchableHandlePress(e) {
    this.clearTimeout(this._hideTimeout);
    this._showUnderlay();
    this._hideTimeout = this.setTimeout(this._hideUnderlay, this.props.delayPressOut || 100);
    this.props.onPress && this.props.onPress(e);
  },

  touchableHandleLongPress: function touchableHandleLongPress(e) {
    this.props.onLongPress && this.props.onLongPress(e);
  },

  touchableGetPressRectOffset: function touchableGetPressRectOffset() {
    return this.props.pressRetentionOffset || PRESS_RETENTION_OFFSET;
  },

  touchableGetHitSlop: function touchableGetHitSlop() {
    return this.props.hitSlop;
  },

  touchableGetHighlightDelayMS: function touchableGetHighlightDelayMS() {
    return this.props.delayPressIn;
  },

  touchableGetLongPressDelayMS: function touchableGetLongPressDelayMS() {
    return this.props.delayLongPress;
  },

  touchableGetPressOutDelayMS: function touchableGetPressOutDelayMS() {
    return this.props.delayPressOut;
  },

  _showUnderlay: function _showUnderlay() {
    if (!this.isMounted() || !this._hasPressHandler()) {
      return;
    }

    this.refs[UNDERLAY_REF].setNativeProps(this.state.activeUnderlayProps);
    this.refs[CHILD_REF].setNativeProps(this.state.activeProps);
    this.props.onShowUnderlay && this.props.onShowUnderlay();
  },

  _hideUnderlay: function _hideUnderlay() {
    this.clearTimeout(this._hideTimeout);
    this._hideTimeout = null;
    if (this._hasPressHandler() && this.refs[UNDERLAY_REF]) {
      this.refs[CHILD_REF].setNativeProps(INACTIVE_CHILD_PROPS);
      this.refs[UNDERLAY_REF].setNativeProps(babelHelpers.extends({}, INACTIVE_UNDERLAY_PROPS, {
        style: this.state.underlayStyle
      }));
      this.props.onHideUnderlay && this.props.onHideUnderlay();
    }
  },

  _hasPressHandler: function _hasPressHandler() {
    return !!(this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);
  },

  render: function render() {
    return React.createElement(
      View,
      {
        accessible: this.props.accessible !== false,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        accessibilityTraits: this.props.accessibilityTraits,
        ref: UNDERLAY_REF,
        style: this.state.underlayStyle,
        onLayout: this.props.onLayout,
        hitSlop: this.props.hitSlop,
        isTVSelectable: true,
        tvParallaxProperties: this.props.tvParallaxProperties,
        hasTVPreferredFocus: this.state.hasTVPreferredFocus,
        onStartShouldSetResponder: this.touchableHandleStartShouldSetResponder,
        onResponderTerminationRequest: this.touchableHandleResponderTerminationRequest,
        onResponderGrant: this.touchableHandleResponderGrant,
        onResponderMove: this.touchableHandleResponderMove,
        onResponderRelease: this.touchableHandleResponderRelease,
        onResponderTerminate: this.touchableHandleResponderTerminate,
        testID: this.props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 248
        }
      },
      React.cloneElement(React.Children.only(this.props.children), {
        ref: CHILD_REF
      }),
      Touchable.renderDebugView({ color: 'green', hitSlop: this.props.hitSlop })
    );
  }
});

var CHILD_REF = keyOf({ childRef: null });
var UNDERLAY_REF = keyOf({ underlayRef: null });
var INACTIVE_CHILD_PROPS = {
  style: StyleSheet.create({ x: { opacity: 1.0 } }).x
};
var INACTIVE_UNDERLAY_PROPS = {
  style: StyleSheet.create({ x: { backgroundColor: 'transparent' } }).x
};

module.exports = TouchableHighlight;
}, 300, null, "TouchableHighlight");
__d(/* ensureComponentIsNative */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var ensureComponentIsNative = function ensureComponentIsNative(component) {
  invariant(component && typeof component.setNativeProps === 'function', 'Touchable child must either be native or forward setNativeProps to a ' + 'native component');
};

module.exports = ensureComponentIsNative;
}, 301, null, "ensureComponentIsNative");
__d(/* fbjs/lib/keyOf.js */function(global, require, module, exports) {"use strict";

var keyOf = function keyOf(oneKeyObj) {
  var key;
  for (key in oneKeyObj) {
    if (!oneKeyObj.hasOwnProperty(key)) {
      continue;
    }
    return key;
  }
  return null;
};

module.exports = keyOf;
}, 302, null, "fbjs/lib/keyOf.js");
__d(/* mapWithSeparator */function(global, require, module, exports) {
'use strict';

function mapWithSeparator(items, itemRenderer, spacerRenderer) {
  var mapped = [];
  if (items.length > 0) {
    mapped.push(itemRenderer(items[0], 0, items));
    for (var ii = 1; ii < items.length; ii++) {
      mapped.push(spacerRenderer(ii - 1), itemRenderer(items[ii], ii, items));
    }
  }
  return mapped;
}

module.exports = mapWithSeparator;
}, 303, null, "mapWithSeparator");
__d(/* openFileInEditor */function(global, require, module, exports) {
'use strict';

var getDevServer = require(201           ); // 201 = getDevServer

function openFileInEditor(file, lineNumber) {
  fetch(getDevServer().url + 'open-stack-frame', {
    method: 'POST',
    body: JSON.stringify({ file: file, lineNumber: lineNumber })
  });
}

module.exports = openFileInEditor;
}, 304, null, "openFileInEditor");
__d(/* NetworkOverlay */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/NetworkOverlay.js';
var ListView = require(282       ); // 282 = ListView
var React = require(103    ); // 103 = React
var ScrollView = require(270         ); // 270 = ScrollView
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var TouchableHighlight = require(300                 ); // 300 = TouchableHighlight
var View = require(124   ); // 124 = View
var WebSocketInterceptor = require(306                   ); // 306 = WebSocketInterceptor
var XHRInterceptor = require(307             ); // 307 = XHRInterceptor

var LISTVIEW_CELL_HEIGHT = 15;
var SEPARATOR_THICKNESS = 2;

var nextXHRId = 0;

var NetworkOverlay = function (_React$Component) {
  babelHelpers.inherits(NetworkOverlay, _React$Component);

  function NetworkOverlay(props) {
    babelHelpers.classCallCheck(this, NetworkOverlay);

    var _this = babelHelpers.possibleConstructorReturn(this, (NetworkOverlay.__proto__ || Object.getPrototypeOf(NetworkOverlay)).call(this, props));

    _this._requests = [];
    _this._detailViewItems = [];
    _this._listViewDataSource = new ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
        return r1 !== r2;
      } });
    _this.state = {
      dataSource: _this._listViewDataSource.cloneWithRows([]),
      newDetailInfo: false,
      detailRowID: null
    };
    _this._listViewHighlighted = false;
    _this._listViewHeight = 0;
    _this._captureRequestListView = _this._captureRequestListView.bind(_this);
    _this._captureDetailScrollView = _this._captureDetailScrollView.bind(_this);
    _this._listViewOnLayout = _this._listViewOnLayout.bind(_this);
    _this._renderRow = _this._renderRow.bind(_this);
    _this._renderScrollComponent = _this._renderScrollComponent.bind(_this);
    _this._closeButtonClicked = _this._closeButtonClicked.bind(_this);
    _this._socketIdMap = {};
    _this._xhrIdMap = {};
    return _this;
  }

  babelHelpers.createClass(NetworkOverlay, [{
    key: '_enableXHRInterception',
    value: function _enableXHRInterception() {
      var _this2 = this;

      if (XHRInterceptor.isInterceptorEnabled()) {
        return;
      }

      XHRInterceptor.setOpenCallback(function (method, url, xhr) {
        xhr._index = nextXHRId++;
        var xhrIndex = _this2._requests.length;
        _this2._xhrIdMap[xhr._index] = xhrIndex;

        var _xhr = {
          'type': 'XMLHttpRequest',
          'method': method,
          'url': url
        };
        _this2._requests.push(_xhr);
        _this2._detailViewItems.push([]);
        _this2._genDetailViewItem(xhrIndex);
        _this2.setState({ dataSource: _this2._listViewDataSource.cloneWithRows(_this2._requests) }, _this2._scrollToBottom());
      });

      XHRInterceptor.setRequestHeaderCallback(function (header, value, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        if (!networkInfo.requestHeaders) {
          networkInfo.requestHeaders = {};
        }
        networkInfo.requestHeaders[header] = value;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setSendCallback(function (data, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        _this2._requests[xhrIndex].dataSent = data;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setHeaderReceivedCallback(function (type, size, responseHeaders, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.responseContentType = type;
        networkInfo.responseSize = size;
        networkInfo.responseHeaders = responseHeaders;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.setResponseCallback(function (status, timeout, response, responseURL, responseType, xhr) {
        var xhrIndex = _this2._getRequestIndexByXHRID(xhr._index);
        if (xhrIndex === -1) {
          return;
        }
        var networkInfo = _this2._requests[xhrIndex];
        networkInfo.status = status;
        networkInfo.timeout = timeout;
        networkInfo.response = response;
        networkInfo.responseURL = responseURL;
        networkInfo.responseType = responseType;
        _this2._genDetailViewItem(xhrIndex);
      });

      XHRInterceptor.enableInterception();
    }
  }, {
    key: '_enableWebSocketInterception',
    value: function _enableWebSocketInterception() {
      var _this3 = this;

      if (WebSocketInterceptor.isInterceptorEnabled()) {
        return;
      }

      WebSocketInterceptor.setConnectCallback(function (url, protocols, options, socketId) {
        var socketIndex = _this3._requests.length;
        _this3._socketIdMap[socketId] = socketIndex;
        var _webSocket = {
          'type': 'WebSocket',
          'url': url,
          'protocols': protocols
        };
        _this3._requests.push(_webSocket);
        _this3._detailViewItems.push([]);
        _this3._genDetailViewItem(socketIndex);
        _this3.setState({ dataSource: _this3._listViewDataSource.cloneWithRows(_this3._requests) }, _this3._scrollToBottom());
      });

      WebSocketInterceptor.setCloseCallback(function (statusCode, closeReason, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (statusCode !== null && closeReason !== null) {
          _this3._requests[socketIndex].status = statusCode;
          _this3._requests[socketIndex].closeReason = closeReason;
        }
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setSendCallback(function (data, socketId) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Sent: ' + JSON.stringify(data) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnMessageCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        if (!_this3._requests[socketIndex].messages) {
          _this3._requests[socketIndex].messages = '';
        }
        _this3._requests[socketIndex].messages += 'Received: ' + JSON.stringify(message) + '\n';
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnCloseCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverClose = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.setOnErrorCallback(function (socketId, message) {
        var socketIndex = _this3._socketIdMap[socketId];
        if (socketIndex === undefined) {
          return;
        }
        _this3._requests[socketIndex].serverError = message;
        _this3._genDetailViewItem(socketIndex);
      });

      WebSocketInterceptor.enableInterception();
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._enableXHRInterception();
      this._enableWebSocketInterception();
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      XHRInterceptor.disableInterception();
      WebSocketInterceptor.disableInterception();
    }
  }, {
    key: '_renderRow',
    value: function _renderRow(rowData, sectionID, rowID, highlightRow) {
      var _this4 = this;

      var urlCellViewStyle = styles.urlEvenCellView;
      var methodCellViewStyle = styles.methodEvenCellView;
      if (rowID % 2 === 1) {
        urlCellViewStyle = styles.urlOddCellView;
        methodCellViewStyle = styles.methodOddCellView;
      }
      return React.createElement(
        TouchableHighlight,
        { onPress: function onPress() {
            _this4._pressRow(rowID);
            highlightRow(sectionID, rowID);
          }, __source: {
            fileName: _jsxFileName,
            lineNumber: 304
          }
        },
        React.createElement(
          View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 308
            }
          },
          React.createElement(
            View,
            { style: styles.tableRow, __source: {
                fileName: _jsxFileName,
                lineNumber: 309
              }
            },
            React.createElement(
              View,
              { style: urlCellViewStyle, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 310
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 311
                  }
                },
                rowData.url
              )
            ),
            React.createElement(
              View,
              { style: methodCellViewStyle, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 315
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 316
                  }
                },
                this._getTypeShortName(rowData.type)
              )
            )
          )
        )
      );
    }
  }, {
    key: '_renderSeperator',
    value: function _renderSeperator(sectionID, rowID, adjacentRowHighlighted) {
      return React.createElement(View, {
        key: sectionID + '-' + rowID,
        style: {
          height: adjacentRowHighlighted ? SEPARATOR_THICKNESS : 0,
          backgroundColor: adjacentRowHighlighted ? '#3B5998' : '#CCCCCC'
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 331
        }
      });
    }
  }, {
    key: '_scrollToBottom',
    value: function _scrollToBottom() {
      if (this._listView) {
        var scrollResponder = this._listView.getScrollResponder();
        if (scrollResponder) {
          var scrollY = Math.max(this._requests.length * LISTVIEW_CELL_HEIGHT + (this._listViewHighlighted ? 2 * SEPARATOR_THICKNESS : 0) - this._listViewHeight, 0);
          scrollResponder.scrollResponderScrollTo({
            x: 0,
            y: scrollY,
            animated: true
          });
        }
      }
    }
  }, {
    key: '_captureRequestListView',
    value: function _captureRequestListView(listRef) {
      this._listView = listRef;
    }
  }, {
    key: '_listViewOnLayout',
    value: function _listViewOnLayout(event) {
      var height = event.nativeEvent.layout.height;

      this._listViewHeight = height;
    }
  }, {
    key: '_pressRow',
    value: function _pressRow(rowID) {
      this._listViewHighlighted = true;
      this.setState({ detailRowID: rowID }, this._scrollToTop());
    }
  }, {
    key: '_scrollToTop',
    value: function _scrollToTop() {
      if (this._scrollView) {
        this._scrollView.scrollTo({
          y: 0,
          animated: false
        });
      }
    }
  }, {
    key: '_captureDetailScrollView',
    value: function _captureDetailScrollView(scrollRef) {
      this._scrollView = scrollRef;
    }
  }, {
    key: '_closeButtonClicked',
    value: function _closeButtonClicked() {
      this.setState({ detailRowID: null });
    }
  }, {
    key: '_getStringByValue',
    value: function _getStringByValue(value) {
      if (value === undefined) {
        return 'undefined';
      }
      if (typeof value === 'object') {
        return JSON.stringify(value);
      }
      if (typeof value === 'string' && value.length > 500) {
        return String(value).substr(0, 500).concat('\n***TRUNCATED TO 500 CHARACTERS***');
      }
      return value;
    }
  }, {
    key: '_getRequestIndexByXHRID',
    value: function _getRequestIndexByXHRID(index) {
      if (index === undefined) {
        return -1;
      }
      var xhrIndex = this._xhrIdMap[index];
      if (xhrIndex === undefined) {
        return -1;
      } else {
        return xhrIndex;
      }
    }
  }, {
    key: '_getTypeShortName',
    value: function _getTypeShortName(type) {
      if (type === 'XMLHttpRequest') {
        return 'XHR';
      } else if (type === 'WebSocket') {
        return 'WS';
      }

      return '';
    }
  }, {
    key: '_genDetailViewItem',
    value: function _genDetailViewItem(index) {
      this._detailViewItems[index] = [];
      var detailViewItem = this._detailViewItems[index];
      var requestItem = this._requests[index];
      for (var _key in requestItem) {
        detailViewItem.push(React.createElement(
          View,
          { style: styles.detailViewRow, key: _key, __source: {
              fileName: _jsxFileName,
              lineNumber: 446
            }
          },
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailKeyCellView], __source: {
                fileName: _jsxFileName,
                lineNumber: 447
              }
            },
            _key
          ),
          React.createElement(
            Text,
            { style: [styles.detailViewText, styles.detailValueCellView], __source: {
                fileName: _jsxFileName,
                lineNumber: 450
              }
            },
            this._getStringByValue(requestItem[_key])
          )
        ));
      }

      if (this.state.detailRowID != null && Number(this.state.detailRowID) === index) {
        this.setState({ newDetailInfo: true });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 465
          }
        },
        this.state.detailRowID != null && React.createElement(
          TouchableHighlight,
          {
            style: styles.closeButton,
            onPress: this._closeButtonClicked, __source: {
              fileName: _jsxFileName,
              lineNumber: 467
            }
          },
          React.createElement(
            View,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 470
              }
            },
            React.createElement(
              Text,
              { style: styles.clostButtonText, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 471
                }
              },
              'v'
            )
          )
        ),
        this.state.detailRowID != null && React.createElement(
          ScrollView,
          {
            style: styles.detailScrollView,
            ref: this._captureDetailScrollView, __source: {
              fileName: _jsxFileName,
              lineNumber: 475
            }
          },
          this._detailViewItems[this.state.detailRowID]
        ),
        React.createElement(
          View,
          { style: styles.listViewTitle, __source: {
              fileName: _jsxFileName,
              lineNumber: 480
            }
          },
          this._requests.length > 0 && React.createElement(
            View,
            { style: styles.tableRow, __source: {
                fileName: _jsxFileName,
                lineNumber: 482
              }
            },
            React.createElement(
              View,
              { style: styles.urlTitleCellView, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 483
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 484
                  }
                },
                'URL'
              )
            ),
            React.createElement(
              View,
              { style: styles.methodTitleCellView, __source: {
                  fileName: _jsxFileName,
                  lineNumber: 486
                }
              },
              React.createElement(
                Text,
                { style: styles.cellText, numberOfLines: 1, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 487
                  }
                },
                'Type'
              )
            )
          )
        ),
        React.createElement(ListView, {
          style: styles.listView,
          ref: this._captureRequestListView,
          dataSource: this.state.dataSource,
          renderRow: this._renderRow,
          enableEmptySections: true,
          renderSeparator: this._renderSeperator,
          onLayout: this._listViewOnLayout,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 491
          }
        })
      );
    }
  }]);
  return NetworkOverlay;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    paddingTop: 10,
    paddingBottom: 10,
    paddingLeft: 5,
    paddingRight: 5
  },
  listViewTitle: {
    height: 20
  },
  listView: {
    flex: 1,
    height: 60
  },
  tableRow: {
    flexDirection: 'row',
    flex: 1
  },
  cellText: {
    color: 'white',
    fontSize: 12
  },
  methodTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 1
  },
  urlTitleCellView: {
    height: 18,
    borderColor: '#DCD7CD',
    borderTopWidth: 1,
    borderBottomWidth: 1,
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#444',
    flex: 5,
    paddingLeft: 3
  },
  methodOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 1
  },
  urlOddCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#000',
    flex: 5,
    paddingLeft: 3
  },
  methodEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderRightWidth: 1,
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 1
  },
  urlEvenCellView: {
    height: 15,
    borderColor: '#DCD7CD',
    borderLeftWidth: 1,
    borderRightWidth: 1,
    justifyContent: 'center',
    backgroundColor: '#888',
    flex: 5,
    paddingLeft: 3
  },
  detailScrollView: {
    flex: 1,
    height: 180,
    marginTop: 5,
    marginBottom: 5
  },
  detailKeyCellView: {
    flex: 1.3
  },
  detailValueCellView: {
    flex: 2
  },
  detailViewRow: {
    flexDirection: 'row',
    paddingHorizontal: 3
  },
  detailViewText: {
    color: 'white',
    fontSize: 11
  },
  clostButtonText: {
    color: 'white',
    fontSize: 10
  },
  closeButton: {
    marginTop: 5,
    backgroundColor: '#888',
    justifyContent: 'center',
    alignItems: 'center'
  }
});

module.exports = NetworkOverlay;
}, 305, null, "NetworkOverlay");
__d(/* WebSocketInterceptor */function(global, require, module, exports) {
'use strict';

var RCTWebSocketModule = require(57             ).WebSocketModule; // 57 = NativeModules
var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter

var base64 = require(92         ); // 92 = base64-js

var originalRCTWebSocketConnect = RCTWebSocketModule.connect;
var originalRCTWebSocketSend = RCTWebSocketModule.send;
var originalRCTWebSocketSendBinary = RCTWebSocketModule.sendBinary;
var originalRCTWebSocketClose = RCTWebSocketModule.close;

var eventEmitter = void 0;
var subscriptions = void 0;

var closeCallback = void 0;
var sendCallback = void 0;
var connectCallback = void 0;
var onOpenCallback = void 0;
var onMessageCallback = void 0;
var onErrorCallback = void 0;
var onCloseCallback = void 0;

var _isInterceptorEnabled = false;

var WebSocketInterceptor = {
  setCloseCallback: function setCloseCallback(callback) {
    closeCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setConnectCallback: function setConnectCallback(callback) {
    connectCallback = callback;
  },
  setOnOpenCallback: function setOnOpenCallback(callback) {
    onOpenCallback = callback;
  },
  setOnMessageCallback: function setOnMessageCallback(callback) {
    onMessageCallback = callback;
  },
  setOnErrorCallback: function setOnErrorCallback(callback) {
    onErrorCallback = callback;
  },
  setOnCloseCallback: function setOnCloseCallback(callback) {
    onCloseCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  _unregisterEvents: function _unregisterEvents() {
    subscriptions.forEach(function (e) {
      return e.remove();
    });
    subscriptions = [];
  },
  _registerEvents: function _registerEvents() {
    subscriptions = [eventEmitter.addListener('websocketMessage', function (ev) {
      if (onMessageCallback) {
        onMessageCallback(ev.id, ev.type === 'binary' ? WebSocketInterceptor._arrayBufferToString(ev.data) : ev.data);
      }
    }), eventEmitter.addListener('websocketOpen', function (ev) {
      if (onOpenCallback) {
        onOpenCallback(ev.id);
      }
    }), eventEmitter.addListener('websocketClosed', function (ev) {
      if (onCloseCallback) {
        onCloseCallback(ev.id, { code: ev.code, reason: ev.reason });
      }
    }), eventEmitter.addListener('websocketFailed', function (ev) {
      if (onErrorCallback) {
        onErrorCallback(ev.id, { message: ev.message });
      }
    })];
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }
    eventEmitter = new NativeEventEmitter(RCTWebSocketModule);
    WebSocketInterceptor._registerEvents();

    RCTWebSocketModule.connect = function (url, protocols, options, socketId) {
      if (connectCallback) {
        connectCallback(url, protocols, options, socketId);
      }
      originalRCTWebSocketConnect.apply(this, arguments);
    };

    RCTWebSocketModule.send = function (data, socketId) {
      if (sendCallback) {
        sendCallback(data, socketId);
      }
      originalRCTWebSocketSend.apply(this, arguments);
    };

    RCTWebSocketModule.sendBinary = function (data, socketId) {
      if (sendCallback) {
        sendCallback(WebSocketInterceptor._arrayBufferToString(data), socketId);
      }
      originalRCTWebSocketSendBinary.apply(this, arguments);
    };

    RCTWebSocketModule.close = function () {
      if (closeCallback) {
        if (arguments.length === 3) {
          closeCallback(arguments[0], arguments[1], arguments[2]);
        } else {
          closeCallback(null, null, arguments[0]);
        }
      }
      originalRCTWebSocketClose.apply(this, arguments);
    };

    _isInterceptorEnabled = true;
  },
  _arrayBufferToString: function _arrayBufferToString(data) {
    var value = base64.toByteArray(data).buffer;
    if (value === undefined || value === null) {
      return '(no value)';
    }
    if (typeof ArrayBuffer !== 'undefined' && typeof Uint8Array !== 'undefined' && value instanceof ArrayBuffer) {
      return 'ArrayBuffer {' + String(Array.from(new Uint8Array(value))) + '}';
    }
    return value;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    RCTWebSocketModule.send = originalRCTWebSocketSend;
    RCTWebSocketModule.sendBinary = originalRCTWebSocketSendBinary;
    RCTWebSocketModule.close = originalRCTWebSocketClose;
    RCTWebSocketModule.connect = originalRCTWebSocketConnect;

    connectCallback = null;
    closeCallback = null;
    sendCallback = null;
    onOpenCallback = null;
    onMessageCallback = null;
    onCloseCallback = null;
    onErrorCallback = null;

    WebSocketInterceptor._unregisterEvents();
  }
};

module.exports = WebSocketInterceptor;
}, 306, null, "WebSocketInterceptor");
__d(/* XHRInterceptor */function(global, require, module, exports) {
'use strict';

var XMLHttpRequest = require(214             ); // 214 = XMLHttpRequest
var originalXHROpen = XMLHttpRequest.prototype.open;
var originalXHRSend = XMLHttpRequest.prototype.send;
var originalXHRSetRequestHeader = XMLHttpRequest.prototype.setRequestHeader;

var openCallback;
var sendCallback;
var requestHeaderCallback;
var headerReceivedCallback;
var responseCallback;

var _isInterceptorEnabled = false;

var XHRInterceptor = {
  setOpenCallback: function setOpenCallback(callback) {
    openCallback = callback;
  },
  setSendCallback: function setSendCallback(callback) {
    sendCallback = callback;
  },
  setHeaderReceivedCallback: function setHeaderReceivedCallback(callback) {
    headerReceivedCallback = callback;
  },
  setResponseCallback: function setResponseCallback(callback) {
    responseCallback = callback;
  },
  setRequestHeaderCallback: function setRequestHeaderCallback(callback) {
    requestHeaderCallback = callback;
  },
  isInterceptorEnabled: function isInterceptorEnabled() {
    return _isInterceptorEnabled;
  },
  enableInterception: function enableInterception() {
    if (_isInterceptorEnabled) {
      return;
    }

    XMLHttpRequest.prototype.open = function (method, url) {
      if (openCallback) {
        openCallback(method, url, this);
      }
      originalXHROpen.apply(this, arguments);
    };

    XMLHttpRequest.prototype.setRequestHeader = function (header, value) {
      if (requestHeaderCallback) {
        requestHeaderCallback(header, value, this);
      }
      originalXHRSetRequestHeader.apply(this, arguments);
    };

    XMLHttpRequest.prototype.send = function (data) {
      var _this = this;

      if (sendCallback) {
        sendCallback(data, this);
      }
      if (this.addEventListener) {
        this.addEventListener('readystatechange', function () {
          if (!_isInterceptorEnabled) {
            return;
          }
          if (_this.readyState === _this.HEADERS_RECEIVED) {
            var contentTypeString = _this.getResponseHeader('Content-Type');
            var contentLengthString = _this.getResponseHeader('Content-Length');
            var responseContentType = void 0,
                responseSize = void 0;
            if (contentTypeString) {
              responseContentType = contentTypeString.split(';')[0];
            }
            if (contentLengthString) {
              responseSize = parseInt(contentLengthString, 10);
            }
            if (headerReceivedCallback) {
              headerReceivedCallback(responseContentType, responseSize, _this.getAllResponseHeaders(), _this);
            }
          }
          if (_this.readyState === _this.DONE) {
            if (responseCallback) {
              responseCallback(_this.status, _this.timeout, _this.response, _this.responseURL, _this.responseType, _this);
            }
          }
        }, false);
      }
      originalXHRSend.apply(this, arguments);
    };
    _isInterceptorEnabled = true;
  },
  disableInterception: function disableInterception() {
    if (!_isInterceptorEnabled) {
      return;
    }
    _isInterceptorEnabled = false;
    XMLHttpRequest.prototype.send = originalXHRSend;
    XMLHttpRequest.prototype.open = originalXHROpen;
    XMLHttpRequest.prototype.setRequestHeader = originalXHRSetRequestHeader;
    responseCallback = null;
    openCallback = null;
    sendCallback = null;
    headerReceivedCallback = null;
    requestHeaderCallback = null;
  }
};

module.exports = XHRInterceptor;
}, 307, null, "XHRInterceptor");
__d(/* PerformanceOverlay */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Inspector/PerformanceOverlay.js';
var PerformanceLogger = require(234                ); // 234 = PerformanceLogger
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var View = require(124   ); // 124 = View

var PerformanceOverlay = function (_React$Component) {
  babelHelpers.inherits(PerformanceOverlay, _React$Component);

  function PerformanceOverlay() {
    babelHelpers.classCallCheck(this, PerformanceOverlay);
    return babelHelpers.possibleConstructorReturn(this, (PerformanceOverlay.__proto__ || Object.getPrototypeOf(PerformanceOverlay)).apply(this, arguments));
  }

  babelHelpers.createClass(PerformanceOverlay, [{
    key: 'render',
    value: function render() {
      var perfLogs = PerformanceLogger.getTimespans();
      var items = [];

      for (var key in perfLogs) {
        if (perfLogs[key].totalTime) {
          var unit = key === 'BundleSize' ? 'b' : 'ms';
          items.push(React.createElement(
            View,
            { style: styles.row, key: key, __source: {
                fileName: _jsxFileName,
                lineNumber: 29
              }
            },
            React.createElement(
              Text,
              { style: [styles.text, styles.label], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 30
                }
              },
              key
            ),
            React.createElement(
              Text,
              { style: [styles.text, styles.totalTime], __source: {
                  fileName: _jsxFileName,
                  lineNumber: 31
                }
              },
              perfLogs[key].totalTime + unit
            )
          ));
        }
      }

      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 40
          }
        },
        items
      );
    }
  }]);
  return PerformanceOverlay;
}(React.Component);

var styles = StyleSheet.create({
  container: {
    height: 100,
    paddingTop: 10
  },
  label: {
    flex: 1
  },
  row: {
    flexDirection: 'row',
    paddingHorizontal: 10
  },
  text: {
    color: 'white',
    fontSize: 12
  },
  totalTime: {
    paddingRight: 100
  }
});

module.exports = PerformanceOverlay;
}, 308, null, "PerformanceOverlay");
__d(/* YellowBox */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/ReactNative/YellowBox.js';
var EventEmitter = require(80            ); // 80 = EventEmitter
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet

var infoLog = require(260      ); // 260 = infoLog
var openFileInEditor = require(304               ); // 304 = openFileInEditor
var parseErrorStack = require(70               ); // 70 = parseErrorStack
var symbolicateStackTrace = require(200                    ); // 200 = symbolicateStackTrace

var _warningEmitter = new EventEmitter();
var _warningMap = new Map();

if (__DEV__) {
  var _console = console,
      error = _console.error,
      warn = _console.warn;


  console.error = function () {
    error.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('Warning: ')) {
      updateWarningMap.apply(null, arguments);
    }
  };

  console.warn = function () {
    warn.apply(console, arguments);

    if (typeof arguments[0] === 'string' && arguments[0].startsWith('(ADVICE)')) {
      return;
    }

    updateWarningMap.apply(null, arguments);
  };

  if (Platform.isTesting) {
    console.disableYellowBox = true;
  }
}

function sprintf(format) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  var index = 0;
  return format.replace(/%s/g, function (match) {
    return args[index++];
  });
}

function updateWarningMap(format) {
  if (console.disableYellowBox) {
    return;
  }
  var stringifySafe = require(74             ); // 74 = stringifySafe

  format = String(format);
  var argCount = (format.match(/%s/g) || []).length;

  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  var warning = [sprintf.apply(undefined, [format].concat(babelHelpers.toConsumableArray(args.slice(0, argCount))))].concat(babelHelpers.toConsumableArray(args.slice(argCount).map(stringifySafe))).join(' ');

  var warningInfo = _warningMap.get(warning);
  if (warningInfo) {
    warningInfo.count += 1;
  } else {
    var _error = new Error();
    _error.framesToPop = 2;

    _warningMap.set(warning, {
      count: 1,
      stacktrace: parseErrorStack(_error),
      symbolicated: false
    });
  }

  _warningEmitter.emit('warning', _warningMap);
}

function ensureSymbolicatedWarning(warning) {
  var prevWarningInfo = _warningMap.get(warning);
  if (!prevWarningInfo || prevWarningInfo.symbolicated) {
    return;
  }
  prevWarningInfo.symbolicated = true;

  symbolicateStackTrace(prevWarningInfo.stacktrace).then(function (stack) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      nextWarningInfo.stacktrace = stack;
      _warningEmitter.emit('warning', _warningMap);
    }
  }, function (error) {
    var nextWarningInfo = _warningMap.get(warning);
    if (nextWarningInfo) {
      infoLog('Failed to symbolicate warning, "%s":', warning, error);
      _warningEmitter.emit('warning', _warningMap);
    }
  });
}

function isWarningIgnored(warning) {
  return Array.isArray(console.ignoredYellowBox) && console.ignoredYellowBox.some(function (ignorePrefix) {
    return warning.startsWith(String(ignorePrefix));
  });
}

var WarningRow = function WarningRow(_ref) {
  var count = _ref.count,
      warning = _ref.warning,
      onPress = _ref.onPress;

  var Text = require(188   ); // 188 = Text
  var TouchableHighlight = require(300                 ); // 300 = TouchableHighlight
  var View = require(124   ); // 124 = View

  var countText = count > 1 ? React.createElement(
    Text,
    { style: styles.listRowCount, __source: {
        fileName: _jsxFileName,
        lineNumber: 170
      }
    },
    '(' + count + ') '
  ) : null;

  return React.createElement(
    View,
    { style: styles.listRow, __source: {
        fileName: _jsxFileName,
        lineNumber: 174
      }
    },
    React.createElement(
      TouchableHighlight,
      {
        activeOpacity: 0.5,
        onPress: onPress,
        style: styles.listRowContent,
        underlayColor: 'transparent', __source: {
          fileName: _jsxFileName,
          lineNumber: 175
        }
      },
      React.createElement(
        Text,
        { style: styles.listRowText, numberOfLines: 2, __source: {
            fileName: _jsxFileName,
            lineNumber: 180
          }
        },
        countText,
        warning
      )
    )
  );
};

var StackRow = function StackRow(_ref2) {
  var frame = _ref2.frame;

  var Text = require(188   ); // 188 = Text
  var TouchableHighlight = require(300                 ); // 300 = TouchableHighlight
  var file = frame.file,
      lineNumber = frame.lineNumber;

  var fileParts = file.split('/');
  var fileName = fileParts[fileParts.length - 1];

  return React.createElement(
    TouchableHighlight,
    {
      activeOpacity: 0.5,
      style: styles.openInEditorButton,
      underlayColor: 'transparent',
      onPress: openFileInEditor.bind(null, file, lineNumber), __source: {
        fileName: _jsxFileName,
        lineNumber: 198
      }
    },
    React.createElement(
      Text,
      { style: styles.inspectorCountText, __source: {
          fileName: _jsxFileName,
          lineNumber: 203
        }
      },
      fileName,
      ':',
      lineNumber
    )
  );
};

var WarningInspector = function WarningInspector(_ref3) {
  var warningInfo = _ref3.warningInfo,
      warning = _ref3.warning,
      stacktraceVisible = _ref3.stacktraceVisible,
      onDismiss = _ref3.onDismiss,
      onDismissAll = _ref3.onDismissAll,
      onMinimize = _ref3.onMinimize,
      toggleStacktrace = _ref3.toggleStacktrace;

  var ScrollView = require(270         ); // 270 = ScrollView
  var Text = require(188   ); // 188 = Text
  var TouchableHighlight = require(300                 ); // 300 = TouchableHighlight
  var View = require(124   ); // 124 = View

  var _ref4 = warningInfo || {},
      count = _ref4.count,
      stacktrace = _ref4.stacktrace;

  var countSentence = 'Warning encountered ' + count + ' time' + (count - 1 ? 's' : '') + '.';

  var stacktraceList = void 0;
  if (stacktraceVisible && stacktrace) {
    stacktraceList = React.createElement(
      View,
      { style: styles.stacktraceList, __source: {
          fileName: _jsxFileName,
          lineNumber: 231
        }
      },
      stacktrace.map(function (frame, ii) {
        return React.createElement(StackRow, { frame: frame, key: ii, __source: {
            fileName: _jsxFileName,
            lineNumber: 232
          }
        });
      })
    );
  }

  return React.createElement(
    View,
    { style: styles.inspector, __source: {
        fileName: _jsxFileName,
        lineNumber: 238
      }
    },
    React.createElement(
      View,
      { style: styles.inspectorCount, __source: {
          fileName: _jsxFileName,
          lineNumber: 239
        }
      },
      React.createElement(
        Text,
        { style: styles.inspectorCountText, __source: {
            fileName: _jsxFileName,
            lineNumber: 240
          }
        },
        countSentence
      ),
      React.createElement(
        TouchableHighlight,
        { onPress: toggleStacktrace, underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 241
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 242
            }
          },
          stacktraceVisible ? '▼' : '▶',
          ' Stacktrace'
        )
      )
    ),
    React.createElement(
      ScrollView,
      { style: styles.inspectorWarning, __source: {
          fileName: _jsxFileName,
          lineNumber: 247
        }
      },
      stacktraceList,
      React.createElement(
        Text,
        { style: styles.inspectorWarningText, __source: {
            fileName: _jsxFileName,
            lineNumber: 249
          }
        },
        warning
      )
    ),
    React.createElement(
      View,
      { style: styles.inspectorButtons, __source: {
          fileName: _jsxFileName,
          lineNumber: 251
        }
      },
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onMinimize,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 252
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 257
            }
          },
          'Minimize'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismiss,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 261
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 266
            }
          },
          'Dismiss'
        )
      ),
      React.createElement(
        TouchableHighlight,
        {
          activeOpacity: 0.5,
          onPress: onDismissAll,
          style: styles.inspectorButton,
          underlayColor: 'transparent', __source: {
            fileName: _jsxFileName,
            lineNumber: 270
          }
        },
        React.createElement(
          Text,
          { style: styles.inspectorButtonText, __source: {
              fileName: _jsxFileName,
              lineNumber: 275
            }
          },
          'Dismiss All'
        )
      )
    )
  );
};

var YellowBox = function (_React$Component) {
  babelHelpers.inherits(YellowBox, _React$Component);

  function YellowBox(props, context) {
    babelHelpers.classCallCheck(this, YellowBox);

    var _this = babelHelpers.possibleConstructorReturn(this, (YellowBox.__proto__ || Object.getPrototypeOf(YellowBox)).call(this, props, context));

    _this.state = {
      inspecting: null,
      stacktraceVisible: false,
      warningMap: _warningMap
    };
    _this.dismissWarning = function (warning) {
      var _this$state = _this.state,
          inspecting = _this$state.inspecting,
          warningMap = _this$state.warningMap;

      if (warning) {
        warningMap.delete(warning);
      } else {
        warningMap.clear();
      }
      _this.setState({
        inspecting: warning && inspecting !== warning ? inspecting : null,
        warningMap: warningMap
      });
    };
    return _this;
  }

  babelHelpers.createClass(YellowBox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this2 = this;

      var scheduled = null;
      this._listener = _warningEmitter.addListener('warning', function (warningMap) {
        scheduled = scheduled || setImmediate(function () {
          scheduled = null;
          _this2.setState({
            warningMap: warningMap
          });
        });
      });
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      var inspecting = this.state.inspecting;

      if (inspecting != null) {
        ensureSymbolicatedWarning(inspecting);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._listener) {
        this._listener.remove();
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      if (console.disableYellowBox || this.state.warningMap.size === 0) {
        return null;
      }
      var ScrollView = require(270         ); // 270 = ScrollView
      var View = require(124   ); // 124 = View

      var _state = this.state,
          inspecting = _state.inspecting,
          stacktraceVisible = _state.stacktraceVisible;

      var inspector = inspecting !== null ? React.createElement(WarningInspector, {
        warningInfo: this.state.warningMap.get(inspecting),
        warning: inspecting,
        stacktraceVisible: stacktraceVisible,
        onDismiss: function onDismiss() {
          return _this3.dismissWarning(inspecting);
        },
        onDismissAll: function onDismissAll() {
          return _this3.dismissWarning(null);
        },
        onMinimize: function onMinimize() {
          return _this3.setState({ inspecting: null });
        },
        toggleStacktrace: function toggleStacktrace() {
          return _this3.setState({ stacktraceVisible: !stacktraceVisible });
        },
        __source: {
          fileName: _jsxFileName,
          lineNumber: 350
        }
      }) : null;

      var rows = [];
      this.state.warningMap.forEach(function (warningInfo, warning) {
        if (!isWarningIgnored(warning)) {
          rows.push(React.createElement(WarningRow, {
            key: warning,
            count: warningInfo.count,
            warning: warning,
            onPress: function onPress() {
              return _this3.setState({ inspecting: warning });
            },
            onDismiss: function onDismiss() {
              return _this3.dismissWarning(warning);
            },
            __source: {
              fileName: _jsxFileName,
              lineNumber: 365
            }
          }));
        }
      });

      var listStyle = [styles.list, { height: Math.min(rows.length, 4.4) * (rowGutter + rowHeight) }];
      return React.createElement(
        View,
        { style: inspector ? styles.fullScreen : listStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 382
          }
        },
        React.createElement(
          ScrollView,
          { style: listStyle, scrollsToTop: false, __source: {
              fileName: _jsxFileName,
              lineNumber: 383
            }
          },
          rows
        ),
        inspector
      );
    }
  }]);
  return YellowBox;
}(React.Component);

var backgroundColor = function backgroundColor(opacity) {
  return 'rgba(250, 186, 48, ' + opacity + ')';
};
var textColor = 'white';
var rowGutter = 1;
var rowHeight = 46;

var elevation = Platform.OS === 'android' ? Number.MAX_SAFE_INTEGER : undefined;

var styles = StyleSheet.create({
  fullScreen: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    right: 0,
    top: 0,
    bottom: 0,
    elevation: elevation
  },
  inspector: {
    backgroundColor: backgroundColor(0.95),
    flex: 1,
    paddingTop: 5,
    elevation: elevation
  },
  inspectorButtons: {
    flexDirection: 'row'
  },
  inspectorButton: {
    flex: 1,
    paddingVertical: 22,
    backgroundColor: backgroundColor(1)
  },
  stacktraceList: {
    paddingBottom: 5
  },
  inspectorButtonText: {
    color: textColor,
    fontSize: 14,
    opacity: 0.8,
    textAlign: 'center'
  },
  openInEditorButton: {
    paddingTop: 5,
    paddingBottom: 5
  },
  inspectorCount: {
    padding: 15,
    paddingBottom: 0,
    flexDirection: 'row',
    justifyContent: 'space-between'
  },
  inspectorCountText: {
    color: textColor,
    fontSize: 14
  },
  inspectorWarning: {
    flex: 1,
    paddingHorizontal: 15
  },
  inspectorWarningText: {
    color: textColor,
    fontSize: 16,
    fontWeight: '600'
  },
  list: {
    backgroundColor: 'transparent',
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    elevation: elevation
  },
  listRow: {
    position: 'relative',
    backgroundColor: backgroundColor(0.95),
    flex: 1,
    height: rowHeight,
    marginTop: rowGutter
  },
  listRowContent: {
    flex: 1
  },
  listRowCount: {
    color: 'rgba(255, 255, 255, 0.5)'
  },
  listRowText: {
    color: textColor,
    position: 'absolute',
    left: 0,
    top: Platform.OS === 'android' ? 5 : 7,
    marginLeft: 15,
    marginRight: 15
  }
});

module.exports = YellowBox;
}, 309, null, "YellowBox");
__d(/* I18nManager */function(global, require, module, exports) {
'use strict';

var I18nManager = require(57             ).I18nManager || { // 57 = NativeModules
  isRTL: false,
  allowRTL: function allowRTL() {},
  forceRTL: function forceRTL() {}
};

module.exports = I18nManager;
}, 310, null, "I18nManager");
__d(/* Navigator */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/Navigator/Navigator.js';
var AnimationsDebugModule = require(57             ).AnimationsDebugModule; // 57 = NativeModules
var Dimensions = require(106         ); // 106 = Dimensions
var InteractionMixin = require(312               ); // 312 = InteractionMixin
var NavigationContext = require(313                ); // 313 = NavigationContext
var NavigatorBreadcrumbNavigationBar = require(318                               ); // 318 = NavigatorBreadcrumbNavigationBar
var NavigatorNavigationBar = require(323                     ); // 323 = NavigatorNavigationBar
var NavigatorSceneConfigs = require(324                    ); // 324 = NavigatorSceneConfigs
var PanResponder = require(325           ); // 325 = PanResponder
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Subscribable = require(273           ); // 273 = Subscribable
var TVEventHandler = require(192             ); // 192 = TVEventHandler
var TimerMixin = require(253                ); // 253 = react-timer-mixin
var View = require(124   ); // 124 = View

var clamp = require(327    ); // 327 = clamp
var flattenStyle = require(54            ); // 54 = flattenStyle
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var rebound = require(328      ); // 328 = rebound

var PropTypes = React.PropTypes;

var SCREEN_WIDTH = Dimensions.get('window').width;
var SCREEN_HEIGHT = Dimensions.get('window').height;
var SCENE_DISABLED_NATIVE_PROPS = {
  pointerEvents: 'none',
  style: {
    top: SCREEN_HEIGHT,
    bottom: -SCREEN_HEIGHT,
    opacity: 0
  }
};

var __uid = 0;
function getuid() {
  return __uid++;
}

function getRouteID(route) {
  if (route === null || typeof route !== 'object') {
    return String(route);
  }

  var key = '__navigatorRouteID';

  if (!route.hasOwnProperty(key)) {
    Object.defineProperty(route, key, {
      enumerable: false,
      configurable: false,
      writable: false,
      value: getuid()
    });
  }
  return route[key];
}

var styles = StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  },
  defaultSceneStyle: {
    position: 'absolute',
    left: 0,
    right: 0,
    bottom: 0,
    top: 0,
    transform: [{ translateX: 0 }, { translateY: 0 }, { scaleX: 1 }, { scaleY: 1 }, { rotate: '0deg' }, { skewX: '0deg' }, { skewY: '0deg' }]
  },
  baseScene: {
    position: 'absolute',
    overflow: 'hidden',
    left: 0,
    right: 0,
    bottom: 0,
    top: 0
  },
  disabledScene: {
    top: SCREEN_HEIGHT,
    bottom: -SCREEN_HEIGHT
  },
  transitioner: {
    flex: 1,
    backgroundColor: 'transparent',
    overflow: 'hidden'
  }
});

var GESTURE_ACTIONS = ['pop', 'jumpBack', 'jumpForward'];

var Navigator = React.createClass({
  displayName: 'Navigator',


  propTypes: {
    configureScene: PropTypes.func,

    renderScene: PropTypes.func.isRequired,

    initialRoute: PropTypes.object,

    initialRouteStack: PropTypes.arrayOf(PropTypes.object),

    onWillFocus: PropTypes.func,

    onDidFocus: PropTypes.func,

    navigationBar: PropTypes.node,

    navigator: PropTypes.object,

    sceneStyle: View.propTypes.style
  },

  statics: {
    BreadcrumbNavigationBar: NavigatorBreadcrumbNavigationBar,
    NavigationBar: NavigatorNavigationBar,
    SceneConfigs: NavigatorSceneConfigs
  },

  mixins: [TimerMixin, InteractionMixin, Subscribable.Mixin],

  getDefaultProps: function getDefaultProps() {
    return {
      configureScene: function configureScene() {
        return NavigatorSceneConfigs.PushFromRight;
      },
      sceneStyle: styles.defaultSceneStyle
    };
  },

  getInitialState: function getInitialState() {
    var _this = this;

    this._navigationBarNavigator = this.props.navigationBarNavigator || this;

    this._renderedSceneMap = new Map();

    this._sceneRefs = [];

    var routeStack = this.props.initialRouteStack || [this.props.initialRoute];
    invariant(routeStack.length >= 1, 'Navigator requires props.initialRoute or props.initialRouteStack.');
    var initialRouteIndex = routeStack.length - 1;
    if (this.props.initialRoute) {
      initialRouteIndex = routeStack.indexOf(this.props.initialRoute);
      invariant(initialRouteIndex !== -1, 'initialRoute is not in initialRouteStack.');
    }
    return {
      sceneConfigStack: routeStack.map(function (route) {
        return _this.props.configureScene(route, routeStack);
      }),
      routeStack: routeStack,
      presentedIndex: initialRouteIndex,
      transitionFromIndex: null,
      activeGesture: null,
      pendingGestureProgress: null,
      transitionQueue: []
    };
  },

  componentWillMount: function componentWillMount() {
    var _this2 = this;

    this.__defineGetter__('navigationContext', this._getNavigationContext);

    this._subRouteFocus = [];
    this.parentNavigator = this.props.navigator;
    this._handlers = {};
    this.springSystem = new rebound.SpringSystem();
    this.spring = this.springSystem.createSpring();
    this.spring.setRestSpeedThreshold(0.05);
    this.spring.setCurrentValue(0).setAtRest();
    this.spring.addListener({
      onSpringEndStateChange: function onSpringEndStateChange() {
        if (!_this2._interactionHandle) {
          _this2._interactionHandle = _this2.createInteractionHandle();
        }
      },
      onSpringUpdate: function onSpringUpdate() {
        _this2._handleSpringUpdate();
      },
      onSpringAtRest: function onSpringAtRest() {
        _this2._completeTransition();
      }
    });
    this.panGesture = PanResponder.create({
      onMoveShouldSetPanResponder: this._handleMoveShouldSetPanResponder,
      onPanResponderRelease: this._handlePanResponderRelease,
      onPanResponderMove: this._handlePanResponderMove,
      onPanResponderTerminate: this._handlePanResponderTerminate
    });
    this._interactionHandle = null;
    this._emitWillFocus(this.state.routeStack[this.state.presentedIndex]);
  },

  componentDidMount: function componentDidMount() {
    this._handleSpringUpdate();
    this._emitDidFocus(this.state.routeStack[this.state.presentedIndex]);
    this._enableTVEventHandler();
  },

  componentWillUnmount: function componentWillUnmount() {
    if (this._navigationContext) {
      this._navigationContext.dispose();
      this._navigationContext = null;
    }

    this.spring.destroy();

    if (this._interactionHandle) {
      this.clearInteractionHandle(this._interactionHandle);
    }

    this._disableTVEventHandler();
  },

  immediatelyResetRouteStack: function immediatelyResetRouteStack(nextRouteStack) {
    var _this3 = this;

    var destIndex = nextRouteStack.length - 1;
    this._emitWillFocus(nextRouteStack[destIndex]);
    this.setState({
      routeStack: nextRouteStack,
      sceneConfigStack: nextRouteStack.map(function (route) {
        return _this3.props.configureScene(route, nextRouteStack);
      }),
      presentedIndex: destIndex,
      activeGesture: null,
      transitionFromIndex: null,
      transitionQueue: []
    }, function () {
      _this3._handleSpringUpdate();
      var navBar = _this3._navBar;
      if (navBar && navBar.immediatelyRefresh) {
        navBar.immediatelyRefresh();
      }
      _this3._emitDidFocus(_this3.state.routeStack[_this3.state.presentedIndex]);
    });
  },

  _transitionTo: function _transitionTo(destIndex, velocity, jumpSpringTo, cb) {
    if (this.state.presentedIndex === destIndex) {
      cb && cb();
      return;
    }

    if (this.state.transitionFromIndex !== null) {
      this.state.transitionQueue.push({
        destIndex: destIndex,
        velocity: velocity,
        cb: cb
      });
      return;
    }

    this.state.transitionFromIndex = this.state.presentedIndex;
    this.state.presentedIndex = destIndex;
    this.state.transitionCb = cb;
    this._onAnimationStart();
    if (AnimationsDebugModule) {
      AnimationsDebugModule.startRecordingFps();
    }
    var sceneConfig = this.state.sceneConfigStack[this.state.transitionFromIndex] || this.state.sceneConfigStack[this.state.presentedIndex];
    invariant(sceneConfig, 'Cannot configure scene at index ' + this.state.transitionFromIndex);
    if (jumpSpringTo != null) {
      this.spring.setCurrentValue(jumpSpringTo);
    }
    this.spring.setOvershootClampingEnabled(true);
    this.spring.getSpringConfig().friction = sceneConfig.springFriction;
    this.spring.getSpringConfig().tension = sceneConfig.springTension;
    this.spring.setVelocity(velocity || sceneConfig.defaultTransitionVelocity);
    this.spring.setEndValue(1);
  },

  _handleSpringUpdate: function _handleSpringUpdate() {
    if (!this.isMounted()) {
      return;
    }

    if (this.state.transitionFromIndex != null) {
      this._transitionBetween(this.state.transitionFromIndex, this.state.presentedIndex, this.spring.getCurrentValue());
    } else if (this.state.activeGesture != null) {
      var presentedToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
      this._transitionBetween(this.state.presentedIndex, presentedToIndex, this.spring.getCurrentValue());
    }
  },

  _completeTransition: function _completeTransition() {
    if (!this.isMounted()) {
      return;
    }

    if (this.spring.getCurrentValue() !== 1 && this.spring.getCurrentValue() !== 0) {
      if (this.state.pendingGestureProgress) {
        this.state.pendingGestureProgress = null;
      }
      return;
    }
    this._onAnimationEnd();
    var presentedIndex = this.state.presentedIndex;
    var didFocusRoute = this._subRouteFocus[presentedIndex] || this.state.routeStack[presentedIndex];

    if (AnimationsDebugModule) {
      AnimationsDebugModule.stopRecordingFps(Date.now());
    }
    this.state.transitionFromIndex = null;
    this.spring.setCurrentValue(0).setAtRest();
    this._hideScenes();
    if (this.state.transitionCb) {
      this.state.transitionCb();
      this.state.transitionCb = null;
    }

    this._emitDidFocus(didFocusRoute);

    if (this._interactionHandle) {
      this.clearInteractionHandle(this._interactionHandle);
      this._interactionHandle = null;
    }
    if (this.state.pendingGestureProgress) {
      var gestureToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
      this._enableScene(gestureToIndex);
      this.spring.setEndValue(this.state.pendingGestureProgress);
      return;
    }
    if (this.state.transitionQueue.length) {
      var queuedTransition = this.state.transitionQueue.shift();
      this._enableScene(queuedTransition.destIndex);
      this._emitWillFocus(this.state.routeStack[queuedTransition.destIndex]);
      this._transitionTo(queuedTransition.destIndex, queuedTransition.velocity, null, queuedTransition.cb);
    }
  },

  _emitDidFocus: function _emitDidFocus(route) {
    this.navigationContext.emit('didfocus', { route: route });

    if (this.props.onDidFocus) {
      this.props.onDidFocus(route);
    }
  },

  _emitWillFocus: function _emitWillFocus(route) {
    this.navigationContext.emit('willfocus', { route: route });

    var navBar = this._navBar;
    if (navBar && navBar.handleWillFocus) {
      navBar.handleWillFocus(route);
    }
    if (this.props.onWillFocus) {
      this.props.onWillFocus(route);
    }
  },

  _hideScenes: function _hideScenes() {
    var gesturingToIndex = null;
    if (this.state.activeGesture) {
      gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    }
    for (var i = 0; i < this.state.routeStack.length; i++) {
      if (i === this.state.presentedIndex || i === this.state.transitionFromIndex || i === gesturingToIndex) {
        continue;
      }
      this._disableScene(i);
    }
  },

  _disableScene: function _disableScene(sceneIndex) {
    this._sceneRefs[sceneIndex] && this._sceneRefs[sceneIndex].setNativeProps(SCENE_DISABLED_NATIVE_PROPS);
  },

  _enableScene: function _enableScene(sceneIndex) {
    var sceneStyle = flattenStyle([styles.baseScene, this.props.sceneStyle]);

    var enabledSceneNativeProps = {
      pointerEvents: 'auto',
      style: {
        top: sceneStyle.top,
        bottom: sceneStyle.bottom
      }
    };
    if (sceneIndex !== this.state.transitionFromIndex && sceneIndex !== this.state.presentedIndex) {
      enabledSceneNativeProps.style.opacity = 0;
    }
    this._sceneRefs[sceneIndex] && this._sceneRefs[sceneIndex].setNativeProps(enabledSceneNativeProps);
  },

  _clearTransformations: function _clearTransformations(sceneIndex) {
    var defaultStyle = flattenStyle([styles.defaultSceneStyle]);
    this._sceneRefs[sceneIndex].setNativeProps({ style: defaultStyle });
  },

  _onAnimationStart: function _onAnimationStart() {
    var fromIndex = this.state.presentedIndex;
    var toIndex = this.state.presentedIndex;
    if (this.state.transitionFromIndex != null) {
      fromIndex = this.state.transitionFromIndex;
    } else if (this.state.activeGesture) {
      toIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    }
    this._setRenderSceneToHardwareTextureAndroid(fromIndex, true);
    this._setRenderSceneToHardwareTextureAndroid(toIndex, true);
    var navBar = this._navBar;
    if (navBar && navBar.onAnimationStart) {
      navBar.onAnimationStart(fromIndex, toIndex);
    }
  },

  _onAnimationEnd: function _onAnimationEnd() {
    var max = this.state.routeStack.length - 1;
    for (var index = 0; index <= max; index++) {
      this._setRenderSceneToHardwareTextureAndroid(index, false);
    }

    var navBar = this._navBar;
    if (navBar && navBar.onAnimationEnd) {
      navBar.onAnimationEnd();
    }
  },

  _setRenderSceneToHardwareTextureAndroid: function _setRenderSceneToHardwareTextureAndroid(sceneIndex, shouldRenderToHardwareTexture) {
    var viewAtIndex = this._sceneRefs[sceneIndex];
    if (viewAtIndex === null || viewAtIndex === undefined) {
      return;
    }
    viewAtIndex.setNativeProps({ renderToHardwareTextureAndroid: shouldRenderToHardwareTexture });
  },

  _handleTouchStart: function _handleTouchStart() {
    this._eligibleGestures = GESTURE_ACTIONS;
  },

  _handleMoveShouldSetPanResponder: function _handleMoveShouldSetPanResponder(e, gestureState) {
    var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
    if (!sceneConfig) {
      return false;
    }
    this._expectingGestureGrant = this._matchGestureAction(this._eligibleGestures, sceneConfig.gestures, gestureState);
    return !!this._expectingGestureGrant;
  },

  _doesGestureOverswipe: function _doesGestureOverswipe(gestureName) {
    var wouldOverswipeBack = this.state.presentedIndex <= 0 && (gestureName === 'pop' || gestureName === 'jumpBack');
    var wouldOverswipeForward = this.state.presentedIndex >= this.state.routeStack.length - 1 && gestureName === 'jumpForward';
    return wouldOverswipeForward || wouldOverswipeBack;
  },

  _deltaForGestureAction: function _deltaForGestureAction(gestureAction) {
    switch (gestureAction) {
      case 'pop':
      case 'jumpBack':
        return -1;
      case 'jumpForward':
        return 1;
      default:
        invariant(false, 'Unsupported gesture action ' + gestureAction);
        return;
    }
  },

  _handlePanResponderRelease: function _handlePanResponderRelease(e, gestureState) {
    var _this4 = this;

    var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
    var releaseGestureAction = this.state.activeGesture;
    if (!releaseGestureAction) {
      return;
    }
    var releaseGesture = sceneConfig.gestures[releaseGestureAction];
    var destIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    if (this.spring.getCurrentValue() === 0) {
      this.spring.setCurrentValue(0).setAtRest();
      this._completeTransition();
      return;
    }
    var isTravelVertical = releaseGesture.direction === 'top-to-bottom' || releaseGesture.direction === 'bottom-to-top';
    var isTravelInverted = releaseGesture.direction === 'right-to-left' || releaseGesture.direction === 'bottom-to-top';
    var velocity, gestureDistance;
    if (isTravelVertical) {
      velocity = isTravelInverted ? -gestureState.vy : gestureState.vy;
      gestureDistance = isTravelInverted ? -gestureState.dy : gestureState.dy;
    } else {
      velocity = isTravelInverted ? -gestureState.vx : gestureState.vx;
      gestureDistance = isTravelInverted ? -gestureState.dx : gestureState.dx;
    }
    var transitionVelocity = clamp(-10, velocity, 10);
    if (Math.abs(velocity) < releaseGesture.notMoving) {
      var hasGesturedEnoughToComplete = gestureDistance > releaseGesture.fullDistance * releaseGesture.stillCompletionRatio;
      transitionVelocity = hasGesturedEnoughToComplete ? releaseGesture.snapVelocity : -releaseGesture.snapVelocity;
    }
    if (transitionVelocity < 0 || this._doesGestureOverswipe(releaseGestureAction)) {
      if (this.state.transitionFromIndex == null) {
        var transitionBackToPresentedIndex = this.state.presentedIndex;

        this.state.presentedIndex = destIndex;
        this._transitionTo(transitionBackToPresentedIndex, -transitionVelocity, 1 - this.spring.getCurrentValue());
      }
    } else {
      this._emitWillFocus(this.state.routeStack[destIndex]);
      this._transitionTo(destIndex, transitionVelocity, null, function () {
        if (releaseGestureAction === 'pop') {
          _this4._cleanScenesPastIndex(destIndex);
        }
      });
    }
    this._detachGesture();
  },

  _handlePanResponderTerminate: function _handlePanResponderTerminate(e, gestureState) {
    if (this.state.activeGesture == null) {
      return;
    }
    var destIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    this._detachGesture();
    var transitionBackToPresentedIndex = this.state.presentedIndex;

    this.state.presentedIndex = destIndex;
    this._transitionTo(transitionBackToPresentedIndex, null, 1 - this.spring.getCurrentValue());
  },

  _attachGesture: function _attachGesture(gestureId) {
    this.state.activeGesture = gestureId;
    var gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
    this._enableScene(gesturingToIndex);
  },

  _detachGesture: function _detachGesture() {
    this.state.activeGesture = null;
    this.state.pendingGestureProgress = null;
    this._hideScenes();
  },

  _handlePanResponderMove: function _handlePanResponderMove(e, gestureState) {
    if (this._isMoveGestureAttached !== undefined) {
      invariant(this._expectingGestureGrant, 'Responder granted unexpectedly.');
      this._attachGesture(this._expectingGestureGrant);
      this._onAnimationStart();
      this._expectingGestureGrant = undefined;
    }

    var sceneConfig = this.state.sceneConfigStack[this.state.presentedIndex];
    if (this.state.activeGesture) {
      var gesture = sceneConfig.gestures[this.state.activeGesture];
      return this._moveAttachedGesture(gesture, gestureState);
    }
    var matchedGesture = this._matchGestureAction(GESTURE_ACTIONS, sceneConfig.gestures, gestureState);
    if (matchedGesture) {
      this._attachGesture(matchedGesture);
    }
  },

  _moveAttachedGesture: function _moveAttachedGesture(gesture, gestureState) {
    var isTravelVertical = gesture.direction === 'top-to-bottom' || gesture.direction === 'bottom-to-top';
    var isTravelInverted = gesture.direction === 'right-to-left' || gesture.direction === 'bottom-to-top';
    var distance = isTravelVertical ? gestureState.dy : gestureState.dx;
    distance = isTravelInverted ? -distance : distance;
    var gestureDetectMovement = gesture.gestureDetectMovement;
    var nextProgress = (distance - gestureDetectMovement) / (gesture.fullDistance - gestureDetectMovement);
    if (nextProgress < 0 && gesture.isDetachable) {
      var gesturingToIndex = this.state.presentedIndex + this._deltaForGestureAction(this.state.activeGesture);
      this._transitionBetween(this.state.presentedIndex, gesturingToIndex, 0);
      this._detachGesture();
      if (this.state.pendingGestureProgress != null) {
        this.spring.setCurrentValue(0);
      }
      return;
    }
    if (gesture.overswipe && this._doesGestureOverswipe(this.state.activeGesture)) {
      var frictionConstant = gesture.overswipe.frictionConstant;
      var frictionByDistance = gesture.overswipe.frictionByDistance;
      var frictionRatio = 1 / (frictionConstant + Math.abs(nextProgress) * frictionByDistance);
      nextProgress *= frictionRatio;
    }
    nextProgress = clamp(0, nextProgress, 1);
    if (this.state.transitionFromIndex != null) {
      this.state.pendingGestureProgress = nextProgress;
    } else if (this.state.pendingGestureProgress) {
      this.spring.setEndValue(nextProgress);
    } else {
      this.spring.setCurrentValue(nextProgress);
    }
  },

  _matchGestureAction: function _matchGestureAction(eligibleGestures, gestures, gestureState) {
    var _this5 = this;

    if (!gestures || !eligibleGestures || !eligibleGestures.some) {
      return null;
    }
    var matchedGesture = null;
    eligibleGestures.some(function (gestureName, gestureIndex) {
      var gesture = gestures[gestureName];
      if (!gesture) {
        return;
      }
      if (gesture.overswipe == null && _this5._doesGestureOverswipe(gestureName)) {
        return false;
      }
      var isTravelVertical = gesture.direction === 'top-to-bottom' || gesture.direction === 'bottom-to-top';
      var isTravelInverted = gesture.direction === 'right-to-left' || gesture.direction === 'bottom-to-top';
      var startedLoc = isTravelVertical ? gestureState.y0 : gestureState.x0;
      var currentLoc = isTravelVertical ? gestureState.moveY : gestureState.moveX;
      var travelDist = isTravelVertical ? gestureState.dy : gestureState.dx;
      var oppositeAxisTravelDist = isTravelVertical ? gestureState.dx : gestureState.dy;
      var edgeHitWidth = gesture.edgeHitWidth;
      if (isTravelInverted) {
        startedLoc = -startedLoc;
        currentLoc = -currentLoc;
        travelDist = -travelDist;
        oppositeAxisTravelDist = -oppositeAxisTravelDist;
        edgeHitWidth = isTravelVertical ? -(SCREEN_HEIGHT - edgeHitWidth) : -(SCREEN_WIDTH - edgeHitWidth);
      }
      if (startedLoc === 0) {
        startedLoc = currentLoc;
      }
      var moveStartedInRegion = gesture.edgeHitWidth == null || startedLoc < edgeHitWidth;
      if (!moveStartedInRegion) {
        return false;
      }
      var moveTravelledFarEnough = travelDist >= gesture.gestureDetectMovement;
      if (!moveTravelledFarEnough) {
        return false;
      }
      var directionIsCorrect = Math.abs(travelDist) > Math.abs(oppositeAxisTravelDist) * gesture.directionRatio;
      if (directionIsCorrect) {
        matchedGesture = gestureName;
        return true;
      } else {
        _this5._eligibleGestures = _this5._eligibleGestures.slice().splice(gestureIndex, 1);
      }
    });
    return matchedGesture || null;
  },

  _transitionSceneStyle: function _transitionSceneStyle(fromIndex, toIndex, progress, index) {
    var viewAtIndex = this._sceneRefs[index];
    if (viewAtIndex === null || viewAtIndex === undefined) {
      return;
    }

    var sceneConfigIndex = fromIndex < toIndex ? toIndex : fromIndex;
    var sceneConfig = this.state.sceneConfigStack[sceneConfigIndex];

    if (!sceneConfig) {
      sceneConfig = this.state.sceneConfigStack[sceneConfigIndex - 1];
    }
    var styleToUse = {};
    var useFn = index < fromIndex || index < toIndex ? sceneConfig.animationInterpolators.out : sceneConfig.animationInterpolators.into;
    var directionAdjustedProgress = fromIndex < toIndex ? progress : 1 - progress;
    var didChange = useFn(styleToUse, directionAdjustedProgress);
    if (didChange) {
      viewAtIndex.setNativeProps({ style: styleToUse });
    }
  },

  _transitionBetween: function _transitionBetween(fromIndex, toIndex, progress) {
    this._transitionSceneStyle(fromIndex, toIndex, progress, fromIndex);
    this._transitionSceneStyle(fromIndex, toIndex, progress, toIndex);
    var navBar = this._navBar;
    if (navBar && navBar.updateProgress && toIndex >= 0 && fromIndex >= 0) {
      navBar.updateProgress(progress, fromIndex, toIndex);
    }
  },

  _handleResponderTerminationRequest: function _handleResponderTerminationRequest() {
    return false;
  },

  _getDestIndexWithinBounds: function _getDestIndexWithinBounds(n) {
    var currentIndex = this.state.presentedIndex;
    var destIndex = currentIndex + n;
    invariant(destIndex >= 0, 'Cannot jump before the first route.');
    var maxIndex = this.state.routeStack.length - 1;
    invariant(maxIndex >= destIndex, 'Cannot jump past the last route.');
    return destIndex;
  },

  _jumpN: function _jumpN(n) {
    var destIndex = this._getDestIndexWithinBounds(n);
    this._enableScene(destIndex);
    this._emitWillFocus(this.state.routeStack[destIndex]);
    this._transitionTo(destIndex);
  },

  jumpTo: function jumpTo(route) {
    var destIndex = this.state.routeStack.indexOf(route);
    invariant(destIndex !== -1, 'Cannot jump to route that is not in the route stack');
    this._jumpN(destIndex - this.state.presentedIndex);
  },

  jumpForward: function jumpForward() {
    this._jumpN(1);
  },

  jumpBack: function jumpBack() {
    this._jumpN(-1);
  },

  push: function push(route) {
    var _this6 = this;

    invariant(!!route, 'Must supply route to push');
    var activeLength = this.state.presentedIndex + 1;
    var activeStack = this.state.routeStack.slice(0, activeLength);
    var activeAnimationConfigStack = this.state.sceneConfigStack.slice(0, activeLength);
    var nextStack = activeStack.concat([route]);
    var destIndex = nextStack.length - 1;
    var nextSceneConfig = this.props.configureScene(route, nextStack);
    var nextAnimationConfigStack = activeAnimationConfigStack.concat([nextSceneConfig]);
    this._emitWillFocus(nextStack[destIndex]);
    this.setState({
      routeStack: nextStack,
      sceneConfigStack: nextAnimationConfigStack
    }, function () {
      _this6._enableScene(destIndex);
      _this6._transitionTo(destIndex, nextSceneConfig.defaultTransitionVelocity);
    });
  },

  popN: function popN(n) {
    var _this7 = this;

    invariant(typeof n === 'number', 'Must supply a number to popN');
    n = parseInt(n, 10);
    if (n <= 0 || this.state.presentedIndex - n < 0) {
      return;
    }
    var popIndex = this.state.presentedIndex - n;
    var presentedRoute = this.state.routeStack[this.state.presentedIndex];
    var popSceneConfig = this.props.configureScene(presentedRoute);
    this._enableScene(popIndex);

    this._clearTransformations(popIndex);
    this._emitWillFocus(this.state.routeStack[popIndex]);
    this._transitionTo(popIndex, popSceneConfig.defaultTransitionVelocity, null, function () {
      _this7._cleanScenesPastIndex(popIndex);
    });
  },

  pop: function pop() {
    if (this.state.transitionQueue.length) {
      return;
    }

    this.popN(1);
  },

  replaceAtIndex: function replaceAtIndex(route, index, cb) {
    var _this8 = this;

    invariant(!!route, 'Must supply route to replace');
    if (index < 0) {
      index += this.state.routeStack.length;
    }

    if (this.state.routeStack.length <= index) {
      return;
    }

    var nextRouteStack = this.state.routeStack.slice();
    var nextAnimationModeStack = this.state.sceneConfigStack.slice();
    nextRouteStack[index] = route;
    nextAnimationModeStack[index] = this.props.configureScene(route, nextRouteStack);

    if (index === this.state.presentedIndex) {
      this._emitWillFocus(route);
    }
    this.setState({
      routeStack: nextRouteStack,
      sceneConfigStack: nextAnimationModeStack
    }, function () {
      if (index === _this8.state.presentedIndex) {
        _this8._emitDidFocus(route);
      }
      cb && cb();
    });
  },

  replace: function replace(route) {
    this.replaceAtIndex(route, this.state.presentedIndex);
  },

  replacePrevious: function replacePrevious(route) {
    this.replaceAtIndex(route, this.state.presentedIndex - 1);
  },

  popToTop: function popToTop() {
    this.popToRoute(this.state.routeStack[0]);
  },

  popToRoute: function popToRoute(route) {
    var indexOfRoute = this.state.routeStack.indexOf(route);
    invariant(indexOfRoute !== -1, 'Calling popToRoute for a route that doesn\'t exist!');
    var numToPop = this.state.presentedIndex - indexOfRoute;
    this.popN(numToPop);
  },

  replacePreviousAndPop: function replacePreviousAndPop(route) {
    if (this.state.routeStack.length < 2) {
      return;
    }
    this.replacePrevious(route);
    this.pop();
  },

  resetTo: function resetTo(route) {
    var _this9 = this;

    invariant(!!route, 'Must supply route to push');
    this.replaceAtIndex(route, 0, function () {
      _this9.popN(_this9.state.presentedIndex);
    });
  },

  getCurrentRoutes: function getCurrentRoutes() {
    return this.state.routeStack.slice();
  },

  _cleanScenesPastIndex: function _cleanScenesPastIndex(index) {
    var newStackLength = index + 1;

    if (newStackLength < this.state.routeStack.length) {
      this.setState({
        sceneConfigStack: this.state.sceneConfigStack.slice(0, newStackLength),
        routeStack: this.state.routeStack.slice(0, newStackLength)
      });
    }
  },

  _renderScene: function _renderScene(route, i) {
    var _this10 = this;

    var disabledSceneStyle = null;
    var disabledScenePointerEvents = 'auto';
    if (i !== this.state.presentedIndex) {
      disabledSceneStyle = styles.disabledScene;
      disabledScenePointerEvents = 'none';
    }
    return React.createElement(
      View,
      {
        collapsable: false,
        key: 'scene_' + getRouteID(route),
        ref: function ref(scene) {
          _this10._sceneRefs[i] = scene;
        },
        onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture() {
          return _this10.state.transitionFromIndex != null;
        },
        pointerEvents: disabledScenePointerEvents,
        style: [styles.baseScene, this.props.sceneStyle, disabledSceneStyle], __source: {
          fileName: _jsxFileName,
          lineNumber: 1274
        }
      },
      this.props.renderScene(route, this)
    );
  },

  _renderNavigationBar: function _renderNavigationBar() {
    var _this11 = this;

    var navigationBar = this.props.navigationBar;

    if (!navigationBar) {
      return null;
    }
    return React.cloneElement(navigationBar, {
      ref: function ref(navBar) {
        _this11._navBar = navBar;
        if (navigationBar && typeof navigationBar.ref === 'function') {
          navigationBar.ref(navBar);
        }
      },
      navigator: this._navigationBarNavigator,
      navState: this.state
    });
  },

  _tvEventHandler: TVEventHandler,

  _enableTVEventHandler: function _enableTVEventHandler() {
    this._tvEventHandler = new TVEventHandler();
    this._tvEventHandler.enable(this, function (cmp, evt) {
      if (evt && evt.eventType === 'menu') {
        cmp.pop();
      }
    });
  },

  _disableTVEventHandler: function _disableTVEventHandler() {
    if (this._tvEventHandler) {
      this._tvEventHandler.disable();
      delete this._tvEventHandler;
    }
  },

  render: function render() {
    var _this12 = this;

    var newRenderedSceneMap = new Map();
    var scenes = this.state.routeStack.map(function (route, index) {
      var renderedScene;
      if (_this12._renderedSceneMap.has(route) && index !== _this12.state.presentedIndex) {
        renderedScene = _this12._renderedSceneMap.get(route);
      } else {
        renderedScene = _this12._renderScene(route, index);
      }
      newRenderedSceneMap.set(route, renderedScene);
      return renderedScene;
    });
    this._renderedSceneMap = newRenderedSceneMap;
    return React.createElement(
      View,
      { style: [styles.container, this.props.style], __source: {
          fileName: _jsxFileName,
          lineNumber: 1343
        }
      },
      React.createElement(
        View,
        babelHelpers.extends({
          style: styles.transitioner
        }, this.panGesture.panHandlers, {
          onTouchStart: this._handleTouchStart,
          onResponderTerminationRequest: this._handleResponderTerminationRequest, __source: {
            fileName: _jsxFileName,
            lineNumber: 1344
          }
        }),
        scenes
      ),
      this._renderNavigationBar()
    );
  },

  _getNavigationContext: function _getNavigationContext() {
    if (!this._navigationContext) {
      this._navigationContext = new NavigationContext();
    }
    return this._navigationContext;
  }
});

module.exports = Navigator;
}, 311, null, "Navigator");
__d(/* InteractionMixin */function(global, require, module, exports) {
'use strict';

var InteractionManager = require(258                 ); // 258 = InteractionManager

var InteractionMixin = {
  componentWillUnmount: function componentWillUnmount() {
    while (this._interactionMixinHandles.length) {
      InteractionManager.clearInteractionHandle(this._interactionMixinHandles.pop());
    }
  },

  _interactionMixinHandles: [],

  createInteractionHandle: function createInteractionHandle() {
    var handle = InteractionManager.createInteractionHandle();
    this._interactionMixinHandles.push(handle);
    return handle;
  },

  clearInteractionHandle: function clearInteractionHandle(clearHandle) {
    InteractionManager.clearInteractionHandle(clearHandle);
    this._interactionMixinHandles = this._interactionMixinHandles.filter(function (handle) {
      return handle !== clearHandle;
    });
  },

  runAfterInteractions: function runAfterInteractions(callback) {
    InteractionManager.runAfterInteractions(callback);
  }
};

module.exports = InteractionMixin;
}, 312, null, "InteractionMixin");
__d(/* NavigationContext */function(global, require, module, exports) {
'use strict';

var NavigationEvent = require(314              ); // 314 = NavigationEvent
var NavigationEventEmitter = require(315                     ); // 315 = NavigationEventEmitter
var NavigationTreeNode = require(316                 ); // 316 = NavigationTreeNode

var Set = require(224  ); // 224 = Set

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var AT_TARGET = NavigationEvent.AT_TARGET,
    BUBBLING_PHASE = NavigationEvent.BUBBLING_PHASE,
    CAPTURING_PHASE = NavigationEvent.CAPTURING_PHASE;

var LegacyEventTypes = new Set(['willfocus', 'didfocus']);

var NavigationContext = function () {
  function NavigationContext() {
    babelHelpers.classCallCheck(this, NavigationContext);

    this._bubbleEventEmitter = new NavigationEventEmitter(this);
    this._captureEventEmitter = new NavigationEventEmitter(this);
    this._currentRoute = null;

    this.__node = new NavigationTreeNode(this);

    this._emitCounter = 0;
    this._emitQueue = [];

    this.addListener('willfocus', this._onFocus);
    this.addListener('didfocus', this._onFocus);
  }

  babelHelpers.createClass(NavigationContext, [{
    key: 'appendChild',
    value: function appendChild(childContext) {
      this.__node.appendChild(childContext.__node);
    }
  }, {
    key: 'addListener',
    value: function addListener(eventType, listener, useCapture) {
      if (LegacyEventTypes.has(eventType)) {
        useCapture = false;
      }

      var emitter = useCapture ? this._captureEventEmitter : this._bubbleEventEmitter;

      if (emitter) {
        return emitter.addListener(eventType, listener, this);
      } else {
        return { remove: emptyFunction };
      }
    }
  }, {
    key: 'emit',
    value: function emit(eventType, data, didEmitCallback) {
      var _this = this;

      if (this._emitCounter > 0) {
        var args = Array.prototype.slice.call(arguments);
        this._emitQueue.push(args);
        return;
      }

      this._emitCounter++;

      if (LegacyEventTypes.has(eventType)) {
        this.__emit(eventType, data, null, {
          defaultPrevented: false,
          eventPhase: AT_TARGET,
          propagationStopped: true,
          target: this
        });
      } else {
        var targets = [this];
        var parentTarget = this.parent;
        while (parentTarget) {
          targets.unshift(parentTarget);
          parentTarget = parentTarget.parent;
        }

        var propagationStopped = false;
        var defaultPrevented = false;
        var callback = function callback(event) {
          propagationStopped = propagationStopped || event.isPropagationStopped();
          defaultPrevented = defaultPrevented || event.defaultPrevented;
        };

        targets.some(function (currentTarget) {
          if (propagationStopped) {
            return true;
          }

          var extraInfo = {
            defaultPrevented: defaultPrevented,
            eventPhase: CAPTURING_PHASE,
            propagationStopped: propagationStopped,
            target: _this
          };

          currentTarget.__emit(eventType, data, callback, extraInfo);
        }, this);

        targets.reverse().some(function (currentTarget) {
          if (propagationStopped) {
            return true;
          }
          var extraInfo = {
            defaultPrevented: defaultPrevented,
            eventPhase: BUBBLING_PHASE,
            propagationStopped: propagationStopped,
            target: _this
          };
          currentTarget.__emit(eventType, data, callback, extraInfo);
        }, this);
      }

      if (didEmitCallback) {
        var event = NavigationEvent.pool(eventType, this, data);
        propagationStopped && event.stopPropagation();
        defaultPrevented && event.preventDefault();
        didEmitCallback.call(this, event);
        event.dispose();
      }

      this._emitCounter--;
      while (this._emitQueue.length) {
        var args = this._emitQueue.shift();
        this.emit.apply(this, args);
      }
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      this._bubbleEventEmitter && this._bubbleEventEmitter.removeAllListeners();
      this._captureEventEmitter && this._captureEventEmitter.removeAllListeners();
      this._bubbleEventEmitter = null;
      this._captureEventEmitter = null;
      this._currentRoute = null;
    }
  }, {
    key: '__emit',
    value: function __emit(eventType, data, didEmitCallback, extraInfo) {
      var emitter;
      switch (extraInfo.eventPhase) {
        case CAPTURING_PHASE:
          emitter = this._captureEventEmitter;
          break;

        case AT_TARGET:
          emitter = this._bubbleEventEmitter;
          break;

        case BUBBLING_PHASE:
          emitter = this._bubbleEventEmitter;
          break;

        default:
          invariant(false, 'invalid event phase %s', extraInfo.eventPhase);
      }

      if (extraInfo.target === this) {
        extraInfo.eventPhase = AT_TARGET;
      }

      if (emitter) {
        emitter.emit(eventType, data, didEmitCallback, extraInfo);
      }
    }
  }, {
    key: '_onFocus',
    value: function _onFocus(event) {
      invariant(event.data && event.data.hasOwnProperty('route'), 'event type "%s" should provide route', event.type);

      this._currentRoute = event.data.route;
    }
  }, {
    key: 'parent',
    get: function get() {
      var parent = this.__node.getParent();
      return parent ? parent.getValue() : null;
    }
  }, {
    key: 'top',
    get: function get() {
      var result = null;
      var parentNode = this.__node.getParent();
      while (parentNode) {
        result = parentNode.getValue();
        parentNode = parentNode.getParent();
      }
      return result;
    }
  }, {
    key: 'currentRoute',
    get: function get() {
      return this._currentRoute;
    }
  }]);
  return NavigationContext;
}();

module.exports = NavigationContext;
}, 313, null, "NavigationContext");
__d(/* NavigationEvent */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var NavigationEventPool = function () {
  function NavigationEventPool() {
    babelHelpers.classCallCheck(this, NavigationEventPool);

    this._list = [];
  }

  babelHelpers.createClass(NavigationEventPool, [{
    key: 'get',
    value: function get(type, currentTarget, data) {
      var event = void 0;
      if (this._list.length > 0) {
        event = this._list.pop();
        event.constructor.call(event, type, currentTarget, data);
      } else {
        event = new NavigationEvent(type, currentTarget, data);
      }
      return event;
    }
  }, {
    key: 'put',
    value: function put(event) {
      this._list.push(event);
    }
  }]);
  return NavigationEventPool;
}();

var _navigationEventPool = new NavigationEventPool();

var NavigationEvent = function () {
  babelHelpers.createClass(NavigationEvent, null, [{
    key: 'pool',
    value: function pool(type, currentTarget, data) {
      return _navigationEventPool.get(type, currentTarget, data);
    }
  }]);

  function NavigationEvent(type, currentTarget, data) {
    babelHelpers.classCallCheck(this, NavigationEvent);

    this.target = currentTarget;
    this.eventPhase = NavigationEvent.NONE;

    this._type = type;
    this._currentTarget = currentTarget;
    this._data = data;
    this._defaultPrevented = false;
    this._disposed = false;
    this._propagationStopped = false;
  }

  babelHelpers.createClass(NavigationEvent, [{
    key: 'preventDefault',
    value: function preventDefault() {
      this._defaultPrevented = true;
    }
  }, {
    key: 'stopPropagation',
    value: function stopPropagation() {
      this._propagationStopped = true;
    }
  }, {
    key: 'stop',
    value: function stop() {
      this.preventDefault();
      this.stopPropagation();
    }
  }, {
    key: 'isPropagationStopped',
    value: function isPropagationStopped() {
      return this._propagationStopped;
    }
  }, {
    key: 'dispose',
    value: function dispose() {
      invariant(!this._disposed, 'NavigationEvent is already disposed');
      this._disposed = true;

      this.target = null;
      this.eventPhase = NavigationEvent.NONE;
      this._type = '';
      this._currentTarget = null;
      this._data = null;
      this._defaultPrevented = false;

      _navigationEventPool.put(this);
    }
  }, {
    key: 'type',
    get: function get() {
      return this._type;
    }
  }, {
    key: 'currentTarget',
    get: function get() {
      return this._currentTarget;
    }
  }, {
    key: 'data',
    get: function get() {
      return this._data;
    }
  }, {
    key: 'defaultPrevented',
    get: function get() {
      return this._defaultPrevented;
    }
  }]);
  return NavigationEvent;
}();

NavigationEvent.NONE = 0;

NavigationEvent.CAPTURING_PHASE = 1;

NavigationEvent.AT_TARGET = 2;

NavigationEvent.BUBBLING_PHASE = 3;

module.exports = NavigationEvent;
}, 314, null, "NavigationEvent");
__d(/* NavigationEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(80            ); // 80 = EventEmitter
var NavigationEvent = require(314              ); // 314 = NavigationEvent

var NavigationEventEmitter = function (_EventEmitter) {
  babelHelpers.inherits(NavigationEventEmitter, _EventEmitter);

  function NavigationEventEmitter(target) {
    babelHelpers.classCallCheck(this, NavigationEventEmitter);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationEventEmitter.__proto__ || Object.getPrototypeOf(NavigationEventEmitter)).call(this));

    _this._emitting = false;
    _this._emitQueue = [];
    _this._target = target;
    return _this;
  }

  babelHelpers.createClass(NavigationEventEmitter, [{
    key: 'emit',
    value: function emit(eventType, data, didEmitCallback, extraInfo) {
      if (this._emitting) {
        var args = Array.prototype.slice.call(arguments);
        this._emitQueue.push(args);
        return;
      }

      this._emitting = true;

      var event = NavigationEvent.pool(eventType, this._target, data);

      if (extraInfo) {
        if (extraInfo.target) {
          event.target = extraInfo.target;
        }

        if (extraInfo.eventPhase) {
          event.eventPhase = extraInfo.eventPhase;
        }

        if (extraInfo.defaultPrevented) {
          event.preventDefault();
        }

        if (extraInfo.propagationStopped) {
          event.stopPropagation();
        }
      }

      babelHelpers.get(NavigationEventEmitter.prototype.__proto__ || Object.getPrototypeOf(NavigationEventEmitter.prototype), 'emit', this).call(this, String(eventType), event);

      if (typeof didEmitCallback === 'function') {
        didEmitCallback.call(this._target, event);
      }
      event.dispose();

      this._emitting = false;

      while (this._emitQueue.length) {
        var args = this._emitQueue.shift();
        this.emit.apply(this, args);
      }
    }
  }]);
  return NavigationEventEmitter;
}(EventEmitter);

module.exports = NavigationEventEmitter;
}, 315, null, "NavigationEventEmitter");
__d(/* NavigationTreeNode */function(global, require, module, exports) {

'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var immutable = require(317        ); // 317 = immutable

var List = immutable.List;

var NavigationTreeNode = function () {
  function NavigationTreeNode(value) {
    babelHelpers.classCallCheck(this, NavigationTreeNode);

    this.__parent = null;
    this._children = new List();
    this._value = value;
  }

  babelHelpers.createClass(NavigationTreeNode, [{
    key: 'getValue',
    value: function getValue() {
      return this._value;
    }
  }, {
    key: 'getParent',
    value: function getParent() {
      return this.__parent;
    }
  }, {
    key: 'getChildrenCount',
    value: function getChildrenCount() {
      return this._children.size;
    }
  }, {
    key: 'getChildAt',
    value: function getChildAt(index) {
      return index > -1 && index < this._children.size ? this._children.get(index) : null;
    }
  }, {
    key: 'appendChild',
    value: function appendChild(child) {
      if (child.__parent) {
        child.__parent.removeChild(child);
      }
      child.__parent = this;
      this._children = this._children.push(child);
    }
  }, {
    key: 'removeChild',
    value: function removeChild(child) {
      var index = this._children.indexOf(child);

      invariant(index > -1, 'The node to be removed is not a child of this node.');

      child.__parent = null;

      this._children = this._children.splice(index, 1);
    }
  }, {
    key: 'indexOf',
    value: function indexOf(child) {
      return this._children.indexOf(child);
    }
  }, {
    key: 'forEach',
    value: function forEach(callback, context) {
      this._children.forEach(callback, context);
    }
  }, {
    key: 'map',
    value: function map(callback, context) {
      return this._children.map(callback, context).toJS();
    }
  }, {
    key: 'some',
    value: function some(callback, context) {
      return this._children.some(callback, context);
    }
  }]);
  return NavigationTreeNode;
}();

module.exports = NavigationTreeNode;
}, 316, null, "NavigationTreeNode");
__d(/* immutable/dist/immutable.js */function(global, require, module, exports) {

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Immutable = factory();
})(this, function () {
  'use strict';
  var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  function Iterable(value) {
    return isIterable(value) ? value : Seq(value);
  }

  createClass(KeyedIterable, Iterable);
  function KeyedIterable(value) {
    return isKeyed(value) ? value : KeyedSeq(value);
  }

  createClass(IndexedIterable, Iterable);
  function IndexedIterable(value) {
    return isIndexed(value) ? value : IndexedSeq(value);
  }

  createClass(SetIterable, Iterable);
  function SetIterable(value) {
    return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
  }

  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;

  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var DELETE = 'delete';

  var SHIFT = 5;
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  var NOT_SET = {};

  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  function OwnerID() {}

  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    if (typeof index !== 'number') {
      var uint32Index = index >>> 0;
      if ('' + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === undefined ? index : Math.min(size, index);
  }

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

  function Iterator(next) {
    this.next = next;
  }

  Iterator.prototype.toString = function () {
    return '[Iterator]';
  };

  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;

  Iterator.prototype.inspect = Iterator.prototype.toSource = function () {
    return this.toString();
  };
  Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };

  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value: value, done: false
    };
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
  function Seq(value) {
    return value === null || value === undefined ? emptySequence() : isIterable(value) ? value.toSeq() : seqFromValue(value);
  }

  Seq.of = function () {
    return Seq(arguments);
  };

  Seq.prototype.toSeq = function () {
    return this;
  };

  Seq.prototype.toString = function () {
    return this.__toString('Seq {', '}');
  };

  Seq.prototype.cacheResult = function () {
    if (!this._cache && this.__iterateUncached) {
      this._cache = this.entrySeq().toArray();
      this.size = this._cache.length;
    }
    return this;
  };

  Seq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, true);
  };

  Seq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, true);
  };

  createClass(KeyedSeq, Seq);
  function KeyedSeq(value) {
    return value === null || value === undefined ? emptySequence().toKeyedSeq() : isIterable(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : keyedSeqFromValue(value);
  }

  KeyedSeq.prototype.toKeyedSeq = function () {
    return this;
  };

  createClass(IndexedSeq, Seq);
  function IndexedSeq(value) {
    return value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
  }

  IndexedSeq.of = function () {
    return IndexedSeq(arguments);
  };

  IndexedSeq.prototype.toIndexedSeq = function () {
    return this;
  };

  IndexedSeq.prototype.toString = function () {
    return this.__toString('Seq [', ']');
  };

  IndexedSeq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, false);
  };

  IndexedSeq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, false);
  };

  createClass(SetSeq, Seq);
  function SetSeq(value) {
    return (value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value).toSetSeq();
  }

  SetSeq.of = function () {
    return SetSeq(arguments);
  };

  SetSeq.prototype.toSetSeq = function () {
    return this;
  };

  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;

  createClass(ArraySeq, IndexedSeq);
  function ArraySeq(array) {
    this._array = array;
    this.size = array.length;
  }

  ArraySeq.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
  };

  ArraySeq.prototype.__iterate = function (fn, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ArraySeq.prototype.__iterator = function (type, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    var ii = 0;
    return new Iterator(function () {
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);
    });
  };

  createClass(ObjectSeq, KeyedSeq);
  function ObjectSeq(object) {
    var keys = Object.keys(object);
    this._object = object;
    this._keys = keys;
    this.size = keys.length;
  }

  ObjectSeq.prototype.get = function (key, notSetValue) {
    if (notSetValue !== undefined && !this.has(key)) {
      return notSetValue;
    }
    return this._object[key];
  };

  ObjectSeq.prototype.has = function (key) {
    return this._object.hasOwnProperty(key);
  };

  ObjectSeq.prototype.__iterate = function (fn, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      var key = keys[reverse ? maxIndex - ii : ii];
      if (fn(object[key], key, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ObjectSeq.prototype.__iterator = function (type, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    var ii = 0;
    return new Iterator(function () {
      var key = keys[reverse ? maxIndex - ii : ii];
      return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
    });
  };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(IterableSeq, IndexedSeq);
  function IterableSeq(iterable) {
    this._iterable = iterable;
    this.size = iterable.length || iterable.size;
  }

  IterableSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    var iterations = 0;
    if (isIterator(iterator)) {
      var step;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
    }
    return iterations;
  };

  IterableSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    if (!isIterator(iterator)) {
      return new Iterator(iteratorDone);
    }
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value);
    });
  };

  createClass(IteratorSeq, IndexedSeq);
  function IteratorSeq(iterator) {
    this._iterator = iterator;
    this._iteratorCache = [];
  }

  IteratorSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    while (iterations < cache.length) {
      if (fn(cache[iterations], iterations++, this) === false) {
        return iterations;
      }
    }
    var step;
    while (!(step = iterator.next()).done) {
      var val = step.value;
      cache[iterations] = val;
      if (fn(val, iterations++, this) === false) {
        break;
      }
    }
    return iterations;
  };

  IteratorSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    return new Iterator(function () {
      if (iterations >= cache.length) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        cache[iterations] = step.value;
      }
      return iteratorValue(type, iterations, cache[iterations++]);
    });
  };

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq = Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() : isIterator(value) ? new IteratorSeq(value).fromEntrySeq() : hasIterator(value) ? new IterableSeq(value).fromEntrySeq() : typeof value === 'object' ? new ObjectSeq(value) : undefined;
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of [k, v] entries, ' + 'or keyed object: ' + value);
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values: ' + value);
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) || typeof value === 'object' && new ObjectSeq(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values, or keyed object: ' + value);
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return isArrayLike(value) ? new ArraySeq(value) : isIterator(value) ? new IteratorSeq(value) : hasIterator(value) ? new IterableSeq(value) : undefined;
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new Iterator(function () {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  function fromJS(json, converter) {
    return converter ? fromJSWith(converter, json, '', { '': json }) : fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  function is(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' && typeof valueB.equals === 'function' && valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (!isIterable(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function (v, k) {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function (v, k) {
      if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Repeat, IndexedSeq);

  function Repeat(value, times) {
    if (!(this instanceof Repeat)) {
      return new Repeat(value, times);
    }
    this._value = value;
    this.size = times === undefined ? Infinity : Math.max(0, times);
    if (this.size === 0) {
      if (EMPTY_REPEAT) {
        return EMPTY_REPEAT;
      }
      EMPTY_REPEAT = this;
    }
  }

  Repeat.prototype.toString = function () {
    if (this.size === 0) {
      return 'Repeat []';
    }
    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
  };

  Repeat.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._value : notSetValue;
  };

  Repeat.prototype.includes = function (searchValue) {
    return is(this._value, searchValue);
  };

  Repeat.prototype.slice = function (begin, end) {
    var size = this.size;
    return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
  };

  Repeat.prototype.reverse = function () {
    return this;
  };

  Repeat.prototype.indexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return 0;
    }
    return -1;
  };

  Repeat.prototype.lastIndexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return this.size;
    }
    return -1;
  };

  Repeat.prototype.__iterate = function (fn, reverse) {
    for (var ii = 0; ii < this.size; ii++) {
      if (fn(this._value, ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  Repeat.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    var ii = 0;
    return new Iterator(function () {
      return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();
    });
  };

  Repeat.prototype.equals = function (other) {
    return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);
  };

  var EMPTY_REPEAT;

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  createClass(Range, IndexedSeq);

  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      return new Range(start, end, step);
    }
    invariant(step !== 0, 'Cannot step a Range by 0');
    start = start || 0;
    if (end === undefined) {
      end = Infinity;
    }
    step = step === undefined ? 1 : Math.abs(step);
    if (end < start) {
      step = -step;
    }
    this._start = start;
    this._end = end;
    this._step = step;
    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
    if (this.size === 0) {
      if (EMPTY_RANGE) {
        return EMPTY_RANGE;
      }
      EMPTY_RANGE = this;
    }
  }

  Range.prototype.toString = function () {
    if (this.size === 0) {
      return 'Range []';
    }
    return 'Range [ ' + this._start + '...' + this._end + (this._step > 1 ? ' by ' + this._step : '') + ' ]';
  };

  Range.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
  };

  Range.prototype.includes = function (searchValue) {
    var possibleIndex = (searchValue - this._start) / this._step;
    return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
  };

  Range.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    begin = resolveBegin(begin, this.size);
    end = resolveEnd(end, this.size);
    if (end <= begin) {
      return new Range(0, 0);
    }
    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
  };

  Range.prototype.indexOf = function (searchValue) {
    var offsetValue = searchValue - this._start;
    if (offsetValue % this._step === 0) {
      var index = offsetValue / this._step;
      if (index >= 0 && index < this.size) {
        return index;
      }
    }
    return -1;
  };

  Range.prototype.lastIndexOf = function (searchValue) {
    return this.indexOf(searchValue);
  };

  Range.prototype.__iterate = function (fn, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(value, ii, this) === false) {
        return ii + 1;
      }
      value += reverse ? -step : step;
    }
    return ii;
  };

  Range.prototype.__iterator = function (type, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    var ii = 0;
    return new Iterator(function () {
      var v = value;
      value += reverse ? -step : step;
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
    });
  };

  Range.prototype.equals = function (other) {
    return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
  };

  var EMPTY_RANGE;

  createClass(Collection, Iterable);
  function Collection() {
    throw TypeError('Abstract');
  }

  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}

  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  var imul = typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {
    a = a | 0;
    b = b | 0;
    var c = a & 0xffff;
    var d = b & 0xffff;

    return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
  };

  function smi(i32) {
    return i32 >>> 1 & 0x40000000 | i32 & 0xBFFFFFFF;
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o;
    if (type === 'number') {
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    if (type === 'object') {
      return hashJSObj(o);
    }
    if (typeof o.toString === 'function') {
      return hashString(o.toString());
    }
    throw new Error('Value type ' + type + ' cannot be hashed.');
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  function hashString(string) {
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      obj.propertyIsEnumerable = function () {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  var isExtensible = Object.isExtensible;

  var canDefineProperty = function () {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          return node.uniqueID;
        case 9:
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function assertNotInfinite(size) {
    invariant(size !== Infinity, 'Cannot perform this action with an infinite size.');
  }

  createClass(Map, KeyedCollection);

  function Map(value) {
    return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  Map.prototype.toString = function () {
    return this.__toString('Map {', '}');
  };

  Map.prototype.get = function (k, notSetValue) {
    return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;
  };

  Map.prototype.set = function (k, v) {
    return updateMap(this, k, v);
  };

  Map.prototype.setIn = function (keyPath, v) {
    return this.updateIn(keyPath, NOT_SET, function () {
      return v;
    });
  };

  Map.prototype.remove = function (k) {
    return updateMap(this, k, NOT_SET);
  };

  Map.prototype.deleteIn = function (keyPath) {
    return this.updateIn(keyPath, function () {
      return NOT_SET;
    });
  };

  Map.prototype.update = function (k, notSetValue, updater) {
    return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);
  };

  Map.prototype.updateIn = function (keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = undefined;
    }
    var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);
    return updatedValue === NOT_SET ? undefined : updatedValue;
  };

  Map.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._root = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyMap();
  };

  Map.prototype.merge = function () {
    return mergeIntoMapWith(this, undefined, arguments);
  };

  Map.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, merger, iters);
  };

  Map.prototype.mergeIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.merge === 'function' ? m.merge.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.mergeDeep = function () {
    return mergeIntoMapWith(this, deepMerger, arguments);
  };

  Map.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, deepMergerWith(merger), iters);
  };

  Map.prototype.mergeDeepIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.mergeDeep === 'function' ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.sort = function (comparator) {
    return OrderedMap(sortFactory(this, comparator));
  };

  Map.prototype.sortBy = function (mapper, comparator) {
    return OrderedMap(sortFactory(this, comparator, mapper));
  };

  Map.prototype.withMutations = function (fn) {
    var mutable = this.asMutable();
    fn(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  };

  Map.prototype.asMutable = function () {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
  };

  Map.prototype.asImmutable = function () {
    return this.__ensureOwner();
  };

  Map.prototype.wasAltered = function () {
    return this.__altered;
  };

  Map.prototype.__iterator = function (type, reverse) {
    return new MapIterator(this, type, reverse);
  };

  Map.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    this._root && this._root.iterate(function (entry) {
      iterations++;
      return fn(entry[1], entry[0], this$0);
    }, reverse);
    return iterations;
  };

  Map.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeMap(this.size, this._root, ownerID, this.__hash);
  };

  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;

  function ArrayMapNode(ownerID, entries) {
    this.ownerID = ownerID;
    this.entries = entries;
  }

  ArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  ArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && entries.length === 1) {
      return;
    }

    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
      return createNodes(ownerID, entries, key, value);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new ArrayMapNode(ownerID, newEntries);
  };

  function BitmapIndexedNode(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  }

  BitmapIndexedNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
  };

  BitmapIndexedNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;

    if (!exists && value === NOT_SET) {
      return this;
    }

    var idx = popCount(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : undefined;
    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

    if (newNode === node) {
      return this;
    }

    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }

    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }

    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
      return newNode;
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }

    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
  };

  function HashArrayMapNode(ownerID, count, nodes) {
    this.ownerID = ownerID;
    this.count = count;
    this.nodes = nodes;
  }

  HashArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var node = this.nodes[idx];
    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
  };

  HashArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var removed = value === NOT_SET;
    var nodes = this.nodes;
    var node = nodes[idx];

    if (removed && !node) {
      return this;
    }

    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
    if (newNode === node) {
      return this;
    }

    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
        return packNodes(ownerID, nodes, newCount, idx);
      }
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }

    return new HashArrayMapNode(ownerID, newCount, newNodes);
  };

  function HashCollisionNode(ownerID, keyHash, entries) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries;
  }

  HashCollisionNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  HashCollisionNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }

    var removed = value === NOT_SET;

    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
    }

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && len === 2) {
      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new HashCollisionNode(ownerID, this.keyHash, newEntries);
  };

  function ValueNode(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  }

  ValueNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };

  ValueNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var keyMatch = is(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }

    SetRef(didAlter);

    if (removed) {
      SetRef(didChangeSize);
      return;
    }

    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode(ownerID, this.keyHash, [key, value]);
    }

    SetRef(didChangeSize);
    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
  };

  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  };

  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  };

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  };

  createClass(MapIterator, Iterator);

  function MapIterator(map, type, reverse) {
    this._type = type;
    this._reverse = reverse;
    this._stack = map._root && mapIteratorFrame(map._root);
  }

  MapIterator.prototype.next = function () {
    var type = this._type;
    var stack = this._stack;
    while (stack) {
      var node = stack.node;
      var index = stack.index++;
      var maxIndex;
      if (node.entry) {
        if (index === 0) {
          return mapIteratorValue(type, node.entry);
        }
      } else if (node.entries) {
        maxIndex = node.entries.length - 1;
        if (index <= maxIndex) {
          return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
        }
      } else {
        maxIndex = node.nodes.length - 1;
        if (index <= maxIndex) {
          var subNode = node.nodes[this._reverse ? maxIndex - index : index];
          if (subNode) {
            if (subNode.entry) {
              return mapIteratorValue(type, subNode.entry);
            }
            stack = this._stack = mapIteratorFrame(subNode, stack);
          }
          continue;
        }
      }
      stack = this._stack = this._stack.__prev;
    }
    return iteratorDone();
  };

  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(existing, value, key) {
    return existing && existing.mergeDeep && isIterable(value) ? existing.mergeDeep(value) : is(existing, value) ? existing : value;
  }

  function deepMergerWith(merger) {
    return function (existing, value, key) {
      if (existing && existing.mergeDeepWith && isIterable(value)) {
        return existing.mergeDeepWith(merger, value);
      }
      var nextValue = merger(existing, value, key);
      return is(existing, nextValue) ? existing : nextValue;
    };
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function (collection) {
      var mergeIntoMap = merger ? function (value, key) {
        collection.update(key, NOT_SET, function (existing) {
          return existing === NOT_SET ? value : merger(existing, value, key);
        });
      } : function (value, key) {
        collection.set(key, value);
      };
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(isNotSet || existing && existing.set, 'invalid keyPath');
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - (x >> 1 & 0x55555555);
    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
    x = x + (x >> 4) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

  function List(value) {
    var empty = emptyList();
    if (value === null || value === undefined) {
      return empty;
    }
    if (isList(value)) {
      return value;
    }
    var iter = IndexedIterable(value);
    var size = iter.size;
    if (size === 0) {
      return empty;
    }
    assertNotInfinite(size);
    if (size > 0 && size < SIZE) {
      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
    }
    return empty.withMutations(function (list) {
      list.setSize(size);
      iter.forEach(function (v, i) {
        return list.set(i, v);
      });
    });
  }

  List.of = function () {
    return this(arguments);
  };

  List.prototype.toString = function () {
    return this.__toString('List [', ']');
  };

  List.prototype.get = function (index, notSetValue) {
    index = wrapIndex(this, index);
    if (index >= 0 && index < this.size) {
      index += this._origin;
      var node = listNodeFor(this, index);
      return node && node.array[index & MASK];
    }
    return notSetValue;
  };

  List.prototype.set = function (index, value) {
    return updateList(this, index, value);
  };

  List.prototype.remove = function (index) {
    return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
  };

  List.prototype.insert = function (index, value) {
    return this.splice(index, 0, value);
  };

  List.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = this._origin = this._capacity = 0;
      this._level = SHIFT;
      this._root = this._tail = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyList();
  };

  List.prototype.push = function () {
    var values = arguments;
    var oldSize = this.size;
    return this.withMutations(function (list) {
      setListBounds(list, 0, oldSize + values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(oldSize + ii, values[ii]);
      }
    });
  };

  List.prototype.pop = function () {
    return setListBounds(this, 0, -1);
  };

  List.prototype.unshift = function () {
    var values = arguments;
    return this.withMutations(function (list) {
      setListBounds(list, -values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(ii, values[ii]);
      }
    });
  };

  List.prototype.shift = function () {
    return setListBounds(this, 1);
  };

  List.prototype.merge = function () {
    return mergeIntoListWith(this, undefined, arguments);
  };

  List.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, merger, iters);
  };

  List.prototype.mergeDeep = function () {
    return mergeIntoListWith(this, deepMerger, arguments);
  };

  List.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, deepMergerWith(merger), iters);
  };

  List.prototype.setSize = function (size) {
    return setListBounds(this, 0, size);
  };

  List.prototype.slice = function (begin, end) {
    var size = this.size;
    if (wholeSlice(begin, end, size)) {
      return this;
    }
    return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));
  };

  List.prototype.__iterator = function (type, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    return new Iterator(function () {
      var value = values();
      return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);
    });
  };

  List.prototype.__iterate = function (fn, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    var value;
    while ((value = values()) !== DONE) {
      if (fn(value, index++, this) === false) {
        break;
      }
    }
    return index;
  };

  List.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      return this;
    }
    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
  };

  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;

  function VNode(array, ownerID) {
    this.array = array;
    this.ownerID = ownerID;
  }

  VNode.prototype.removeBefore = function (ownerID, level, index) {
    if (index === level ? 1 << level : 0 || this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK;
    if (originIndex >= this.array.length) {
      return new VNode([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode(this, ownerID);
    if (!removingFirst) {
      for (var ii = 0; ii < originIndex; ii++) {
        editable.array[ii] = undefined;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };

  VNode.prototype.removeAfter = function (ownerID, level, index) {
    if (index === (level ? 1 << level : 0) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK;
    if (sizeIndex >= this.array.length) {
      return this;
    }

    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }

    var editable = editableVNode(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };

  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : left - offset >> level;
      var to = (right - offset >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function (list) {
        index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    while (newTailOffset >= 1 << newLevel + SHIFT) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = oldTailOffset >>> level & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
    }

    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK;
        if (beginIndex !== newTailOffset >>> newLevel & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
  }

  createClass(OrderedMap, Map);

  function OrderedMap(value) {
    return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  OrderedMap.of = function () {
    return this(arguments);
  };

  OrderedMap.prototype.toString = function () {
    return this.__toString('OrderedMap {', '}');
  };

  OrderedMap.prototype.get = function (k, notSetValue) {
    var index = this._map.get(k);
    return index !== undefined ? this._list.get(index)[1] : notSetValue;
  };

  OrderedMap.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._map.clear();
      this._list.clear();
      return this;
    }
    return emptyOrderedMap();
  };

  OrderedMap.prototype.set = function (k, v) {
    return updateOrderedMap(this, k, v);
  };

  OrderedMap.prototype.remove = function (k) {
    return updateOrderedMap(this, k, NOT_SET);
  };

  OrderedMap.prototype.wasAltered = function () {
    return this._map.wasAltered() || this._list.wasAltered();
  };

  OrderedMap.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._list.__iterate(function (entry) {
      return entry && fn(entry[1], entry[0], this$0);
    }, reverse);
  };

  OrderedMap.prototype.__iterator = function (type, reverse) {
    return this._list.fromEntrySeq().__iterator(type, reverse);
  };

  OrderedMap.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    var newList = this._list.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      this._list = newList;
      return this;
    }
    return makeOrderedMap(newMap, newList, ownerID, this.__hash);
  };

  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) {
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function (entry, idx) {
          return entry !== undefined && i !== idx;
        });
        newMap = newList.toKeyedSeq().map(function (entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(ToKeyedSequence, KeyedSeq);
  function ToKeyedSequence(indexed, useKeys) {
    this._iter = indexed;
    this._useKeys = useKeys;
    this.size = indexed.size;
  }

  ToKeyedSequence.prototype.get = function (key, notSetValue) {
    return this._iter.get(key, notSetValue);
  };

  ToKeyedSequence.prototype.has = function (key) {
    return this._iter.has(key);
  };

  ToKeyedSequence.prototype.valueSeq = function () {
    return this._iter.valueSeq();
  };

  ToKeyedSequence.prototype.reverse = function () {
    var this$0 = this;
    var reversedSequence = reverseFactory(this, true);
    if (!this._useKeys) {
      reversedSequence.valueSeq = function () {
        return this$0._iter.toSeq().reverse();
      };
    }
    return reversedSequence;
  };

  ToKeyedSequence.prototype.map = function (mapper, context) {
    var this$0 = this;
    var mappedSequence = mapFactory(this, mapper, context);
    if (!this._useKeys) {
      mappedSequence.valueSeq = function () {
        return this$0._iter.toSeq().map(mapper, context);
      };
    }
    return mappedSequence;
  };

  ToKeyedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var ii;
    return this._iter.__iterate(this._useKeys ? function (v, k) {
      return fn(v, k, this$0);
    } : (ii = reverse ? resolveSize(this) : 0, function (v) {
      return fn(v, reverse ? --ii : ii++, this$0);
    }), reverse);
  };

  ToKeyedSequence.prototype.__iterator = function (type, reverse) {
    if (this._useKeys) {
      return this._iter.__iterator(type, reverse);
    }
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var ii = reverse ? resolveSize(this) : 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
    });
  };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(ToIndexedSequence, IndexedSeq);
  function ToIndexedSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToIndexedSequence.prototype.includes = function (value) {
    return this._iter.includes(value);
  };

  ToIndexedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    return this._iter.__iterate(function (v) {
      return fn(v, iterations++, this$0);
    }, reverse);
  };

  ToIndexedSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value, step);
    });
  };

  createClass(ToSetSequence, SetSeq);
  function ToSetSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToSetSequence.prototype.has = function (key) {
    return this._iter.includes(key);
  };

  ToSetSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (v) {
      return fn(v, v, this$0);
    }, reverse);
  };

  ToSetSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, step.value, step.value, step);
    });
  };

  createClass(FromEntriesSequence, KeyedSeq);
  function FromEntriesSequence(entries) {
    this._iter = entries;
    this.size = entries.size;
  }

  FromEntriesSequence.prototype.entrySeq = function () {
    return this._iter.toSeq();
  };

  FromEntriesSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (entry) {
      if (entry) {
        validateEntry(entry);
        var indexedIterable = isIterable(entry);
        return fn(indexedIterable ? entry.get(1) : entry[1], indexedIterable ? entry.get(0) : entry[0], this$0);
      }
    }, reverse);
  };

  FromEntriesSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      while (true) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;

        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return iteratorValue(type, indexedIterable ? entry.get(0) : entry[0], indexedIterable ? entry.get(1) : entry[1], step);
        }
      }
    });
  };

  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;

  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function () {
      return iterable;
    };
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this);
      reversedSequence.flip = function () {
        return iterable.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function (key) {
      return iterable.includes(key);
    };
    flipSequence.includes = function (key) {
      return iterable.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(k, v, this$0) !== false;
      }, reverse);
    };
    flipSequence.__iteratorUncached = function (type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new Iterator(function () {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);
    };
    return flipSequence;
  }

  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function (key) {
      return iterable.has(key);
    };
    mappedSequence.get = function (key, notSetValue) {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k, c) {
        return fn(mapper.call(context, v, k, c), k, this$0) !== false;
      }, reverse);
    };
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new Iterator(function () {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(type, key, mapper.call(context, entry[1], key, iterable), step);
      });
    };
    return mappedSequence;
  }

  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function () {
      return iterable;
    };
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function () {
          return iterable.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function (key, notSetValue) {
      return iterable.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function (key) {
      return iterable.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function (value) {
      return iterable.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(v, k, this$0);
      }, !reverse);
    };
    reversedSequence.__iterator = function (type, reverse) {
      return iterable.__iterator(type, !reverse);
    };
    return reversedSequence;
  }

  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function (key) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function (key, notSetValue) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new Iterator(function () {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }

  function countByFactory(iterable, grouper, context) {
    var groups = Map().asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), 0, function (a) {
        return a + 1;
      });
    });
    return groups.asImmutable();
  }

  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), function (a) {
        return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
      });
    });
    var coerce = iterableClass(iterable);
    return groups.map(function (arr) {
      return reify(iterable, coerce(arr));
    });
  }

  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }

    sliceSeq.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function (type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }

      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function () {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    };

    return sliceSeq;
  }

  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);
      });
      return iterations;
    };
    takeSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new Iterator(function () {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }

  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function () {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }

  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function (v) {
      if (!isIterable(v)) {
        v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function (v) {
      return v.size !== 0;
    });

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function (sum, seq) {
      if (sum !== undefined) {
        var size = seq.size;
        if (size !== undefined) {
          return sum + size;
        }
      }
    }, 0);
    return concatSeq;
  }

  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function (fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        var this$0 = this;
        iter.__iterate(function (v, k) {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new Iterator(function () {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    };
    return flatSequence;
  }

  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(function (v, k) {
      return coerce(mapper.call(context, v, k, iterable));
    }).flatten(true);
  }

  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 - 1;
    interposedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;
      }, reverse);
      return iterations;
    };
    interposedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new Iterator(function () {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }

  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(function (v, k) {
      return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
    }).toArray();
    entries.sort(function (a, b) {
      return comparator(a[3], b[3]) || a[2] - b[2];
    }).forEach(isKeyedIterable ? function (v, i) {
      entries[i].length = 2;
    } : function (v, i) {
      entries[i] = v[1];
    });
    return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);
  }

  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq().map(function (v, k) {
        return [v, mapper(v, k, iterable)];
      }).reduce(function (a, b) {
        return maxCompare(comparator, a[1], b[1]) ? b : a;
      });
      return entry && entry[0];
    } else {
      return iterable.reduce(function (a, b) {
        return maxCompare(comparator, a, b) ? b : a;
      });
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);

    return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;
  }

  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function (i) {
      return i.size;
    }).min();

    zipSequence.__iterate = function (fn, reverse) {
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function (type, reverse) {
      var iterators = iters.map(function (i) {
        return i = Iterable(i), getIterator(reverse ? i.reverse() : i);
      });
      var iterations = 0;
      var isDone = false;
      return new Iterator(function () {
        var steps;
        if (!isDone) {
          steps = iterators.map(function (i) {
            return i.next();
          });
          isDone = steps.some(function (s) {
            return s.done;
          });
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function (s) {
          return s.value;
        })));
      });
    };
    return zipSequence;
  }

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create((isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype);
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(Record, KeyedCollection);

  function Record(defaultValues, name) {
    var hasInitialized;

    var RecordType = function Record(values) {
      if (values instanceof RecordType) {
        return values;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys = Object.keys(defaultValues);
        setProps(RecordTypePrototype, keys);
        RecordTypePrototype.size = keys.length;
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys;
        RecordTypePrototype._defaultValues = defaultValues;
      }
      this._map = Map(values);
    };

    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
    RecordTypePrototype.constructor = RecordType;

    return RecordType;
  }

  Record.prototype.toString = function () {
    return this.__toString(recordName(this) + ' {', '}');
  };

  Record.prototype.has = function (k) {
    return this._defaultValues.hasOwnProperty(k);
  };

  Record.prototype.get = function (k, notSetValue) {
    if (!this.has(k)) {
      return notSetValue;
    }
    var defaultVal = this._defaultValues[k];
    return this._map ? this._map.get(k, defaultVal) : defaultVal;
  };

  Record.prototype.clear = function () {
    if (this.__ownerID) {
      this._map && this._map.clear();
      return this;
    }
    var RecordType = this.constructor;
    return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
  };

  Record.prototype.set = function (k, v) {
    if (!this.has(k)) {
      throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
    }
    var newMap = this._map && this._map.set(k, v);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.remove = function (k) {
    if (!this.has(k)) {
      return this;
    }
    var newMap = this._map && this._map.remove(k);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Record.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterator(type, reverse);
  };

  Record.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterate(fn, reverse);
  };

  Record.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map && this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return makeRecord(this, newMap, ownerID);
  };

  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;

  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {}
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function get() {
        return this.get(name);
      },
      set: function set(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  createClass(Set, SetCollection);

  function Set(value) {
    return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  Set.of = function () {
    return this(arguments);
  };

  Set.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  Set.prototype.toString = function () {
    return this.__toString('Set {', '}');
  };

  Set.prototype.has = function (value) {
    return this._map.has(value);
  };

  Set.prototype.add = function (value) {
    return updateSet(this, this._map.set(value, true));
  };

  Set.prototype.remove = function (value) {
    return updateSet(this, this._map.remove(value));
  };

  Set.prototype.clear = function () {
    return updateSet(this, this._map.clear());
  };

  Set.prototype.union = function () {
    var iters = SLICE$0.call(arguments, 0);
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return this;
    }
    if (this.size === 0 && !this.__ownerID && iters.length === 1) {
      return this.constructor(iters[0]);
    }
    return this.withMutations(function (set) {
      for (var ii = 0; ii < iters.length; ii++) {
        SetIterable(iters[ii]).forEach(function (value) {
          return set.add(value);
        });
      }
    });
  };

  Set.prototype.intersect = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (!iters.every(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.subtract = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (iters.some(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.merge = function () {
    return this.union.apply(this, arguments);
  };

  Set.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return this.union.apply(this, iters);
  };

  Set.prototype.sort = function (comparator) {
    return OrderedSet(sortFactory(this, comparator));
  };

  Set.prototype.sortBy = function (mapper, comparator) {
    return OrderedSet(sortFactory(this, comparator, mapper));
  };

  Set.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Set.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._map.__iterate(function (_, k) {
      return fn(k, k, this$0);
    }, reverse);
  };

  Set.prototype.__iterator = function (type, reverse) {
    return this._map.map(function (_, k) {
      return k;
    }).__iterator(type, reverse);
  };

  Set.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return this.__make(newMap, ownerID);
  };

  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, Set);

  function OrderedSet(value) {
    return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  OrderedSet.of = function () {
    return this(arguments);
  };

  OrderedSet.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  OrderedSet.prototype.toString = function () {
    return this.__toString('OrderedSet {', '}');
  };

  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Stack, IndexedCollection);

  function Stack(value) {
    return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().unshiftAll(value);
  }

  Stack.of = function () {
    return this(arguments);
  };

  Stack.prototype.toString = function () {
    return this.__toString('Stack [', ']');
  };

  Stack.prototype.get = function (index, notSetValue) {
    var head = this._head;
    index = wrapIndex(this, index);
    while (head && index--) {
      head = head.next;
    }
    return head ? head.value : notSetValue;
  };

  Stack.prototype.peek = function () {
    return this._head && this._head.value;
  };

  Stack.prototype.push = function () {
    if (arguments.length === 0) {
      return this;
    }
    var newSize = this.size + arguments.length;
    var head = this._head;
    for (var ii = arguments.length - 1; ii >= 0; ii--) {
      head = {
        value: arguments[ii],
        next: head
      };
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pushAll = function (iter) {
    iter = IndexedIterable(iter);
    if (iter.size === 0) {
      return this;
    }
    assertNotInfinite(iter.size);
    var newSize = this.size;
    var head = this._head;
    iter.reverse().forEach(function (value) {
      newSize++;
      head = {
        value: value,
        next: head
      };
    });
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pop = function () {
    return this.slice(1);
  };

  Stack.prototype.unshift = function () {
    return this.push.apply(this, arguments);
  };

  Stack.prototype.unshiftAll = function (iter) {
    return this.pushAll(iter);
  };

  Stack.prototype.shift = function () {
    return this.pop.apply(this, arguments);
  };

  Stack.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._head = undefined;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyStack();
  };

  Stack.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    var resolvedBegin = resolveBegin(begin, this.size);
    var resolvedEnd = resolveEnd(end, this.size);
    if (resolvedEnd !== this.size) {
      return IndexedCollection.prototype.slice.call(this, begin, end);
    }
    var newSize = this.size - resolvedBegin;
    var head = this._head;
    while (resolvedBegin--) {
      head = head.next;
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeStack(this.size, this._head, ownerID, this.__hash);
  };

  Stack.prototype.__iterate = function (fn, reverse) {
    if (reverse) {
      return this.reverse().__iterate(fn);
    }
    var iterations = 0;
    var node = this._head;
    while (node) {
      if (fn(node.value, iterations++, this) === false) {
        break;
      }
      node = node.next;
    }
    return iterations;
  };

  Stack.prototype.__iterator = function (type, reverse) {
    if (reverse) {
      return this.reverse().__iterator(type);
    }
    var iterations = 0;
    var node = this._head;
    return new Iterator(function () {
      if (node) {
        var value = node.value;
        node = node.next;
        return iteratorValue(type, iterations++, value);
      }
      return iteratorDone();
    });
  };

  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;

  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  function mixin(ctor, methods) {
    var keyCopier = function keyCopier(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = Iterator;

  mixin(Iterable, {

    toArray: function toArray() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function (v, i) {
        array[i] = v;
      });
      return array;
    },

    toIndexedSeq: function toIndexedSeq() {
      return new ToIndexedSequence(this);
    },

    toJS: function toJS() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJS === 'function' ? value.toJS() : value;
      }).__toJS();
    },

    toJSON: function toJSON() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJSON === 'function' ? value.toJSON() : value;
      }).__toJS();
    },

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function toMap() {
      return Map(this.toKeyedSeq());
    },

    toObject: function toObject() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function (v, k) {
        object[k] = v;
      });
      return object;
    },

    toOrderedMap: function toOrderedMap() {
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function toOrderedSet() {
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function toSet() {
      return Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function toSetSeq() {
      return new ToSetSequence(this);
    },

    toSeq: function toSeq() {
      return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
    },

    toStack: function toStack() {
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function toList() {
      return List(isKeyed(this) ? this.valueSeq() : this);
    },

    toString: function toString() {
      return '[Iterable]';
    },

    __toString: function __toString(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },

    concat: function concat() {
      var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function includes(searchValue) {
      return this.some(function (value) {
        return is(value, searchValue);
      });
    },

    entries: function entries() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function every(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function (v, k, c) {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function find(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    findEntry: function findEntry(predicate, context) {
      var found;
      this.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findLastEntry: function findLastEntry(predicate, context) {
      return this.toSeq().reverse().findEntry(predicate, context);
    },

    forEach: function forEach(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function join(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function (v) {
        isFirst ? isFirst = false : joined += separator;
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function keys() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function map(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function reduce(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function (v, k, c) {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function reduceRight(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function some(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function sort(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function values() {
      return this.__iterator(ITERATE_VALUES);
    },

    butLast: function butLast() {
      return this.slice(0, -1);
    },

    isEmpty: function isEmpty() {
      return this.size !== undefined ? this.size === 0 : !this.some(function () {
        return true;
      });
    },

    count: function count(predicate, context) {
      return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);
    },

    countBy: function countBy(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function equals(other) {
      return deepEqual(this, other);
    },

    entrySeq: function entrySeq() {
      var iterable = this;
      if (iterable._cache) {
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function () {
        return iterable.toSeq();
      };
      return entriesSequence;
    },

    filterNot: function filterNot(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findLast: function findLast(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    first: function first() {
      return this.find(returnTrue);
    },

    flatMap: function flatMap(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function fromEntrySeq() {
      return new FromEntriesSequence(this);
    },

    get: function get(searchKey, notSetValue) {
      return this.find(function (_, key) {
        return is(key, searchKey);
      }, undefined, notSetValue);
    },

    getIn: function getIn(searchKeyPath, notSetValue) {
      var nested = this;

      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function groupBy(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function has(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function hasIn(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function isSubset(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function (value) {
        return iter.includes(value);
      });
    },

    isSuperset: function isSuperset(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keySeq: function keySeq() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function last() {
      return this.toSeq().reverse().first();
    },

    max: function max(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function maxBy(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function min(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function minBy(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function rest() {
      return this.slice(1);
    },

    skip: function skip(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function skipLast(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function skipUntil(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function sortBy(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function take(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function takeLast(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function takeWhile(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function takeUntil(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function valueSeq() {
      return this.toIndexedSeq();
    },

    hashCode: function hashCode() {
      return this.__hash || (this.__hash = hashIterable(this));
    }

  });

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect = IterablePrototype.toSource = function () {
    return this.toString();
  };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  (function () {
    try {
      Object.defineProperty(IterablePrototype, 'length', {
        get: function get() {
          if (!Iterable.noLengthWarning) {
            var stack;
            try {
              throw new Error();
            } catch (error) {
              stack = error.stack;
            }
            if (stack.indexOf('_wrapObject') === -1) {
              console && console.warn && console.warn('iterable.length has been deprecated, ' + 'use iterable.size or iterable.count(). ' + 'This warning will become a silent error in a future version. ' + stack);
              return this.size;
            }
          }
        }
      });
    } catch (e) {}
  })();

  mixin(KeyedIterable, {

    flip: function flip() {
      return reify(this, flipFactory(this));
    },

    findKey: function findKey(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLastKey: function findLastKey(predicate, context) {
      return this.toSeq().reverse().findKey(predicate, context);
    },

    keyOf: function keyOf(searchValue) {
      return this.findKey(function (value) {
        return is(value, searchValue);
      });
    },

    lastKeyOf: function lastKeyOf(searchValue) {
      return this.findLastKey(function (value) {
        return is(value, searchValue);
      });
    },

    mapEntries: function mapEntries(mapper, context) {
      var this$0 = this;
      var iterations = 0;
      return reify(this, this.toSeq().map(function (v, k) {
        return mapper.call(context, [k, v], iterations++, this$0);
      }).fromEntrySeq());
    },

    mapKeys: function mapKeys(mapper, context) {
      var this$0 = this;
      return reify(this, this.toSeq().flip().map(function (k, v) {
        return mapper.call(context, k, v, this$0);
      }).flip());
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function (v, k) {
    return JSON.stringify(k) + ': ' + quoteString(v);
  };

  mixin(IndexedIterable, {

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, false);
    },

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function findIndex(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function indexOf(searchValue) {
      var key = this.toKeyedSeq().keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function lastIndexOf(searchValue) {
      var key = this.toKeyedSeq().reverse().keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function splice(index, removeNum) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }

      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));
    },

    findLastIndex: function findLastIndex(predicate, context) {
      var key = this.toKeyedSeq().findLastKey(predicate, context);
      return key === undefined ? -1 : key;
    },

    first: function first() {
      return this.get(0);
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function get(index, notSetValue) {
      index = wrapIndex(this, index);
      return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function (_, key) {
        return key === index;
      }, undefined, notSetValue);
    },

    has: function has(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },

    interpose: function interpose(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function interleave() {
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    last: function last() {
      return this.get(-1);
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function zip() {
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function zipWith(zipper) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;

  mixin(SetIterable, {

    get: function get(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function includes(value) {
      return this.has(value);
    },

    keySeq: function keySeq() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function () {
      return !predicate.apply(this, arguments);
    };
  }

  function neg(predicate) {
    return function () {
      return -predicate.apply(this, arguments);
    };
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : value;
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(keyed ? ordered ? function (v, k) {
      h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
    } : function (v, k) {
      h = h + hashMerge(hash(v), hash(k)) | 0;
    } : ordered ? function (v) {
      h = 31 * h + hash(v) | 0;
    } : function (v) {
      h = h + hash(v) | 0;
    });
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = imul(h, 0xCC9E2D51);
    h = imul(h << 15 | h >>> -15, 0x1B873593);
    h = imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = imul(h ^ h >>> 16, 0x85EBCA6B);
    h = imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0;
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;
});
}, 317, null, "immutable/dist/immutable.js");
__d(/* NavigatorBreadcrumbNavigationBar */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorBreadcrumbNavigationBar.js';
var NavigatorBreadcrumbNavigationBarStyles = require(319                                     ); // 319 = NavigatorBreadcrumbNavigationBarStyles
var NavigatorNavigationBarStylesAndroid = require(320                                  ); // 320 = NavigatorNavigationBarStylesAndroid
var NavigatorNavigationBarStylesIOS = require(322                              ); // 322 = NavigatorNavigationBarStylesIOS
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var guid = require(221   ); // 221 = guid
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _require = require(317        ), // 317 = immutable
    Map = _require.Map;

var Interpolators = NavigatorBreadcrumbNavigationBarStyles.Interpolators;
var NavigatorNavigationBarStyles = Platform.OS === 'android' ? NavigatorNavigationBarStylesAndroid : NavigatorNavigationBarStylesIOS;
var PropTypes = React.PropTypes;

var CRUMB_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var ICON_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var SEPARATOR_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var TITLE_PROPS = Interpolators.map(function () {
  return { style: {} };
});
var RIGHT_BUTTON_PROPS = Interpolators.map(function () {
  return { style: {} };
});

function navStatePresentedIndex(navState) {
  if (navState.presentedIndex !== undefined) {
    return navState.presentedIndex;
  }

  return navState.observedTopOfStack;
}

function initStyle(index, presentedIndex) {
  return index === presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Center[index] : index < presentedIndex ? NavigatorBreadcrumbNavigationBarStyles.Left[index] : NavigatorBreadcrumbNavigationBarStyles.Right[index];
}

var NavigatorBreadcrumbNavigationBar = function (_React$Component) {
  babelHelpers.inherits(NavigatorBreadcrumbNavigationBar, _React$Component);

  function NavigatorBreadcrumbNavigationBar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, NavigatorBreadcrumbNavigationBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigatorBreadcrumbNavigationBar.__proto__ || Object.getPrototypeOf(NavigatorBreadcrumbNavigationBar)).call.apply(_ref, [this].concat(args))), _this), _this._getBreadcrumb = function (route, index) {
      var pointerEvents = _this.props.navState.routeStack.length <= 1 && index === 0 ? 'none' : 'auto';
      var navBarRouteMapper = _this.props.routeMapper;
      var firstStyles = initStyle(index, navStatePresentedIndex(_this.props.navState));

      var breadcrumbDescriptor = React.createElement(
        View,
        {
          key: 'crumb_' + index,
          pointerEvents: pointerEvents,
          ref: 'crumb_' + index,
          style: firstStyles.Crumb, __source: {
            fileName: _jsxFileName,
            lineNumber: 234
          }
        },
        React.createElement(
          View,
          { ref: 'icon_' + index, style: firstStyles.Icon, __source: {
              fileName: _jsxFileName,
              lineNumber: 239
            }
          },
          navBarRouteMapper.iconForRoute(route, _this.props.navigator)
        ),
        React.createElement(
          View,
          { ref: 'separator_' + index, style: firstStyles.Separator, __source: {
              fileName: _jsxFileName,
              lineNumber: 242
            }
          },
          navBarRouteMapper.separatorForRoute(route, _this.props.navigator)
        )
      );

      return breadcrumbDescriptor;
    }, _this._getTitle = function (route, index) {
      if (_this._descriptors.title.has(route)) {
        return _this._descriptors.title.get(route);
      }

      var titleContent = _this.props.routeMapper.titleContentForRoute(_this.props.navState.routeStack[index], _this.props.navigator);
      var firstStyles = initStyle(index, navStatePresentedIndex(_this.props.navState));

      var titleDescriptor = React.createElement(
        View,
        {
          key: 'title_' + index,
          ref: 'title_' + index,
          style: firstStyles.Title, __source: {
            fileName: _jsxFileName,
            lineNumber: 263
          }
        },
        titleContent
      );
      _this._descriptors.title = _this._descriptors.title.set(route, titleDescriptor);
      return titleDescriptor;
    }, _this._getRightButton = function (route, index) {
      if (_this._descriptors.right.has(route)) {
        return _this._descriptors.right.get(route);
      }
      var rightContent = _this.props.routeMapper.rightContentForRoute(_this.props.navState.routeStack[index], _this.props.navigator);
      if (!rightContent) {
        _this._descriptors.right = _this._descriptors.right.set(route, null);
        return null;
      }
      var firstStyles = initStyle(index, navStatePresentedIndex(_this.props.navState));
      var rightButtonDescriptor = React.createElement(
        View,
        {
          key: 'right_' + index,
          ref: 'right_' + index,
          style: firstStyles.RightItem, __source: {
            fileName: _jsxFileName,
            lineNumber: 288
          }
        },
        rightContent
      );
      _this._descriptors.right = _this._descriptors.right.set(route, rightButtonDescriptor);
      return rightButtonDescriptor;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(NavigatorBreadcrumbNavigationBar, [{
    key: '_updateIndexProgress',
    value: function _updateIndexProgress(progress, index, fromIndex, toIndex) {
      var amount = toIndex > fromIndex ? progress : 1 - progress;
      var oldDistToCenter = index - fromIndex;
      var newDistToCenter = index - toIndex;
      var interpolate;
      invariant(Interpolators[index], 'Cannot find breadcrumb interpolators for ' + index);
      if (oldDistToCenter > 0 && newDistToCenter === 0 || newDistToCenter > 0 && oldDistToCenter === 0) {
        interpolate = Interpolators[index].RightToCenter;
      } else if (oldDistToCenter < 0 && newDistToCenter === 0 || newDistToCenter < 0 && oldDistToCenter === 0) {
        interpolate = Interpolators[index].CenterToLeft;
      } else if (oldDistToCenter === newDistToCenter) {
        interpolate = Interpolators[index].RightToCenter;
      } else {
        interpolate = Interpolators[index].RightToLeft;
      }

      if (interpolate.Crumb(CRUMB_PROPS[index].style, amount)) {
        this._setPropsIfExists('crumb_' + index, CRUMB_PROPS[index]);
      }
      if (interpolate.Icon(ICON_PROPS[index].style, amount)) {
        this._setPropsIfExists('icon_' + index, ICON_PROPS[index]);
      }
      if (interpolate.Separator(SEPARATOR_PROPS[index].style, amount)) {
        this._setPropsIfExists('separator_' + index, SEPARATOR_PROPS[index]);
      }
      if (interpolate.Title(TITLE_PROPS[index].style, amount)) {
        this._setPropsIfExists('title_' + index, TITLE_PROPS[index]);
      }
      var right = this.refs['right_' + index];

      var rightButtonStyle = RIGHT_BUTTON_PROPS[index].style;
      if (right && interpolate.RightItem(rightButtonStyle, amount)) {
        right.setNativeProps({
          style: rightButtonStyle,
          pointerEvents: rightButtonStyle.opacity === 0 ? 'none' : 'auto'
        });
      }
    }
  }, {
    key: 'updateProgress',
    value: function updateProgress(progress, fromIndex, toIndex) {
      var max = Math.max(fromIndex, toIndex);
      var min = Math.min(fromIndex, toIndex);
      for (var index = min; index <= max; index++) {
        this._updateIndexProgress(progress, index, fromIndex, toIndex);
      }
    }
  }, {
    key: 'onAnimationStart',
    value: function onAnimationStart(fromIndex, toIndex) {
      var max = Math.max(fromIndex, toIndex);
      var min = Math.min(fromIndex, toIndex);
      for (var index = min; index <= max; index++) {
        this._setRenderViewsToHardwareTextureAndroid(index, true);
      }
    }
  }, {
    key: 'onAnimationEnd',
    value: function onAnimationEnd() {
      var max = this.props.navState.routeStack.length - 1;
      for (var index = 0; index <= max; index++) {
        this._setRenderViewsToHardwareTextureAndroid(index, false);
      }
    }
  }, {
    key: '_setRenderViewsToHardwareTextureAndroid',
    value: function _setRenderViewsToHardwareTextureAndroid(index, renderToHardwareTexture) {
      var props = {
        renderToHardwareTextureAndroid: renderToHardwareTexture
      };

      this._setPropsIfExists('icon_' + index, props);
      this._setPropsIfExists('separator_' + index, props);
      this._setPropsIfExists('title_' + index, props);
      this._setPropsIfExists('right_' + index, props);
    }
  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._reset();
    }
  }, {
    key: 'render',
    value: function render() {
      var navState = this.props.navState;
      var icons = navState && navState.routeStack.map(this._getBreadcrumb);
      var titles = navState.routeStack.map(this._getTitle);
      var buttons = navState.routeStack.map(this._getRightButton);

      return React.createElement(
        View,
        {
          key: this._key,
          style: [styles.breadCrumbContainer, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 196
          }
        },
        titles,
        icons,
        buttons
      );
    }
  }, {
    key: 'immediatelyRefresh',
    value: function immediatelyRefresh() {
      this._reset();
      this.forceUpdate();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      this._key = guid();
      this._descriptors = {
        title: new Map(),
        right: new Map()
      };
    }
  }, {
    key: '_setPropsIfExists',
    value: function _setPropsIfExists(ref, props) {
      var ref = this.refs[ref];
      ref && ref.setNativeProps(props);
    }
  }]);
  return NavigatorBreadcrumbNavigationBar;
}(React.Component);

NavigatorBreadcrumbNavigationBar.propTypes = {
  navigator: PropTypes.shape({
    push: PropTypes.func,
    pop: PropTypes.func,
    replace: PropTypes.func,
    popToRoute: PropTypes.func,
    popToTop: PropTypes.func
  }),
  routeMapper: PropTypes.shape({
    rightContentForRoute: PropTypes.func,
    titleContentForRoute: PropTypes.func,
    iconForRoute: PropTypes.func
  }),
  navState: React.PropTypes.shape({
    routeStack: React.PropTypes.arrayOf(React.PropTypes.object),
    presentedIndex: React.PropTypes.number
  }),
  style: View.propTypes.style
};
NavigatorBreadcrumbNavigationBar.Styles = NavigatorBreadcrumbNavigationBarStyles;


var styles = StyleSheet.create({
  breadCrumbContainer: {
    overflow: 'hidden',
    position: 'absolute',
    height: NavigatorNavigationBarStyles.General.TotalNavHeight,
    top: 0,
    left: 0,
    right: 0
  }
});

module.exports = NavigatorBreadcrumbNavigationBar;
}, 318, null, "NavigatorBreadcrumbNavigationBar");
__d(/* NavigatorBreadcrumbNavigationBarStyles */function(global, require, module, exports) {
'use strict';

var NavigatorNavigationBarStylesAndroid = require(320                                  ); // 320 = NavigatorNavigationBarStylesAndroid

var buildStyleInterpolator = require(321                     ); // 321 = buildStyleInterpolator
var merge = require(127    ); // 127 = merge

var NAV_BAR_HEIGHT = NavigatorNavigationBarStylesAndroid.General.NavBarHeight;

var SPACING = 8;
var ICON_WIDTH = 40;
var SEPARATOR_WIDTH = 9;
var CRUMB_WIDTH = ICON_WIDTH + SEPARATOR_WIDTH;
var NAV_ELEMENT_HEIGHT = NAV_BAR_HEIGHT;

var OPACITY_RATIO = 100;
var ICON_INACTIVE_OPACITY = 0.6;
var MAX_BREADCRUMBS = 10;

var CRUMB_BASE = {
  position: 'absolute',
  flexDirection: 'row',
  top: 0,
  width: CRUMB_WIDTH,
  height: NAV_ELEMENT_HEIGHT,
  backgroundColor: 'transparent'
};

var ICON_BASE = {
  width: ICON_WIDTH,
  height: NAV_ELEMENT_HEIGHT
};

var SEPARATOR_BASE = {
  width: SEPARATOR_WIDTH,
  height: NAV_ELEMENT_HEIGHT
};

var TITLE_BASE = {
  position: 'absolute',
  top: 0,
  height: NAV_ELEMENT_HEIGHT,
  backgroundColor: 'transparent',
  alignItems: 'flex-start'
};

var FIRST_TITLE_BASE = merge(TITLE_BASE, {
  left: 0,
  right: 0
});

var RIGHT_BUTTON_BASE = {
  position: 'absolute',
  top: 0,
  right: 0,
  overflow: 'hidden',
  opacity: 1,
  height: NAV_ELEMENT_HEIGHT,
  backgroundColor: 'transparent'
};

var LEFT = [];
var CENTER = [];
var RIGHT = [];
for (var i = 0; i < MAX_BREADCRUMBS; i++) {
  var crumbLeft = CRUMB_WIDTH * i + SPACING;
  LEFT[i] = {
    Crumb: merge(CRUMB_BASE, { left: crumbLeft }),
    Icon: merge(ICON_BASE, { opacity: ICON_INACTIVE_OPACITY }),
    Separator: merge(SEPARATOR_BASE, { opacity: 1 }),
    Title: merge(TITLE_BASE, { left: crumbLeft, opacity: 0 }),
    RightItem: merge(RIGHT_BUTTON_BASE, { opacity: 0 })
  };
  CENTER[i] = {
    Crumb: merge(CRUMB_BASE, { left: crumbLeft }),
    Icon: merge(ICON_BASE, { opacity: 1 }),
    Separator: merge(SEPARATOR_BASE, { opacity: 0 }),
    Title: merge(TITLE_BASE, {
      left: crumbLeft + ICON_WIDTH,
      opacity: 1
    }),
    RightItem: merge(RIGHT_BUTTON_BASE, { opacity: 1 })
  };
  var crumbRight = crumbLeft + 50;
  RIGHT[i] = {
    Crumb: merge(CRUMB_BASE, { left: crumbRight }),
    Icon: merge(ICON_BASE, { opacity: 0 }),
    Separator: merge(SEPARATOR_BASE, { opacity: 0 }),
    Title: merge(TITLE_BASE, {
      left: crumbRight + ICON_WIDTH,
      opacity: 0
    }),
    RightItem: merge(RIGHT_BUTTON_BASE, { opacity: 0 })
  };
}

CENTER[0] = {
  Crumb: merge(CRUMB_BASE, { left: SPACING + CRUMB_WIDTH }),
  Icon: merge(ICON_BASE, { opacity: 0 }),
  Separator: merge(SEPARATOR_BASE, { opacity: 0 }),
  Title: merge(FIRST_TITLE_BASE, { opacity: 1 }),
  RightItem: CENTER[0].RightItem
};
LEFT[0].Title = merge(FIRST_TITLE_BASE, { opacity: 0 });
RIGHT[0].Title = merge(FIRST_TITLE_BASE, { opacity: 0 });

var buildIndexSceneInterpolator = function buildIndexSceneInterpolator(startStyles, endStyles) {
  return {
    Crumb: buildStyleInterpolator({
      left: {
        type: 'linear',
        from: startStyles.Crumb.left,
        to: endStyles.Crumb.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    Icon: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Icon.opacity,
        to: endStyles.Icon.opacity,
        min: 0,
        max: 1
      }
    }),
    Separator: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Separator.opacity,
        to: endStyles.Separator.opacity,
        min: 0,
        max: 1
      }
    }),
    Title: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Title.opacity,
        to: endStyles.Title.opacity,
        min: 0,
        max: 1
      },
      left: {
        type: 'linear',
        from: startStyles.Title.left,
        to: endStyles.Title.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    RightItem: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.RightItem.opacity,
        to: endStyles.RightItem.opacity,
        min: 0,
        max: 1,
        round: OPACITY_RATIO
      }
    })
  };
};

var Interpolators = CENTER.map(function (_, ii) {
  return {
    RightToCenter: buildIndexSceneInterpolator(RIGHT[ii], CENTER[ii]),

    CenterToLeft: buildIndexSceneInterpolator(CENTER[ii], LEFT[ii]),

    RightToLeft: buildIndexSceneInterpolator(RIGHT[ii], LEFT[ii])
  };
});

module.exports = {
  Interpolators: Interpolators,
  Left: LEFT,
  Center: CENTER,
  Right: RIGHT,
  IconWidth: ICON_WIDTH,
  IconHeight: NAV_BAR_HEIGHT,
  SeparatorWidth: SEPARATOR_WIDTH,
  SeparatorHeight: NAV_BAR_HEIGHT
};
}, 319, null, "NavigatorBreadcrumbNavigationBarStyles");
__d(/* NavigatorNavigationBarStylesAndroid */function(global, require, module, exports) {
'use strict';

var buildStyleInterpolator = require(321                     ); // 321 = buildStyleInterpolator
var merge = require(127    ); // 127 = merge

var NAV_BAR_HEIGHT = 56;
var TITLE_LEFT = 72;
var BUTTON_SIZE = 24;
var TOUCH_TARGT_SIZE = 48;
var BUTTON_HORIZONTAL_MARGIN = 16;

var BUTTON_EFFECTIVE_MARGIN = BUTTON_HORIZONTAL_MARGIN - (TOUCH_TARGT_SIZE - BUTTON_SIZE) / 2;
var NAV_ELEMENT_HEIGHT = NAV_BAR_HEIGHT;

var BASE_STYLES = {
  Title: {
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0,
    alignItems: 'flex-start',
    height: NAV_ELEMENT_HEIGHT,
    backgroundColor: 'transparent',
    marginLeft: TITLE_LEFT
  },
  LeftButton: {
    position: 'absolute',
    top: 0,
    left: BUTTON_EFFECTIVE_MARGIN,
    overflow: 'hidden',
    height: NAV_ELEMENT_HEIGHT,
    backgroundColor: 'transparent'
  },
  RightButton: {
    position: 'absolute',
    top: 0,
    right: BUTTON_EFFECTIVE_MARGIN,
    overflow: 'hidden',
    alignItems: 'flex-end',
    height: NAV_ELEMENT_HEIGHT,
    backgroundColor: 'transparent'
  }
};

var Stages = {
  Left: {
    Title: merge(BASE_STYLES.Title, { opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  },
  Center: {
    Title: merge(BASE_STYLES.Title, { opacity: 1 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { opacity: 1 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 1 })
  },
  Right: {
    Title: merge(BASE_STYLES.Title, { opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  }
};

var opacityRatio = 100;

function buildSceneInterpolators(startStyles, endStyles) {
  return {
    Title: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Title.opacity,
        to: endStyles.Title.opacity,
        min: 0,
        max: 1
      },
      left: {
        type: 'linear',
        from: startStyles.Title.left,
        to: endStyles.Title.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    LeftButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.LeftButton.opacity,
        to: endStyles.LeftButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.LeftButton.left,
        to: endStyles.LeftButton.left,
        min: 0,
        max: 1
      }
    }),
    RightButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.RightButton.opacity,
        to: endStyles.RightButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.RightButton.left,
        to: endStyles.RightButton.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    })
  };
}

var Interpolators = {
  RightToCenter: buildSceneInterpolators(Stages.Right, Stages.Center),

  CenterToLeft: buildSceneInterpolators(Stages.Center, Stages.Left),

  RightToLeft: buildSceneInterpolators(Stages.Right, Stages.Left)
};

module.exports = {
  General: {
    NavBarHeight: NAV_BAR_HEIGHT,
    StatusBarHeight: 0,
    TotalNavHeight: NAV_BAR_HEIGHT
  },
  Interpolators: Interpolators,
  Stages: Stages
};
}, 320, null, "NavigatorNavigationBarStylesAndroid");
__d(/* buildStyleInterpolator */function(global, require, module, exports) {

var keyOf = require(302             ); // 302 = fbjs/lib/keyOf

var X_DIM = keyOf({ x: null });
var Y_DIM = keyOf({ y: null });
var Z_DIM = keyOf({ z: null });
var W_DIM = keyOf({ w: null });

var TRANSFORM_ROTATE_NAME = keyOf({ transformRotateRadians: null });

var ShouldAllocateReusableOperationVars = {
  transformRotateRadians: true,
  transformScale: true,
  transformTranslate: true
};

var InitialOperationField = {
  transformRotateRadians: [0, 0, 0, 1],
  transformTranslate: [0, 0, 0],
  transformScale: [1, 1, 1]
};

var ARGUMENT_NAMES_RE = /([^\s,]+)/g;

var inline = function inline(fnStr, replaceWithArgs) {
  var parameterNames = fnStr.slice(fnStr.indexOf('(') + 1, fnStr.indexOf(')')).match(ARGUMENT_NAMES_RE) || [];
  var replaceRegexStr = parameterNames.map(function (paramName) {
    return '\\b' + paramName + '\\b';
  }).join('|');
  var replaceRegex = new RegExp(replaceRegexStr, 'g');
  var fnBody = fnStr.substring(fnStr.indexOf('{') + 1, fnStr.lastIndexOf('}'));
  var newFnBody = fnBody.replace(replaceRegex, function (parameterName) {
    var indexInParameterNames = parameterNames.indexOf(parameterName);
    var replacementName = replaceWithArgs[indexInParameterNames];
    return replacementName;
  });
  return newFnBody.split('\n');
};

var MatrixOps = {
  unroll: 'function(matVar, m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15) {\n    m0 = matVar[0];\n    m1 = matVar[1];\n    m2 = matVar[2];\n    m3 = matVar[3];\n    m4 = matVar[4];\n    m5 = matVar[5];\n    m6 = matVar[6];\n    m7 = matVar[7];\n    m8 = matVar[8];\n    m9 = matVar[9];\n    m10 = matVar[10];\n    m11 = matVar[11];\n    m12 = matVar[12];\n    m13 = matVar[13];\n    m14 = matVar[14];\n    m15 = matVar[15];\n  }',

  matrixDiffers: 'function(retVar, matVar, m0, m1, m2, m3, m4, m5, m6, m7, m8, m9, m10, m11, m12, m13, m14, m15) {\n    retVar = retVar ||\n    m0 !== matVar[0] ||\n    m1 !== matVar[1] ||\n    m2 !== matVar[2] ||\n    m3 !== matVar[3] ||\n    m4 !== matVar[4] ||\n    m5 !== matVar[5] ||\n    m6 !== matVar[6] ||\n    m7 !== matVar[7] ||\n    m8 !== matVar[8] ||\n    m9 !== matVar[9] ||\n    m10 !== matVar[10] ||\n    m11 !== matVar[11] ||\n    m12 !== matVar[12] ||\n    m13 !== matVar[13] ||\n    m14 !== matVar[14] ||\n    m15 !== matVar[15];\n  }',

  transformScale: 'function(matVar, opVar) {\n    // Scaling matVar by opVar\n    var x = opVar[0];\n    var y = opVar[1];\n    var z = opVar[2];\n    matVar[0] = matVar[0] * x;\n    matVar[1] = matVar[1] * x;\n    matVar[2] = matVar[2] * x;\n    matVar[3] = matVar[3] * x;\n    matVar[4] = matVar[4] * y;\n    matVar[5] = matVar[5] * y;\n    matVar[6] = matVar[6] * y;\n    matVar[7] = matVar[7] * y;\n    matVar[8] = matVar[8] * z;\n    matVar[9] = matVar[9] * z;\n    matVar[10] = matVar[10] * z;\n    matVar[11] = matVar[11] * z;\n    matVar[12] = matVar[12];\n    matVar[13] = matVar[13];\n    matVar[14] = matVar[14];\n    matVar[15] = matVar[15];\n  }',

  transformTranslate: 'function(matVar, opVar) {\n    // Translating matVar by opVar\n    var x = opVar[0];\n    var y = opVar[1];\n    var z = opVar[2];\n    matVar[12] = matVar[0] * x + matVar[4] * y + matVar[8] * z + matVar[12];\n    matVar[13] = matVar[1] * x + matVar[5] * y + matVar[9] * z + matVar[13];\n    matVar[14] = matVar[2] * x + matVar[6] * y + matVar[10] * z + matVar[14];\n    matVar[15] = matVar[3] * x + matVar[7] * y + matVar[11] * z + matVar[15];\n  }',

  transformRotateRadians: 'function(matVar, q) {\n    // Rotating matVar by q\n    var xQuat = q[0], yQuat = q[1], zQuat = q[2], wQuat = q[3];\n    var x2Quat = xQuat + xQuat;\n    var y2Quat = yQuat + yQuat;\n    var z2Quat = zQuat + zQuat;\n    var xxQuat = xQuat * x2Quat;\n    var xyQuat = xQuat * y2Quat;\n    var xzQuat = xQuat * z2Quat;\n    var yyQuat = yQuat * y2Quat;\n    var yzQuat = yQuat * z2Quat;\n    var zzQuat = zQuat * z2Quat;\n    var wxQuat = wQuat * x2Quat;\n    var wyQuat = wQuat * y2Quat;\n    var wzQuat = wQuat * z2Quat;\n    // Step 1: Inlines the construction of a quaternion matrix (\'quatMat\')\n    var quatMat0 = 1 - (yyQuat + zzQuat);\n    var quatMat1 = xyQuat + wzQuat;\n    var quatMat2 = xzQuat - wyQuat;\n    var quatMat4 = xyQuat - wzQuat;\n    var quatMat5 = 1 - (xxQuat + zzQuat);\n    var quatMat6 = yzQuat + wxQuat;\n    var quatMat8 = xzQuat + wyQuat;\n    var quatMat9 = yzQuat - wxQuat;\n    var quatMat10 = 1 - (xxQuat + yyQuat);\n    // quatMat3/7/11/12/13/14 = 0, quatMat15 = 1\n\n    // Step 2: Inlines multiplication, takes advantage of constant quatMat cells\n    var a00 = matVar[0];\n    var a01 = matVar[1];\n    var a02 = matVar[2];\n    var a03 = matVar[3];\n    var a10 = matVar[4];\n    var a11 = matVar[5];\n    var a12 = matVar[6];\n    var a13 = matVar[7];\n    var a20 = matVar[8];\n    var a21 = matVar[9];\n    var a22 = matVar[10];\n    var a23 = matVar[11];\n\n    var b0  = quatMat0, b1 = quatMat1, b2 = quatMat2;\n    matVar[0] = b0 * a00 + b1 * a10 + b2 * a20;\n    matVar[1] = b0 * a01 + b1 * a11 + b2 * a21;\n    matVar[2] = b0 * a02 + b1 * a12 + b2 * a22;\n    matVar[3] = b0 * a03 + b1 * a13 + b2 * a23;\n    b0 = quatMat4; b1 = quatMat5; b2 = quatMat6;\n    matVar[4] = b0 * a00 + b1 * a10 + b2 * a20;\n    matVar[5] = b0 * a01 + b1 * a11 + b2 * a21;\n    matVar[6] = b0 * a02 + b1 * a12 + b2 * a22;\n    matVar[7] = b0 * a03 + b1 * a13 + b2 * a23;\n    b0 = quatMat8; b1 = quatMat9; b2 = quatMat10;\n    matVar[8] = b0 * a00 + b1 * a10 + b2 * a20;\n    matVar[9] = b0 * a01 + b1 * a11 + b2 * a21;\n    matVar[10] = b0 * a02 + b1 * a12 + b2 * a22;\n    matVar[11] = b0 * a03 + b1 * a13 + b2 * a23;\n  }'
};

var MatrixOpsInitial = {
  transformScale: 'function(matVar, opVar) {\n    // Scaling matVar known to be identity by opVar\n    matVar[0] = opVar[0];\n    matVar[1] = 0;\n    matVar[2] = 0;\n    matVar[3] = 0;\n    matVar[4] = 0;\n    matVar[5] = opVar[1];\n    matVar[6] = 0;\n    matVar[7] = 0;\n    matVar[8] = 0;\n    matVar[9] = 0;\n    matVar[10] = opVar[2];\n    matVar[11] = 0;\n    matVar[12] = 0;\n    matVar[13] = 0;\n    matVar[14] = 0;\n    matVar[15] = 1;\n  }',

  transformTranslate: 'function(matVar, opVar) {\n    // Translating matVar known to be identity by opVar;\n    matVar[0] = 1;\n    matVar[1] = 0;\n    matVar[2] = 0;\n    matVar[3] = 0;\n    matVar[4] = 0;\n    matVar[5] = 1;\n    matVar[6] = 0;\n    matVar[7] = 0;\n    matVar[8] = 0;\n    matVar[9] = 0;\n    matVar[10] = 1;\n    matVar[11] = 0;\n    matVar[12] = opVar[0];\n    matVar[13] = opVar[1];\n    matVar[14] = opVar[2];\n    matVar[15] = 1;\n  }',

  transformRotateRadians: 'function(matVar, q) {\n\n    // Rotating matVar which is known to be identity by q\n    var xQuat = q[0], yQuat = q[1], zQuat = q[2], wQuat = q[3];\n    var x2Quat = xQuat + xQuat;\n    var y2Quat = yQuat + yQuat;\n    var z2Quat = zQuat + zQuat;\n    var xxQuat = xQuat * x2Quat;\n    var xyQuat = xQuat * y2Quat;\n    var xzQuat = xQuat * z2Quat;\n    var yyQuat = yQuat * y2Quat;\n    var yzQuat = yQuat * z2Quat;\n    var zzQuat = zQuat * z2Quat;\n    var wxQuat = wQuat * x2Quat;\n    var wyQuat = wQuat * y2Quat;\n    var wzQuat = wQuat * z2Quat;\n    // Step 1: Inlines the construction of a quaternion matrix (\'quatMat\')\n    var quatMat0 = 1 - (yyQuat + zzQuat);\n    var quatMat1 = xyQuat + wzQuat;\n    var quatMat2 = xzQuat - wyQuat;\n    var quatMat4 = xyQuat - wzQuat;\n    var quatMat5 = 1 - (xxQuat + zzQuat);\n    var quatMat6 = yzQuat + wxQuat;\n    var quatMat8 = xzQuat + wyQuat;\n    var quatMat9 = yzQuat - wxQuat;\n    var quatMat10 = 1 - (xxQuat + yyQuat);\n    // quatMat3/7/11/12/13/14 = 0, quatMat15 = 1\n\n    // Step 2: Inlines the multiplication with identity matrix.\n    var b0  = quatMat0, b1 = quatMat1, b2 = quatMat2;\n    matVar[0] = b0;\n    matVar[1] = b1;\n    matVar[2] = b2;\n    matVar[3] = 0;\n    b0 = quatMat4; b1 = quatMat5; b2 = quatMat6;\n    matVar[4] = b0;\n    matVar[5] = b1;\n    matVar[6] = b2;\n    matVar[7] = 0;\n    b0 = quatMat8; b1 = quatMat9; b2 = quatMat10;\n    matVar[8] = b0;\n    matVar[9] = b1;\n    matVar[10] = b2;\n    matVar[11] = 0;\n    matVar[12] = 0;\n    matVar[13] = 0;\n    matVar[14] = 0;\n    matVar[15] = 1;\n  }'
};

var setNextValAndDetectChange = function setNextValAndDetectChange(name, tmpVarName) {
  return '  if (!didChange) {\n' + '    var prevVal = result.' + name + ';\n' + '    result.' + name + ' = ' + tmpVarName + ';\n' + '    didChange = didChange  || (' + tmpVarName + ' !== prevVal);\n' + '  } else {\n' + '    result.' + name + ' = ' + tmpVarName + ';\n' + '  }\n';
};

var computeNextValLinear = function computeNextValLinear(anim, from, to, tmpVarName) {
  var hasRoundRatio = 'round' in anim;
  var roundRatio = anim.round;
  var fn = '  ratio = (value - ' + anim.min + ') / ' + (anim.max - anim.min) + ';\n';
  if (!anim.extrapolate) {
    fn += '  ratio = ratio > 1 ? 1 : (ratio < 0 ? 0 : ratio);\n';
  }

  var roundOpen = hasRoundRatio ? 'Math.round(' + roundRatio + ' * ' : '';
  var roundClose = hasRoundRatio ? ') / ' + roundRatio : '';
  fn += '  ' + tmpVarName + ' = ' + roundOpen + '(' + from + ' * (1 - ratio) + ' + to + ' * ratio)' + roundClose + ';\n';
  return fn;
};

var computeNextValLinearScalar = function computeNextValLinearScalar(anim) {
  return computeNextValLinear(anim, anim.from, anim.to, 'nextScalarVal');
};

var computeNextValConstant = function computeNextValConstant(anim) {
  var constantExpression = JSON.stringify(anim.value);
  return '  nextScalarVal = ' + constantExpression + ';\n';
};

var computeNextValStep = function computeNextValStep(anim) {
  return '  nextScalarVal = value >= ' + (anim.threshold + ' ? ' + anim.to + ' : ' + anim.from) + ';\n';
};

var computeNextValIdentity = function computeNextValIdentity(anim) {
  return '  nextScalarVal = value;\n';
};

var operationVar = function operationVar(name) {
  return name + 'ReuseOp';
};

var createReusableOperationVars = function createReusableOperationVars(anims) {
  var ret = '';
  for (var name in anims) {
    if (ShouldAllocateReusableOperationVars[name]) {
      ret += 'var ' + operationVar(name) + ' = [];\n';
    }
  }
  return ret;
};

var newlines = function newlines(statements) {
  return '\n' + statements.join('\n') + '\n';
};

var computeNextMatrixOperationField = function computeNextMatrixOperationField(anim, name, dimension, index) {
  var fieldAccess = operationVar(name) + '[' + index + ']';
  if (anim.from[dimension] !== undefined && anim.to[dimension] !== undefined) {
    return '  ' + anim.from[dimension] !== anim.to[dimension] ? computeNextValLinear(anim, anim.from[dimension], anim.to[dimension], fieldAccess) : fieldAccess + ' = ' + anim.from[dimension] + ';';
  } else {
    return '  ' + fieldAccess + ' = ' + InitialOperationField[name][index] + ';';
  }
};

var unrolledVars = [];
for (var varIndex = 0; varIndex < 16; varIndex++) {
  unrolledVars.push('m' + varIndex);
}
var setNextMatrixAndDetectChange = function setNextMatrixAndDetectChange(orderedMatrixOperations) {
  var fn = ['  var transform = result.transform !== undefined ? ' + 'result.transform : (result.transform = [{ matrix: [] }]);' + '  var transformMatrix = transform[0].matrix;'];
  fn.push.apply(fn, inline(MatrixOps.unroll, ['transformMatrix'].concat(unrolledVars)));
  for (var i = 0; i < orderedMatrixOperations.length; i++) {
    var opName = orderedMatrixOperations[i];
    if (i === 0) {
      fn.push.apply(fn, inline(MatrixOpsInitial[opName], ['transformMatrix', operationVar(opName)]));
    } else {
      fn.push.apply(fn, inline(MatrixOps[opName], ['transformMatrix', operationVar(opName)]));
    }
  }
  fn.push.apply(fn, inline(MatrixOps.matrixDiffers, ['didChange', 'transformMatrix'].concat(unrolledVars)));
  return fn;
};

var InterpolateMatrix = {
  transformTranslate: true,
  transformRotateRadians: true,
  transformScale: true
};

var createFunctionString = function createFunctionString(anims) {
  var orderedMatrixOperations = [];

  var fn = 'return (function() {\n';
  fn += createReusableOperationVars(anims);
  fn += 'return function(result, value) {\n';
  fn += '  var didChange = false;\n';
  fn += '  var nextScalarVal;\n';
  fn += '  var ratio;\n';

  for (var name in anims) {
    var anim = anims[name];
    if (anim.type === 'linear') {
      if (InterpolateMatrix[name]) {
        orderedMatrixOperations.push(name);
        var setOperations = [computeNextMatrixOperationField(anim, name, X_DIM, 0), computeNextMatrixOperationField(anim, name, Y_DIM, 1), computeNextMatrixOperationField(anim, name, Z_DIM, 2)];
        if (name === TRANSFORM_ROTATE_NAME) {
          setOperations.push(computeNextMatrixOperationField(anim, name, W_DIM, 3));
        }
        fn += newlines(setOperations);
      } else {
        fn += computeNextValLinearScalar(anim, 'nextScalarVal');
        fn += setNextValAndDetectChange(name, 'nextScalarVal');
      }
    } else if (anim.type === 'constant') {
      fn += computeNextValConstant(anim);
      fn += setNextValAndDetectChange(name, 'nextScalarVal');
    } else if (anim.type === 'step') {
      fn += computeNextValStep(anim);
      fn += setNextValAndDetectChange(name, 'nextScalarVal');
    } else if (anim.type === 'identity') {
      fn += computeNextValIdentity(anim);
      fn += setNextValAndDetectChange(name, 'nextScalarVal');
    }
  }
  if (orderedMatrixOperations.length) {
    fn += newlines(setNextMatrixAndDetectChange(orderedMatrixOperations));
  }
  fn += '  return didChange;\n';
  fn += '};\n';
  fn += '})()';
  return fn;
};

var buildStyleInterpolator = function buildStyleInterpolator(anims) {
  var interpolator = null;
  function lazyStyleInterpolator(result, value) {
    if (interpolator === null) {
      interpolator = Function(createFunctionString(anims))();
    }
    return interpolator(result, value);
  }
  return lazyStyleInterpolator;
};

module.exports = buildStyleInterpolator;
}, 321, null, "buildStyleInterpolator");
__d(/* NavigatorNavigationBarStylesIOS */function(global, require, module, exports) {
'use strict';

var Dimensions = require(106         ); // 106 = Dimensions

var buildStyleInterpolator = require(321                     ); // 321 = buildStyleInterpolator
var merge = require(127    ); // 127 = merge

var SCREEN_WIDTH = Dimensions.get('window').width;
var NAV_BAR_HEIGHT = 44;
var STATUS_BAR_HEIGHT = 20;
var NAV_HEIGHT = NAV_BAR_HEIGHT + STATUS_BAR_HEIGHT;

var BASE_STYLES = {
  Title: {
    position: 'absolute',
    top: STATUS_BAR_HEIGHT,
    left: 0,
    right: 0,
    alignItems: 'center',
    height: NAV_BAR_HEIGHT,
    backgroundColor: 'transparent'
  },
  LeftButton: {
    position: 'absolute',
    top: STATUS_BAR_HEIGHT,
    left: 0,
    overflow: 'hidden',
    opacity: 1,
    height: NAV_BAR_HEIGHT,
    backgroundColor: 'transparent'
  },
  RightButton: {
    position: 'absolute',
    top: STATUS_BAR_HEIGHT,
    right: 0,
    overflow: 'hidden',
    opacity: 1,
    alignItems: 'flex-end',
    height: NAV_BAR_HEIGHT,
    backgroundColor: 'transparent'
  }
};

var Stages = {
  Left: {
    Title: merge(BASE_STYLES.Title, { left: -SCREEN_WIDTH / 2, opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { left: 0, opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  },
  Center: {
    Title: merge(BASE_STYLES.Title, { left: 0, opacity: 1 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { left: 0, opacity: 1 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 1 })
  },
  Right: {
    Title: merge(BASE_STYLES.Title, { left: SCREEN_WIDTH / 2, opacity: 0 }),
    LeftButton: merge(BASE_STYLES.LeftButton, { left: 0, opacity: 0 }),
    RightButton: merge(BASE_STYLES.RightButton, { opacity: 0 })
  }
};

var opacityRatio = 100;

function buildSceneInterpolators(startStyles, endStyles) {
  return {
    Title: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.Title.opacity,
        to: endStyles.Title.opacity,
        min: 0,
        max: 1
      },
      left: {
        type: 'linear',
        from: startStyles.Title.left,
        to: endStyles.Title.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    }),
    LeftButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.LeftButton.opacity,
        to: endStyles.LeftButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.LeftButton.left,
        to: endStyles.LeftButton.left,
        min: 0,
        max: 1
      }
    }),
    RightButton: buildStyleInterpolator({
      opacity: {
        type: 'linear',
        from: startStyles.RightButton.opacity,
        to: endStyles.RightButton.opacity,
        min: 0,
        max: 1,
        round: opacityRatio
      },
      left: {
        type: 'linear',
        from: startStyles.RightButton.left,
        to: endStyles.RightButton.left,
        min: 0,
        max: 1,
        extrapolate: true
      }
    })
  };
}

var Interpolators = {
  RightToCenter: buildSceneInterpolators(Stages.Right, Stages.Center),

  CenterToLeft: buildSceneInterpolators(Stages.Center, Stages.Left),

  RightToLeft: buildSceneInterpolators(Stages.Right, Stages.Left)
};

module.exports = {
  General: {
    NavBarHeight: NAV_BAR_HEIGHT,
    StatusBarHeight: STATUS_BAR_HEIGHT,
    TotalNavHeight: NAV_HEIGHT
  },
  Interpolators: Interpolators,
  Stages: Stages
};
}, 322, null, "NavigatorNavigationBarStylesIOS");
__d(/* NavigatorNavigationBar */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/Navigator/NavigatorNavigationBar.js';
var React = require(103    ); // 103 = React
var NavigatorNavigationBarStylesAndroid = require(320                                  ); // 320 = NavigatorNavigationBarStylesAndroid
var NavigatorNavigationBarStylesIOS = require(322                              ); // 322 = NavigatorNavigationBarStylesIOS
var Platform = require(56        ); // 56 = Platform
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var guid = require(221   ); // 221 = guid

var _require = require(317        ), // 317 = immutable
    Map = _require.Map;

var COMPONENT_NAMES = ['Title', 'LeftButton', 'RightButton'];

var NavigatorNavigationBarStyles = Platform.OS === 'android' ? NavigatorNavigationBarStylesAndroid : NavigatorNavigationBarStylesIOS;

var navStatePresentedIndex = function navStatePresentedIndex(navState) {
  if (navState.presentedIndex !== undefined) {
    return navState.presentedIndex;
  }

  return navState.observedTopOfStack;
};

var NavigatorNavigationBar = function (_React$Component) {
  babelHelpers.inherits(NavigatorNavigationBar, _React$Component);

  function NavigatorNavigationBar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, NavigatorNavigationBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigatorNavigationBar.__proto__ || Object.getPrototypeOf(NavigatorNavigationBar)).call.apply(_ref, [this].concat(args))), _this), _this.immediatelyRefresh = function () {
      _this._reset();
      _this.forceUpdate();
    }, _this._reset = function () {
      _this._key = guid();
      _this._reusableProps = {};
      _this._components = {};
      _this._descriptors = {};

      COMPONENT_NAMES.forEach(function (componentName) {
        _this._components[componentName] = new Map();
        _this._descriptors[componentName] = new Map();
      });
    }, _this._getReusableProps = function (componentName, index) {
      var propStack = _this._reusableProps[componentName];
      if (!propStack) {
        propStack = _this._reusableProps[componentName] = [];
      }
      var props = propStack[index];
      if (!props) {
        props = propStack[index] = { style: {} };
      }
      return props;
    }, _this._updateIndexProgress = function (progress, index, fromIndex, toIndex) {
      var amount = toIndex > fromIndex ? progress : 1 - progress;
      var oldDistToCenter = index - fromIndex;
      var newDistToCenter = index - toIndex;
      var interpolate;
      if (oldDistToCenter > 0 && newDistToCenter === 0 || newDistToCenter > 0 && oldDistToCenter === 0) {
        interpolate = _this.props.navigationStyles.Interpolators.RightToCenter;
      } else if (oldDistToCenter < 0 && newDistToCenter === 0 || newDistToCenter < 0 && oldDistToCenter === 0) {
        interpolate = _this.props.navigationStyles.Interpolators.CenterToLeft;
      } else if (oldDistToCenter === newDistToCenter) {
        interpolate = _this.props.navigationStyles.Interpolators.RightToCenter;
      } else {
        interpolate = _this.props.navigationStyles.Interpolators.RightToLeft;
      }

      COMPONENT_NAMES.forEach(function (componentName) {
        var component = this._components[componentName].get(this.props.navState.routeStack[index]);
        var props = this._getReusableProps(componentName, index);
        if (component && interpolate[componentName](props.style, amount)) {
          props.pointerEvents = props.style.opacity === 0 ? 'none' : 'box-none';
          component.setNativeProps(props);
        }
      }, _this);
    }, _this.updateProgress = function (progress, fromIndex, toIndex) {
      var max = Math.max(fromIndex, toIndex);
      var min = Math.min(fromIndex, toIndex);
      for (var index = min; index <= max; index++) {
        _this._updateIndexProgress(progress, index, fromIndex, toIndex);
      }
    }, _this._getComponent = function (componentName, route, index) {
      if (_this._descriptors[componentName].includes(route)) {
        return _this._descriptors[componentName].get(route);
      }

      var rendered = null;

      var content = _this.props.routeMapper[componentName](_this.props.navState.routeStack[index], _this.props.navigator, index, _this.props.navState);
      if (!content) {
        return null;
      }

      var componentIsActive = index === navStatePresentedIndex(_this.props.navState);
      var initialStage = componentIsActive ? _this.props.navigationStyles.Stages.Center : _this.props.navigationStyles.Stages.Left;
      rendered = React.createElement(
        View,
        {
          ref: function ref(_ref2) {
            _this._components[componentName] = _this._components[componentName].set(route, _ref2);
          },
          pointerEvents: componentIsActive ? 'box-none' : 'none',
          style: initialStage[componentName], __source: {
            fileName: _jsxFileName,
            lineNumber: 196
          }
        },
        content
      );

      _this._descriptors[componentName] = _this._descriptors[componentName].set(route, rendered);
      return rendered;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(NavigatorNavigationBar, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._reset();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var navBarStyle = {
        height: this.props.navigationStyles.General.TotalNavHeight
      };
      var navState = this.props.navState;
      var components = navState.routeStack.map(function (route, index) {
        return COMPONENT_NAMES.map(function (componentName) {
          return _this2._getComponent(componentName, route, index);
        });
      });

      return React.createElement(
        View,
        {
          key: this._key,
          style: [styles.navBarContainer, navBarStyle, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 166
          }
        },
        components
      );
    }
  }]);
  return NavigatorNavigationBar;
}(React.Component);

NavigatorNavigationBar.propTypes = {
  navigator: React.PropTypes.object,
  routeMapper: React.PropTypes.shape({
    Title: React.PropTypes.func.isRequired,
    LeftButton: React.PropTypes.func.isRequired,
    RightButton: React.PropTypes.func.isRequired
  }).isRequired,
  navState: React.PropTypes.shape({
    routeStack: React.PropTypes.arrayOf(React.PropTypes.object),
    presentedIndex: React.PropTypes.number
  }),
  navigationStyles: React.PropTypes.object,
  style: View.propTypes.style
};
NavigatorNavigationBar.Styles = NavigatorNavigationBarStyles;
NavigatorNavigationBar.StylesAndroid = NavigatorNavigationBarStylesAndroid;
NavigatorNavigationBar.StylesIOS = NavigatorNavigationBarStylesIOS;
NavigatorNavigationBar.defaultProps = {
  navigationStyles: NavigatorNavigationBarStyles
};


var styles = StyleSheet.create({
  navBarContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    backgroundColor: 'transparent'
  }
});

module.exports = NavigatorNavigationBar;
}, 323, null, "NavigatorNavigationBar");
__d(/* NavigatorSceneConfigs */function(global, require, module, exports) {
'use strict';

var Dimensions = require(106         ); // 106 = Dimensions
var I18nManager = require(310          ); // 310 = I18nManager
var PixelRatio = require(105         ); // 105 = PixelRatio

var buildStyleInterpolator = require(321                     ); // 321 = buildStyleInterpolator

var IS_RTL = I18nManager.isRTL;

var SCREEN_WIDTH = Dimensions.get('window').width;
var SCREEN_HEIGHT = Dimensions.get('window').height;
var PIXEL_RATIO = PixelRatio.get();

var ToTheLeftIOS = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: -SCREEN_WIDTH * 0.3, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  }
};

var ToTheRightIOS = babelHelpers.extends({}, ToTheLeftIOS, {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: SCREEN_WIDTH * 0.3, y: 0, z: 0 }
  }
});

var FadeToTheLeft = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: -Math.round(SCREEN_WIDTH * 0.3), y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },

  transformScale: {
    from: { x: 1, y: 1, z: 1 },
    to: { x: 0.95, y: 0.95, z: 1 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  opacity: {
    from: 1,
    to: 0.3,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  },
  translateX: {
    from: 0,
    to: -Math.round(SCREEN_WIDTH * 0.3),
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  scaleX: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  scaleY: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  }
};

var FadeToTheRight = babelHelpers.extends({}, FadeToTheLeft, {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: Math.round(SCREEN_WIDTH * 0.3), y: 0, z: 0 }
  },
  translateX: {
    from: 0,
    to: Math.round(SCREEN_WIDTH * 0.3)
  }
});

var FadeIn = {
  opacity: {
    from: 0,
    to: 1,
    min: 0.5,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  }
};

var FadeOut = {
  opacity: {
    from: 1,
    to: 0,
    min: 0,
    max: 0.5,
    type: 'linear',
    extrapolate: false,
    round: 100
  }
};

var ToTheLeft = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: -SCREEN_WIDTH, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  translateX: {
    from: 0,
    to: -SCREEN_WIDTH,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var ToTheRight = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: SCREEN_WIDTH, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  translateX: {
    from: 0,
    to: SCREEN_WIDTH,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var ToTheUp = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: 0, y: -SCREEN_HEIGHT, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },
  translateY: {
    from: 0,
    to: -SCREEN_HEIGHT,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var ToTheDown = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: 0, y: SCREEN_HEIGHT, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  opacity: {
    value: 1.0,
    type: 'constant'
  },
  translateY: {
    from: 0,
    to: SCREEN_HEIGHT,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var FromTheRight = {
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  transformTranslate: {
    from: { x: SCREEN_WIDTH, y: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },

  translateX: {
    from: SCREEN_WIDTH,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },

  scaleX: {
    value: 1,
    type: 'constant'
  },
  scaleY: {
    value: 1,
    type: 'constant'
  }
};

var FromTheLeft = babelHelpers.extends({}, FromTheRight, {
  transformTranslate: {
    from: { x: -SCREEN_WIDTH, y: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateX: {
    from: -SCREEN_WIDTH,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
});

var FromTheDown = babelHelpers.extends({}, FromTheRight, {
  transformTranslate: {
    from: { y: SCREEN_HEIGHT, x: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: SCREEN_HEIGHT,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
});

var FromTheTop = babelHelpers.extends({}, FromTheRight, {
  transformTranslate: {
    from: { y: -SCREEN_HEIGHT, x: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: -SCREEN_HEIGHT,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
});

var ToTheBack = {
  transformTranslate: {
    from: { x: 0, y: 0, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  transformScale: {
    from: { x: 1, y: 1, z: 1 },
    to: { x: 0.95, y: 0.95, z: 1 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  opacity: {
    from: 1,
    to: 0.3,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  },
  scaleX: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  },
  scaleY: {
    from: 1,
    to: 0.95,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true
  }
};

var FromTheFront = {
  opacity: {
    value: 1.0,
    type: 'constant'
  },

  transformTranslate: {
    from: { x: 0, y: SCREEN_HEIGHT, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: SCREEN_HEIGHT,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  scaleX: {
    value: 1,
    type: 'constant'
  },
  scaleY: {
    value: 1,
    type: 'constant'
  }
};

var ToTheBackAndroid = {
  opacity: {
    value: 1,
    type: 'constant'
  }
};

var FromTheFrontAndroid = {
  opacity: {
    from: 0,
    to: 1,
    min: 0.5,
    max: 1,
    type: 'linear',
    extrapolate: false,
    round: 100
  },
  transformTranslate: {
    from: { x: 0, y: 100, z: 0 },
    to: { x: 0, y: 0, z: 0 },
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  },
  translateY: {
    from: 100,
    to: 0,
    min: 0,
    max: 1,
    type: 'linear',
    extrapolate: true,
    round: PIXEL_RATIO
  }
};

var BaseOverswipeConfig = {
  frictionConstant: 1,
  frictionByDistance: 1.5
};

var BaseLeftToRightGesture = {
  isDetachable: false,

  gestureDetectMovement: 2,

  notMoving: 0.3,

  directionRatio: 0.66,

  snapVelocity: 2,

  edgeHitWidth: 30,

  stillCompletionRatio: 3 / 5,

  fullDistance: SCREEN_WIDTH,

  direction: 'left-to-right'

};

var BaseRightToLeftGesture = babelHelpers.extends({}, BaseLeftToRightGesture, {
  direction: 'right-to-left'
});

var BaseDownUpGesture = babelHelpers.extends({}, BaseLeftToRightGesture, {
  fullDistance: SCREEN_HEIGHT,
  direction: 'bottom-to-top'
});

var BaseUpDownGesture = babelHelpers.extends({}, BaseLeftToRightGesture, {
  fullDistance: SCREEN_HEIGHT,
  direction: 'top-to-bottom'
});

var directionMapping = {
  ToTheStartIOS: ToTheLeftIOS,
  ToTheEndIOS: ToTheRightIOS,
  FadeToTheStart: FadeToTheLeft,
  FadeToTheEnd: FadeToTheRight,
  ToTheStart: ToTheLeft,
  ToTheEnd: ToTheRight,
  FromTheStart: FromTheLeft,
  FromTheEnd: FromTheRight,
  BaseStartToEndGesture: BaseLeftToRightGesture,
  BaseEndToStartGesture: BaseRightToLeftGesture
};

if (IS_RTL) {
  directionMapping = {
    ToTheStartIOS: ToTheRightIOS,
    ToTheEndIOS: ToTheLeftIOS,
    FadeToTheStart: FadeToTheRight,
    FadeToTheEnd: FadeToTheLeft,
    ToTheStart: ToTheRight,
    ToTheEnd: ToTheLeft,
    FromTheStart: FromTheRight,
    FromTheEnd: FromTheLeft,
    BaseStartToEndGesture: BaseRightToLeftGesture,
    BaseEndToStartGesture: BaseLeftToRightGesture
  };
}

var BaseConfig = {
  gestures: {
    pop: directionMapping.BaseStartToEndGesture
  },

  springFriction: 26,
  springTension: 200,

  defaultTransitionVelocity: 1.5,

  animationInterpolators: {
    into: buildStyleInterpolator(directionMapping.FromTheEnd),
    out: buildStyleInterpolator(directionMapping.FadeToTheStart)
  }
};

var NavigatorSceneConfigs = {
  PushFromRight: babelHelpers.extends({}, BaseConfig, {
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheEnd),
      out: buildStyleInterpolator(directionMapping.ToTheStartIOS)
    }
  }),
  PushFromLeft: babelHelpers.extends({}, BaseConfig, {
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.ToTheEndIOS)
    }
  }),
  FloatFromRight: babelHelpers.extends({}, BaseConfig),
  FloatFromLeft: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      pop: directionMapping.BaseEndToStartGesture
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.FadeToTheEnd)
    }
  }),
  FloatFromBottom: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      pop: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        edgeHitWidth: 150,
        direction: 'top-to-bottom',
        fullDistance: SCREEN_HEIGHT
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheFront),
      out: buildStyleInterpolator(ToTheBack)
    }
  }),
  FloatFromBottomAndroid: babelHelpers.extends({}, BaseConfig, {
    gestures: null,
    defaultTransitionVelocity: 3,
    springFriction: 20,
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheFrontAndroid),
      out: buildStyleInterpolator(ToTheBackAndroid)
    }
  }),
  FadeAndroid: babelHelpers.extends({}, BaseConfig, {
    gestures: null,
    animationInterpolators: {
      into: buildStyleInterpolator(FadeIn),
      out: buildStyleInterpolator(FadeOut)
    }
  }),
  SwipeFromLeft: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.ToTheEnd)
    }
  }),
  HorizontalSwipeJump: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheEnd),
      out: buildStyleInterpolator(directionMapping.ToTheStart)
    }
  }),
  HorizontalSwipeJumpFromRight: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      pop: directionMapping.BaseEndToStartGesture
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.FadeToTheEnd)
    }
  }),
  HorizontalSwipeJumpFromLeft: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, directionMapping.BaseEndToStartGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, directionMapping.BaseStartToEndGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      pop: directionMapping.BaseEndToStartGesture
    },
    animationInterpolators: {
      into: buildStyleInterpolator(directionMapping.FromTheStart),
      out: buildStyleInterpolator(directionMapping.ToTheEnd)
    }
  }),
  VerticalUpSwipeJump: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, BaseUpDownGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, BaseDownUpGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheDown),
      out: buildStyleInterpolator(ToTheUp)
    }
  }),
  VerticalDownSwipeJump: babelHelpers.extends({}, BaseConfig, {
    gestures: {
      jumpBack: babelHelpers.extends({}, BaseDownUpGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      }),
      jumpForward: babelHelpers.extends({}, BaseUpDownGesture, {
        overswipe: BaseOverswipeConfig,
        edgeHitWidth: null,
        isDetachable: true
      })
    },
    animationInterpolators: {
      into: buildStyleInterpolator(FromTheTop),
      out: buildStyleInterpolator(ToTheDown)
    }
  })
};

module.exports = NavigatorSceneConfigs;
}, 324, null, "NavigatorSceneConfigs");
__d(/* PanResponder */function(global, require, module, exports) {

'use strict';

var InteractionManager = require(258                   ); // 258 = ./InteractionManager
var TouchHistoryMath = require(326               ); // 326 = TouchHistoryMath

var currentCentroidXOfTouchesChangedAfter = TouchHistoryMath.currentCentroidXOfTouchesChangedAfter;
var currentCentroidYOfTouchesChangedAfter = TouchHistoryMath.currentCentroidYOfTouchesChangedAfter;
var previousCentroidXOfTouchesChangedAfter = TouchHistoryMath.previousCentroidXOfTouchesChangedAfter;
var previousCentroidYOfTouchesChangedAfter = TouchHistoryMath.previousCentroidYOfTouchesChangedAfter;
var currentCentroidX = TouchHistoryMath.currentCentroidX;
var currentCentroidY = TouchHistoryMath.currentCentroidY;

var PanResponder = {

  _initializeGestureState: function _initializeGestureState(gestureState) {
    gestureState.moveX = 0;
    gestureState.moveY = 0;
    gestureState.x0 = 0;
    gestureState.y0 = 0;
    gestureState.dx = 0;
    gestureState.dy = 0;
    gestureState.vx = 0;
    gestureState.vy = 0;
    gestureState.numberActiveTouches = 0;

    gestureState._accountsForMovesUpTo = 0;
  },

  _updateGestureStateOnMove: function _updateGestureStateOnMove(gestureState, touchHistory) {
    gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
    gestureState.moveX = currentCentroidXOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    gestureState.moveY = currentCentroidYOfTouchesChangedAfter(touchHistory, gestureState._accountsForMovesUpTo);
    var movedAfter = gestureState._accountsForMovesUpTo;
    var prevX = previousCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var x = currentCentroidXOfTouchesChangedAfter(touchHistory, movedAfter);
    var prevY = previousCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var y = currentCentroidYOfTouchesChangedAfter(touchHistory, movedAfter);
    var nextDX = gestureState.dx + (x - prevX);
    var nextDY = gestureState.dy + (y - prevY);

    var dt = touchHistory.mostRecentTimeStamp - gestureState._accountsForMovesUpTo;
    gestureState.vx = (nextDX - gestureState.dx) / dt;
    gestureState.vy = (nextDY - gestureState.dy) / dt;

    gestureState.dx = nextDX;
    gestureState.dy = nextDY;
    gestureState._accountsForMovesUpTo = touchHistory.mostRecentTimeStamp;
  },

  create: function create(config) {
    var interactionState = {
      handle: null
    };
    var gestureState = {
      stateID: Math.random()
    };
    PanResponder._initializeGestureState(gestureState);
    var panHandlers = {
      onStartShouldSetResponder: function onStartShouldSetResponder(e) {
        return config.onStartShouldSetPanResponder === undefined ? false : config.onStartShouldSetPanResponder(e, gestureState);
      },
      onMoveShouldSetResponder: function onMoveShouldSetResponder(e) {
        return config.onMoveShouldSetPanResponder === undefined ? false : config.onMoveShouldSetPanResponder(e, gestureState);
      },
      onStartShouldSetResponderCapture: function onStartShouldSetResponderCapture(e) {
        if (e.nativeEvent.touches.length === 1) {
          PanResponder._initializeGestureState(gestureState);
        }
        gestureState.numberActiveTouches = e.touchHistory.numberActiveTouches;
        return config.onStartShouldSetPanResponderCapture !== undefined ? config.onStartShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onMoveShouldSetResponderCapture: function onMoveShouldSetResponderCapture(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return false;
        }
        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        return config.onMoveShouldSetPanResponderCapture ? config.onMoveShouldSetPanResponderCapture(e, gestureState) : false;
      },

      onResponderGrant: function onResponderGrant(e) {
        if (!interactionState.handle) {
          interactionState.handle = InteractionManager.createInteractionHandle();
        }
        gestureState.x0 = currentCentroidX(e.touchHistory);
        gestureState.y0 = currentCentroidY(e.touchHistory);
        gestureState.dx = 0;
        gestureState.dy = 0;
        if (config.onPanResponderGrant) {
          config.onPanResponderGrant(e, gestureState);
        }

        return config.onShouldBlockNativeResponder === undefined ? true : config.onShouldBlockNativeResponder();
      },

      onResponderReject: function onResponderReject(e) {
        clearInteractionHandle(interactionState, config.onPanResponderReject, e, gestureState);
      },

      onResponderRelease: function onResponderRelease(e) {
        clearInteractionHandle(interactionState, config.onPanResponderRelease, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderStart: function onResponderStart(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        if (config.onPanResponderStart) {
          config.onPanResponderStart(e, gestureState);
        }
      },

      onResponderMove: function onResponderMove(e) {
        var touchHistory = e.touchHistory;

        if (gestureState._accountsForMovesUpTo === touchHistory.mostRecentTimeStamp) {
          return;
        }

        PanResponder._updateGestureStateOnMove(gestureState, touchHistory);
        if (config.onPanResponderMove) {
          config.onPanResponderMove(e, gestureState);
        }
      },

      onResponderEnd: function onResponderEnd(e) {
        var touchHistory = e.touchHistory;
        gestureState.numberActiveTouches = touchHistory.numberActiveTouches;
        clearInteractionHandle(interactionState, config.onPanResponderEnd, e, gestureState);
      },

      onResponderTerminate: function onResponderTerminate(e) {
        clearInteractionHandle(interactionState, config.onPanResponderTerminate, e, gestureState);
        PanResponder._initializeGestureState(gestureState);
      },

      onResponderTerminationRequest: function onResponderTerminationRequest(e) {
        return config.onPanResponderTerminationRequest === undefined ? true : config.onPanResponderTerminationRequest(e, gestureState);
      }
    };
    return {
      panHandlers: panHandlers,
      getInteractionHandle: function getInteractionHandle() {
        return interactionState.handle;
      }
    };
  }
};

function clearInteractionHandle(interactionState, callback, event, gestureState) {
  if (interactionState.handle) {
    InteractionManager.clearInteractionHandle(interactionState.handle);
    interactionState.handle = null;
  }
  if (callback) {
    callback(event, gestureState);
  }
}

module.exports = PanResponder;
}, 325, null, "PanResponder");
__d(/* TouchHistoryMath */function(global, require, module, exports) {

'use strict';

var TouchHistoryMath = {
  centroidDimension: function centroidDimension(touchHistory, touchesChangedAfter, isXAxis, ofCurrent) {
    var touchBank = touchHistory.touchBank;
    var total = 0;
    var count = 0;

    var oneTouchData = touchHistory.numberActiveTouches === 1 ? touchHistory.touchBank[touchHistory.indexOfSingleActiveTouch] : null;

    if (oneTouchData !== null) {
      if (oneTouchData.touchActive && oneTouchData.currentTimeStamp > touchesChangedAfter) {
        total += ofCurrent && isXAxis ? oneTouchData.currentPageX : ofCurrent && !isXAxis ? oneTouchData.currentPageY : !ofCurrent && isXAxis ? oneTouchData.previousPageX : oneTouchData.previousPageY;
        count = 1;
      }
    } else {
      for (var i = 0; i < touchBank.length; i++) {
        var touchTrack = touchBank[i];
        if (touchTrack !== null && touchTrack !== undefined && touchTrack.touchActive && touchTrack.currentTimeStamp >= touchesChangedAfter) {
          var toAdd;
          if (ofCurrent && isXAxis) {
            toAdd = touchTrack.currentPageX;
          } else if (ofCurrent && !isXAxis) {
            toAdd = touchTrack.currentPageY;
          } else if (!ofCurrent && isXAxis) {
            toAdd = touchTrack.previousPageX;
          } else {
            toAdd = touchTrack.previousPageY;
          }
          total += toAdd;
          count++;
        }
      }
    }
    return count > 0 ? total / count : TouchHistoryMath.noCentroid;
  },

  currentCentroidXOfTouchesChangedAfter: function currentCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, true);
  },

  currentCentroidYOfTouchesChangedAfter: function currentCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, true);
  },

  previousCentroidXOfTouchesChangedAfter: function previousCentroidXOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, true, false);
  },

  previousCentroidYOfTouchesChangedAfter: function previousCentroidYOfTouchesChangedAfter(touchHistory, touchesChangedAfter) {
    return TouchHistoryMath.centroidDimension(touchHistory, touchesChangedAfter, false, false);
  },

  currentCentroidX: function currentCentroidX(touchHistory) {
    return TouchHistoryMath.centroidDimension(touchHistory, 0, true, true);
  },

  currentCentroidY: function currentCentroidY(touchHistory) {
    return TouchHistoryMath.centroidDimension(touchHistory, 0, false, true);
  },

  noCentroid: -1
};

module.exports = TouchHistoryMath;
}, 326, null, "TouchHistoryMath");
__d(/* clamp */function(global, require, module, exports) {
'use strict';

function clamp(min, value, max) {
  if (value < min) {
    return min;
  }
  if (value > max) {
    return max;
  }
  return value;
}

module.exports = clamp;
}, 327, null, "clamp");
__d(/* rebound/rebound.js */function(global, require, module, exports) {

(function () {
  var rebound = {};
  var util = rebound.util = {};
  var concat = Array.prototype.concat;
  var slice = Array.prototype.slice;

  util.bind = function bind(func, context) {
    var args = slice.call(arguments, 2);
    return function () {
      func.apply(context, concat.call(args, slice.call(arguments)));
    };
  };

  util.extend = function extend(target, source) {
    for (var key in source) {
      if (source.hasOwnProperty(key)) {
        target[key] = source[key];
      }
    }
  };

  var SpringSystem = rebound.SpringSystem = function SpringSystem(looper) {
    this._springRegistry = {};
    this._activeSprings = [];
    this.listeners = [];
    this._idleSpringIndices = [];
    this.looper = looper || new AnimationLooper();
    this.looper.springSystem = this;
  };

  util.extend(SpringSystem.prototype, {

    _springRegistry: null,

    _isIdle: true,

    _lastTimeMillis: -1,

    _activeSprings: null,

    listeners: null,

    _idleSpringIndices: null,

    setLooper: function setLooper(looper) {
      this.looper = looper;
      looper.springSystem = this;
    },

    createSpring: function createSpring(tension, friction) {
      var springConfig;
      if (tension === undefined || friction === undefined) {
        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
      } else {
        springConfig = SpringConfig.fromOrigamiTensionAndFriction(tension, friction);
      }
      return this.createSpringWithConfig(springConfig);
    },

    createSpringWithBouncinessAndSpeed: function createSpringWithBouncinessAndSpeed(bounciness, speed) {
      var springConfig;
      if (bounciness === undefined || speed === undefined) {
        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;
      } else {
        springConfig = SpringConfig.fromBouncinessAndSpeed(bounciness, speed);
      }
      return this.createSpringWithConfig(springConfig);
    },

    createSpringWithConfig: function createSpringWithConfig(springConfig) {
      var spring = new Spring(this);
      this.registerSpring(spring);
      spring.setSpringConfig(springConfig);
      return spring;
    },

    getIsIdle: function getIsIdle() {
      return this._isIdle;
    },

    getSpringById: function getSpringById(id) {
      return this._springRegistry[id];
    },

    getAllSprings: function getAllSprings() {
      var vals = [];
      for (var id in this._springRegistry) {
        if (this._springRegistry.hasOwnProperty(id)) {
          vals.push(this._springRegistry[id]);
        }
      }
      return vals;
    },

    registerSpring: function registerSpring(spring) {
      this._springRegistry[spring.getId()] = spring;
    },

    deregisterSpring: function deregisterSpring(spring) {
      removeFirst(this._activeSprings, spring);
      delete this._springRegistry[spring.getId()];
    },

    advance: function advance(time, deltaTime) {
      while (this._idleSpringIndices.length > 0) {
        this._idleSpringIndices.pop();
      }for (var i = 0, len = this._activeSprings.length; i < len; i++) {
        var spring = this._activeSprings[i];
        if (spring.systemShouldAdvance()) {
          spring.advance(time / 1000.0, deltaTime / 1000.0);
        } else {
          this._idleSpringIndices.push(this._activeSprings.indexOf(spring));
        }
      }
      while (this._idleSpringIndices.length > 0) {
        var idx = this._idleSpringIndices.pop();
        idx >= 0 && this._activeSprings.splice(idx, 1);
      }
    },

    loop: function loop(currentTimeMillis) {
      var listener;
      if (this._lastTimeMillis === -1) {
        this._lastTimeMillis = currentTimeMillis - 1;
      }
      var ellapsedMillis = currentTimeMillis - this._lastTimeMillis;
      this._lastTimeMillis = currentTimeMillis;

      var i = 0,
          len = this.listeners.length;
      for (i = 0; i < len; i++) {
        listener = this.listeners[i];
        listener.onBeforeIntegrate && listener.onBeforeIntegrate(this);
      }

      this.advance(currentTimeMillis, ellapsedMillis);
      if (this._activeSprings.length === 0) {
        this._isIdle = true;
        this._lastTimeMillis = -1;
      }

      for (i = 0; i < len; i++) {
        listener = this.listeners[i];
        listener.onAfterIntegrate && listener.onAfterIntegrate(this);
      }

      if (!this._isIdle) {
        this.looper.run();
      }
    },

    activateSpring: function activateSpring(springId) {
      var spring = this._springRegistry[springId];
      if (this._activeSprings.indexOf(spring) == -1) {
        this._activeSprings.push(spring);
      }
      if (this.getIsIdle()) {
        this._isIdle = false;
        this.looper.run();
      }
    },

    addListener: function addListener(listener) {
      this.listeners.push(listener);
    },

    removeListener: function removeListener(listener) {
      removeFirst(this.listeners, listener);
    },

    removeAllListeners: function removeAllListeners() {
      this.listeners = [];
    }

  });

  var Spring = rebound.Spring = function Spring(springSystem) {
    this._id = 's' + Spring._ID++;
    this._springSystem = springSystem;
    this.listeners = [];
    this._currentState = new PhysicsState();
    this._previousState = new PhysicsState();
    this._tempState = new PhysicsState();
  };

  util.extend(Spring, {
    _ID: 0,

    MAX_DELTA_TIME_SEC: 0.064,

    SOLVER_TIMESTEP_SEC: 0.001

  });

  util.extend(Spring.prototype, {

    _id: 0,

    _springConfig: null,

    _overshootClampingEnabled: false,

    _currentState: null,

    _previousState: null,

    _tempState: null,

    _startValue: 0,

    _endValue: 0,

    _wasAtRest: true,

    _restSpeedThreshold: 0.001,

    _displacementFromRestThreshold: 0.001,

    listeners: null,

    _timeAccumulator: 0,

    _springSystem: null,

    destroy: function destroy() {
      this.listeners = [];
      this.frames = [];
      this._springSystem.deregisterSpring(this);
    },

    getId: function getId() {
      return this._id;
    },

    setSpringConfig: function setSpringConfig(springConfig) {
      this._springConfig = springConfig;
      return this;
    },

    getSpringConfig: function getSpringConfig() {
      return this._springConfig;
    },

    setCurrentValue: function setCurrentValue(currentValue, skipSetAtRest) {
      this._startValue = currentValue;
      this._currentState.position = currentValue;
      if (!skipSetAtRest) {
        this.setAtRest();
      }
      this.notifyPositionUpdated(false, false);
      return this;
    },

    getStartValue: function getStartValue() {
      return this._startValue;
    },

    getCurrentValue: function getCurrentValue() {
      return this._currentState.position;
    },

    getCurrentDisplacementDistance: function getCurrentDisplacementDistance() {
      return this.getDisplacementDistanceForState(this._currentState);
    },

    getDisplacementDistanceForState: function getDisplacementDistanceForState(state) {
      return Math.abs(this._endValue - state.position);
    },

    setEndValue: function setEndValue(endValue) {
      if (this._endValue == endValue && this.isAtRest()) {
        return this;
      }
      this._startValue = this.getCurrentValue();
      this._endValue = endValue;
      this._springSystem.activateSpring(this.getId());
      for (var i = 0, len = this.listeners.length; i < len; i++) {
        var listener = this.listeners[i];
        var onChange = listener.onSpringEndStateChange;
        onChange && onChange(this);
      }
      return this;
    },

    getEndValue: function getEndValue() {
      return this._endValue;
    },

    setVelocity: function setVelocity(velocity) {
      if (velocity === this._currentState.velocity) {
        return this;
      }
      this._currentState.velocity = velocity;
      this._springSystem.activateSpring(this.getId());
      return this;
    },

    getVelocity: function getVelocity() {
      return this._currentState.velocity;
    },

    setRestSpeedThreshold: function setRestSpeedThreshold(restSpeedThreshold) {
      this._restSpeedThreshold = restSpeedThreshold;
      return this;
    },

    getRestSpeedThreshold: function getRestSpeedThreshold() {
      return this._restSpeedThreshold;
    },

    setRestDisplacementThreshold: function setRestDisplacementThreshold(displacementFromRestThreshold) {
      this._displacementFromRestThreshold = displacementFromRestThreshold;
    },

    getRestDisplacementThreshold: function getRestDisplacementThreshold() {
      return this._displacementFromRestThreshold;
    },

    setOvershootClampingEnabled: function setOvershootClampingEnabled(enabled) {
      this._overshootClampingEnabled = enabled;
      return this;
    },

    isOvershootClampingEnabled: function isOvershootClampingEnabled() {
      return this._overshootClampingEnabled;
    },

    isOvershooting: function isOvershooting() {
      var start = this._startValue;
      var end = this._endValue;
      return this._springConfig.tension > 0 && (start < end && this.getCurrentValue() > end || start > end && this.getCurrentValue() < end);
    },

    advance: function advance(time, realDeltaTime) {
      var isAtRest = this.isAtRest();

      if (isAtRest && this._wasAtRest) {
        return;
      }

      var adjustedDeltaTime = realDeltaTime;
      if (realDeltaTime > Spring.MAX_DELTA_TIME_SEC) {
        adjustedDeltaTime = Spring.MAX_DELTA_TIME_SEC;
      }

      this._timeAccumulator += adjustedDeltaTime;

      var tension = this._springConfig.tension,
          friction = this._springConfig.friction,
          position = this._currentState.position,
          velocity = this._currentState.velocity,
          tempPosition = this._tempState.position,
          tempVelocity = this._tempState.velocity,
          aVelocity,
          aAcceleration,
          bVelocity,
          bAcceleration,
          cVelocity,
          cAcceleration,
          dVelocity,
          dAcceleration,
          dxdt,
          dvdt;

      while (this._timeAccumulator >= Spring.SOLVER_TIMESTEP_SEC) {

        this._timeAccumulator -= Spring.SOLVER_TIMESTEP_SEC;

        if (this._timeAccumulator < Spring.SOLVER_TIMESTEP_SEC) {
          this._previousState.position = position;
          this._previousState.velocity = velocity;
        }

        aVelocity = velocity;
        aAcceleration = tension * (this._endValue - tempPosition) - friction * velocity;

        tempPosition = position + aVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        tempVelocity = velocity + aAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        bVelocity = tempVelocity;
        bAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;

        tempPosition = position + bVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        tempVelocity = velocity + bAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        cVelocity = tempVelocity;
        cAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;

        tempPosition = position + cVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        tempVelocity = velocity + cAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;
        dVelocity = tempVelocity;
        dAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;

        dxdt = 1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);
        dvdt = 1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);

        position += dxdt * Spring.SOLVER_TIMESTEP_SEC;
        velocity += dvdt * Spring.SOLVER_TIMESTEP_SEC;
      }

      this._tempState.position = tempPosition;
      this._tempState.velocity = tempVelocity;

      this._currentState.position = position;
      this._currentState.velocity = velocity;

      if (this._timeAccumulator > 0) {
        this._interpolate(this._timeAccumulator / Spring.SOLVER_TIMESTEP_SEC);
      }

      if (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) {

        if (this._springConfig.tension > 0) {
          this._startValue = this._endValue;
          this._currentState.position = this._endValue;
        } else {
          this._endValue = this._currentState.position;
          this._startValue = this._endValue;
        }
        this.setVelocity(0);
        isAtRest = true;
      }

      var notifyActivate = false;
      if (this._wasAtRest) {
        this._wasAtRest = false;
        notifyActivate = true;
      }

      var notifyAtRest = false;
      if (isAtRest) {
        this._wasAtRest = true;
        notifyAtRest = true;
      }

      this.notifyPositionUpdated(notifyActivate, notifyAtRest);
    },

    notifyPositionUpdated: function notifyPositionUpdated(notifyActivate, notifyAtRest) {
      for (var i = 0, len = this.listeners.length; i < len; i++) {
        var listener = this.listeners[i];
        if (notifyActivate && listener.onSpringActivate) {
          listener.onSpringActivate(this);
        }

        if (listener.onSpringUpdate) {
          listener.onSpringUpdate(this);
        }

        if (notifyAtRest && listener.onSpringAtRest) {
          listener.onSpringAtRest(this);
        }
      }
    },

    systemShouldAdvance: function systemShouldAdvance() {
      return !this.isAtRest() || !this.wasAtRest();
    },

    wasAtRest: function wasAtRest() {
      return this._wasAtRest;
    },

    isAtRest: function isAtRest() {
      return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || this._springConfig.tension === 0);
    },

    setAtRest: function setAtRest() {
      this._endValue = this._currentState.position;
      this._tempState.position = this._currentState.position;
      this._currentState.velocity = 0;
      return this;
    },

    _interpolate: function _interpolate(alpha) {
      this._currentState.position = this._currentState.position * alpha + this._previousState.position * (1 - alpha);
      this._currentState.velocity = this._currentState.velocity * alpha + this._previousState.velocity * (1 - alpha);
    },

    getListeners: function getListeners() {
      return this.listeners;
    },

    addListener: function addListener(newListener) {
      this.listeners.push(newListener);
      return this;
    },

    removeListener: function removeListener(listenerToRemove) {
      removeFirst(this.listeners, listenerToRemove);
      return this;
    },

    removeAllListeners: function removeAllListeners() {
      this.listeners = [];
      return this;
    },

    currentValueIsApproximately: function currentValueIsApproximately(value) {
      return Math.abs(this.getCurrentValue() - value) <= this.getRestDisplacementThreshold();
    }

  });

  var PhysicsState = function PhysicsState() {};

  util.extend(PhysicsState.prototype, {
    position: 0,
    velocity: 0
  });

  var SpringConfig = rebound.SpringConfig = function SpringConfig(tension, friction) {
    this.tension = tension;
    this.friction = friction;
  };

  var AnimationLooper = rebound.AnimationLooper = function AnimationLooper() {
    this.springSystem = null;
    var _this = this;
    var _run = function _run() {
      _this.springSystem.loop(Date.now());
    };

    this.run = function () {
      util.onFrame(_run);
    };
  };

  rebound.SimulationLooper = function SimulationLooper(timestep) {
    this.springSystem = null;
    var time = 0;
    var running = false;
    timestep = timestep || 16.667;

    this.run = function () {
      if (running) {
        return;
      }
      running = true;
      while (!this.springSystem.getIsIdle()) {
        this.springSystem.loop(time += timestep);
      }
      running = false;
    };
  };

  rebound.SteppingSimulationLooper = function (timestep) {
    this.springSystem = null;
    var time = 0;

    this.run = function () {};

    this.step = function (timestep) {
      this.springSystem.loop(time += timestep);
    };
  };

  var OrigamiValueConverter = rebound.OrigamiValueConverter = {
    tensionFromOrigamiValue: function tensionFromOrigamiValue(oValue) {
      return (oValue - 30.0) * 3.62 + 194.0;
    },

    origamiValueFromTension: function origamiValueFromTension(tension) {
      return (tension - 194.0) / 3.62 + 30.0;
    },

    frictionFromOrigamiValue: function frictionFromOrigamiValue(oValue) {
      return (oValue - 8.0) * 3.0 + 25.0;
    },

    origamiFromFriction: function origamiFromFriction(friction) {
      return (friction - 25.0) / 3.0 + 8.0;
    }
  };

  var BouncyConversion = rebound.BouncyConversion = function (bounciness, speed) {
    this.bounciness = bounciness;
    this.speed = speed;
    var b = this.normalize(bounciness / 1.7, 0, 20.0);
    b = this.projectNormal(b, 0.0, 0.8);
    var s = this.normalize(speed / 1.7, 0, 20.0);
    this.bouncyTension = this.projectNormal(s, 0.5, 200);
    this.bouncyFriction = this.quadraticOutInterpolation(b, this.b3Nobounce(this.bouncyTension), 0.01);
  };

  util.extend(BouncyConversion.prototype, {

    normalize: function normalize(value, startValue, endValue) {
      return (value - startValue) / (endValue - startValue);
    },

    projectNormal: function projectNormal(n, start, end) {
      return start + n * (end - start);
    },

    linearInterpolation: function linearInterpolation(t, start, end) {
      return t * end + (1.0 - t) * start;
    },

    quadraticOutInterpolation: function quadraticOutInterpolation(t, start, end) {
      return this.linearInterpolation(2 * t - t * t, start, end);
    },

    b3Friction1: function b3Friction1(x) {
      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
    },

    b3Friction2: function b3Friction2(x) {
      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2.;
    },

    b3Friction3: function b3Friction3(x) {
      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;
    },

    b3Nobounce: function b3Nobounce(tension) {
      var friction = 0;
      if (tension <= 18) {
        friction = this.b3Friction1(tension);
      } else if (tension > 18 && tension <= 44) {
        friction = this.b3Friction2(tension);
      } else {
        friction = this.b3Friction3(tension);
      }
      return friction;
    }
  });

  util.extend(SpringConfig, {
    fromOrigamiTensionAndFriction: function fromOrigamiTensionAndFriction(tension, friction) {
      return new SpringConfig(OrigamiValueConverter.tensionFromOrigamiValue(tension), OrigamiValueConverter.frictionFromOrigamiValue(friction));
    },

    fromBouncinessAndSpeed: function fromBouncinessAndSpeed(bounciness, speed) {
      var bouncyConversion = new rebound.BouncyConversion(bounciness, speed);
      return this.fromOrigamiTensionAndFriction(bouncyConversion.bouncyTension, bouncyConversion.bouncyFriction);
    },

    coastingConfigWithOrigamiFriction: function coastingConfigWithOrigamiFriction(friction) {
      return new SpringConfig(0, OrigamiValueConverter.frictionFromOrigamiValue(friction));
    }
  });

  SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG = SpringConfig.fromOrigamiTensionAndFriction(40, 7);

  util.extend(SpringConfig.prototype, { friction: 0, tension: 0 });

  var colorCache = {};
  util.hexToRGB = function (color) {
    if (colorCache[color]) {
      return colorCache[color];
    }
    color = color.replace('#', '');
    if (color.length === 3) {
      color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];
    }
    var parts = color.match(/.{2}/g);

    var ret = {
      r: parseInt(parts[0], 16),
      g: parseInt(parts[1], 16),
      b: parseInt(parts[2], 16)
    };

    colorCache[color] = ret;
    return ret;
  };

  util.rgbToHex = function (r, g, b) {
    r = r.toString(16);
    g = g.toString(16);
    b = b.toString(16);
    r = r.length < 2 ? '0' + r : r;
    g = g.length < 2 ? '0' + g : g;
    b = b.length < 2 ? '0' + b : b;
    return '#' + r + g + b;
  };

  var MathUtil = rebound.MathUtil = {
    mapValueInRange: function mapValueInRange(value, fromLow, fromHigh, toLow, toHigh) {
      var fromRangeSize = fromHigh - fromLow;
      var toRangeSize = toHigh - toLow;
      var valueScale = (value - fromLow) / fromRangeSize;
      return toLow + valueScale * toRangeSize;
    },

    interpolateColor: function interpolateColor(val, startColor, endColor, fromLow, fromHigh, asRGB) {
      fromLow = fromLow === undefined ? 0 : fromLow;
      fromHigh = fromHigh === undefined ? 1 : fromHigh;
      startColor = util.hexToRGB(startColor);
      endColor = util.hexToRGB(endColor);
      var r = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.r, endColor.r));
      var g = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.g, endColor.g));
      var b = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.b, endColor.b));
      if (asRGB) {
        return 'rgb(' + r + ',' + g + ',' + b + ')';
      } else {
        return util.rgbToHex(r, g, b);
      }
    },

    degreesToRadians: function degreesToRadians(deg) {
      return deg * Math.PI / 180;
    },

    radiansToDegrees: function radiansToDegrees(rad) {
      return rad * 180 / Math.PI;
    }

  };

  util.extend(util, MathUtil);

  function removeFirst(array, item) {
    var idx = array.indexOf(item);
    idx != -1 && array.splice(idx, 1);
  }

  var _onFrame;
  if (typeof window !== 'undefined') {
    _onFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {
      window.setTimeout(callback, 1000 / 60);
    };
  }
  if (!_onFrame && typeof process !== 'undefined' && process.title === 'node') {
    _onFrame = setImmediate;
  }

  util.onFrame = function onFrame(func) {
    return _onFrame(func);
  };

  if (typeof exports != 'undefined') {
    util.extend(exports, rebound);
  } else if (typeof window != 'undefined') {
    window.rebound = rebound;
  }
})();
}, 328, null, "rebound/rebound.js");
__d(/* NavigatorIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(134                ); // 134 = UnimplementedView
}, 329, null, "NavigatorIOS");
__d(/* Picker */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Picker/Picker.js',
    _class,
    _temp;

var ColorPropType = require(48             ); // 48 = ColorPropType
var PickerIOS = require(331        ); // 331 = PickerIOS
var PickerAndroid = require(332            ); // 332 = PickerAndroid
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheetPropType = require(131                 ); // 131 = StyleSheetPropType
var TextStylePropTypes = require(116                 ); // 116 = TextStylePropTypes
var UnimplementedView = require(134                ); // 134 = UnimplementedView
var View = require(124   ); // 124 = View
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var itemStylePropType = StyleSheetPropType(TextStylePropTypes);

var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
  color: ColorPropType
}));

var MODE_DIALOG = 'dialog';
var MODE_DROPDOWN = 'dropdown';

var Picker = function (_React$Component) {
  babelHelpers.inherits(Picker, _React$Component);

  function Picker() {
    babelHelpers.classCallCheck(this, Picker);
    return babelHelpers.possibleConstructorReturn(this, (Picker.__proto__ || Object.getPrototypeOf(Picker)).apply(this, arguments));
  }

  babelHelpers.createClass(Picker, [{
    key: 'render',
    value: function render() {
      if (Platform.OS === 'ios') {
        return React.createElement(
          PickerIOS,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 119
            }
          }),
          this.props.children
        );
      } else if (Platform.OS === 'android') {
        return React.createElement(
          PickerAndroid,
          babelHelpers.extends({}, this.props, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 122
            }
          }),
          this.props.children
        );
      } else {
        return React.createElement(UnimplementedView, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 124
          }
        });
      }
    }
  }]);
  return Picker;
}(React.Component);

Picker.MODE_DIALOG = MODE_DIALOG;
Picker.MODE_DROPDOWN = MODE_DROPDOWN;
Picker.defaultProps = {
  mode: MODE_DIALOG
};
Picker.propTypes = babelHelpers.extends({}, View.propTypes, {
  style: pickerStyleType,

  selectedValue: React.PropTypes.any,

  onValueChange: React.PropTypes.func,

  enabled: React.PropTypes.bool,

  mode: React.PropTypes.oneOf(['dialog', 'dropdown']),

  itemStyle: itemStylePropType,

  prompt: React.PropTypes.string,

  testID: React.PropTypes.string
});

Picker.Item = (_temp = _class = function (_React$Component2) {
  babelHelpers.inherits(_class, _React$Component2);

  function _class() {
    babelHelpers.classCallCheck(this, _class);
    return babelHelpers.possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
  }

  babelHelpers.createClass(_class, [{
    key: 'render',
    value: function render() {
      throw null;
    }
  }]);
  return _class;
}(React.Component), _class.propTypes = {
  label: React.PropTypes.string.isRequired,

  value: React.PropTypes.any,

  color: ColorPropType,

  testID: React.PropTypes.string
}, _temp);

module.exports = Picker;
}, 330, null, "Picker");
__d(/* PickerIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(134                ); // 134 = UnimplementedView
}, 331, null, "PickerIOS");
__d(/* PickerAndroid */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Picker/PickerAndroid.android.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var StyleSheetPropType = require(131                 ); // 131 = StyleSheetPropType
var View = require(124   ); // 124 = View
var ViewStylePropTypes = require(117                 ); // 117 = ViewStylePropTypes

var processColor = require(119           ); // 119 = processColor
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var REF_PICKER = 'picker';
var MODE_DROPDOWN = 'dropdown';

var pickerStyleType = StyleSheetPropType(babelHelpers.extends({}, ViewStylePropTypes, {
  color: ColorPropType
}));

var PickerAndroid = function (_React$Component) {
  babelHelpers.inherits(PickerAndroid, _React$Component);

  function PickerAndroid(props, context) {
    babelHelpers.classCallCheck(this, PickerAndroid);

    var _this = babelHelpers.possibleConstructorReturn(this, (PickerAndroid.__proto__ || Object.getPrototypeOf(PickerAndroid)).call(this, props, context));

    _initialiseProps.call(_this);

    var state = _this._stateFromProps(props);

    _this.state = babelHelpers.extends({}, state, {
      initialSelectedIndex: state.selectedIndex
    });
    return _this;
  }

  babelHelpers.createClass(PickerAndroid, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      this.setState(this._stateFromProps(nextProps));
    }
  }, {
    key: 'render',
    value: function render() {
      var Picker = this.props.mode === MODE_DROPDOWN ? DropdownPicker : DialogPicker;

      var nativeProps = {
        enabled: this.props.enabled,
        items: this.state.items,
        mode: this.props.mode,
        onSelect: this._onChange,
        prompt: this.props.prompt,
        selected: this.state.initialSelectedIndex,
        testID: this.props.testID,
        style: [styles.pickerAndroid, this.props.style],
        accessibilityLabel: this.props.accessibilityLabel
      };

      return React.createElement(Picker, babelHelpers.extends({ ref: REF_PICKER }, nativeProps, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 112
        }
      }));
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._lastNativePosition = this.state.initialSelectedIndex;
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      if (this.refs[REF_PICKER] && this.state.selectedIndex !== this._lastNativePosition) {
        this.refs[REF_PICKER].setNativeProps({ selected: this.state.selectedIndex });
        this._lastNativePosition = this.state.selectedIndex;
      }
    }
  }]);
  return PickerAndroid;
}(React.Component);

PickerAndroid.propTypes = babelHelpers.extends({}, View.propTypes, {
  style: pickerStyleType,
  selectedValue: React.PropTypes.any,
  enabled: ReactPropTypes.bool,
  mode: ReactPropTypes.oneOf(['dialog', 'dropdown']),
  onValueChange: ReactPropTypes.func,
  prompt: ReactPropTypes.string,
  testID: ReactPropTypes.string
});

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this._stateFromProps = function (props) {
    var selectedIndex = 0;
    var items = React.Children.map(props.children, function (child, index) {
      if (child.props.value === props.selectedValue) {
        selectedIndex = index;
      }
      var childProps = {
        value: child.props.value,
        label: child.props.label
      };
      if (child.props.color) {
        childProps.color = processColor(child.props.color);
      }
      return childProps;
    });
    return { selectedIndex: selectedIndex, items: items };
  };

  this._onChange = function (event) {
    if (_this2.props.onValueChange) {
      var position = event.nativeEvent.position;
      if (position >= 0) {
        var value = _this2.props.children[position].props.value;
        _this2.props.onValueChange(value, position);
      } else {
        _this2.props.onValueChange(null, position);
      }
    }
    _this2._lastNativePosition = event.nativeEvent.position;
    _this2.forceUpdate();
  };
};

var styles = StyleSheet.create({
  pickerAndroid: {
    height: 50
  }
});

var cfg = {
  nativeOnly: {
    items: true,
    selected: true
  }
};

var DropdownPicker = requireNativeComponent('AndroidDropdownPicker', PickerAndroid, cfg);
var DialogPicker = requireNativeComponent('AndroidDialogPicker', PickerAndroid, cfg);

module.exports = PickerAndroid;
}, 332, null, "PickerAndroid");
__d(/* ProgressBarAndroid */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/ProgressBarAndroid/ProgressBarAndroid.android.js';
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var React = require(103    ); // 103 = React
var View = require(124   ); // 124 = View
var ColorPropType = require(48             ); // 48 = ColorPropType

var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var STYLE_ATTRIBUTES = ['Horizontal', 'Normal', 'Small', 'Large', 'Inverse', 'SmallInverse', 'LargeInverse'];

var indeterminateType = function indeterminateType(props, propName, componentName) {
  var checker = function checker() {
    var indeterminate = props[propName];
    var styleAttr = props.styleAttr;
    if (!indeterminate && styleAttr !== 'Horizontal') {
      return new Error('indeterminate=false is only valid for styleAttr=Horizontal');
    }
  };

  return ReactPropTypes.bool(props, propName, componentName) || checker();
};

var ProgressBarAndroid = React.createClass({
  displayName: 'ProgressBarAndroid',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    styleAttr: ReactPropTypes.oneOf(STYLE_ATTRIBUTES),

    indeterminate: indeterminateType,

    progress: ReactPropTypes.number,

    color: ColorPropType,

    testID: ReactPropTypes.string
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      styleAttr: 'Normal',
      indeterminate: true
    };
  },

  mixins: [NativeMethodsMixin],

  componentDidMount: function componentDidMount() {
    if (this.props.indeterminate && this.props.styleAttr !== 'Horizontal') {
      console.warn('Circular indeterminate `ProgressBarAndroid`' + 'is deprecated. Use `ActivityIndicator` instead.');
    }
  },

  render: function render() {
    return React.createElement(AndroidProgressBar, babelHelpers.extends({}, this.props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 120
      }
    }));
  }
});

var AndroidProgressBar = requireNativeComponent('AndroidProgressBar', ProgressBarAndroid, { nativeOnly: { animating: true } });

module.exports = ProgressBarAndroid;
}, 333, null, "ProgressBarAndroid");
__d(/* ProgressViewIOS */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/ProgressViewIOS/ProgressViewIOS.android.js';
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var View = require(124   ); // 124 = View

var DummyProgressViewIOS = function (_React$Component) {
  babelHelpers.inherits(DummyProgressViewIOS, _React$Component);

  function DummyProgressViewIOS() {
    babelHelpers.classCallCheck(this, DummyProgressViewIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummyProgressViewIOS.__proto__ || Object.getPrototypeOf(DummyProgressViewIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummyProgressViewIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummy, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        },
        React.createElement(
          Text,
          { style: styles.text, __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          'ProgressViewIOS is not supported on this platform!'
        )
      );
    }
  }]);
  return DummyProgressViewIOS;
}(React.Component);

var styles = StyleSheet.create({
  dummy: {
    width: 120,
    height: 20,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    color: '#333333',
    margin: 5,
    fontSize: 10
  }
});

module.exports = DummyProgressViewIOS;
}, 334, null, "ProgressViewIOS");
__d(/* SegmentedControlIOS */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/SegmentedControlIOS/SegmentedControlIOS.android.js';
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var View = require(124   ); // 124 = View

var DummySegmentedControlIOS = function (_React$Component) {
  babelHelpers.inherits(DummySegmentedControlIOS, _React$Component);

  function DummySegmentedControlIOS() {
    babelHelpers.classCallCheck(this, DummySegmentedControlIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummySegmentedControlIOS.__proto__ || Object.getPrototypeOf(DummySegmentedControlIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummySegmentedControlIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [styles.dummy, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        },
        React.createElement(
          Text,
          { style: styles.text, __source: {
              fileName: _jsxFileName,
              lineNumber: 24
            }
          },
          'SegmentedControlIOS is not supported on this platform!'
        )
      );
    }
  }]);
  return DummySegmentedControlIOS;
}(React.Component);

var styles = StyleSheet.create({
  dummy: {
    width: 120,
    height: 50,
    backgroundColor: '#ffbcbc',
    borderWidth: 1,
    borderColor: 'red',
    alignItems: 'center',
    justifyContent: 'center'
  },
  text: {
    color: '#333333',
    margin: 5,
    fontSize: 10
  }
});

module.exports = DummySegmentedControlIOS;
}, 335, null, "SegmentedControlIOS");
__d(/* Slider */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Slider/Slider.js';
var Image = require(268    ); // 268 = Image
var ColorPropType = require(48             ); // 48 = ColorPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var ReactNativeViewAttributes = require(130                        ); // 130 = ReactNativeViewAttributes
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var PropTypes = React.PropTypes;

var Slider = React.createClass({
  displayName: 'Slider',

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    style: View.propTypes.style,

    value: PropTypes.number,

    step: PropTypes.number,

    minimumValue: PropTypes.number,

    maximumValue: PropTypes.number,

    minimumTrackTintColor: ColorPropType,

    maximumTrackTintColor: ColorPropType,

    disabled: PropTypes.bool,

    trackImage: Image.propTypes.source,

    minimumTrackImage: Image.propTypes.source,

    maximumTrackImage: Image.propTypes.source,

    thumbImage: Image.propTypes.source,

    thumbTintColor: ColorPropType,

    onValueChange: PropTypes.func,

    onSlidingComplete: PropTypes.func,

    testID: PropTypes.string
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      disabled: false,
      value: 0,
      minimumValue: 0,
      maximumValue: 1,
      step: 0
    };
  },

  viewConfig: {
    uiViewClassName: 'RCTSlider',
    validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
      value: true
    })
  },

  render: function render() {
    var _props = this.props,
        style = _props.style,
        onValueChange = _props.onValueChange,
        onSlidingComplete = _props.onSlidingComplete,
        props = babelHelpers.objectWithoutProperties(_props, ['style', 'onValueChange', 'onSlidingComplete']);

    props.style = [styles.slider, style];

    props.onValueChange = onValueChange && function (event) {
      var userEvent = true;
      if (Platform.OS === 'android') {
        userEvent = event.nativeEvent.fromUser;
      }
      onValueChange && userEvent && onValueChange(event.nativeEvent.value);
    };

    props.onChange = props.onValueChange;

    props.onSlidingComplete = onSlidingComplete && function (event) {
      onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
    };

    return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
      enabled: !this.props.disabled,
      onStartShouldSetResponder: function onStartShouldSetResponder() {
        return true;
      },
      onResponderTerminationRequest: function onResponderTerminationRequest() {
        return false;
      },
      __source: {
        fileName: _jsxFileName,
        lineNumber: 177
      }
    }));
  }
});

var styles = void 0;
if (Platform.OS === 'ios') {
  styles = StyleSheet.create({
    slider: {
      height: 40
    }
  });
} else {
  styles = StyleSheet.create({
    slider: {}
  });
}

var options = {};
if (Platform.OS === 'android') {
  options = {
    nativeOnly: {
      enabled: true
    }
  };
}
var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);

module.exports = Slider;
}, 336, null, "Slider");
__d(/* SnapshotViewIOS */function(global, require, module, exports) {
'use strict';

module.exports = require(134                ); // 134 = UnimplementedView
}, 337, null, "SnapshotViewIOS");
__d(/* Switch */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/Switch/Switch.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var PropTypes = React.PropTypes;

var Switch = React.createClass({
  displayName: 'Switch',

  propTypes: babelHelpers.extends({}, View.propTypes, {
    value: PropTypes.bool,

    disabled: PropTypes.bool,

    onValueChange: PropTypes.func,

    testID: PropTypes.string,

    tintColor: ColorPropType,

    onTintColor: ColorPropType,

    thumbTintColor: ColorPropType
  }),

  getDefaultProps: function getDefaultProps() {
    return {
      value: false,
      disabled: false
    };
  },

  mixins: [NativeMethodsMixin],

  _rctSwitch: {},
  _onChange: function _onChange(event) {
    if (Platform.OS === 'android') {
      this._rctSwitch.setNativeProps({ on: this.props.value });
    } else {
      this._rctSwitch.setNativeProps({ value: this.props.value });
    }

    this.props.onChange && this.props.onChange(event);
    this.props.onValueChange && this.props.onValueChange(event.nativeEvent.value);
  },

  render: function render() {
    var _this = this;

    var props = babelHelpers.extends({}, this.props);
    props.onStartShouldSetResponder = function () {
      return true;
    };
    props.onResponderTerminationRequest = function () {
      return false;
    };
    if (Platform.OS === 'android') {
      props.enabled = !this.props.disabled;
      props.on = this.props.value;
      props.style = this.props.style;
      props.trackTintColor = this.props.value ? this.props.onTintColor : this.props.tintColor;
    } else if (Platform.OS === 'ios') {
      props.style = [styles.rctSwitchIOS, this.props.style];
    }
    return React.createElement(RCTSwitch, babelHelpers.extends({}, props, {
      ref: function ref(_ref) {
        _this._rctSwitch = _ref;
      },
      onChange: this._onChange,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 111
      }
    }));
  }
});

var styles = StyleSheet.create({
  rctSwitchIOS: {
    height: 31,
    width: 51
  }
});

if (Platform.OS === 'android') {
  var RCTSwitch = requireNativeComponent('AndroidSwitch', Switch, {
    nativeOnly: {
      onChange: true,
      on: true,
      enabled: true,
      trackTintColor: true
    }
  });
} else {
  var RCTSwitch = requireNativeComponent('RCTSwitch', Switch, {
    nativeOnly: {
      onChange: true
    }
  });
}

module.exports = Switch;
}, 338, null, "Switch");
__d(/* RefreshControl */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/RefreshControl/RefreshControl.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var View = require(124   ); // 124 = View

var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

if (Platform.OS === 'android') {
  var RefreshLayoutConsts = require(100        ).AndroidSwipeRefreshLayout.Constants; // 100 = UIManager
} else {
  var RefreshLayoutConsts = { SIZE: {} };
}

var RefreshControl = React.createClass({
  displayName: 'RefreshControl',

  statics: {
    SIZE: RefreshLayoutConsts.SIZE
  },

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    onRefresh: React.PropTypes.func,

    refreshing: React.PropTypes.bool.isRequired,

    tintColor: ColorPropType,

    titleColor: ColorPropType,

    title: React.PropTypes.string,

    enabled: React.PropTypes.bool,

    colors: React.PropTypes.arrayOf(ColorPropType),

    progressBackgroundColor: ColorPropType,

    size: React.PropTypes.oneOf([RefreshLayoutConsts.SIZE.DEFAULT, RefreshLayoutConsts.SIZE.LARGE]),

    progressViewOffset: React.PropTypes.number
  }),

  _nativeRef: null,
  _lastNativeRefreshing: false,

  componentDidMount: function componentDidMount() {
    this._lastNativeRefreshing = this.props.refreshing;
  },
  componentDidUpdate: function componentDidUpdate(prevProps) {
    if (this.props.refreshing !== prevProps.refreshing) {
      this._lastNativeRefreshing = this.props.refreshing;
    } else if (this.props.refreshing !== this._lastNativeRefreshing) {
      this._nativeRef.setNativeProps({ refreshing: this.props.refreshing });
      this._lastNativeRefreshing = this.props.refreshing;
    }
  },
  render: function render() {
    var _this = this;

    return React.createElement(NativeRefreshControl, babelHelpers.extends({}, this.props, {
      ref: function ref(_ref) {
        _this._nativeRef = _ref;
      },
      onRefresh: this._onRefresh,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 153
      }
    }));
  },
  _onRefresh: function _onRefresh() {
    this._lastNativeRefreshing = true;

    this.props.onRefresh && this.props.onRefresh();

    this.forceUpdate();
  }
});

if (Platform.OS === 'ios') {
  var NativeRefreshControl = requireNativeComponent('RCTRefreshControl', RefreshControl);
} else if (Platform.OS === 'android') {
  var NativeRefreshControl = requireNativeComponent('AndroidSwipeRefreshLayout', RefreshControl);
}

module.exports = RefreshControl;
}, 339, null, "RefreshControl");
__d(/* SwipeableListView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableListView.js';
var ListView = require(282       ); // 282 = ListView
var React = require(103    ); // 103 = React
var SwipeableListViewDataSource = require(341                          ); // 341 = SwipeableListViewDataSource
var SwipeableRow = require(342           ); // 342 = SwipeableRow

var PropTypes = React.PropTypes;

var SwipeableListView = function (_React$Component) {
  babelHelpers.inherits(SwipeableListView, _React$Component);
  babelHelpers.createClass(SwipeableListView, null, [{
    key: 'getNewDataSource',
    value: function getNewDataSource() {
      return new SwipeableListViewDataSource({
        getRowData: function getRowData(data, sectionID, rowID) {
          return data[sectionID][rowID];
        },
        getSectionHeaderData: function getSectionHeaderData(data, sectionID) {
          return data[sectionID];
        },
        rowHasChanged: function rowHasChanged(row1, row2) {
          return row1 !== row2;
        },
        sectionHeaderHasChanged: function sectionHeaderHasChanged(s1, s2) {
          return s1 !== s2;
        }
      });
    }
  }]);

  function SwipeableListView(props, context) {
    babelHelpers.classCallCheck(this, SwipeableListView);

    var _this = babelHelpers.possibleConstructorReturn(this, (SwipeableListView.__proto__ || Object.getPrototypeOf(SwipeableListView)).call(this, props, context));

    _this._listViewRef = null;
    _this._shouldBounceFirstRowOnMount = false;

    _this._onScroll = function (e) {
      if (_this.props.dataSource.getOpenRowID()) {
        _this.setState({
          dataSource: _this.state.dataSource.setOpenRowID(null)
        });
      }
      _this.props.onScroll && _this.props.onScroll(e);
    };

    _this._getMaxSwipeDistance = function (rowData, sectionID, rowID) {
      if (typeof _this.props.maxSwipeDistance === 'function') {
        return _this.props.maxSwipeDistance(rowData, sectionID, rowID);
      }

      return _this.props.maxSwipeDistance;
    };

    _this._renderRow = function (rowData, sectionID, rowID) {
      var slideoutView = _this.props.renderQuickActions(rowData, sectionID, rowID);

      if (!slideoutView) {
        return _this.props.renderRow(rowData, sectionID, rowID);
      }

      var shouldBounceOnMount = false;
      if (_this._shouldBounceFirstRowOnMount) {
        _this._shouldBounceFirstRowOnMount = false;
        shouldBounceOnMount = rowID === _this.props.dataSource.getFirstRowID();
      }

      return React.createElement(
        SwipeableRow,
        {
          slideoutView: slideoutView,
          isOpen: rowData.id === _this.props.dataSource.getOpenRowID(),
          maxSwipeDistance: _this._getMaxSwipeDistance(rowData, sectionID, rowID),
          key: rowID,
          onOpen: function onOpen() {
            return _this._onOpen(rowData.id);
          },
          onClose: function onClose() {
            return _this._onClose(rowData.id);
          },
          onSwipeEnd: function onSwipeEnd() {
            return _this._setListViewScrollable(true);
          },
          onSwipeStart: function onSwipeStart() {
            return _this._setListViewScrollable(false);
          },
          shouldBounceOnMount: shouldBounceOnMount, __source: {
            fileName: _jsxFileName,
            lineNumber: 193
          }
        },
        _this.props.renderRow(rowData, sectionID, rowID)
      );
    };

    _this._shouldBounceFirstRowOnMount = _this.props.bounceFirstRowOnMount;
    _this.state = {
      dataSource: _this.props.dataSource
    };
    return _this;
  }

  babelHelpers.createClass(SwipeableListView, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.state.dataSource.getDataSource() !== nextProps.dataSource.getDataSource()) {
        this.setState({
          dataSource: nextProps.dataSource
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      return React.createElement(ListView, babelHelpers.extends({}, this.props, {
        ref: function ref(_ref) {
          _this2._listViewRef = _ref;
        },
        dataSource: this.state.dataSource.getDataSource(),
        onScroll: this._onScroll,
        renderRow: this._renderRow,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 126
        }
      }));
    }
  }, {
    key: '_setListViewScrollable',
    value: function _setListViewScrollable(value) {
      if (this._listViewRef && typeof this._listViewRef.setNativeProps === 'function') {
        this._listViewRef.setNativeProps({
          scrollEnabled: value
        });
      }
    }
  }, {
    key: 'getScrollResponder',
    value: function getScrollResponder() {
      if (this._listViewRef && typeof this._listViewRef.getScrollResponder === 'function') {
        return this._listViewRef.getScrollResponder();
      }
    }
  }, {
    key: '_onOpen',
    value: function _onOpen(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(rowID)
      });
    }
  }, {
    key: '_onClose',
    value: function _onClose(rowID) {
      this.setState({
        dataSource: this.state.dataSource.setOpenRowID(null)
      });
    }
  }]);
  return SwipeableListView;
}(React.Component);

SwipeableListView.propTypes = {
  bounceFirstRowOnMount: PropTypes.bool.isRequired,

  dataSource: PropTypes.instanceOf(SwipeableListViewDataSource).isRequired,

  maxSwipeDistance: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,

  renderRow: PropTypes.func.isRequired,

  renderQuickActions: PropTypes.func.isRequired
};
SwipeableListView.defaultProps = {
  bounceFirstRowOnMount: false,
  renderQuickActions: function renderQuickActions() {
    return null;
  }
};


module.exports = SwipeableListView;
}, 340, null, "SwipeableListView");
__d(/* SwipeableListViewDataSource */function(global, require, module, exports) {
'use strict';

var ListViewDataSource = require(283                 ); // 283 = ListViewDataSource

var SwipeableListViewDataSource = function () {
  function SwipeableListViewDataSource(params) {
    var _this = this;

    babelHelpers.classCallCheck(this, SwipeableListViewDataSource);

    this._dataSource = new ListViewDataSource({
      getRowData: params.getRowData,
      getSectionHeaderData: params.getSectionHeaderData,
      rowHasChanged: function rowHasChanged(row1, row2) {
        return row1.id !== _this._previousOpenRowID && row2.id === _this._openRowID || row1.id === _this._previousOpenRowID && row2.id !== _this._openRowID || params.rowHasChanged(row1, row2);
      },
      sectionHeaderHasChanged: params.sectionHeaderHasChanged
    });
  }

  babelHelpers.createClass(SwipeableListViewDataSource, [{
    key: 'cloneWithRowsAndSections',
    value: function cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities) {
      this._dataSource = this._dataSource.cloneWithRowsAndSections(dataBlob, sectionIdentities, rowIdentities);

      this._dataBlob = dataBlob;
      this.rowIdentities = this._dataSource.rowIdentities;
      this.sectionIdentities = this._dataSource.sectionIdentities;

      return this;
    }
  }, {
    key: 'getDataSource',
    value: function getDataSource() {
      return this._dataSource;
    }
  }, {
    key: 'getOpenRowID',
    value: function getOpenRowID() {
      return this._openRowID;
    }
  }, {
    key: 'getFirstRowID',
    value: function getFirstRowID() {
      if (this.rowIdentities) {
        return this.rowIdentities[0] && this.rowIdentities[0][0];
      }
      return Object.keys(this._dataBlob)[0];
    }
  }, {
    key: 'setOpenRowID',
    value: function setOpenRowID(rowID) {
      this._previousOpenRowID = this._openRowID;
      this._openRowID = rowID;

      this._dataSource = this._dataSource.cloneWithRowsAndSections(this._dataBlob, this.sectionIdentities, this.rowIdentities);

      return this;
    }
  }]);
  return SwipeableListViewDataSource;
}();

module.exports = SwipeableListViewDataSource;
}, 341, null, "SwipeableListViewDataSource");
__d(/* SwipeableRow */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Experimental/SwipeableRow/SwipeableRow.js';
var Animated = require(256       ); // 256 = Animated
var PanResponder = require(325           ); // 325 = PanResponder
var I18nManager = require(310          ); // 310 = I18nManager
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var TimerMixin = require(253                ); // 253 = react-timer-mixin
var View = require(124   ); // 124 = View

var PropTypes = React.PropTypes;


var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction

var IS_RTL = I18nManager.isRTL;

var CLOSED_LEFT_POSITION = 0;

var HORIZONTAL_SWIPE_DISTANCE_THRESHOLD = 10;

var HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD = 0.3;

var SLOW_SPEED_SWIPE_FACTOR = 4;

var SWIPE_DURATION = 300;

var ON_MOUNT_BOUNCE_DELAY = 700;
var ON_MOUNT_BOUNCE_DURATION = 400;

var RIGHT_SWIPE_BOUNCE_BACK_DISTANCE = 30;
var RIGHT_SWIPE_BOUNCE_BACK_DURATION = 300;

var RIGHT_SWIPE_THRESHOLD = 30 * SLOW_SPEED_SWIPE_FACTOR;

var SwipeableRow = React.createClass({
  displayName: 'SwipeableRow',

  _panResponder: {},
  _previousLeft: CLOSED_LEFT_POSITION,

  mixins: [TimerMixin],

  propTypes: {
    children: PropTypes.any,
    isOpen: PropTypes.bool,
    maxSwipeDistance: PropTypes.number.isRequired,
    onOpen: PropTypes.func.isRequired,
    onClose: PropTypes.func.isRequired,
    onSwipeEnd: PropTypes.func.isRequired,
    onSwipeStart: PropTypes.func.isRequired,

    shouldBounceOnMount: PropTypes.bool,

    slideoutView: PropTypes.node.isRequired,

    swipeThreshold: PropTypes.number.isRequired
  },

  getInitialState: function getInitialState() {
    return {
      currentLeft: new Animated.Value(this._previousLeft),

      isSwipeableViewRendered: false,
      rowHeight: null
    };
  },
  getDefaultProps: function getDefaultProps() {
    return {
      isOpen: false,
      maxSwipeDistance: 0,
      onOpen: emptyFunction,
      onClose: emptyFunction,
      onSwipeEnd: emptyFunction,
      onSwipeStart: emptyFunction,
      swipeThreshold: 30
    };
  },
  componentWillMount: function componentWillMount() {
    this._panResponder = PanResponder.create({
      onMoveShouldSetPanResponderCapture: this._handleMoveShouldSetPanResponderCapture,
      onPanResponderGrant: this._handlePanResponderGrant,
      onPanResponderMove: this._handlePanResponderMove,
      onPanResponderRelease: this._handlePanResponderEnd,
      onPanResponderTerminationRequest: this._onPanResponderTerminationRequest,
      onPanResponderTerminate: this._handlePanResponderEnd,
      onShouldBlockNativeResponder: function onShouldBlockNativeResponder(event, gestureState) {
        return false;
      }
    });
  },
  componentDidMount: function componentDidMount() {
    var _this = this;

    if (this.props.shouldBounceOnMount) {
      this.setTimeout(function () {
        _this._animateBounceBack(ON_MOUNT_BOUNCE_DURATION);
      }, ON_MOUNT_BOUNCE_DELAY);
    }
  },
  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (this.props.isOpen && !nextProps.isOpen) {
      this._animateToClosedPosition();
    }
  },
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    if (this.props.shouldBounceOnMount && !nextProps.shouldBounceOnMount) {
      return false;
    }

    return true;
  },
  render: function render() {
    var slideOutView = void 0;
    if (this.state.isSwipeableViewRendered) {
      slideOutView = React.createElement(
        View,
        { style: [styles.slideOutContainer, { height: this.state.rowHeight }], __source: {
            fileName: _jsxFileName,
            lineNumber: 179
          }
        },
        this.props.slideoutView
      );
    }

    var swipeableView = React.createElement(
      Animated.View,
      {
        onLayout: this._onSwipeableViewLayout,
        style: [styles.swipeableContainer, {
          transform: [{ translateX: this.state.currentLeft }]
        }], __source: {
          fileName: _jsxFileName,
          lineNumber: 190
        }
      },
      this.props.children
    );

    return React.createElement(
      View,
      babelHelpers.extends({}, this._panResponder.panHandlers, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 203
        }
      }),
      slideOutView,
      swipeableView
    );
  },
  _onSwipeableViewLayout: function _onSwipeableViewLayout(event) {
    this.setState({
      isSwipeableViewRendered: true,
      rowHeight: event.nativeEvent.layout.height
    });
  },
  _handleMoveShouldSetPanResponderCapture: function _handleMoveShouldSetPanResponderCapture(event, gestureState) {
    return gestureState.dy < 10 && this._isValidSwipe(gestureState);
  },
  _handlePanResponderGrant: function _handlePanResponderGrant(event, gestureState) {},
  _handlePanResponderMove: function _handlePanResponderMove(event, gestureState) {
    if (this._isSwipingExcessivelyRightFromClosedPosition(gestureState)) {
      return;
    }

    this.props.onSwipeStart();

    if (this._isSwipingRightFromClosed(gestureState)) {
      this._swipeSlowSpeed(gestureState);
    } else {
      this._swipeFullSpeed(gestureState);
    }
  },
  _isSwipingRightFromClosed: function _isSwipingRightFromClosed(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._previousLeft === CLOSED_LEFT_POSITION && gestureStateDx > 0;
  },
  _swipeFullSpeed: function _swipeFullSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx);
  },
  _swipeSlowSpeed: function _swipeSlowSpeed(gestureState) {
    this.state.currentLeft.setValue(this._previousLeft + gestureState.dx / SLOW_SPEED_SWIPE_FACTOR);
  },
  _isSwipingExcessivelyRightFromClosedPosition: function _isSwipingExcessivelyRightFromClosedPosition(gestureState) {
    var gestureStateDx = IS_RTL ? -gestureState.dx : gestureState.dx;
    return this._isSwipingRightFromClosed(gestureState) && gestureStateDx > RIGHT_SWIPE_THRESHOLD;
  },
  _onPanResponderTerminationRequest: function _onPanResponderTerminationRequest(event, gestureState) {
    return false;
  },
  _animateTo: function _animateTo(toValue) {
    var _this2 = this;

    var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : SWIPE_DURATION;
    var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : emptyFunction;

    Animated.timing(this.state.currentLeft, {
      duration: duration,
      toValue: toValue
    }).start(function () {
      _this2._previousLeft = toValue;
      callback();
    });
  },
  _animateToOpenPosition: function _animateToOpenPosition() {
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance);
  },
  _animateToOpenPositionWith: function _animateToOpenPositionWith(speed, distMoved) {
    speed = speed > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD ? speed : HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;

    var duration = Math.abs((this.props.maxSwipeDistance - Math.abs(distMoved)) / speed);
    var maxSwipeDistance = IS_RTL ? -this.props.maxSwipeDistance : this.props.maxSwipeDistance;
    this._animateTo(-maxSwipeDistance, duration);
  },
  _animateToClosedPosition: function _animateToClosedPosition() {
    var duration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SWIPE_DURATION;

    this._animateTo(CLOSED_LEFT_POSITION, duration);
  },
  _animateToClosedPositionDuringBounce: function _animateToClosedPositionDuringBounce() {
    this._animateToClosedPosition(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
  },
  _animateBounceBack: function _animateBounceBack(duration) {
    var swipeBounceBackDistance = IS_RTL ? -RIGHT_SWIPE_BOUNCE_BACK_DISTANCE : RIGHT_SWIPE_BOUNCE_BACK_DISTANCE;
    this._animateTo(-swipeBounceBackDistance, duration, this._animateToClosedPositionDuringBounce);
  },
  _isValidSwipe: function _isValidSwipe(gestureState) {
    return Math.abs(gestureState.dx) > HORIZONTAL_SWIPE_DISTANCE_THRESHOLD;
  },
  _shouldAnimateRemainder: function _shouldAnimateRemainder(gestureState) {
    return Math.abs(gestureState.dx) > this.props.swipeThreshold || gestureState.vx > HORIZONTAL_FULL_SWIPE_SPEED_THRESHOLD;
  },
  _handlePanResponderEnd: function _handlePanResponderEnd(event, gestureState) {
    var horizontalDistance = IS_RTL ? -gestureState.dx : gestureState.dx;
    if (this._isSwipingRightFromClosed(gestureState)) {
      this.props.onOpen();
      this._animateBounceBack(RIGHT_SWIPE_BOUNCE_BACK_DURATION);
    } else if (this._shouldAnimateRemainder(gestureState)) {
      if (horizontalDistance < 0) {
        this.props.onOpen();
        this._animateToOpenPositionWith(gestureState.vx, horizontalDistance);
      } else {
        this.props.onClose();
        this._animateToClosedPosition();
      }
    } else {
      if (this._previousLeft === CLOSED_LEFT_POSITION) {
        this._animateToClosedPosition();
      } else {
        this._animateToOpenPosition();
      }
    }

    this.props.onSwipeEnd();
  }
});

var styles = StyleSheet.create({
  slideOutContainer: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    top: 0
  },
  swipeableContainer: {
    flex: 1
  }
});

module.exports = SwipeableRow;
}, 342, null, "SwipeableRow");
__d(/* TabBarIOS */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/TabBarIOS/TabBarIOS.android.js';
var React = require(103    ); // 103 = React
var View = require(124   ); // 124 = View
var StyleSheet = require(104         ); // 104 = StyleSheet

var DummyTabBarIOS = function (_React$Component) {
  babelHelpers.inherits(DummyTabBarIOS, _React$Component);

  function DummyTabBarIOS() {
    babelHelpers.classCallCheck(this, DummyTabBarIOS);
    return babelHelpers.possibleConstructorReturn(this, (DummyTabBarIOS.__proto__ || Object.getPrototypeOf(DummyTabBarIOS)).apply(this, arguments));
  }

  babelHelpers.createClass(DummyTabBarIOS, [{
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        { style: [this.props.style, styles.tabGroup], __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        },
        this.props.children
      );
    }
  }]);
  return DummyTabBarIOS;
}(React.Component);

var styles = StyleSheet.create({
  tabGroup: {
    flex: 1
  }
});

module.exports = DummyTabBarIOS;
}, 343, null, "TabBarIOS");
__d(/* TextInput */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/TextInput/TextInput.js';
var ColorPropType = require(48             ); // 48 = ColorPropType
var DocumentSelectionState = require(345                     ); // 345 = DocumentSelectionState
var EventEmitter = require(80            ); // 80 = EventEmitter
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var Platform = require(56        ); // 56 = Platform
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var StyleSheet = require(104         ); // 104 = StyleSheet
var Text = require(188   ); // 188 = Text
var TextInputState = require(55              ); // 55 = TextInputState
var TimerMixin = require(253                ); // 253 = react-timer-mixin
var TouchableWithoutFeedback = require(252                       ); // 252 = TouchableWithoutFeedback
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View
var warning = require(21                ); // 21 = fbjs/lib/warning

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var PropTypes = React.PropTypes;

var onlyMultiline = {
  onTextInput: true,
  children: true
};

if (Platform.OS === 'android') {
  var AndroidTextInput = requireNativeComponent('AndroidTextInput', null);
} else if (Platform.OS === 'ios') {
  var RCTTextView = requireNativeComponent('RCTTextView', null);
  var RCTTextField = requireNativeComponent('RCTTextField', null);
}

var DataDetectorTypes = ['phoneNumber', 'link', 'address', 'calendarEvent', 'none', 'all'];

var TextInput = React.createClass({
  displayName: 'TextInput',

  statics: {
    State: TextInputState
  },

  propTypes: babelHelpers.extends({}, View.propTypes, {
    autoCapitalize: PropTypes.oneOf(['none', 'sentences', 'words', 'characters']),

    autoCorrect: PropTypes.bool,

    spellCheck: PropTypes.bool,

    autoFocus: PropTypes.bool,

    editable: PropTypes.bool,

    keyboardType: PropTypes.oneOf(['default', 'email-address', 'numeric', 'phone-pad', 'ascii-capable', 'numbers-and-punctuation', 'url', 'number-pad', 'name-phone-pad', 'decimal-pad', 'twitter', 'web-search']),

    keyboardAppearance: PropTypes.oneOf(['default', 'light', 'dark']),

    returnKeyType: PropTypes.oneOf(['done', 'go', 'next', 'search', 'send', 'none', 'previous', 'default', 'emergency-call', 'google', 'join', 'route', 'yahoo']),

    returnKeyLabel: PropTypes.string,

    maxLength: PropTypes.number,

    numberOfLines: PropTypes.number,

    disableFullscreenUI: PropTypes.bool,

    enablesReturnKeyAutomatically: PropTypes.bool,

    multiline: PropTypes.bool,

    textBreakStrategy: React.PropTypes.oneOf(['simple', 'highQuality', 'balanced']),

    onBlur: PropTypes.func,

    onFocus: PropTypes.func,

    onChange: PropTypes.func,

    onChangeText: PropTypes.func,

    onContentSizeChange: PropTypes.func,

    onEndEditing: PropTypes.func,

    onSelectionChange: PropTypes.func,

    onSubmitEditing: PropTypes.func,

    onKeyPress: PropTypes.func,

    onLayout: PropTypes.func,

    onScroll: PropTypes.func,

    placeholder: PropTypes.node,

    placeholderTextColor: ColorPropType,

    secureTextEntry: PropTypes.bool,

    selectionColor: ColorPropType,

    selectionState: PropTypes.instanceOf(DocumentSelectionState),

    selection: PropTypes.shape({
      start: PropTypes.number.isRequired,
      end: PropTypes.number
    }),

    value: PropTypes.string,

    defaultValue: PropTypes.node,

    clearButtonMode: PropTypes.oneOf(['never', 'while-editing', 'unless-editing', 'always']),

    clearTextOnFocus: PropTypes.bool,

    selectTextOnFocus: PropTypes.bool,

    blurOnSubmit: PropTypes.bool,

    style: Text.propTypes.style,

    underlineColorAndroid: ColorPropType,

    inlineImageLeft: PropTypes.string,

    inlineImagePadding: PropTypes.number,

    dataDetectorTypes: PropTypes.oneOfType([PropTypes.oneOf(DataDetectorTypes), PropTypes.arrayOf(PropTypes.oneOf(DataDetectorTypes))])
  }),

  mixins: [NativeMethodsMixin, TimerMixin],

  viewConfig: Platform.OS === 'ios' && RCTTextField ? RCTTextField.viewConfig : Platform.OS === 'android' && AndroidTextInput ? AndroidTextInput.viewConfig : {},

  isFocused: function isFocused() {
    return TextInputState.currentlyFocusedField() === ReactNative.findNodeHandle(this._inputRef);
  },

  contextTypes: {
    onFocusRequested: React.PropTypes.func,
    focusEmitter: React.PropTypes.instanceOf(EventEmitter)
  },

  _inputRef: undefined,
  _focusSubscription: undefined,
  _lastNativeText: undefined,
  _lastNativeSelection: undefined,

  componentDidMount: function componentDidMount() {
    var _this = this;

    this._lastNativeText = this.props.value;
    if (!this.context.focusEmitter) {
      if (this.props.autoFocus) {
        this.requestAnimationFrame(this.focus);
      }
      return;
    }
    this._focusSubscription = this.context.focusEmitter.addListener('focus', function (el) {
      if (_this === el) {
        _this.requestAnimationFrame(_this.focus);
      } else if (_this.isFocused()) {
        _this.blur();
      }
    });
    if (this.props.autoFocus) {
      this.context.onFocusRequested(this);
    }
  },

  componentWillUnmount: function componentWillUnmount() {
    this._focusSubscription && this._focusSubscription.remove();
    if (this.isFocused()) {
      this.blur();
    }
  },

  getChildContext: function getChildContext() {
    return { isInAParentText: true };
  },

  childContextTypes: {
    isInAParentText: React.PropTypes.bool
  },

  clear: function clear() {
    this.setNativeProps({ text: '' });
  },

  render: function render() {
    if (Platform.OS === 'ios') {
      return this._renderIOS();
    } else if (Platform.OS === 'android') {
      return this._renderAndroid();
    }
  },

  _getText: function _getText() {
    return typeof this.props.value === 'string' ? this.props.value : typeof this.props.defaultValue === 'string' ? this.props.defaultValue : '';
  },

  _setNativeRef: function _setNativeRef(ref) {
    this._inputRef = ref;
  },

  _renderIOS: function _renderIOS() {
    var textContainer;

    var props = babelHelpers.extends({}, this.props);
    props.style = [styles.input, this.props.style];

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    if (!props.multiline) {
      if (__DEV__) {
        for (var propKey in onlyMultiline) {
          if (props[propKey]) {
            var error = new Error('TextInput prop `' + propKey + '` is only supported with multiline.');
            warning(false, '%s', error.stack);
          }
        }
      }
      textContainer = React.createElement(RCTTextField, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onSelectionChange: this._onSelectionChange,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 652
        }
      }));
    } else {
      var children = props.children;
      var childCount = 0;
      React.Children.forEach(children, function () {
        return ++childCount;
      });
      invariant(!(props.value && childCount), 'Cannot specify both value and children.');
      if (childCount >= 1) {
        children = React.createElement(
          Text,
          { style: props.style, __source: {
              fileName: _jsxFileName,
              lineNumber: 671
            }
          },
          children
        );
      }
      if (props.inputView) {
        children = [children, props.inputView];
      }
      textContainer = React.createElement(RCTTextView, babelHelpers.extends({
        ref: this._setNativeRef
      }, props, {
        children: children,
        onFocus: this._onFocus,
        onBlur: this._onBlur,
        onChange: this._onChange,
        onContentSizeChange: this.props.onContentSizeChange,
        onSelectionChange: this._onSelectionChange,
        onTextInput: this._onTextInput,
        onSelectionChangeShouldSetResponder: emptyFunction.thatReturnsTrue,
        text: this._getText(),
        dataDetectorTypes: this.props.dataDetectorTypes,
        onScroll: this._onScroll,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 677
        }
      }));
    }

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: props.onLayout,
        onPress: this._onPress,
        rejectResponderTermination: true,
        accessible: props.accessible,
        accessibilityLabel: props.accessibilityLabel,
        accessibilityTraits: props.accessibilityTraits,
        testID: props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 695
        }
      },
      textContainer
    );
  },

  _renderAndroid: function _renderAndroid() {
    var props = babelHelpers.extends({}, this.props);
    props.style = [this.props.style];
    props.autoCapitalize = UIManager.AndroidTextInput.Constants.AutoCapitalizationType[this.props.autoCapitalize];
    var children = this.props.children;
    var childCount = 0;
    React.Children.forEach(children, function () {
      return ++childCount;
    });
    invariant(!(this.props.value && childCount), 'Cannot specify both value and children.');
    if (childCount > 1) {
      children = React.createElement(
        Text,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 721
          }
        },
        children
      );
    }

    if (props.selection && props.selection.end == null) {
      props.selection = { start: props.selection.start, end: props.selection.start };
    }

    var textContainer = React.createElement(AndroidTextInput, babelHelpers.extends({
      ref: this._setNativeRef
    }, props, {
      mostRecentEventCount: 0,
      onFocus: this._onFocus,
      onBlur: this._onBlur,
      onChange: this._onChange,
      onSelectionChange: this._onSelectionChange,
      onTextInput: this._onTextInput,
      text: this._getText(),
      children: children,
      disableFullscreenUI: this.props.disableFullscreenUI,
      textBreakStrategy: this.props.textBreakStrategy,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 729
      }
    }));

    return React.createElement(
      TouchableWithoutFeedback,
      {
        onLayout: this.props.onLayout,
        onPress: this._onPress,
        accessible: this.props.accessible,
        accessibilityLabel: this.props.accessibilityLabel,
        accessibilityComponentType: this.props.accessibilityComponentType,
        testID: this.props.testID, __source: {
          fileName: _jsxFileName,
          lineNumber: 745
        }
      },
      textContainer
    );
  },

  _onFocus: function _onFocus(event) {
    if (this.props.onFocus) {
      this.props.onFocus(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.focus();
    }
  },

  _onPress: function _onPress(event) {
    if (this.props.editable || this.props.editable === undefined) {
      this.focus();
    }
  },

  _onChange: function _onChange(event) {
    if (this._inputRef) {
      this._inputRef.setNativeProps({
        mostRecentEventCount: event.nativeEvent.eventCount
      });
    }

    var text = event.nativeEvent.text;
    this.props.onChange && this.props.onChange(event);
    this.props.onChangeText && this.props.onChangeText(text);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeText = text;
    this.forceUpdate();
  },

  _onSelectionChange: function _onSelectionChange(event) {
    this.props.onSelectionChange && this.props.onSelectionChange(event);

    if (!this._inputRef) {
      return;
    }

    this._lastNativeSelection = event.nativeEvent.selection;

    if (this.props.selection || this.props.selectionState) {
      this.forceUpdate();
    }
  },

  componentDidUpdate: function componentDidUpdate() {
    var nativeProps = {};

    if (this._lastNativeText !== this.props.value && typeof this.props.value === 'string') {
      nativeProps.text = this.props.value;
    }

    var selection = this.props.selection;

    if (this._lastNativeSelection && selection && (this._lastNativeSelection.start !== selection.start || this._lastNativeSelection.end !== selection.end)) {
      nativeProps.selection = this.props.selection;
    }

    if (Object.keys(nativeProps).length > 0 && this._inputRef) {
      this._inputRef.setNativeProps(nativeProps);
    }

    if (this.props.selectionState && selection) {
      this.props.selectionState.update(selection.start, selection.end);
    }
  },

  _onBlur: function _onBlur(event) {
    this.blur();
    if (this.props.onBlur) {
      this.props.onBlur(event);
    }

    if (this.props.selectionState) {
      this.props.selectionState.blur();
    }
  },

  _onTextInput: function _onTextInput(event) {
    this.props.onTextInput && this.props.onTextInput(event);
  },

  _onScroll: function _onScroll(event) {
    this.props.onScroll && this.props.onScroll(event);
  }
});

var styles = StyleSheet.create({
  input: {
    alignSelf: 'stretch'
  }
});

module.exports = TextInput;
}, 344, null, "TextInput");
__d(/* DocumentSelectionState */function(global, require, module, exports) {

'use strict';

var mixInEventEmitter = require(346                ); // 346 = mixInEventEmitter

var DocumentSelectionState = function () {
  function DocumentSelectionState(anchor, focus) {
    babelHelpers.classCallCheck(this, DocumentSelectionState);

    this._anchorOffset = anchor;
    this._focusOffset = focus;
    this._hasFocus = false;
  }

  babelHelpers.createClass(DocumentSelectionState, [{
    key: 'update',
    value: function update(anchor, focus) {
      if (this._anchorOffset !== anchor || this._focusOffset !== focus) {
        this._anchorOffset = anchor;
        this._focusOffset = focus;
        this.emit('update');
      }
    }
  }, {
    key: 'constrainLength',
    value: function constrainLength(maxLength) {
      this.update(Math.min(this._anchorOffset, maxLength), Math.min(this._focusOffset, maxLength));
    }
  }, {
    key: 'focus',
    value: function focus() {
      if (!this._hasFocus) {
        this._hasFocus = true;
        this.emit('focus');
      }
    }
  }, {
    key: 'blur',
    value: function blur() {
      if (this._hasFocus) {
        this._hasFocus = false;
        this.emit('blur');
      }
    }
  }, {
    key: 'hasFocus',
    value: function hasFocus() {
      return this._hasFocus;
    }
  }, {
    key: 'isCollapsed',
    value: function isCollapsed() {
      return this._anchorOffset === this._focusOffset;
    }
  }, {
    key: 'isBackward',
    value: function isBackward() {
      return this._anchorOffset > this._focusOffset;
    }
  }, {
    key: 'getAnchorOffset',
    value: function getAnchorOffset() {
      return this._hasFocus ? this._anchorOffset : null;
    }
  }, {
    key: 'getFocusOffset',
    value: function getFocusOffset() {
      return this._hasFocus ? this._focusOffset : null;
    }
  }, {
    key: 'getStartOffset',
    value: function getStartOffset() {
      return this._hasFocus ? Math.min(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'getEndOffset',
    value: function getEndOffset() {
      return this._hasFocus ? Math.max(this._anchorOffset, this._focusOffset) : null;
    }
  }, {
    key: 'overlaps',
    value: function overlaps(start, end) {
      return this.hasFocus() && this.getStartOffset() <= end && start <= this.getEndOffset();
    }
  }]);
  return DocumentSelectionState;
}();

mixInEventEmitter(DocumentSelectionState, {
  'blur': true,
  'focus': true,
  'update': true
});

module.exports = DocumentSelectionState;
}, 345, null, "DocumentSelectionState");
__d(/* mixInEventEmitter */function(global, require, module, exports) {
'use strict';

var EventEmitter = require(80            ); // 80 = EventEmitter
var EventEmitterWithHolding = require(347                      ); // 347 = EventEmitterWithHolding
var EventHolder = require(348          ); // 348 = EventHolder
var EventValidator = require(349             ); // 349 = EventValidator

var copyProperties = require(350             ); // 350 = copyProperties
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var keyOf = require(302             ); // 302 = fbjs/lib/keyOf

var TYPES_KEY = keyOf({ __types: true });

function mixInEventEmitter(cls, types) {
  invariant(types, 'Must supply set of valid event types');

  var target = cls.prototype || cls;

  invariant(!target.__eventEmitter, 'An active emitter is already mixed in');

  var ctor = cls.constructor;
  if (ctor) {
    invariant(ctor === Object || ctor === Function, 'Mix EventEmitter into a class, not an instance');
  }

  if (target.hasOwnProperty(TYPES_KEY)) {
    copyProperties(target.__types, types);
  } else if (target.__types) {
    target.__types = copyProperties({}, target.__types, types);
  } else {
    target.__types = types;
  }
  copyProperties(target, EventEmitterMixin);
}

var EventEmitterMixin = {
  emit: function emit(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emit(eventType, a, b, c, d, e, _);
  },

  emitAndHold: function emitAndHold(eventType, a, b, c, d, e, _) {
    return this.__getEventEmitter().emitAndHold(eventType, a, b, c, d, e, _);
  },

  addListener: function addListener(eventType, listener, context) {
    return this.__getEventEmitter().addListener(eventType, listener, context);
  },

  once: function once(eventType, listener, context) {
    return this.__getEventEmitter().once(eventType, listener, context);
  },

  addRetroactiveListener: function addRetroactiveListener(eventType, listener, context) {
    return this.__getEventEmitter().addRetroactiveListener(eventType, listener, context);
  },

  addListenerMap: function addListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  addRetroactiveListenerMap: function addRetroactiveListenerMap(listenerMap, context) {
    return this.__getEventEmitter().addListenerMap(listenerMap, context);
  },

  removeAllListeners: function removeAllListeners() {
    this.__getEventEmitter().removeAllListeners();
  },

  removeCurrentListener: function removeCurrentListener() {
    this.__getEventEmitter().removeCurrentListener();
  },

  releaseHeldEventType: function releaseHeldEventType(eventType) {
    this.__getEventEmitter().releaseHeldEventType(eventType);
  },

  __getEventEmitter: function __getEventEmitter() {
    if (!this.__eventEmitter) {
      var emitter = new EventEmitter();
      emitter = EventValidator.addValidation(emitter, this.__types);

      var holder = new EventHolder();
      this.__eventEmitter = new EventEmitterWithHolding(emitter, holder);
    }
    return this.__eventEmitter;
  }
};

module.exports = mixInEventEmitter;
}, 346, null, "mixInEventEmitter");
__d(/* EventEmitterWithHolding */function(global, require, module, exports) {
'use strict';

var EventEmitterWithHolding = function () {
  function EventEmitterWithHolding(emitter, holder) {
    babelHelpers.classCallCheck(this, EventEmitterWithHolding);

    this._emitter = emitter;
    this._eventHolder = holder;
    this._currentEventToken = null;
    this._emittingHeldEvents = false;
  }

  babelHelpers.createClass(EventEmitterWithHolding, [{
    key: 'addListener',
    value: function addListener(eventType, listener, context) {
      return this._emitter.addListener(eventType, listener, context);
    }
  }, {
    key: 'once',
    value: function once(eventType, listener, context) {
      return this._emitter.once(eventType, listener, context);
    }
  }, {
    key: 'addRetroactiveListener',
    value: function addRetroactiveListener(eventType, listener, context) {
      var subscription = this._emitter.addListener(eventType, listener, context);

      this._emittingHeldEvents = true;
      this._eventHolder.emitToListener(eventType, listener, context);
      this._emittingHeldEvents = false;

      return subscription;
    }
  }, {
    key: 'removeAllListeners',
    value: function removeAllListeners(eventType) {
      this._emitter.removeAllListeners(eventType);
    }
  }, {
    key: 'removeCurrentListener',
    value: function removeCurrentListener() {
      this._emitter.removeCurrentListener();
    }
  }, {
    key: 'listeners',
    value: function listeners(eventType) {
      return this._emitter.listeners(eventType);
    }
  }, {
    key: 'emit',
    value: function emit(eventType) {
      var _emitter;

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      (_emitter = this._emitter).emit.apply(_emitter, [eventType].concat(babelHelpers.toConsumableArray(args)));
    }
  }, {
    key: 'emitAndHold',
    value: function emitAndHold(eventType) {
      var _eventHolder, _emitter2;

      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }

      this._currentEventToken = (_eventHolder = this._eventHolder).holdEvent.apply(_eventHolder, [eventType].concat(babelHelpers.toConsumableArray(args)));
      (_emitter2 = this._emitter).emit.apply(_emitter2, [eventType].concat(babelHelpers.toConsumableArray(args)));
      this._currentEventToken = null;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      if (this._currentEventToken) {
        this._eventHolder.releaseEvent(this._currentEventToken);
      } else if (this._emittingHeldEvents) {
        this._eventHolder.releaseCurrentEvent();
      }
    }
  }, {
    key: 'releaseHeldEventType',
    value: function releaseHeldEventType(eventType) {
      this._eventHolder.releaseEventType(eventType);
    }
  }]);
  return EventEmitterWithHolding;
}();

module.exports = EventEmitterWithHolding;
}, 347, null, "EventEmitterWithHolding");
__d(/* EventHolder */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var EventHolder = function () {
  function EventHolder() {
    babelHelpers.classCallCheck(this, EventHolder);

    this._heldEvents = {};
    this._currentEventKey = null;
  }

  babelHelpers.createClass(EventHolder, [{
    key: 'holdEvent',
    value: function holdEvent(eventType) {
      this._heldEvents[eventType] = this._heldEvents[eventType] || [];
      var eventsOfType = this._heldEvents[eventType];
      var key = {
        eventType: eventType,
        index: eventsOfType.length
      };

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      eventsOfType.push(args);
      return key;
    }
  }, {
    key: 'emitToListener',
    value: function emitToListener(eventType, listener, context) {
      var _this = this;

      var eventsOfType = this._heldEvents[eventType];
      if (!eventsOfType) {
        return;
      }
      var origEventKey = this._currentEventKey;
      eventsOfType.forEach(function (eventHeld, index) {
        if (!eventHeld) {
          return;
        }
        _this._currentEventKey = {
          eventType: eventType,
          index: index
        };
        listener.apply(context, eventHeld);
      });
      this._currentEventKey = origEventKey;
    }
  }, {
    key: 'releaseCurrentEvent',
    value: function releaseCurrentEvent() {
      invariant(this._currentEventKey !== null, 'Not in an emitting cycle; there is no current event');
      this._currentEventKey && this.releaseEvent(this._currentEventKey);
    }
  }, {
    key: 'releaseEvent',
    value: function releaseEvent(token) {
      delete this._heldEvents[token.eventType][token.index];
    }
  }, {
    key: 'releaseEventType',
    value: function releaseEventType(type) {
      this._heldEvents[type] = [];
    }
  }]);
  return EventHolder;
}();

module.exports = EventHolder;
}, 348, null, "EventHolder");
__d(/* EventValidator */function(global, require, module, exports) {
'use strict';

var copyProperties = require(350             ); // 350 = copyProperties

var EventValidator = {
  addValidation: function addValidation(emitter, types) {
    var eventTypes = Object.keys(types);
    var emitterWithValidation = Object.create(emitter);

    copyProperties(emitterWithValidation, {
      emit: function emit(type, a, b, c, d, e, _) {
        assertAllowsEventType(type, eventTypes);
        return emitter.emit.call(this, type, a, b, c, d, e, _);
      }
    });

    return emitterWithValidation;
  }
};

function assertAllowsEventType(type, allowedTypes) {
  if (allowedTypes.indexOf(type) === -1) {
    throw new TypeError(errorMessageFor(type, allowedTypes));
  }
}

function errorMessageFor(type, allowedTypes) {
  var message = 'Unknown event type "' + type + '". ';
  if (__DEV__) {
    message += recommendationFor(type, allowedTypes);
  }
  message += 'Known event types: ' + allowedTypes.join(', ') + '.';
  return message;
}

if (__DEV__) {
  var recommendationFor = function recommendationFor(type, allowedTypes) {
    var closestTypeRecommendation = closestTypeFor(type, allowedTypes);
    if (isCloseEnough(closestTypeRecommendation, type)) {
      return 'Did you mean "' + closestTypeRecommendation.type + '"? ';
    } else {
      return '';
    }
  };

  var closestTypeFor = function closestTypeFor(type, allowedTypes) {
    var typeRecommendations = allowedTypes.map(typeRecommendationFor.bind(this, type));
    return typeRecommendations.sort(recommendationSort)[0];
  };

  var typeRecommendationFor = function typeRecommendationFor(type, recomendedType) {
    return {
      type: recomendedType,
      distance: damerauLevenshteinDistance(type, recomendedType)
    };
  };

  var recommendationSort = function recommendationSort(recommendationA, recommendationB) {
    if (recommendationA.distance < recommendationB.distance) {
      return -1;
    } else if (recommendationA.distance > recommendationB.distance) {
      return 1;
    } else {
      return 0;
    }
  };

  var isCloseEnough = function isCloseEnough(closestType, actualType) {
    return closestType.distance / actualType.length < 0.334;
  };

  var damerauLevenshteinDistance = function damerauLevenshteinDistance(a, b) {
    var i = void 0,
        j = void 0;
    var d = [];

    for (i = 0; i <= a.length; i++) {
      d[i] = [i];
    }

    for (j = 1; j <= b.length; j++) {
      d[0][j] = j;
    }

    for (i = 1; i <= a.length; i++) {
      for (j = 1; j <= b.length; j++) {
        var cost = a.charAt(i - 1) === b.charAt(j - 1) ? 0 : 1;

        d[i][j] = Math.min(d[i - 1][j] + 1, d[i][j - 1] + 1, d[i - 1][j - 1] + cost);

        if (i > 1 && j > 1 && a.charAt(i - 1) === b.charAt(j - 2) && a.charAt(i - 2) === b.charAt(j - 1)) {
          d[i][j] = Math.min(d[i][j], d[i - 2][j - 2] + cost);
        }
      }
    }

    return d[a.length][b.length];
  };
}

module.exports = EventValidator;
}, 349, null, "EventValidator");
__d(/* copyProperties */function(global, require, module, exports) {
'use strict';

function copyProperties(obj, a, b, c, d, e, f) {
  obj = obj || {};

  if (__DEV__) {
    if (f) {
      throw new Error('Too many arguments passed to copyProperties');
    }
  }

  var args = [a, b, c, d, e];
  var ii = 0,
      v;
  while (args[ii]) {
    v = args[ii++];
    for (var k in v) {
      obj[k] = v[k];
    }

    if (v.hasOwnProperty && v.hasOwnProperty('toString') && typeof v.toString !== 'undefined' && obj.toString !== v.toString) {
      obj.toString = v.toString;
    }
  }

  return obj;
}

module.exports = copyProperties;
}, 350, null, "copyProperties");
__d(/* ToolbarAndroid */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/ToolbarAndroid/ToolbarAndroid.android.js';
var Image = require(268    ); // 268 = Image
var NativeMethodsMixin = require(50                  ); // 50 = NativeMethodsMixin
var React = require(103    ); // 103 = React
var ReactNativeViewAttributes = require(130                        ); // 130 = ReactNativeViewAttributes
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View
var ColorPropType = require(48             ); // 48 = ColorPropType

var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent
var resolveAssetSource = require(176                 ); // 176 = resolveAssetSource

var ReactPropTypes = React.PropTypes;

var optionalImageSource = ReactPropTypes.oneOfType([Image.propTypes.source, ReactPropTypes.oneOf([])]);

var ToolbarAndroid = React.createClass({
  displayName: 'ToolbarAndroid',

  mixins: [NativeMethodsMixin],

  propTypes: babelHelpers.extends({}, View.propTypes, {
    actions: ReactPropTypes.arrayOf(ReactPropTypes.shape({
      title: ReactPropTypes.string.isRequired,
      icon: optionalImageSource,
      show: ReactPropTypes.oneOf(['always', 'ifRoom', 'never']),
      showWithText: ReactPropTypes.bool
    })),

    logo: optionalImageSource,

    navIcon: optionalImageSource,

    onActionSelected: ReactPropTypes.func,

    onIconClicked: ReactPropTypes.func,

    overflowIcon: optionalImageSource,

    subtitle: ReactPropTypes.string,

    subtitleColor: ColorPropType,

    title: ReactPropTypes.string,

    titleColor: ColorPropType,

    contentInsetStart: ReactPropTypes.number,

    contentInsetEnd: ReactPropTypes.number,

    rtl: ReactPropTypes.bool,

    testID: ReactPropTypes.string
  }),

  render: function render() {
    var nativeProps = babelHelpers.extends({}, this.props);
    if (this.props.logo) {
      nativeProps.logo = resolveAssetSource(this.props.logo);
    }
    if (this.props.navIcon) {
      nativeProps.navIcon = resolveAssetSource(this.props.navIcon);
    }
    if (this.props.overflowIcon) {
      nativeProps.overflowIcon = resolveAssetSource(this.props.overflowIcon);
    }
    if (this.props.actions) {
      var nativeActions = [];
      for (var i = 0; i < this.props.actions.length; i++) {
        var action = babelHelpers.extends({}, this.props.actions[i]);
        if (action.icon) {
          action.icon = resolveAssetSource(action.icon);
        }
        if (action.show) {
          action.show = UIManager.ToolbarAndroid.Constants.ShowAsAction[action.show];
        }
        nativeActions.push(action);
      }
      nativeProps.nativeActions = nativeActions;
    }

    return React.createElement(NativeToolbar, babelHelpers.extends({ onSelect: this._onSelect }, nativeProps, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 195
      }
    }));
  },

  _onSelect: function _onSelect(event) {
    var position = event.nativeEvent.position;
    if (position === -1) {
      this.props.onIconClicked && this.props.onIconClicked();
    } else {
      this.props.onActionSelected && this.props.onActionSelected(position);
    }
  }
});

var NativeToolbar = requireNativeComponent('ToolbarAndroid', ToolbarAndroid, {
  nativeOnly: {
    nativeActions: true
  }
});

module.exports = ToolbarAndroid;
}, 351, null, "ToolbarAndroid");
__d(/* ViewPagerAndroid */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/ViewPager/ViewPagerAndroid.android.js';
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View

var dismissKeyboard = require(87               ); // 87 = dismissKeyboard
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent

var ReactPropTypes = React.PropTypes;

var VIEWPAGER_REF = 'viewPager';

var ViewPagerAndroid = function (_React$Component) {
  babelHelpers.inherits(ViewPagerAndroid, _React$Component);

  function ViewPagerAndroid() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, ViewPagerAndroid);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = ViewPagerAndroid.__proto__ || Object.getPrototypeOf(ViewPagerAndroid)).call.apply(_ref, [this].concat(args))), _this), _this.getInnerViewNode = function () {
      return _this.refs[VIEWPAGER_REF].getInnerViewNode();
    }, _this._childrenWithOverridenStyle = function () {
      return React.Children.map(_this.props.children, function (child) {
        if (!child) {
          return null;
        }
        var newProps = babelHelpers.extends({}, child.props, {
          style: [child.props.style, {
            position: 'absolute',
            left: 0,
            top: 0,
            right: 0,
            bottom: 0,
            width: undefined,
            height: undefined
          }],
          collapsable: false
        });
        if (child.type && child.type.displayName && child.type.displayName !== 'RCTView' && child.type.displayName !== 'View') {
          console.warn('Each ViewPager child must be a <View>. Was ' + child.type.displayName);
        }
        return React.createElement(child.type, newProps);
      });
    }, _this._onPageScroll = function (e) {
      if (_this.props.onPageScroll) {
        _this.props.onPageScroll(e);
      }
      if (_this.props.keyboardDismissMode === 'on-drag') {
        dismissKeyboard();
      }
    }, _this._onPageScrollStateChanged = function (e) {
      if (_this.props.onPageScrollStateChanged) {
        _this.props.onPageScrollStateChanged(e.nativeEvent.pageScrollState);
      }
    }, _this._onPageSelected = function (e) {
      if (_this.props.onPageSelected) {
        _this.props.onPageSelected(e);
      }
    }, _this.setPage = function (selectedPage) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPage, [selectedPage]);
    }, _this.setPageWithoutAnimation = function (selectedPage) {
      UIManager.dispatchViewManagerCommand(ReactNative.findNodeHandle(_this), UIManager.AndroidViewPager.Commands.setPageWithoutAnimation, [selectedPage]);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(ViewPagerAndroid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      if (this.props.initialPage != null) {
        this.setPageWithoutAnimation(this.props.initialPage);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(NativeAndroidViewPager, babelHelpers.extends({}, this.props, {
        ref: VIEWPAGER_REF,
        style: this.props.style,
        onPageScroll: this._onPageScroll,
        onPageScrollStateChanged: this._onPageScrollStateChanged,
        onPageSelected: this._onPageSelected,
        children: this._childrenWithOverridenStyle(),
        __source: {
          fileName: _jsxFileName,
          lineNumber: 231
        }
      }));
    }
  }]);
  return ViewPagerAndroid;
}(React.Component);

ViewPagerAndroid.propTypes = babelHelpers.extends({}, View.propTypes, {
  initialPage: ReactPropTypes.number,

  onPageScroll: ReactPropTypes.func,

  onPageScrollStateChanged: ReactPropTypes.func,

  onPageSelected: ReactPropTypes.func,

  pageMargin: ReactPropTypes.number,

  keyboardDismissMode: ReactPropTypes.oneOf(['none', 'on-drag']),

  scrollEnabled: ReactPropTypes.bool
});


var NativeAndroidViewPager = requireNativeComponent('AndroidViewPager', ViewPagerAndroid);

module.exports = ViewPagerAndroid;
}, 352, null, "ViewPagerAndroid");
__d(/* WebView */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/Components/WebView/WebView.android.js';
var EdgeInsetsPropType = require(125                 ); // 125 = EdgeInsetsPropType
var ActivityIndicator = require(47                 ); // 47 = ActivityIndicator
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative
var StyleSheet = require(104         ); // 104 = StyleSheet
var UIManager = require(100        ); // 100 = UIManager
var View = require(124   ); // 124 = View

var deprecatedPropType = require(114                 ); // 114 = deprecatedPropType
var keyMirror = require(110                 ); // 110 = fbjs/lib/keyMirror
var requireNativeComponent = require(133                     ); // 133 = requireNativeComponent
var resolveAssetSource = require(176                 ); // 176 = resolveAssetSource

var PropTypes = React.PropTypes;

var RCT_WEBVIEW_REF = 'webview';

var WebViewState = keyMirror({
  IDLE: null,
  LOADING: null,
  ERROR: null
});

var defaultRenderLoading = function defaultRenderLoading() {
  return React.createElement(
    View,
    { style: styles.loadingView, __source: {
        fileName: _jsxFileName,
        lineNumber: 37
      }
    },
    React.createElement(ActivityIndicator, {
      style: styles.loadingProgressBar,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 38
      }
    })
  );
};

var WebView = function (_React$Component) {
  babelHelpers.inherits(WebView, _React$Component);

  function WebView() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, WebView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = WebView.__proto__ || Object.getPrototypeOf(WebView)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      viewState: WebViewState.IDLE,
      lastErrorEvent: null,
      startInLoadingState: true
    }, _this.goForward = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goForward, null);
    }, _this.goBack = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.goBack, null);
    }, _this.reload = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.reload, null);
    }, _this.stopLoading = function () {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.stopLoading, null);
    }, _this.postMessage = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.postMessage, [String(data)]);
    }, _this.injectJavaScript = function (data) {
      UIManager.dispatchViewManagerCommand(_this.getWebViewHandle(), UIManager.RCTWebView.Commands.injectJavaScript, [data]);
    }, _this.updateNavigationState = function (event) {
      if (_this.props.onNavigationStateChange) {
        _this.props.onNavigationStateChange(event.nativeEvent);
      }
    }, _this.getWebViewHandle = function () {
      return ReactNative.findNodeHandle(_this.refs[RCT_WEBVIEW_REF]);
    }, _this.onLoadingStart = function (event) {
      var onLoadStart = _this.props.onLoadStart;
      onLoadStart && onLoadStart(event);
      _this.updateNavigationState(event);
    }, _this.onLoadingError = function (event) {
      event.persist();var _this$props = _this.props,
          onError = _this$props.onError,
          onLoadEnd = _this$props.onLoadEnd;

      onError && onError(event);
      onLoadEnd && onLoadEnd(event);
      console.warn('Encountered an error loading page', event.nativeEvent);

      _this.setState({
        lastErrorEvent: event.nativeEvent,
        viewState: WebViewState.ERROR
      });
    }, _this.onLoadingFinish = function (event) {
      var _this$props2 = _this.props,
          onLoad = _this$props2.onLoad,
          onLoadEnd = _this$props2.onLoadEnd;

      onLoad && onLoad(event);
      onLoadEnd && onLoadEnd(event);
      _this.setState({
        viewState: WebViewState.IDLE
      });
      _this.updateNavigationState(event);
    }, _this.onMessage = function (event) {
      var onMessage = _this.props.onMessage;

      onMessage && onMessage(event);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(WebView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      if (this.props.startInLoadingState) {
        this.setState({ viewState: WebViewState.LOADING });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var otherView = null;

      if (this.state.viewState === WebViewState.LOADING) {
        otherView = (this.props.renderLoading || defaultRenderLoading)();
      } else if (this.state.viewState === WebViewState.ERROR) {
        var errorEvent = this.state.lastErrorEvent;
        otherView = this.props.renderError && this.props.renderError(errorEvent.domain, errorEvent.code, errorEvent.description);
      } else if (this.state.viewState !== WebViewState.IDLE) {
        console.error('RCTWebView invalid state encountered: ' + this.state.loading);
      }

      var webViewStyles = [styles.container, this.props.style];
      if (this.state.viewState === WebViewState.LOADING || this.state.viewState === WebViewState.ERROR) {
        webViewStyles.push(styles.hidden);
      }

      var source = this.props.source || {};
      if (this.props.html) {
        source.html = this.props.html;
      } else if (this.props.url) {
        source.uri = this.props.url;
      }

      if (source.method === 'POST' && source.headers) {
        console.warn('WebView: `source.headers` is not supported when using POST.');
      } else if (source.method === 'GET' && source.body) {
        console.warn('WebView: `source.body` is not supported when using GET.');
      }

      var webView = React.createElement(RCTWebView, {
        ref: RCT_WEBVIEW_REF,
        key: 'webViewKey',
        style: webViewStyles,
        source: resolveAssetSource(source),
        scalesPageToFit: this.props.scalesPageToFit,
        injectedJavaScript: this.props.injectedJavaScript,
        userAgent: this.props.userAgent,
        javaScriptEnabled: this.props.javaScriptEnabled,
        domStorageEnabled: this.props.domStorageEnabled,
        messagingEnabled: typeof this.props.onMessage === 'function',
        onMessage: this.onMessage,
        contentInset: this.props.contentInset,
        automaticallyAdjustContentInsets: this.props.automaticallyAdjustContentInsets,
        onContentSizeChange: this.props.onContentSizeChange,
        onLoadingStart: this.onLoadingStart,
        onLoadingFinish: this.onLoadingFinish,
        onLoadingError: this.onLoadingError,
        testID: this.props.testID,
        mediaPlaybackRequiresUserAction: this.props.mediaPlaybackRequiresUserAction,
        allowUniversalAccessFromFileURLs: this.props.allowUniversalAccessFromFileURLs,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 218
        }
      });

      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 242
          }
        },
        webView,
        otherView
      );
    }
  }]);
  return WebView;
}(React.Component);

WebView.propTypes = babelHelpers.extends({}, View.propTypes, {
  renderError: PropTypes.func,
  renderLoading: PropTypes.func,
  onLoad: PropTypes.func,
  onLoadEnd: PropTypes.func,
  onLoadStart: PropTypes.func,
  onError: PropTypes.func,
  automaticallyAdjustContentInsets: PropTypes.bool,
  contentInset: EdgeInsetsPropType,
  onNavigationStateChange: PropTypes.func,
  onMessage: PropTypes.func,
  onContentSizeChange: PropTypes.func,
  startInLoadingState: PropTypes.bool,
  style: View.propTypes.style,

  html: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  url: deprecatedPropType(PropTypes.string, 'Use the `source` prop instead.'),

  source: PropTypes.oneOfType([PropTypes.shape({
    uri: PropTypes.string,

    method: PropTypes.oneOf(['GET', 'POST']),

    headers: PropTypes.object,

    body: PropTypes.string
  }), PropTypes.shape({
    html: PropTypes.string,

    baseUrl: PropTypes.string
  }), PropTypes.number]),

  javaScriptEnabled: PropTypes.bool,

  domStorageEnabled: PropTypes.bool,

  injectedJavaScript: PropTypes.string,

  scalesPageToFit: PropTypes.bool,

  userAgent: PropTypes.string,

  testID: PropTypes.string,

  mediaPlaybackRequiresUserAction: PropTypes.bool,

  allowUniversalAccessFromFileURLs: PropTypes.bool
});
WebView.defaultProps = {
  javaScriptEnabled: true,
  scalesPageToFit: true
};


var RCTWebView = requireNativeComponent('RCTWebView', WebView, {
  nativeOnly: {
    messagingEnabled: PropTypes.bool
  }
});

var styles = StyleSheet.create({
  container: {
    flex: 1
  },
  hidden: {
    height: 0,
    flex: 0 },
  loadingView: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  loadingProgressBar: {
    height: 20
  }
});

module.exports = WebView;
}, 353, null, "WebView");
__d(/* ActionSheetIOS */function(global, require, module, exports) {
'use strict';

var RCTActionSheetManager = require(57             ).ActionSheetManager; // 57 = NativeModules

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var processColor = require(119           ); // 119 = processColor

var ActionSheetIOS = {
  showActionSheetWithOptions: function showActionSheetWithOptions(options, callback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof callback === 'function', 'Must provide a valid callback');
    RCTActionSheetManager.showActionSheetWithOptions(babelHelpers.extends({}, options, { tintColor: processColor(options.tintColor) }), callback);
  },
  showShareActionSheetWithOptions: function showShareActionSheetWithOptions(options, failureCallback, successCallback) {
    invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');
    invariant(typeof failureCallback === 'function', 'Must provide a valid failureCallback');
    invariant(typeof successCallback === 'function', 'Must provide a valid successCallback');
    RCTActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, options, { tintColor: processColor(options.tintColor) }), failureCallback, successCallback);
  }
};

module.exports = ActionSheetIOS;
}, 354, null, "ActionSheetIOS");
__d(/* AdSupportIOS */function(global, require, module, exports) {
'use strict';

var AdSupport = require(57             ).AdSupport; // 57 = NativeModules

module.exports = {
  getAdvertisingId: function getAdvertisingId(onSuccess, onFailure) {
    AdSupport.getAdvertisingId(onSuccess, onFailure);
  },

  getAdvertisingTrackingEnabled: function getAdvertisingTrackingEnabled(onSuccess, onFailure) {
    AdSupport.getAdvertisingTrackingEnabled(onSuccess, onFailure);
  }
};
}, 355, null, "AdSupportIOS");
__d(/* AppRegistry */function(global, require, module, exports) {
'use strict';

var BatchedBridge = require(58             ); // 58 = BatchedBridge
var BugReporting = require(357           ); // 357 = BugReporting
var ReactNative = require(196          ); // 196 = ReactNative

var infoLog = require(260      ); // 260 = infoLog
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var renderApplication = require(360                ); // 360 = renderApplication

var _require = require(57             ), // 57 = NativeModules
    HeadlessJsTaskSupport = _require.HeadlessJsTaskSupport;

if (__DEV__) {
  require(362               ); // 362 = RCTRenderingPerf
}

var runnables = {};
var runCount = 1;
var tasks = new Map();

var AppRegistry = {
  registerConfig: function registerConfig(config) {
    for (var i = 0; i < config.length; ++i) {
      var appConfig = config[i];
      if (appConfig.run) {
        AppRegistry.registerRunnable(appConfig.appKey, appConfig.run);
      } else {
        invariant(appConfig.component, 'No component provider passed in');
        AppRegistry.registerComponent(appConfig.appKey, appConfig.component);
      }
    }
  },

  registerComponent: function registerComponent(appKey, getComponentFunc) {
    runnables[appKey] = {
      run: function run(appParameters) {
        return renderApplication(getComponentFunc(), appParameters.initialProps, appParameters.rootTag);
      }
    };
    return appKey;
  },

  registerRunnable: function registerRunnable(appKey, func) {
    runnables[appKey] = { run: func };
    return appKey;
  },

  getAppKeys: function getAppKeys() {
    return Object.keys(runnables);
  },

  runApplication: function runApplication(appKey, appParameters) {
    var msg = 'Running application "' + appKey + '" with appParams: ' + JSON.stringify(appParameters) + '. ' + '__DEV__ === ' + String(__DEV__) + ', development-level warning are ' + (__DEV__ ? 'ON' : 'OFF') + ', performance optimizations are ' + (__DEV__ ? 'OFF' : 'ON');
    infoLog(msg);
    BugReporting.addSource('AppRegistry.runApplication' + runCount++, function () {
      return msg;
    });
    invariant(runnables[appKey] && runnables[appKey].run, 'Application ' + appKey + ' has not been registered. This ' + 'is either due to a require() error during initialization ' + 'or failure to call AppRegistry.registerComponent.');
    runnables[appKey].run(appParameters);
  },

  unmountApplicationComponentAtRootTag: function unmountApplicationComponentAtRootTag(rootTag) {
    ReactNative.unmountComponentAtNodeAndRemoveContainer(rootTag);
  },

  registerHeadlessTask: function registerHeadlessTask(taskKey, task) {
    if (tasks.has(taskKey)) {
      console.warn('registerHeadlessTask called multiple times for same key \'' + taskKey + '\'');
    }
    tasks.set(taskKey, task);
  },

  startHeadlessTask: function startHeadlessTask(taskId, taskKey, data) {
    var taskProvider = tasks.get(taskKey);
    if (!taskProvider) {
      throw new Error('No task registered for key ' + taskKey);
    }
    taskProvider()(data).then(function () {
      return HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    }).catch(function (reason) {
      console.error(reason);
      HeadlessJsTaskSupport.notifyTaskFinished(taskId);
    });
  }

};

BatchedBridge.registerCallableModule('AppRegistry', AppRegistry);

module.exports = AppRegistry;
}, 356, null, "AppRegistry");
__d(/* BugReporting */function(global, require, module, exports) {
'use strict';

var RCTDeviceEventEmitter = require(84                     ); // 84 = RCTDeviceEventEmitter
var Map = require(219  ); // 219 = Map
var infoLog = require(260      ); // 260 = infoLog

function defaultExtras() {
  BugReporting.addFileSource('react_hierarchy.txt', function () {
    return require(358            )(); // 358 = dumpReactTree
  });
}

var BugReporting = function () {
  function BugReporting() {
    babelHelpers.classCallCheck(this, BugReporting);
  }

  babelHelpers.createClass(BugReporting, null, [{
    key: '_maybeInit',
    value: function _maybeInit() {
      if (!BugReporting._subscription) {
        BugReporting._subscription = RCTDeviceEventEmitter.addListener('collectBugExtraData', BugReporting.collectExtraData, null);
        defaultExtras();
      }
    }
  }, {
    key: 'addSource',
    value: function addSource(key, callback) {
      return this._addSource(key, callback, BugReporting._extraSources);
    }
  }, {
    key: 'addFileSource',
    value: function addFileSource(key, callback) {
      return this._addSource(key, callback, BugReporting._fileSources);
    }
  }, {
    key: '_addSource',
    value: function _addSource(key, callback, source) {
      BugReporting._maybeInit();
      if (source.has(key)) {
        console.warn('BugReporting.add* called multiple times for same key \'' + key + '\'');
      }
      source.set(key, callback);
      return { remove: function remove() {
          source.delete(key);
        } };
    }
  }, {
    key: 'collectExtraData',
    value: function collectExtraData() {
      var extraData = {};
      for (var _iterator = BugReporting._extraSources, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref = _ref3;

        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

        var _key = _ref2[0];
        var callback = _ref2[1];

        extraData[_key] = callback();
      }
      var fileData = {};
      for (var _iterator2 = BugReporting._fileSources, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref6;

        if (_isArray2) {
          if (_i2 >= _iterator2.length) break;
          _ref6 = _iterator2[_i2++];
        } else {
          _i2 = _iterator2.next();
          if (_i2.done) break;
          _ref6 = _i2.value;
        }

        var _ref4 = _ref6;

        var _ref5 = babelHelpers.slicedToArray(_ref4, 2);

        var _key2 = _ref5[0];
        var _callback = _ref5[1];

        fileData[_key2] = _callback();
      }
      infoLog('BugReporting extraData:', extraData);
      var BugReportingNativeModule = require(57             ).BugReporting; // 57 = NativeModules
      BugReportingNativeModule && BugReportingNativeModule.setExtraData && BugReportingNativeModule.setExtraData(extraData, fileData);

      return { extras: extraData, files: fileData };
    }
  }]);
  return BugReporting;
}();

BugReporting._extraSources = new Map();
BugReporting._fileSources = new Map();
BugReporting._subscription = null;


module.exports = BugReporting;
}, 357, null, "BugReporting");
__d(/* dumpReactTree */function(global, require, module, exports) {
'use strict';

var ReactNativeMount = require(226               ); // 226 = ReactNativeMount
var getReactData = require(359           ); // 359 = getReactData

var INDENTATION_SIZE = 2;
var MAX_DEPTH = 2;
var MAX_STRING_LENGTH = 50;

function dumpReactTree() {
  try {
    return getReactTree();
  } catch (e) {
    return 'Failed to dump react tree: ' + e;
  }
}

function getReactTree() {
  var output = '';
  var rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);
  for (var _iterator = rootIds, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref;

    if (_isArray) {
      if (_i >= _iterator.length) break;
      _ref = _iterator[_i++];
    } else {
      _i = _iterator.next();
      if (_i.done) break;
      _ref = _i.value;
    }

    var rootId = _ref;

    var instance = ReactNativeMount._instancesByContainerID[rootId];
    output += '============ Root ID: ' + rootId + ' ============\n';
    output += dumpNode(instance, 0);
    output += '============ End root ID: ' + rootId + ' ============\n';
  }
  return output;
}

function dumpNode(node, identation) {
  var data = getReactData(node);
  if (data.nodeType === 'Text') {
    return indent(identation) + data.text + '\n';
  } else if (data.nodeType === 'Empty') {
    return '';
  }
  var output = indent(identation) + ('<' + data.name);
  if (data.nodeType === 'Composite') {
    for (var _iterator2 = Object.getOwnPropertyNames(data.props || {}), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
      var _ref2;

      if (_isArray2) {
        if (_i2 >= _iterator2.length) break;
        _ref2 = _iterator2[_i2++];
      } else {
        _i2 = _iterator2.next();
        if (_i2.done) break;
        _ref2 = _i2.value;
      }

      var propName = _ref2;

      if (isNormalProp(propName)) {
        try {
          var value = convertValue(data.props[propName]);
          if (value) {
            output += ' ' + propName + '=' + value;
          }
        } catch (e) {
          var message = '[Failed to get property: ' + e + ']';
          output += ' ' + propName + '=' + message;
        }
      }
    }
  }
  var childOutput = '';
  for (var _iterator3 = data.children || [], _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref3;

    if (_isArray3) {
      if (_i3 >= _iterator3.length) break;
      _ref3 = _iterator3[_i3++];
    } else {
      _i3 = _iterator3.next();
      if (_i3.done) break;
      _ref3 = _i3.value;
    }

    var child = _ref3;

    childOutput += dumpNode(child, identation + 1);
  }

  if (childOutput) {
    output += '>\n' + childOutput + indent(identation) + ('</' + data.name + '>\n');
  } else {
    output += ' />\n';
  }

  return output;
}

function isNormalProp(name) {
  switch (name) {
    case 'children':
    case 'key':
    case 'ref':
      return false;
    default:
      return true;
  }
}

function convertObject(object, depth) {
  if (depth >= MAX_DEPTH) {
    return '[...omitted]';
  }
  var output = '{';
  var first = true;
  for (var _iterator4 = Object.getOwnPropertyNames(object), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _iterator4[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
    var _ref4;

    if (_isArray4) {
      if (_i4 >= _iterator4.length) break;
      _ref4 = _iterator4[_i4++];
    } else {
      _i4 = _iterator4.next();
      if (_i4.done) break;
      _ref4 = _i4.value;
    }

    var key = _ref4;

    if (!first) {
      output += ', ';
    }

    output += key + ': ' + convertValue(object[key], depth + 1);
    first = false;
  }
  return output + '}';
}

function convertValue(value) {
  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (!value) {
    return null;
  }

  switch (typeof value) {
    case 'string':
      return JSON.stringify(possiblyEllipsis(value).replace('\n', '\\n'));
    case 'boolean':
    case 'number':
      return JSON.stringify(value);
    case 'function':
      return '[function]';
    case 'object':
      return convertObject(value, depth);
    default:
      return null;
  }
}

function possiblyEllipsis(value) {
  if (value.length > MAX_STRING_LENGTH) {
    return value.slice(0, MAX_STRING_LENGTH) + '...';
  } else {
    return value;
  }
}

function indent(size) {
  return ' '.repeat(size * INDENTATION_SIZE);
}

module.exports = dumpReactTree;
}, 358, null, "dumpReactTree");
__d(/* getReactData */function(global, require, module, exports) {
'use strict';

function getData(element) {
  var children = null;
  var props = null;
  var state = null;
  var context = null;
  var updater = null;
  var name = null;
  var type = null;
  var text = null;
  var publicInstance = null;
  var nodeType = 'Native';

  if (typeof element !== 'object') {
    nodeType = 'Text';
    text = element + '';
  } else if (element._currentElement === null || element._currentElement === false) {
    nodeType = 'Empty';
  } else if (element._renderedComponent) {
    nodeType = 'NativeWrapper';
    children = [element._renderedComponent];
    props = element._instance.props;
    state = element._instance.state;
    context = element._instance.context;
    if (context && Object.keys(context).length === 0) {
      context = null;
    }
  } else if (element._renderedChildren) {
    children = childrenList(element._renderedChildren);
  } else if (element._currentElement && element._currentElement.props) {
    children = element._currentElement.props.children;
  }

  if (!props && element._currentElement && element._currentElement.props) {
    props = element._currentElement.props;
  }

  if (element._currentElement != null) {
    type = element._currentElement.type;
    if (typeof type === 'string') {
      name = type;
    } else if (element.getName) {
      nodeType = 'Composite';
      name = element.getName();

      if (element._renderedComponent && element._currentElement.props === element._renderedComponent._currentElement) {
        nodeType = 'Wrapper';
      }
      if (name === null) {
        name = 'No display name';
      }
    } else if (element._stringText) {
      nodeType = 'Text';
      text = element._stringText;
    } else {
      name = type.displayName || type.name || 'Unknown';
    }
  }

  if (element._instance) {
    var inst = element._instance;
    updater = {
      setState: inst.setState && inst.setState.bind(inst),
      forceUpdate: inst.forceUpdate && inst.forceUpdate.bind(inst),
      setInProps: inst.forceUpdate && setInProps.bind(null, element),
      setInState: inst.forceUpdate && setInState.bind(null, inst),
      setInContext: inst.forceUpdate && setInContext.bind(null, inst)
    };
    publicInstance = inst;

    if (inst._renderedChildren) {
      children = childrenList(inst._renderedChildren);
    }
  }

  return {
    nodeType: nodeType,
    type: type,
    name: name,
    props: props,
    state: state,
    context: context,
    children: children,
    text: text,
    updater: updater,
    publicInstance: publicInstance
  };
}

function setInProps(internalInst, path, value) {
  var element = internalInst._currentElement;
  internalInst._currentElement = babelHelpers.extends({}, element, {
    props: copyWithSet(element.props, path, value)
  });
  internalInst._instance.forceUpdate();
}

function setInState(inst, path, value) {
  setIn(inst.state, path, value);
  inst.forceUpdate();
}

function setInContext(inst, path, value) {
  setIn(inst.context, path, value);
  inst.forceUpdate();
}

function setIn(obj, path, value) {
  var last = path.pop();
  var parent = path.reduce(function (obj_, attr) {
    return obj_ ? obj_[attr] : null;
  }, obj);
  if (parent) {
    parent[last] = value;
  }
}

function childrenList(children) {
  var res = [];
  for (var name in children) {
    res.push(children[name]);
  }
  return res;
}

function copyWithSetImpl(obj, path, idx, value) {
  if (idx >= path.length) {
    return value;
  }
  var key = path[idx];
  var updated = Array.isArray(obj) ? obj.slice() : babelHelpers.extends({}, obj);

  updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
  return updated;
}

function copyWithSet(obj, path, value) {
  return copyWithSetImpl(obj, path, 0, value);
}

module.exports = getData;
}, 359, null, "getReactData");
__d(/* renderApplication */function(global, require, module, exports) {

'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/ReactNative/renderApplication.js';
var AppContainer = require(289           ); // 289 = AppContainer
var React = require(103    ); // 103 = React
var ReactNative = require(196          ); // 196 = ReactNative

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

require(361          ); // 361 = BackAndroid

function renderApplication(RootComponent, initialProps, rootTag) {
  invariant(rootTag, 'Expect to have a valid rootTag, instead got ', rootTag);
  ReactNative.render(React.createElement(
    AppContainer,
    { rootTag: rootTag, __source: {
        fileName: _jsxFileName,
        lineNumber: 34
      }
    },
    React.createElement(RootComponent, babelHelpers.extends({}, initialProps, {
      rootTag: rootTag,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 35
      }
    }))
  ), rootTag);
}

module.exports = renderApplication;
}, 360, null, "renderApplication");
__d(/* BackAndroid */function(global, require, module, exports) {

'use strict';

var DeviceEventManager = require(57             ).DeviceEventManager; // 57 = NativeModules
var RCTDeviceEventEmitter = require(84                     ); // 84 = RCTDeviceEventEmitter

var DEVICE_BACK_EVENT = 'hardwareBackPress';

var _backPressSubscriptions = new Set();

RCTDeviceEventEmitter.addListener(DEVICE_BACK_EVENT, function () {
  var backPressSubscriptions = new Set(_backPressSubscriptions);
  var invokeDefault = true;
  var subscriptions = [].concat(babelHelpers.toConsumableArray(backPressSubscriptions)).reverse();
  for (var i = 0; i < subscriptions.length; ++i) {
    if (subscriptions[i]()) {
      invokeDefault = false;
      break;
    }
  }

  if (invokeDefault) {
    BackAndroid.exitApp();
  }
});

var BackAndroid = {

  exitApp: function exitApp() {
    DeviceEventManager.invokeDefaultBackPressHandler();
  },

  addEventListener: function addEventListener(eventName, handler) {
    _backPressSubscriptions.add(handler);
    return {
      remove: function remove() {
        return BackAndroid.removeEventListener(eventName, handler);
      }
    };
  },

  removeEventListener: function removeEventListener(eventName, handler) {
    _backPressSubscriptions.delete(handler);
  }

};

module.exports = BackAndroid;
}, 361, null, "BackAndroid");
__d(/* RCTRenderingPerf */function(global, require, module, exports) {
'use strict';

var ReactDebugTool = require(63              ); // 63 = ReactDebugTool
var ReactPerf = require(363        ); // 363 = ReactPerf

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var performanceNow = require(67                       ); // 67 = fbjs/lib/performanceNow

var perfModules = [];
var enabled = false;
var lastRenderStartTime = 0;
var totalRenderDuration = 0;

var RCTRenderingPerfDevtool = {
  onBeginLifeCycleTimer: function onBeginLifeCycleTimer(debugID, timerType) {
    if (timerType === 'render') {
      lastRenderStartTime = performanceNow();
    }
  },
  onEndLifeCycleTimer: function onEndLifeCycleTimer(debugID, timerType) {
    if (timerType === 'render') {
      var lastRenderDuration = performanceNow() - lastRenderStartTime;
      totalRenderDuration += lastRenderDuration;
    }
  }
};

var RCTRenderingPerf = {
  toggle: function toggle() {
    console.log('Render perfomance measurements enabled');
    enabled = true;
  },

  start: function start() {
    if (!enabled) {
      return;
    }

    ReactPerf.start();
    ReactDebugTool.addHook(RCTRenderingPerfDevtool);
    perfModules.forEach(function (module) {
      return module.start();
    });
  },

  stop: function stop() {
    if (!enabled) {
      return;
    }

    ReactPerf.stop();
    ReactPerf.printInclusive();
    ReactPerf.printWasted();
    ReactDebugTool.removeHook(RCTRenderingPerfDevtool);

    console.log('Total time spent in render(): ' + totalRenderDuration.toFixed(2) + ' ms');
    lastRenderStartTime = 0;
    totalRenderDuration = 0;

    perfModules.forEach(function (module) {
      return module.stop();
    });
  },

  register: function register(module) {
    invariant(typeof module.start === 'function', 'Perf module should have start() function');
    invariant(typeof module.stop === 'function', 'Perf module should have stop() function');
    perfModules.push(module);
  }
};

module.exports = RCTRenderingPerf;
}, 362, null, "RCTRenderingPerf");
__d(/* ReactPerf */function(global, require, module, exports) {

'use strict';

var ReactDebugTool = require(63              ); // 63 = ReactDebugTool
var warning = require(21                ); // 21 = fbjs/lib/warning
var alreadyWarned = false;

function roundFloat(val) {
  var base = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 2;

  var n = Math.pow(10, base);
  return Math.floor(val * n) / n;
}

function consoleTable(table) {
  console.table(table);
}

function warnInProduction() {
  if (alreadyWarned) {
    return;
  }
  alreadyWarned = true;
  if (typeof console !== 'undefined') {
    console.error('ReactPerf is not supported in the production builds of React. ' + 'To collect measurements, please use the development build of React instead.');
  }
}

function getLastMeasurements() {
  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  return ReactDebugTool.getFlushHistory();
}

function getExclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, timerType, applyUpdate) {
    var displayName = treeSnapshot[instanceID].displayName;

    var key = displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        counts: {},
        durations: {},
        totalDuration: 0
      };
    }
    if (!stats.durations[timerType]) {
      stats.durations[timerType] = 0;
    }
    if (!stats.counts[timerType]) {
      stats.counts[timerType] = 0;
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      updateAggregatedStats(treeSnapshot, instanceID, timerType, function (stats) {
        stats.totalDuration += duration;
        stats.durations[timerType] += duration;
        stats.counts[timerType]++;
      });
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return babelHelpers.extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.totalDuration - a.totalDuration;
  });
}

function getInclusive() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc.displayName,
        ownerID = _treeSnapshot$instanc.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  var isCompositeByID = {};
  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements;

    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      isCompositeByID[instanceID] = true;
    });
  });

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot;

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });
      var nextParentID = instanceID;
      while (nextParentID) {
        if (isCompositeByID[nextParentID]) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return babelHelpers.extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getWasted() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var aggregatedStats = {};
  var affectedIDs = {};

  function updateAggregatedStats(treeSnapshot, instanceID, applyUpdate) {
    var _treeSnapshot$instanc2 = treeSnapshot[instanceID],
        displayName = _treeSnapshot$instanc2.displayName,
        ownerID = _treeSnapshot$instanc2.ownerID;

    var owner = treeSnapshot[ownerID];
    var key = (owner ? owner.displayName + ' > ' : '') + displayName;
    var stats = aggregatedStats[key];
    if (!stats) {
      affectedIDs[key] = {};
      stats = aggregatedStats[key] = {
        key: key,
        instanceCount: 0,
        inclusiveRenderDuration: 0,
        renderCount: 0
      };
    }
    affectedIDs[key][instanceID] = true;
    applyUpdate(stats);
  }

  flushHistory.forEach(function (flush) {
    var measurements = flush.measurements,
        treeSnapshot = flush.treeSnapshot,
        operations = flush.operations;

    var isDefinitelyNotWastedByID = {};

    operations.forEach(function (operation) {
      var instanceID = operation.instanceID;

      var nextParentID = instanceID;
      while (nextParentID) {
        isDefinitelyNotWastedByID[nextParentID] = true;
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });

    var renderedCompositeIDs = {};
    measurements.forEach(function (measurement) {
      var instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }
      renderedCompositeIDs[instanceID] = true;
    });

    measurements.forEach(function (measurement) {
      var duration = measurement.duration,
          instanceID = measurement.instanceID,
          timerType = measurement.timerType;

      if (timerType !== 'render') {
        return;
      }

      var updateCount = treeSnapshot[instanceID].updateCount;

      if (isDefinitelyNotWastedByID[instanceID] || updateCount === 0) {
        return;
      }

      updateAggregatedStats(treeSnapshot, instanceID, function (stats) {
        stats.renderCount++;
      });

      var nextParentID = instanceID;
      while (nextParentID) {
        var isWasted = renderedCompositeIDs[nextParentID] && !isDefinitelyNotWastedByID[nextParentID];
        if (isWasted) {
          updateAggregatedStats(treeSnapshot, nextParentID, function (stats) {
            stats.inclusiveRenderDuration += duration;
          });
        }
        nextParentID = treeSnapshot[nextParentID].parentID;
      }
    });
  });

  return Object.keys(aggregatedStats).map(function (key) {
    return babelHelpers.extends({}, aggregatedStats[key], {
      instanceCount: Object.keys(affectedIDs[key]).length
    });
  }).sort(function (a, b) {
    return b.inclusiveRenderDuration - a.inclusiveRenderDuration;
  });
}

function getOperations() {
  var flushHistory = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : getLastMeasurements();

  if (!__DEV__) {
    warnInProduction();
    return [];
  }

  var stats = [];
  flushHistory.forEach(function (flush, flushIndex) {
    var operations = flush.operations,
        treeSnapshot = flush.treeSnapshot;

    operations.forEach(function (operation) {
      var instanceID = operation.instanceID,
          type = operation.type,
          payload = operation.payload;
      var _treeSnapshot$instanc3 = treeSnapshot[instanceID],
          displayName = _treeSnapshot$instanc3.displayName,
          ownerID = _treeSnapshot$instanc3.ownerID;

      var owner = treeSnapshot[ownerID];
      var key = (owner ? owner.displayName + ' > ' : '') + displayName;

      stats.push({
        flushIndex: flushIndex,
        instanceID: instanceID,
        key: key,
        type: type,
        ownerID: ownerID,
        payload: payload
      });
    });
  });
  return stats;
}

function printExclusive(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getExclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        totalDuration = item.totalDuration;

    var renderCount = item.counts.render || 0;
    var renderDuration = item.durations.render || 0;
    return {
      'Component': key,
      'Total time (ms)': roundFloat(totalDuration),
      'Instance count': instanceCount,
      'Total render time (ms)': roundFloat(renderDuration),
      'Average render time (ms)': renderCount ? roundFloat(renderDuration / renderCount) : undefined,
      'Render count': renderCount,
      'Total lifecycle time (ms)': roundFloat(totalDuration - renderDuration)
    };
  });
  consoleTable(table);
}

function printInclusive(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getInclusive(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive render time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printWasted(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getWasted(flushHistory);
  var table = stats.map(function (item) {
    var key = item.key,
        instanceCount = item.instanceCount,
        inclusiveRenderDuration = item.inclusiveRenderDuration,
        renderCount = item.renderCount;

    return {
      'Owner > Component': key,
      'Inclusive wasted time (ms)': roundFloat(inclusiveRenderDuration),
      'Instance count': instanceCount,
      'Render count': renderCount
    };
  });
  consoleTable(table);
}

function printOperations(flushHistory) {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  var stats = getOperations(flushHistory);
  var table = stats.map(function (stat) {
    return {
      'Owner > Node': stat.key,
      'Operation': stat.type,
      'Payload': typeof stat.payload === 'object' ? JSON.stringify(stat.payload) : stat.payload,
      'Flush index': stat.flushIndex,
      'Owner Component ID': stat.ownerID,
      'DOM Component ID': stat.instanceID
    };
  });
  consoleTable(table);
}

var warnedAboutPrintDOM = false;
function printDOM(measurements) {
  warning(warnedAboutPrintDOM, '`ReactPerf.printDOM(...)` is deprecated. Use ' + '`ReactPerf.printOperations(...)` instead.');
  warnedAboutPrintDOM = true;
  return printOperations(measurements);
}

var warnedAboutGetMeasurementsSummaryMap = false;
function getMeasurementsSummaryMap(measurements) {
  warning(warnedAboutGetMeasurementsSummaryMap, '`ReactPerf.getMeasurementsSummaryMap(...)` is deprecated. Use ' + '`ReactPerf.getWasted(...)` instead.');
  warnedAboutGetMeasurementsSummaryMap = true;
  return getWasted(measurements);
}

function start() {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  ReactDebugTool.beginProfiling();
}

function stop() {
  if (!__DEV__) {
    warnInProduction();
    return;
  }

  ReactDebugTool.endProfiling();
}

function isRunning() {
  if (!__DEV__) {
    warnInProduction();
    return false;
  }

  return ReactDebugTool.isProfiling();
}

var ReactPerfAnalysis = {
  getLastMeasurements: getLastMeasurements,
  getExclusive: getExclusive,
  getInclusive: getInclusive,
  getWasted: getWasted,
  getOperations: getOperations,
  printExclusive: printExclusive,
  printInclusive: printInclusive,
  printWasted: printWasted,
  printOperations: printOperations,
  start: start,
  stop: stop,
  isRunning: isRunning,

  printDOM: printDOM,
  getMeasurementsSummaryMap: getMeasurementsSummaryMap
};

module.exports = ReactPerfAnalysis;
}, 363, null, "ReactPerf");
__d(/* AsyncStorage */function(global, require, module, exports) {
'use strict';

var NativeModules = require(57             ); // 57 = NativeModules
var RCTAsyncSQLiteStorage = NativeModules.AsyncSQLiteDBStorage;
var RCTAsyncRocksDBStorage = NativeModules.AsyncRocksDBStorage;
var RCTAsyncFileStorage = NativeModules.AsyncLocalStorage;

var RCTAsyncStorage = RCTAsyncRocksDBStorage || RCTAsyncSQLiteStorage || RCTAsyncFileStorage;

var AsyncStorage = {
  _getRequests: [],
  _getKeys: [],
  _immediate: null,

  getItem: function getItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiGet([key], function (errors, result) {
        var value = result && result[0] && result[0][1] ? result[0][1] : null;
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0], value);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(value);
        }
      });
    });
  },

  setItem: function setItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  removeItem: function removeItem(key, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove([key], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  mergeItem: function mergeItem(key, value, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge([[key, value]], function (errors) {
        var errs = convertErrors(errors);
        callback && callback(errs && errs[0]);
        if (errs) {
          reject(errs[0]);
        } else {
          resolve(null);
        }
      });
    });
  },

  clear: function clear(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.clear(function (error) {
        callback && callback(convertError(error));
        if (error && convertError(error)) {
          reject(convertError(error));
        } else {
          resolve(null);
        }
      });
    });
  },

  getAllKeys: function getAllKeys(callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.getAllKeys(function (error, keys) {
        callback && callback(convertError(error), keys);
        if (error) {
          reject(convertError(error));
        } else {
          resolve(keys);
        }
      });
    });
  },

  flushGetRequests: function flushGetRequests() {
    var getRequests = this._getRequests;
    var getKeys = this._getKeys;

    this._getRequests = [];
    this._getKeys = [];

    RCTAsyncStorage.multiGet(getKeys, function (errors, result) {
      var map = {};
      result && result.forEach(function (_ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 2),
            key = _ref2[0],
            value = _ref2[1];

        map[key] = value;return value;
      });
      var reqLength = getRequests.length;
      for (var i = 0; i < reqLength; i++) {
        var request = getRequests[i];
        var requestKeys = request.keys;
        var requestResult = requestKeys.map(function (key) {
          return [key, map[key]];
        });
        request.callback && request.callback(null, requestResult);
        request.resolve && request.resolve(requestResult);
      }
    });
  },

  multiGet: function multiGet(keys, callback) {
    var _this = this;

    if (!this._immediate) {
      this._immediate = setImmediate(function () {
        _this._immediate = null;
        _this.flushGetRequests();
      });
    }

    var getRequest = {
      keys: keys,
      callback: callback,

      keyIndex: this._getKeys.length,
      resolve: null,
      reject: null
    };

    var promiseResult = new Promise(function (resolve, reject) {
      getRequest.resolve = resolve;
      getRequest.reject = reject;
    });

    this._getRequests.push(getRequest);

    keys.forEach(function (key) {
      if (_this._getKeys.indexOf(key) === -1) {
        _this._getKeys.push(key);
      }
    });

    return promiseResult;
  },

  multiSet: function multiSet(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiSet(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiRemove: function multiRemove(keys, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiRemove(keys, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  },

  multiMerge: function multiMerge(keyValuePairs, callback) {
    return new Promise(function (resolve, reject) {
      RCTAsyncStorage.multiMerge(keyValuePairs, function (errors) {
        var error = convertErrors(errors);
        callback && callback(error);
        if (error) {
          reject(error);
        } else {
          resolve(null);
        }
      });
    });
  }
};

if (!RCTAsyncStorage.multiMerge) {
  delete AsyncStorage.mergeItem;
  delete AsyncStorage.multiMerge;
}

function convertErrors(errs) {
  if (!errs) {
    return null;
  }
  return (Array.isArray(errs) ? errs : [errs]).map(function (e) {
    return convertError(e);
  });
}

function convertError(error) {
  if (!error) {
    return null;
  }
  var out = new Error(error.message);
  out.key = error.key;
  return out;
}

module.exports = AsyncStorage;
}, 364, null, "AsyncStorage");
__d(/* CameraRoll */function(global, require, module, exports) {
'use strict';

var ReactPropTypes = require(103    ).PropTypes; // 103 = React
var RCTCameraRollManager = require(57             ).CameraRollManager; // 57 = NativeModules

var createStrictShapeTypeChecker = require(126                           ); // 126 = createStrictShapeTypeChecker
var deepFreezeAndThrowOnMutationInDev = require(73                                 ); // 73 = deepFreezeAndThrowOnMutationInDev
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var GROUP_TYPES_OPTIONS = ['Album', 'All', 'Event', 'Faces', 'Library', 'PhotoStream', 'SavedPhotos'];

var ASSET_TYPE_OPTIONS = ['All', 'Videos', 'Photos'];

deepFreezeAndThrowOnMutationInDev(GROUP_TYPES_OPTIONS);
deepFreezeAndThrowOnMutationInDev(ASSET_TYPE_OPTIONS);

var getPhotosParamChecker = createStrictShapeTypeChecker({
  first: ReactPropTypes.number.isRequired,

  after: ReactPropTypes.string,

  groupTypes: ReactPropTypes.oneOf(GROUP_TYPES_OPTIONS),

  groupName: ReactPropTypes.string,

  assetType: ReactPropTypes.oneOf(ASSET_TYPE_OPTIONS),

  mimeTypes: ReactPropTypes.arrayOf(ReactPropTypes.string)
});

var getPhotosReturnChecker = createStrictShapeTypeChecker({
  edges: ReactPropTypes.arrayOf(createStrictShapeTypeChecker({
    node: createStrictShapeTypeChecker({
      type: ReactPropTypes.string.isRequired,
      group_name: ReactPropTypes.string.isRequired,
      image: createStrictShapeTypeChecker({
        uri: ReactPropTypes.string.isRequired,
        height: ReactPropTypes.number.isRequired,
        width: ReactPropTypes.number.isRequired,
        isStored: ReactPropTypes.bool
      }).isRequired,
      timestamp: ReactPropTypes.number.isRequired,
      location: createStrictShapeTypeChecker({
        latitude: ReactPropTypes.number,
        longitude: ReactPropTypes.number,
        altitude: ReactPropTypes.number,
        heading: ReactPropTypes.number,
        speed: ReactPropTypes.number
      })
    }).isRequired
  })).isRequired,
  page_info: createStrictShapeTypeChecker({
    has_next_page: ReactPropTypes.bool.isRequired,
    start_cursor: ReactPropTypes.string,
    end_cursor: ReactPropTypes.string
  }).isRequired
});

var CameraRoll = function () {
  function CameraRoll() {
    babelHelpers.classCallCheck(this, CameraRoll);
  }

  babelHelpers.createClass(CameraRoll, null, [{
    key: 'saveImageWithTag',
    value: function saveImageWithTag(tag) {
      console.warn('CameraRoll.saveImageWithTag is deprecated. Use CameraRoll.saveToCameraRoll instead');
      return this.saveToCameraRoll(tag, 'photo');
    }
  }, {
    key: 'saveToCameraRoll',
    value: function saveToCameraRoll(tag, type) {
      invariant(typeof tag === 'string', 'CameraRoll.saveToCameraRoll must be a valid string.');

      invariant(type === 'photo' || type === 'video' || type === undefined, 'The second argument to saveToCameraRoll must be \'photo\' or \'video\'. You passed ' + type);

      var mediaType = 'photo';
      if (type) {
        mediaType = type;
      } else if (['mov', 'mp4'].indexOf(tag.split('.').slice(-1)[0]) >= 0) {
        mediaType = 'video';
      }

      return RCTCameraRollManager.saveToCameraRoll(tag, mediaType);
    }
  }, {
    key: 'getPhotos',
    value: function getPhotos(params) {
      if (__DEV__) {
        getPhotosParamChecker({ params: params }, 'params', 'CameraRoll.getPhotos');
      }
      if (arguments.length > 1) {
        console.warn('CameraRoll.getPhotos(tag, success, error) is deprecated.  Use the returned Promise instead');
        var successCallback = arguments[1];
        if (__DEV__) {
          var callback = arguments[1];
          successCallback = function successCallback(response) {
            getPhotosReturnChecker({ response: response }, 'response', 'CameraRoll.getPhotos callback');
            callback(response);
          };
        }
        var errorCallback = arguments[2] || function () {};
        RCTCameraRollManager.getPhotos(params).then(successCallback, errorCallback);
      }

      return RCTCameraRollManager.getPhotos(params);
    }
  }]);
  return CameraRoll;
}();

CameraRoll.GroupTypesOptions = GROUP_TYPES_OPTIONS;
CameraRoll.AssetTypeOptions = ASSET_TYPE_OPTIONS;

module.exports = CameraRoll;
}, 365, null, "CameraRoll");
__d(/* Clipboard */function(global, require, module, exports) {
'use strict';

var Clipboard = require(57             ).Clipboard; // 57 = NativeModules

module.exports = {
  getString: function getString() {
    return Clipboard.getString();
  },
  setString: function setString(content) {
    Clipboard.setString(content);
  }
};
}, 366, null, "Clipboard");
__d(/* DatePickerAndroid */function(global, require, module, exports) {
'use strict';

var DatePickerModule = require(57             ).DatePickerAndroid; // 57 = NativeModules

function _toMillis(options, key) {
  var dateVal = options[key];

  if (typeof dateVal === 'object' && typeof dateVal.getMonth === 'function') {
    options[key] = dateVal.getTime();
  }
}

var DatePickerAndroid = function () {
  function DatePickerAndroid() {
    babelHelpers.classCallCheck(this, DatePickerAndroid);
  }

  babelHelpers.createClass(DatePickerAndroid, null, [{
    key: 'open',
    value: function open(options) {
      var optionsMs;
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              optionsMs = options;

              if (optionsMs) {
                _toMillis(options, 'date');
                _toMillis(options, 'minDate');
                _toMillis(options, 'maxDate');
              }
              return _context.abrupt('return', DatePickerModule.open(options));

            case 3:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'dateSetAction',
    get: function get() {
      return 'dateSetAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return DatePickerAndroid;
}();

module.exports = DatePickerAndroid;
}, 367, null, "DatePickerAndroid");
__d(/* ImagePickerIOS */function(global, require, module, exports) {
'use strict';

var RCTImagePicker = require(57             ).ImagePickerIOS; // 57 = NativeModules

var ImagePickerIOS = {
  canRecordVideos: function canRecordVideos(callback) {
    return RCTImagePicker.canRecordVideos(callback);
  },
  canUseCamera: function canUseCamera(callback) {
    return RCTImagePicker.canUseCamera(callback);
  },
  openCameraDialog: function openCameraDialog(config, successCallback, cancelCallback) {
    config = babelHelpers.extends({
      videoMode: false
    }, config);
    return RCTImagePicker.openCameraDialog(config, successCallback, cancelCallback);
  },
  openSelectDialog: function openSelectDialog(config, successCallback, cancelCallback) {
    config = babelHelpers.extends({
      showImages: true,
      showVideos: false
    }, config);
    return RCTImagePicker.openSelectDialog(config, successCallback, cancelCallback);
  }
};

module.exports = ImagePickerIOS;
}, 368, null, "ImagePickerIOS");
__d(/* Linking */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var NativeModules = require(57             ); // 57 = NativeModules
var Platform = require(56        ); // 56 = Platform

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var LinkingManager = Platform.OS === 'android' ? NativeModules.IntentAndroid : NativeModules.LinkingManager;

var Linking = function (_NativeEventEmitter) {
  babelHelpers.inherits(Linking, _NativeEventEmitter);

  function Linking() {
    babelHelpers.classCallCheck(this, Linking);
    return babelHelpers.possibleConstructorReturn(this, (Linking.__proto__ || Object.getPrototypeOf(Linking)).call(this, LinkingManager));
  }

  babelHelpers.createClass(Linking, [{
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      this.addListener(type, handler);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      this.removeListener(type, handler);
    }
  }, {
    key: 'openURL',
    value: function openURL(url) {
      this._validateURL(url);
      return LinkingManager.openURL(url);
    }
  }, {
    key: 'canOpenURL',
    value: function canOpenURL(url) {
      this._validateURL(url);
      return LinkingManager.canOpenURL(url);
    }
  }, {
    key: 'getInitialURL',
    value: function getInitialURL() {
      return LinkingManager.getInitialURL();
    }
  }, {
    key: '_validateURL',
    value: function _validateURL(url) {
      invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);
      invariant(url, 'Invalid URL: cannot be empty');
    }
  }]);
  return Linking;
}(NativeEventEmitter);

module.exports = new Linking();
}, 369, null, "Linking");
__d(/* NavigationExperimental */function(global, require, module, exports) {
'use strict';

var NavigationCard = require(371             ); // 371 = NavigationCard
var NavigationCardStack = require(380                  ); // 380 = NavigationCardStack
var NavigationHeader = require(383               ); // 383 = NavigationHeader
var NavigationPropTypes = require(379                  ); // 379 = NavigationPropTypes
var NavigationStateUtils = require(390                   ); // 390 = NavigationStateUtils
var NavigationTransitioner = require(381                     ); // 381 = NavigationTransitioner

var NavigationExperimental = {
  StateUtils: NavigationStateUtils,

  Transitioner: NavigationTransitioner,

  Card: NavigationCard,
  CardStack: NavigationCardStack,
  Header: NavigationHeader,

  PropTypes: NavigationPropTypes
};

module.exports = NavigationExperimental;
}, 370, null, "NavigationExperimental");
__d(/* NavigationCard */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationCard.js';
var Animated = require(256       ); // 256 = Animated
var NavigationCardStackPanResponder = require(372                              ); // 372 = NavigationCardStackPanResponder
var NavigationCardStackStyleInterpolator = require(374                                   ); // 374 = NavigationCardStackStyleInterpolator
var NavigationPagerPanResponder = require(375                          ); // 375 = NavigationPagerPanResponder
var NavigationPagerStyleInterpolator = require(376                               ); // 376 = NavigationPagerStyleInterpolator
var NavigationPointerEventsContainer = require(377                               ); // 377 = NavigationPointerEventsContainer
var NavigationPropTypes = require(379                  ); // 379 = NavigationPropTypes
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet

var PropTypes = React.PropTypes;

var NavigationCard = function (_React$Component) {
  babelHelpers.inherits(NavigationCard, _React$Component);

  function NavigationCard() {
    babelHelpers.classCallCheck(this, NavigationCard);
    return babelHelpers.possibleConstructorReturn(this, (NavigationCard.__proto__ || Object.getPrototypeOf(NavigationCard)).apply(this, arguments));
  }

  babelHelpers.createClass(NavigationCard, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          panHandlers = _props.panHandlers,
          pointerEvents = _props.pointerEvents,
          renderScene = _props.renderScene,
          style = _props.style,
          props = babelHelpers.objectWithoutProperties(_props, ['panHandlers', 'pointerEvents', 'renderScene', 'style']);


      var viewStyle = style === undefined ? NavigationCardStackStyleInterpolator.forHorizontal(props) : style;

      var viewPanHandlers = panHandlers === undefined ? NavigationCardStackPanResponder.forHorizontal(babelHelpers.extends({}, props, {
        onNavigateBack: this.props.onNavigateBack
      })) : panHandlers;

      return React.createElement(
        Animated.View,
        babelHelpers.extends({}, viewPanHandlers, {
          pointerEvents: pointerEvents,
          ref: this.props.onComponentRef,
          style: [styles.main, viewStyle], __source: {
            fileName: _jsxFileName,
            lineNumber: 99
          }
        }),
        renderScene(props)
      );
    }
  }]);
  return NavigationCard;
}(React.Component);

NavigationCard.propTypes = babelHelpers.extends({}, NavigationPropTypes.SceneRendererProps, {
  onComponentRef: PropTypes.func.isRequired,
  onNavigateBack: PropTypes.func,
  panHandlers: NavigationPropTypes.panHandlers,
  pointerEvents: PropTypes.string.isRequired,
  renderScene: PropTypes.func.isRequired,
  style: PropTypes.any
});


var styles = StyleSheet.create({
  main: {
    backgroundColor: '#E9E9EF',
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    shadowColor: 'black',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.4,
    shadowRadius: 10,
    top: 0
  }
});

NavigationCard = NavigationPointerEventsContainer.create(NavigationCard);

NavigationCard.CardStackPanResponder = NavigationCardStackPanResponder;
NavigationCard.CardStackStyleInterpolator = NavigationCardStackStyleInterpolator;
NavigationCard.PagerPanResponder = NavigationPagerPanResponder;
NavigationCard.PagerStyleInterpolator = NavigationPagerStyleInterpolator;

module.exports = NavigationCard;
}, 371, null, "NavigationCard");
__d(/* NavigationCardStackPanResponder */function(global, require, module, exports) {
'use strict';

var Animated = require(256       ); // 256 = Animated
var I18nManager = require(310          ); // 310 = I18nManager
var NavigationAbstractPanResponder = require(373                             ); // 373 = NavigationAbstractPanResponder

var clamp = require(327    ); // 327 = clamp

var emptyFunction = function emptyFunction() {};

var ANIMATION_DURATION = 250;

var POSITION_THRESHOLD = 1 / 3;

var RESPOND_THRESHOLD = 15;

var DISTANCE_THRESHOLD = 100;

var Directions = {
  'HORIZONTAL': 'horizontal',
  'VERTICAL': 'vertical'
};

var NavigationCardStackPanResponder = function (_NavigationAbstractPa) {
  babelHelpers.inherits(NavigationCardStackPanResponder, _NavigationAbstractPa);

  function NavigationCardStackPanResponder(direction, props) {
    babelHelpers.classCallCheck(this, NavigationCardStackPanResponder);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationCardStackPanResponder.__proto__ || Object.getPrototypeOf(NavigationCardStackPanResponder)).call(this));

    _this._isResponding = false;
    _this._isVertical = direction === Directions.VERTICAL;
    _this._props = props;
    _this._startValue = 0;

    _this._addNativeListener(_this._props.layout.width);
    _this._addNativeListener(_this._props.layout.height);
    _this._addNativeListener(_this._props.position);
    return _this;
  }

  babelHelpers.createClass(NavigationCardStackPanResponder, [{
    key: 'onMoveShouldSetPanResponder',
    value: function onMoveShouldSetPanResponder(event, gesture) {
      var props = this._props;

      if (props.navigationState.index !== props.scene.index) {
        return false;
      }

      var layout = props.layout;
      var isVertical = this._isVertical;
      var index = props.navigationState.index;
      var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
      var currentDragPosition = gesture[isVertical ? 'moveY' : 'moveX'];
      var maxDragDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      var positionMax = isVertical ? props.gestureResponseDistance : props.gestureResponseDistance || 30;

      if (positionMax != null && currentDragPosition > positionMax) {
        return false;
      }

      return Math.abs(currentDragDistance) > RESPOND_THRESHOLD && maxDragDistance > 0 && index > 0;
    }
  }, {
    key: 'onPanResponderGrant',
    value: function onPanResponderGrant() {
      var _this2 = this;

      this._isResponding = false;
      this._props.position.stopAnimation(function (value) {
        _this2._isResponding = true;
        _this2._startValue = value;
      });
    }
  }, {
    key: 'onPanResponderMove',
    value: function onPanResponderMove(event, gesture) {
      if (!this._isResponding) {
        return;
      }

      var props = this._props;
      var layout = props.layout;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
      var currentValue = I18nManager.isRTL && axis === 'dx' ? this._startValue + gesture[axis] / distance : this._startValue - gesture[axis] / distance;

      var value = clamp(index - 1, currentValue, index);

      props.position.setValue(value);
    }
  }, {
    key: 'onPanResponderRelease',
    value: function onPanResponderRelease(event, gesture) {
      var _this3 = this;

      if (!this._isResponding) {
        return;
      }

      this._isResponding = false;

      var props = this._props;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = I18nManager.isRTL && axis === 'dx' ? -gesture[axis] : gesture[axis];

      props.position.stopAnimation(function (value) {
        _this3._reset();

        if (!props.onNavigateBack) {
          return;
        }

        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD) {
          props.onNavigateBack();
        }
      });
    }
  }, {
    key: 'onPanResponderTerminate',
    value: function onPanResponderTerminate() {
      this._isResponding = false;
      this._reset();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      var props = this._props;
      Animated.timing(props.position, {
        toValue: props.navigationState.index,
        duration: ANIMATION_DURATION,
        useNativeDriver: props.position.__isNative
      }).start();
    }
  }, {
    key: '_addNativeListener',
    value: function _addNativeListener(animatedValue) {
      if (!animatedValue.__isNative) {
        return;
      }

      if (Object.keys(animatedValue._listeners).length === 0) {
        animatedValue.addListener(emptyFunction);
      }
    }
  }]);
  return NavigationCardStackPanResponder;
}(NavigationAbstractPanResponder);

function createPanHandlers(direction, props) {
  var responder = new NavigationCardStackPanResponder(direction, props);
  return responder.panHandlers;
}

function forHorizontal(props) {
  return createPanHandlers(Directions.HORIZONTAL, props);
}

function forVertical(props) {
  return createPanHandlers(Directions.VERTICAL, props);
}

module.exports = {
  ANIMATION_DURATION: ANIMATION_DURATION,
  DISTANCE_THRESHOLD: DISTANCE_THRESHOLD,
  POSITION_THRESHOLD: POSITION_THRESHOLD,
  RESPOND_THRESHOLD: RESPOND_THRESHOLD,

  Directions: Directions,

  forHorizontal: forHorizontal,
  forVertical: forVertical
};
}, 372, null, "NavigationCardStackPanResponder");
__d(/* NavigationAbstractPanResponder */function(global, require, module, exports) {
'use strict';

var PanResponder = require(325           ); // 325 = PanResponder

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var EmptyPanHandlers = {
  onMoveShouldSetPanResponder: null,
  onPanResponderGrant: null,
  onPanResponderMove: null,
  onPanResponderRelease: null,
  onPanResponderTerminate: null
};

var NavigationAbstractPanResponder = function NavigationAbstractPanResponder() {
  var _this = this;

  babelHelpers.classCallCheck(this, NavigationAbstractPanResponder);

  var config = {};
  Object.keys(EmptyPanHandlers).forEach(function (name) {
    var fn = _this[name];

    invariant(typeof fn === 'function', 'subclass of `NavigationAbstractPanResponder` must implement method %s', name);

    config[name] = fn.bind(_this);
  }, this);

  this.panHandlers = PanResponder.create(config).panHandlers;
};

module.exports = NavigationAbstractPanResponder;
}, 373, null, "NavigationAbstractPanResponder");
__d(/* NavigationCardStackStyleInterpolator */function(global, require, module, exports) {
'use strict';

var I18nManager = require(310          ); // 310 = I18nManager

function forInitial(props) {
  var navigationState = props.navigationState,
      scene = props.scene;


  var focused = navigationState.index === scene.index;
  var opacity = focused ? 1 : 0;

  var translate = focused ? 0 : 1000000;
  return {
    opacity: opacity,
    transform: [{ translateX: translate }, { translateY: translate }]
  };
}

function forHorizontal(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 0.99, index + 1];
  var width = layout.initWidth;
  var outputRange = I18nManager.isRTL ? [-width, 0, 10, 10] : [width, 0, -10, -10];

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.3, 0]
  });

  var scale = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.95, 0.95]
  });

  var translateY = 0;
  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: outputRange
  });

  return {
    opacity: opacity,
    transform: [{ scale: scale }, { translateX: translateX }, { translateY: translateY }]
  };
}

function forVertical(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 0.99, index + 1];
  var height = layout.initHeight;

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.3, 0]
  });

  var scale = position.interpolate({
    inputRange: inputRange,
    outputRange: [1, 1, 0.95, 0.95]
  });

  var translateX = 0;
  var translateY = position.interpolate({
    inputRange: inputRange,
    outputRange: [height, 0, -10, -10]
  });

  return {
    opacity: opacity,
    transform: [{ scale: scale }, { translateX: translateX }, { translateY: translateY }]
  };
}

function canUseNativeDriver(isVertical) {

  return true;
}

module.exports = {
  forHorizontal: forHorizontal,
  forVertical: forVertical,
  canUseNativeDriver: canUseNativeDriver
};
}, 374, null, "NavigationCardStackStyleInterpolator");
__d(/* NavigationPagerPanResponder */function(global, require, module, exports) {
'use strict';

var Animated = require(256       ); // 256 = Animated
var NavigationAbstractPanResponder = require(373                             ); // 373 = NavigationAbstractPanResponder
var NavigationCardStackPanResponder = require(372                              ); // 372 = NavigationCardStackPanResponder
var I18nManager = require(310          ); // 310 = I18nManager

var clamp = require(327    ); // 327 = clamp

var ANIMATION_DURATION = NavigationCardStackPanResponder.ANIMATION_DURATION,
    POSITION_THRESHOLD = NavigationCardStackPanResponder.POSITION_THRESHOLD,
    RESPOND_THRESHOLD = NavigationCardStackPanResponder.RESPOND_THRESHOLD,
    Directions = NavigationCardStackPanResponder.Directions;

var DISTANCE_THRESHOLD = 50;

var VELOCITY_THRESHOLD = 1.5;

var NavigationPagerPanResponder = function (_NavigationAbstractPa) {
  babelHelpers.inherits(NavigationPagerPanResponder, _NavigationAbstractPa);

  function NavigationPagerPanResponder(direction, props) {
    babelHelpers.classCallCheck(this, NavigationPagerPanResponder);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationPagerPanResponder.__proto__ || Object.getPrototypeOf(NavigationPagerPanResponder)).call(this));

    _this._isResponding = false;
    _this._isVertical = direction === Directions.VERTICAL;
    _this._props = props;
    _this._startValue = 0;
    return _this;
  }

  babelHelpers.createClass(NavigationPagerPanResponder, [{
    key: 'onMoveShouldSetPanResponder',
    value: function onMoveShouldSetPanResponder(event, gesture) {
      var props = this._props;

      if (props.navigationState.index !== props.scene.index) {
        return false;
      }

      var layout = props.layout;
      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = props.navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();

      return Math.abs(gesture[axis]) > RESPOND_THRESHOLD && distance > 0 && index >= 0;
    }
  }, {
    key: 'onPanResponderGrant',
    value: function onPanResponderGrant() {
      var _this2 = this;

      this._isResponding = false;
      this._props.position.stopAnimation(function (value) {
        _this2._isResponding = true;
        _this2._startValue = value;
      });
    }
  }, {
    key: 'onPanResponderMove',
    value: function onPanResponderMove(event, gesture) {
      if (!this._isResponding) {
        return;
      }

      var _props = this._props,
          layout = _props.layout,
          navigationState = _props.navigationState,
          position = _props.position,
          scenes = _props.scenes;


      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var index = navigationState.index;
      var distance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
      var currentValue = I18nManager.isRTL && axis === 'dx' ? this._startValue + gesture[axis] / distance : this._startValue - gesture[axis] / distance;

      var prevIndex = Math.max(0, index - 1);

      var nextIndex = Math.min(index + 1, scenes.length - 1);

      var value = clamp(prevIndex, currentValue, nextIndex);

      position.setValue(value);
    }
  }, {
    key: 'onPanResponderRelease',
    value: function onPanResponderRelease(event, gesture) {
      var _this3 = this;

      if (!this._isResponding) {
        return;
      }

      this._isResponding = false;

      var _props2 = this._props,
          navigationState = _props2.navigationState,
          onNavigateBack = _props2.onNavigateBack,
          onNavigateForward = _props2.onNavigateForward,
          position = _props2.position;


      var isVertical = this._isVertical;
      var axis = isVertical ? 'dy' : 'dx';
      var velocityAxis = isVertical ? 'vy' : 'vx';
      var index = navigationState.index;
      var distance = I18nManager.isRTL && axis === 'dx' ? -gesture[axis] : gesture[axis];
      var moveSpeed = I18nManager.isRTL && velocityAxis === 'vx' ? -gesture[velocityAxis] : gesture[velocityAxis];

      position.stopAnimation(function (value) {
        _this3._reset();
        if (distance > DISTANCE_THRESHOLD || value <= index - POSITION_THRESHOLD || moveSpeed > VELOCITY_THRESHOLD) {
          onNavigateBack && onNavigateBack();
          return;
        }

        if (distance < -DISTANCE_THRESHOLD || value >= index + POSITION_THRESHOLD || moveSpeed < -VELOCITY_THRESHOLD) {
          onNavigateForward && onNavigateForward();
        }
      });
    }
  }, {
    key: 'onPanResponderTerminate',
    value: function onPanResponderTerminate() {
      this._isResponding = false;
      this._reset();
    }
  }, {
    key: '_reset',
    value: function _reset() {
      var props = this._props;
      Animated.timing(props.position, {
        toValue: props.navigationState.index,
        duration: ANIMATION_DURATION
      }).start();
    }
  }]);
  return NavigationPagerPanResponder;
}(NavigationAbstractPanResponder);

function createPanHandlers(direction, props) {
  var responder = new NavigationPagerPanResponder(direction, props);
  return responder.panHandlers;
}

function forHorizontal(props) {
  return createPanHandlers(Directions.HORIZONTAL, props);
}

module.exports = {
  forHorizontal: forHorizontal
};
}, 375, null, "NavigationPagerPanResponder");
__d(/* NavigationPagerStyleInterpolator */function(global, require, module, exports) {
'use strict';

var I18nManager = require(310          ); // 310 = I18nManager

function forInitial(props) {
  var navigationState = props.navigationState,
      scene = props.scene;


  var focused = navigationState.index === scene.index;
  var opacity = focused ? 1 : 0;

  var dir = scene.index > navigationState.index ? 1 : -1;
  var translate = focused ? 0 : 1000000 * dir;
  return {
    opacity: opacity,
    transform: [{ translateX: translate }, { translateY: translate }]
  };
}

function forHorizontal(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];
  var width = layout.initWidth;
  var outputRange = I18nManager.isRTL ? [-width, 0, width] : [width, 0, -width];

  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: outputRange
  });

  return {
    opacity: 1,
    shadowColor: 'transparent',
    shadowRadius: 0,
    transform: [{ scale: 1 }, { translateX: translateX }, { translateY: 0 }]
  };
}

module.exports = {
  forHorizontal: forHorizontal
};
}, 376, null, "NavigationPagerStyleInterpolator");
__d(/* NavigationPointerEventsContainer */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationPointerEventsContainer.js';
var React = require(103    ); // 103 = React
var NavigationAnimatedValueSubscription = require(378                                  ); // 378 = NavigationAnimatedValueSubscription

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var MIN_POSITION_OFFSET = 0.01;

function create(Component) {
  var Container = function (_React$Component) {
    babelHelpers.inherits(Container, _React$Component);

    function Container(props, context) {
      babelHelpers.classCallCheck(this, Container);

      var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

      _this._pointerEvents = _this._computePointerEvents();
      return _this;
    }

    babelHelpers.createClass(Container, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._onPositionChange = this._onPositionChange.bind(this);
        this._onComponentRef = this._onComponentRef.bind(this);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._bindPosition(this.props);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._positionListener && this._positionListener.remove();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._bindPosition(nextProps);
      }
    }, {
      key: 'render',
      value: function render() {
        this._pointerEvents = this._computePointerEvents();
        return React.createElement(Component, babelHelpers.extends({}, this.props, {
          pointerEvents: this._pointerEvents,
          onComponentRef: this._onComponentRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 92
          }
        }));
      }
    }, {
      key: '_onComponentRef',
      value: function _onComponentRef(component) {
        this._component = component;
        if (component) {
          invariant(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
        }
      }
    }, {
      key: '_bindPosition',
      value: function _bindPosition(props) {
        this._positionListener && this._positionListener.remove();
        this._positionListener = new NavigationAnimatedValueSubscription(props.position, this._onPositionChange);
      }
    }, {
      key: '_onPositionChange',
      value: function _onPositionChange() {
        if (this._component) {
          var pointerEvents = this._computePointerEvents();
          if (this._pointerEvents !== pointerEvents) {
            this._pointerEvents = pointerEvents;
            this._component.setNativeProps({ pointerEvents: pointerEvents });
          }
        }
      }
    }, {
      key: '_computePointerEvents',
      value: function _computePointerEvents() {
        var _props = this.props,
            navigationState = _props.navigationState,
            position = _props.position,
            scene = _props.scene;


        if (scene.isStale || navigationState.index !== scene.index) {
          return scene.index > navigationState.index ? 'box-only' : 'none';
        }

        var offset = position.__getAnimatedValue() - navigationState.index;
        if (Math.abs(offset) > MIN_POSITION_OFFSET) {
          return 'box-only';
        }

        return 'auto';
      }
    }]);
    return Container;
  }(React.Component);

  return Container;
}

module.exports = {
  create: create
};
}, 377, null, "NavigationPointerEventsContainer");
__d(/* NavigationAnimatedValueSubscription */function(global, require, module, exports) {
'use strict';

var NavigationAnimatedValueSubscription = function () {
  function NavigationAnimatedValueSubscription(value, callback) {
    babelHelpers.classCallCheck(this, NavigationAnimatedValueSubscription);

    this._value = value;
    this._token = value.addListener(callback);
  }

  babelHelpers.createClass(NavigationAnimatedValueSubscription, [{
    key: 'remove',
    value: function remove() {
      this._value.removeListener(this._token);
    }
  }]);
  return NavigationAnimatedValueSubscription;
}();

module.exports = NavigationAnimatedValueSubscription;
}, 378, null, "NavigationAnimatedValueSubscription");
__d(/* NavigationPropTypes */function(global, require, module, exports) {
'use strict';

var Animated = require(256       ); // 256 = Animated
var React = require(103    ); // 103 = React

var PropTypes = React.PropTypes;

var action = PropTypes.shape({
  type: PropTypes.string.isRequired
});

var animatedValue = PropTypes.instanceOf(Animated.Value);

var navigationRoute = PropTypes.shape({
  key: PropTypes.string.isRequired
});

var navigationState = PropTypes.shape({
  index: PropTypes.number.isRequired,
  routes: PropTypes.arrayOf(navigationRoute)
});

var layout = PropTypes.shape({
  height: animatedValue,
  initHeight: PropTypes.number.isRequired,
  initWidth: PropTypes.number.isRequired,
  isMeasured: PropTypes.bool.isRequired,
  width: animatedValue
});

var scene = PropTypes.shape({
  index: PropTypes.number.isRequired,
  isActive: PropTypes.bool.isRequired,
  isStale: PropTypes.bool.isRequired,
  key: PropTypes.string.isRequired,
  route: navigationRoute.isRequired
});

var SceneRendererProps = {
  layout: layout.isRequired,
  navigationState: navigationState.isRequired,
  position: animatedValue.isRequired,
  progress: animatedValue.isRequired,
  scene: scene.isRequired,
  scenes: PropTypes.arrayOf(scene).isRequired
};

var SceneRenderer = PropTypes.shape(SceneRendererProps);

var panHandlers = PropTypes.shape({
  onMoveShouldSetResponder: PropTypes.func.isRequired,
  onMoveShouldSetResponderCapture: PropTypes.func.isRequired,
  onResponderEnd: PropTypes.func.isRequired,
  onResponderGrant: PropTypes.func.isRequired,
  onResponderMove: PropTypes.func.isRequired,
  onResponderReject: PropTypes.func.isRequired,
  onResponderRelease: PropTypes.func.isRequired,
  onResponderStart: PropTypes.func.isRequired,
  onResponderTerminate: PropTypes.func.isRequired,
  onResponderTerminationRequest: PropTypes.func.isRequired,
  onStartShouldSetResponder: PropTypes.func.isRequired,
  onStartShouldSetResponderCapture: PropTypes.func.isRequired
});

function extractSceneRendererProps(props) {
  return {
    layout: props.layout,
    navigationState: props.navigationState,
    position: props.position,
    progress: props.progress,
    scene: props.scene,
    scenes: props.scenes
  };
}

module.exports = {
  extractSceneRendererProps: extractSceneRendererProps,

  SceneRendererProps: SceneRendererProps,

  SceneRenderer: SceneRenderer,
  action: action,
  navigationState: navigationState,
  navigationRoute: navigationRoute,
  panHandlers: panHandlers
};
}, 379, null, "NavigationPropTypes");
__d(/* NavigationCardStack */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationCardStack.js';
var NativeAnimatedModule = require(57             ).NativeAnimatedModule; // 57 = NativeModules
var NavigationCard = require(371             ); // 371 = NavigationCard
var NavigationCardStackPanResponder = require(372                              ); // 372 = NavigationCardStackPanResponder
var NavigationCardStackStyleInterpolator = require(374                                   ); // 374 = NavigationCardStackStyleInterpolator
var NavigationPropTypes = require(379                  ); // 379 = NavigationPropTypes
var NavigationTransitioner = require(381                     ); // 381 = NavigationTransitioner
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var PropTypes = React.PropTypes;
var Directions = NavigationCardStackPanResponder.Directions;

var NavigationCardStack = function (_React$Component) {
  babelHelpers.inherits(NavigationCardStack, _React$Component);

  function NavigationCardStack(props, context) {
    babelHelpers.classCallCheck(this, NavigationCardStack);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationCardStack.__proto__ || Object.getPrototypeOf(NavigationCardStack)).call(this, props, context));

    _this._configureTransition = function () {
      var isVertical = _this.props.direction === 'vertical';
      var animationConfig = {};
      if (!!NativeAnimatedModule && !_this.props.enableGestures && NavigationCardStackStyleInterpolator.canUseNativeDriver(isVertical)) {
        animationConfig.useNativeDriver = true;
      }
      return animationConfig;
    };

    return _this;
  }

  babelHelpers.createClass(NavigationCardStack, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._render = this._render.bind(this);
      this._renderScene = this._renderScene.bind(this);
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(NavigationTransitioner, {
        configureTransition: this._configureTransition,
        navigationState: this.props.navigationState,
        render: this._render,
        style: this.props.style,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 229
        }
      });
    }
  }, {
    key: '_render',
    value: function _render(props) {
      var _this2 = this;

      var renderHeader = this.props.renderHeader;


      var header = renderHeader ? React.createElement(
        View,
        {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 261
          }
        },
        renderHeader(props)
      ) : null;

      var scenes = props.scenes.map(function (scene) {
        return _this2._renderScene(babelHelpers.extends({}, props, {
          scene: scene
        }));
      });

      return React.createElement(
        View,
        { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 271
          }
        },
        React.createElement(
          View,
          {
            style: [styles.scenes, this.props.scenesStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 272
            }
          },
          scenes
        ),
        header
      );
    }
  }, {
    key: '_renderScene',
    value: function _renderScene(props) {
      var isVertical = this.props.direction === 'vertical';

      var interpolator = this.props.cardStyleInterpolator || (isVertical ? NavigationCardStackStyleInterpolator.forVertical : NavigationCardStackStyleInterpolator.forHorizontal);

      var style = interpolator(props);

      var panHandlers = null;

      if (this.props.enableGestures) {
        var panHandlersProps = babelHelpers.extends({}, props, {
          onNavigateBack: this.props.onNavigateBack,
          gestureResponseDistance: this.props.gestureResponseDistance
        });
        panHandlers = isVertical ? NavigationCardStackPanResponder.forVertical(panHandlersProps) : NavigationCardStackPanResponder.forHorizontal(panHandlersProps);
      }

      return React.createElement(NavigationCard, babelHelpers.extends({}, props, {
        key: 'card_' + props.scene.key,
        panHandlers: panHandlers,
        renderScene: this.props.renderScene,
        style: [style, this.props.cardStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 304
        }
      }));
    }
  }]);
  return NavigationCardStack;
}(React.Component);

NavigationCardStack.propTypes = {
  cardStyle: PropTypes.any,

  direction: PropTypes.oneOf([Directions.HORIZONTAL, Directions.VERTICAL]),

  gestureResponseDistance: PropTypes.number,

  cardStyleInterpolator: PropTypes.func,

  enableGestures: PropTypes.bool,

  navigationState: NavigationPropTypes.navigationState.isRequired,

  onNavigateBack: PropTypes.func,

  renderHeader: PropTypes.func,

  renderScene: PropTypes.func.isRequired,

  style: View.propTypes.style,

  scenesStyle: View.propTypes.style
};
NavigationCardStack.defaultProps = {
  direction: Directions.HORIZONTAL,
  enableGestures: true
};


var styles = StyleSheet.create({
  container: {
    flex: 1,

    flexDirection: 'column-reverse'
  },
  scenes: {
    flex: 1
  }
});

module.exports = NavigationCardStack;
}, 380, null, "NavigationCardStack");
__d(/* NavigationTransitioner */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/NavigationExperimental/NavigationTransitioner.js';
var Animated = require(256       ); // 256 = Animated
var Easing = require(266     ); // 266 = Easing
var NavigationPropTypes = require(379                  ); // 379 = NavigationPropTypes
var NavigationScenesReducer = require(382                      ); // 382 = NavigationScenesReducer
var React = require(103    ); // 103 = React
var StyleSheet = require(104         ); // 104 = StyleSheet
var View = require(124   ); // 124 = View

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var PropTypes = React.PropTypes;


var DefaultTransitionSpec = {
  duration: 250,
  easing: Easing.inOut(Easing.ease),
  timing: Animated.timing
};

var NavigationTransitioner = function (_React$Component) {
  babelHelpers.inherits(NavigationTransitioner, _React$Component);

  function NavigationTransitioner(props, context) {
    babelHelpers.classCallCheck(this, NavigationTransitioner);

    var _this = babelHelpers.possibleConstructorReturn(this, (NavigationTransitioner.__proto__ || Object.getPrototypeOf(NavigationTransitioner)).call(this, props, context));

    var layout = {
      height: new Animated.Value(0),
      initHeight: 0,
      initWidth: 0,
      isMeasured: false,
      width: new Animated.Value(0)
    };

    _this.state = {
      layout: layout,
      position: new Animated.Value(_this.props.navigationState.index),
      progress: new Animated.Value(1),
      scenes: NavigationScenesReducer([], _this.props.navigationState)
    };

    _this._prevTransitionProps = null;
    _this._transitionProps = buildTransitionProps(props, _this.state);
    _this._isMounted = false;
    return _this;
  }

  babelHelpers.createClass(NavigationTransitioner, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onLayout = this._onLayout.bind(this);
      this._onTransitionEnd = this._onTransitionEnd.bind(this);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      var nextScenes = NavigationScenesReducer(this.state.scenes, nextProps.navigationState, this.props.navigationState);

      if (nextScenes === this.state.scenes) {
        return;
      }

      var nextState = babelHelpers.extends({}, this.state, {
        scenes: nextScenes
      });

      var position = nextState.position,
          progress = nextState.progress;


      progress.setValue(0);

      this._prevTransitionProps = this._transitionProps;
      this._transitionProps = buildTransitionProps(nextProps, nextState);

      var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;

      var transitionSpec = babelHelpers.extends({}, DefaultTransitionSpec, transitionUserSpec);

      var timing = transitionSpec.timing;

      delete transitionSpec.timing;

      var animations = [timing(progress, babelHelpers.extends({}, transitionSpec, {
        toValue: 1
      }))];

      if (nextProps.navigationState.index !== this.props.navigationState.index) {
        animations.push(timing(position, babelHelpers.extends({}, transitionSpec, {
          toValue: nextProps.navigationState.index
        })));
      }

      this.setState(nextState, function () {
        nextProps.onTransitionStart && nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);
        Animated.parallel(animations).start(_this2._onTransitionEnd);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return React.createElement(
        View,
        {
          onLayout: this._onLayout,
          style: [styles.main, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 192
          }
        },
        this.props.render(this._transitionProps, this._prevTransitionProps)
      );
    }
  }, {
    key: '_onLayout',
    value: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          height = _event$nativeEvent$la.height,
          width = _event$nativeEvent$la.width;

      if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {
        return;
      }
      var layout = babelHelpers.extends({}, this.state.layout, {
        initHeight: height,
        initWidth: width,
        isMeasured: true
      });

      layout.height.setValue(height);
      layout.width.setValue(width);

      var nextState = babelHelpers.extends({}, this.state, {
        layout: layout
      });

      this._transitionProps = buildTransitionProps(this.props, nextState);
      this.setState(nextState);
    }
  }, {
    key: '_onTransitionEnd',
    value: function _onTransitionEnd() {
      var _this3 = this;

      if (!this._isMounted) {
        return;
      }

      var prevTransitionProps = this._prevTransitionProps;
      this._prevTransitionProps = null;

      var nextState = babelHelpers.extends({}, this.state, {
        scenes: this.state.scenes.filter(isSceneNotStale)
      });

      this._transitionProps = buildTransitionProps(this.props, nextState);

      this.setState(nextState, function () {
        _this3.props.onTransitionEnd && _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);
      });
    }
  }]);
  return NavigationTransitioner;
}(React.Component);

NavigationTransitioner.propTypes = {
  configureTransition: PropTypes.func,
  navigationState: NavigationPropTypes.navigationState.isRequired,
  onTransitionEnd: PropTypes.func,
  onTransitionStart: PropTypes.func,
  render: PropTypes.func.isRequired
};


function buildTransitionProps(props, state) {
  var navigationState = props.navigationState;
  var layout = state.layout,
      position = state.position,
      progress = state.progress,
      scenes = state.scenes;


  var scene = scenes.find(isSceneActive);

  invariant(scene, 'No active scene when building navigation transition props.');

  return {
    layout: layout,
    navigationState: navigationState,
    position: position,
    progress: progress,
    scenes: scenes,
    scene: scene
  };
}

function isSceneNotStale(scene) {
  return !scene.isStale;
}

function isSceneActive(scene) {
  return scene.isActive;
}

var styles = StyleSheet.create({
  main: {
    flex: 1
  }
});

module.exports = NavigationTransitioner;
}, 381, null, "NavigationTransitioner");
__d(/* NavigationScenesReducer */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var shallowEqual = require(165                    ); // 165 = fbjs/lib/shallowEqual

var SCENE_KEY_PREFIX = 'scene_';

function compareKey(one, two) {
  var delta = one.length - two.length;
  if (delta > 0) {
    return 1;
  }
  if (delta < 0) {
    return -1;
  }
  return one > two ? 1 : -1;
}

function compareScenes(one, two) {
  if (one.index > two.index) {
    return 1;
  }
  if (one.index < two.index) {
    return -1;
  }

  return compareKey(one.key, two.key);
}

function areScenesShallowEqual(one, two) {
  return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
}

function areRoutesShallowEqual(one, two) {
  if (!one || !two) {
    return one === two;
  }

  if (one.key !== two.key) {
    return false;
  }

  return shallowEqual(one, two);
}

function NavigationScenesReducer(scenes, nextState, prevState) {
  if (prevState === nextState) {
    return scenes;
  }

  var prevScenes = new Map();
  var freshScenes = new Map();
  var staleScenes = new Map();

  scenes.forEach(function (scene) {
    var key = scene.key;

    if (scene.isStale) {
      staleScenes.set(key, scene);
    }
    prevScenes.set(key, scene);
  });

  var nextKeys = new Set();
  nextState.routes.forEach(function (route, index) {
    var key = SCENE_KEY_PREFIX + route.key;
    var scene = {
      index: index,
      isActive: false,
      isStale: false,
      key: key,
      route: route
    };
    invariant(!nextKeys.has(key), 'navigationState.routes[' + index + '].key "' + key + '" conflicts with ' + 'another route!');
    nextKeys.add(key);

    if (staleScenes.has(key)) {
      staleScenes.delete(key);
    }
    freshScenes.set(key, scene);
  });

  if (prevState) {
    prevState.routes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      if (freshScenes.has(key)) {
        return;
      }
      staleScenes.set(key, {
        index: index,
        isActive: false,
        isStale: true,
        key: key,
        route: route
      });
    });
  }

  var nextScenes = [];

  var mergeScene = function mergeScene(nextScene) {
    var key = nextScene.key;

    var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;
    if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
      nextScenes.push(prevScene);
    } else {
      nextScenes.push(nextScene);
    }
  };

  staleScenes.forEach(mergeScene);
  freshScenes.forEach(mergeScene);

  nextScenes.sort(compareScenes);

  var activeScenesCount = 0;
  nextScenes.forEach(function (scene, ii) {
    var isActive = !scene.isStale && scene.index === nextState.index;
    if (isActive !== scene.isActive) {
      nextScenes[ii] = babelHelpers.extends({}, scene, {
        isActive: isActive
      });
    }
    if (isActive) {
      activeScenesCount++;
    }
  });

  invariant(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

  if (nextScenes.length !== scenes.length) {
    return nextScenes;
  }

  if (nextScenes.some(function (scene, index) {
    return !areScenesShallowEqual(scenes[index], scene);
  })) {
    return nextScenes;
  }

  return scenes;
}

module.exports = NavigationScenesReducer;
}, 382, null, "NavigationScenesReducer");
__d(/* NavigationHeader */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationHeader.js';
var NavigationHeaderBackButton = require(384                         ); // 384 = NavigationHeaderBackButton
var NavigationHeaderStyleInterpolator = require(386                                ); // 386 = NavigationHeaderStyleInterpolator
var NavigationHeaderTitle = require(387                    ); // 387 = NavigationHeaderTitle
var NavigationPropTypes = require(379                  ); // 379 = NavigationPropTypes
var React = require(103    ); // 103 = React
var ReactComponentWithPureRenderMixin = require(388                                          ); // 388 = react/lib/ReactComponentWithPureRenderMixin
var ReactNative = require(46            ); // 46 = react-native
var TVEventHandler = require(192             ); // 192 = TVEventHandler

var Animated = ReactNative.Animated,
    Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    View = ReactNative.View;


var APPBAR_HEIGHT = Platform.OS === 'ios' ? 44 : 56;
var STATUSBAR_HEIGHT = Platform.OS === 'ios' ? 20 : 0;
var PropTypes = React.PropTypes;

var NavigationHeader = function (_React$Component) {
  babelHelpers.inherits(NavigationHeader, _React$Component);

  function NavigationHeader() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, NavigationHeader);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = NavigationHeader.__proto__ || Object.getPrototypeOf(NavigationHeader)).call.apply(_ref, [this].concat(args))), _this), _this._renderLeft = function (props) {
      return _this._renderSubView(props, 'left', _this.props.renderLeftComponent, NavigationHeaderStyleInterpolator.forLeft);
    }, _this._renderTitle = function (props) {
      return _this._renderSubView(props, 'title', _this.props.renderTitleComponent, NavigationHeaderStyleInterpolator.forCenter);
    }, _this._renderRight = function (props) {
      return _this._renderSubView(props, 'right', _this.props.renderRightComponent, NavigationHeaderStyleInterpolator.forRight);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(NavigationHeader, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps, nextState) {
      return ReactComponentWithPureRenderMixin.shouldComponentUpdate.call(this, nextProps, nextState);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._tvEventHandler = new TVEventHandler();
      this._tvEventHandler.enable(this, function (cmp, evt) {
        if (evt && evt.eventType === 'menu') {
          cmp.props.onNavigateBack && cmp.props.onNavigateBack();
        }
      });
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      if (this._tvEventHandler) {
        this._tvEventHandler.disable();
        delete this._tvEventHandler;
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          scenes = _props.scenes,
          style = _props.style,
          viewProps = _props.viewProps;


      var scenesProps = scenes.map(function (scene) {
        var props = NavigationPropTypes.extractSceneRendererProps(_this2.props);
        props.scene = scene;
        return props;
      });

      var barHeight = this.props.statusBarHeight instanceof Animated.Value ? Animated.add(this.props.statusBarHeight, new Animated.Value(APPBAR_HEIGHT)) : APPBAR_HEIGHT + this.props.statusBarHeight;

      return React.createElement(
        Animated.View,
        babelHelpers.extends({ style: [styles.appbar, { height: barHeight }, style]
        }, viewProps, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 164
          }
        }),
        scenesProps.map(this._renderLeft, this),
        scenesProps.map(this._renderTitle, this),
        scenesProps.map(this._renderRight, this)
      );
    }
  }, {
    key: '_renderSubView',
    value: function _renderSubView(props, name, renderer, styleInterpolator) {
      var scene = props.scene,
          navigationState = props.navigationState;
      var index = scene.index,
          isStale = scene.isStale,
          key = scene.key;


      var offset = navigationState.index - index;

      if (Math.abs(offset) > 2) {
        return null;
      }

      var subViewProps = babelHelpers.extends({}, props, { onNavigateBack: this.props.onNavigateBack });
      var subView = renderer(subViewProps);
      if (subView === null) {
        return null;
      }

      var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';
      return React.createElement(
        Animated.View,
        {
          pointerEvents: pointerEvents,
          key: name + '_' + key,
          style: [styles[name], { marginTop: this.props.statusBarHeight }, styleInterpolator(props)], __source: {
            fileName: _jsxFileName,
            lineNumber: 238
          }
        },
        subView
      );
    }
  }]);
  return NavigationHeader;
}(React.Component);

NavigationHeader.defaultProps = {

  renderTitleComponent: function renderTitleComponent(props) {
    var title = String(props.scene.route.title || '');
    return React.createElement(
      NavigationHeaderTitle,
      {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 92
        }
      },
      title
    );
  },

  renderLeftComponent: function renderLeftComponent(props) {
    if (props.scene.index === 0 || !props.onNavigateBack) {
      return null;
    }
    return React.createElement(NavigationHeaderBackButton, {
      onPress: props.onNavigateBack,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 100
      }
    });
  },

  renderRightComponent: function renderRightComponent(props) {
    return null;
  },

  statusBarHeight: STATUSBAR_HEIGHT
};
NavigationHeader.propTypes = babelHelpers.extends({}, NavigationPropTypes.SceneRendererProps, {
  onNavigateBack: PropTypes.func,
  renderLeftComponent: PropTypes.func,
  renderRightComponent: PropTypes.func,
  renderTitleComponent: PropTypes.func,
  style: View.propTypes.style,
  statusBarHeight: PropTypes.number,
  viewProps: PropTypes.shape(View.propTypes)
});
NavigationHeader.HEIGHT = APPBAR_HEIGHT + STATUSBAR_HEIGHT;
NavigationHeader.Title = NavigationHeaderTitle;
NavigationHeader.BackButton = NavigationHeaderBackButton;


var styles = StyleSheet.create({
  appbar: {
    alignItems: 'center',
    backgroundColor: Platform.OS === 'ios' ? '#EFEFF2' : '#FFF',
    borderBottomColor: 'rgba(0, 0, 0, .15)',
    borderBottomWidth: Platform.OS === 'ios' ? StyleSheet.hairlineWidth : 0,
    elevation: 4,
    flexDirection: 'row',
    justifyContent: 'flex-start'
  },

  title: {
    bottom: 0,
    left: APPBAR_HEIGHT,
    position: 'absolute',
    right: APPBAR_HEIGHT,
    top: 0
  },

  left: {
    bottom: 0,
    left: 0,
    position: 'absolute',
    top: 0
  },

  right: {
    bottom: 0,
    position: 'absolute',
    right: 0,
    top: 0
  }
});

module.exports = NavigationHeader;
}, 383, null, "NavigationHeader");
__d(/* NavigationHeaderBackButton */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationHeaderBackButton.js';
var React = require(12     ); // 12 = react
var ReactNative = require(46            ); // 46 = react-native

var I18nManager = ReactNative.I18nManager,
    Image = ReactNative.Image,
    Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    TouchableOpacity = ReactNative.TouchableOpacity;


var NavigationHeaderBackButton = function NavigationHeaderBackButton(props) {
  return React.createElement(
    TouchableOpacity,
    { style: [styles.buttonContainer, props.style], onPress: props.onPress, __source: {
        fileName: _jsxFileName,
        lineNumber: 44
      }
    },
    React.createElement(Image, { style: [styles.button, props.imageStyle], source: require(385                     ), __source: { // 385 = ./assets/back-icon.png
        fileName: _jsxFileName,
        lineNumber: 45
      }
    })
  );
};

NavigationHeaderBackButton.propTypes = {
  onPress: React.PropTypes.func.isRequired
};

var styles = StyleSheet.create({
  buttonContainer: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center'
  },
  button: {
    height: 24,
    width: 24,
    margin: Platform.OS === 'ios' ? 10 : 16,
    resizeMode: 'contain',
    transform: [{ scaleX: I18nManager.isRTL ? -1 : 1 }]
  }
});

module.exports = NavigationHeaderBackButton;
}, 384, null, "NavigationHeaderBackButton");
__d(/* react-native/Libraries/CustomComponents/NavigationExperimental/assets/back-icon.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/assets","width":24,"height":24,"scales":[1,1.5,2,3,4],"hash":"a364dc7a784101f7c8f6791c7b4514ce","name":"back-icon","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 385, null, "react-native/Libraries/CustomComponents/NavigationExperimental/assets/back-icon.png");
__d(/* NavigationHeaderStyleInterpolator */function(global, require, module, exports) {
'use strict';

var I18nManager = require(310          ); // 310 = I18nManager

function forLeft(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    })
  };
}

function forCenter(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    }),
    transform: [{
      translateX: position.interpolate({
        inputRange: [index - 1, index + 1],
        outputRange: I18nManager.isRTL ? [-200, 200] : [200, -200]
      })
    }]
  };
}

function forRight(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    })
  };
}

module.exports = {
  forCenter: forCenter,
  forLeft: forLeft,
  forRight: forRight
};
}, 386, null, "NavigationHeaderStyleInterpolator");
__d(/* NavigationHeaderTitle */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native/Libraries/CustomComponents/NavigationExperimental/NavigationHeaderTitle.js';
var React = require(12     ); // 12 = react
var ReactNative = require(46            ); // 46 = react-native

var Platform = ReactNative.Platform,
    StyleSheet = ReactNative.StyleSheet,
    View = ReactNative.View,
    Text = ReactNative.Text;


var NavigationHeaderTitle = function NavigationHeaderTitle(_ref) {
  var children = _ref.children,
      style = _ref.style,
      textStyle = _ref.textStyle,
      viewProps = _ref.viewProps;
  return React.createElement(
    View,
    babelHelpers.extends({ style: [styles.title, style] }, viewProps, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 53
      }
    }),
    React.createElement(
      Text,
      { style: [styles.titleText, textStyle], __source: {
          fileName: _jsxFileName,
          lineNumber: 54
        }
      },
      children
    )
  );
};

var styles = StyleSheet.create({
  title: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    marginHorizontal: 16
  },

  titleText: {
    flex: 1,
    fontSize: 18,
    fontWeight: '500',
    color: 'rgba(0, 0, 0, .9)',
    textAlign: Platform.OS === 'ios' ? 'center' : 'left'
  }
});

NavigationHeaderTitle.propTypes = {
  children: React.PropTypes.node.isRequired,
  style: View.propTypes.style,
  textStyle: Text.propTypes.style
};

module.exports = NavigationHeaderTitle;
}, 387, null, "NavigationHeaderTitle");
__d(/* react/lib/ReactComponentWithPureRenderMixin.js */function(global, require, module, exports) {

'use strict';

var shallowCompare = require(389               ); // 389 = ./shallowCompare

var ReactComponentWithPureRenderMixin = {
  shouldComponentUpdate: function shouldComponentUpdate(nextProps, nextState) {
    return shallowCompare(this, nextProps, nextState);
  }
};

module.exports = ReactComponentWithPureRenderMixin;
}, 388, null, "react/lib/ReactComponentWithPureRenderMixin.js");
__d(/* react/lib/shallowCompare.js */function(global, require, module, exports) {

'use strict';

var shallowEqual = require(165                    ); // 165 = fbjs/lib/shallowEqual

function shallowCompare(instance, nextProps, nextState) {
  return !shallowEqual(instance.props, nextProps) || !shallowEqual(instance.state, nextState);
}

module.exports = shallowCompare;
}, 389, null, "react/lib/shallowCompare.js");
__d(/* NavigationStateUtils */function(global, require, module, exports) {
'use strict';

var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var NavigationStateUtils = {
  get: function get(state, key) {
    return state.routes.find(function (route) {
      return route.key === key;
    }) || null;
  },
  indexOf: function indexOf(state, key) {
    return state.routes.map(function (route) {
      return route.key;
    }).indexOf(key);
  },
  has: function has(state, key) {
    return !!state.routes.some(function (route) {
      return route.key === key;
    });
  },
  push: function push(state, route) {
    invariant(NavigationStateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);

    var routes = state.routes.slice();
    routes.push(route);

    return babelHelpers.extends({}, state, {
      index: routes.length - 1,
      routes: routes
    });
  },
  pop: function pop(state) {
    if (state.index <= 0) {
      return state;
    }
    var routes = state.routes.slice(0, -1);
    return babelHelpers.extends({}, state, {
      index: routes.length - 1,
      routes: routes
    });
  },
  jumpToIndex: function jumpToIndex(state, index) {
    if (index === state.index) {
      return state;
    }

    invariant(!!state.routes[index], 'invalid index %s to jump to', index);

    return babelHelpers.extends({}, state, {
      index: index
    });
  },
  jumpTo: function jumpTo(state, key) {
    var index = NavigationStateUtils.indexOf(state, key);
    return NavigationStateUtils.jumpToIndex(state, index);
  },
  back: function back(state) {
    var index = state.index - 1;
    var route = state.routes[index];
    return route ? NavigationStateUtils.jumpToIndex(state, index) : state;
  },
  forward: function forward(state) {
    var index = state.index + 1;
    var route = state.routes[index];
    return route ? NavigationStateUtils.jumpToIndex(state, index) : state;
  },
  replaceAt: function replaceAt(state, key, route) {
    var index = NavigationStateUtils.indexOf(state, key);
    return NavigationStateUtils.replaceAtIndex(state, index, route);
  },
  replaceAtIndex: function replaceAtIndex(state, index, route) {
    invariant(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

    if (state.routes[index] === route) {
      return state;
    }

    var routes = state.routes.slice();
    routes[index] = route;

    return babelHelpers.extends({}, state, {
      index: index,
      routes: routes
    });
  },
  reset: function reset(state, routes, index) {
    invariant(routes.length && Array.isArray(routes), 'invalid routes to replace');

    var nextIndex = index === undefined ? routes.length - 1 : index;

    if (state.routes.length === routes.length && state.index === nextIndex) {
      var compare = function compare(route, ii) {
        return routes[ii] === route;
      };
      if (state.routes.every(compare)) {
        return state;
      }
    }

    invariant(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);

    return babelHelpers.extends({}, state, {
      index: nextIndex,
      routes: routes
    });
  }
};

module.exports = NavigationStateUtils;
}, 390, null, "NavigationStateUtils");
__d(/* NetInfo */function(global, require, module, exports) {
'use strict';

var Map = require(219  ); // 219 = Map
var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var NativeModules = require(57             ); // 57 = NativeModules
var Platform = require(56        ); // 56 = Platform
var RCTNetInfo = NativeModules.NetInfo;

var NetInfoEventEmitter = new NativeEventEmitter(RCTNetInfo);

var DEVICE_CONNECTIVITY_EVENT = 'networkStatusDidChange';

var _subscriptions = new Map();

var _isConnected = void 0;
if (Platform.OS === 'ios') {
  _isConnected = function _isConnected(reachability) {
    return reachability !== 'none' && reachability !== 'unknown';
  };
} else if (Platform.OS === 'android') {
  _isConnected = function _isConnected(connectionType) {
    return connectionType !== 'NONE' && connectionType !== 'UNKNOWN';
  };
}

var _isConnectedSubscriptions = new Map();

var NetInfo = {
  addEventListener: function addEventListener(eventName, handler) {
    var listener = NetInfoEventEmitter.addListener(DEVICE_CONNECTIVITY_EVENT, function (appStateData) {
      handler(appStateData.network_info);
    });
    _subscriptions.set(handler, listener);
    return {
      remove: function remove() {
        return NetInfo.removeEventListener(eventName, handler);
      }
    };
  },
  removeEventListener: function removeEventListener(eventName, handler) {
    var listener = _subscriptions.get(handler);
    if (!listener) {
      return;
    }
    listener.remove();
    _subscriptions.delete(handler);
  },
  fetch: function fetch() {
    return RCTNetInfo.getCurrentConnectivity().then(function (resp) {
      return resp.network_info;
    });
  },

  isConnected: {
    addEventListener: function addEventListener(eventName, handler) {
      var listener = function listener(connection) {
        handler(_isConnected(connection));
      };
      _isConnectedSubscriptions.set(handler, listener);
      NetInfo.addEventListener(eventName, listener);
      return {
        remove: function remove() {
          return NetInfo.isConnected.removeEventListener(eventName, handler);
        }
      };
    },
    removeEventListener: function removeEventListener(eventName, handler) {
      var listener = _isConnectedSubscriptions.get(handler);
      NetInfo.removeEventListener(eventName, listener);
      _isConnectedSubscriptions.delete(handler);
    },
    fetch: function fetch() {
      return NetInfo.fetch().then(function (connection) {
        return _isConnected(connection);
      });
    }
  },

  isConnectionExpensive: function isConnectionExpensive() {
    return Platform.OS === 'android' ? RCTNetInfo.isConnectionMetered() : Promise.reject(new Error('Currently not supported on iOS'));
  }
};

module.exports = NetInfo;
}, 391, null, "NetInfo");
__d(/* PermissionsAndroid */function(global, require, module, exports) {
'use strict';

var DialogManagerAndroid = require(57             ).DialogManagerAndroid; // 57 = NativeModules
var Permissions = require(57             ).PermissionsAndroid; // 57 = NativeModules

var PermissionsAndroid = function () {
  function PermissionsAndroid() {
    babelHelpers.classCallCheck(this, PermissionsAndroid);

    this.PERMISSIONS = {
      READ_CALENDAR: 'android.permission.READ_CALENDAR',
      WRITE_CALENDAR: 'android.permission.WRITE_CALENDAR',
      CAMERA: 'android.permission.CAMERA',
      READ_CONTACTS: 'android.permission.READ_CONTACTS',
      WRITE_CONTACTS: 'android.permission.WRITE_CONTACTS',
      GET_ACCOUNTS: 'android.permission.GET_ACCOUNTS',
      ACCESS_FINE_LOCATION: 'android.permission.ACCESS_FINE_LOCATION',
      ACCESS_COARSE_LOCATION: 'android.permission.ACCESS_COARSE_LOCATION',
      RECORD_AUDIO: 'android.permission.RECORD_AUDIO',
      READ_PHONE_STATE: 'android.permission.READ_PHONE_STATE',
      CALL_PHONE: 'android.permission.CALL_PHONE',
      READ_CALL_LOG: 'android.permission.READ_CALL_LOG',
      WRITE_CALL_LOG: 'android.permission.WRITE_CALL_LOG',
      ADD_VOICEMAIL: 'com.android.voicemail.permission.ADD_VOICEMAIL',
      USE_SIP: 'android.permission.USE_SIP',
      PROCESS_OUTGOING_CALLS: 'android.permission.PROCESS_OUTGOING_CALLS',
      BODY_SENSORS: 'android.permission.BODY_SENSORS',
      SEND_SMS: 'android.permission.SEND_SMS',
      RECEIVE_SMS: 'android.permission.RECEIVE_SMS',
      READ_SMS: 'android.permission.READ_SMS',
      RECEIVE_WAP_PUSH: 'android.permission.RECEIVE_WAP_PUSH',
      RECEIVE_MMS: 'android.permission.RECEIVE_MMS',
      READ_EXTERNAL_STORAGE: 'android.permission.READ_EXTERNAL_STORAGE',
      WRITE_EXTERNAL_STORAGE: 'android.permission.WRITE_EXTERNAL_STORAGE'
    };

    this.RESULTS = {
      GRANTED: 'granted',
      DENIED: 'denied',
      NEVER_ASK_AGAIN: 'never_ask_again'
    };
  }

  babelHelpers.createClass(PermissionsAndroid, [{
    key: 'checkPermission',
    value: function checkPermission(permission) {
      console.warn('"PermissionsAndroid.checkPermission" is deprecated. Use "PermissionsAndroid.check" instead');
      return Permissions.checkPermission(permission);
    }
  }, {
    key: 'check',
    value: function check(permission) {
      return Permissions.checkPermission(permission);
    }
  }, {
    key: 'requestPermission',
    value: function requestPermission(permission, rationale) {
      var response;
      return regeneratorRuntime.async(function requestPermission$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              console.warn('"PermissionsAndroid.requestPermission" is deprecated. Use "PermissionsAndroid.request" instead');
              _context.next = 3;
              return regeneratorRuntime.awrap(this.request(permission, rationale));

            case 3:
              response = _context.sent;
              return _context.abrupt('return', response === this.RESULTS.GRANTED);

            case 5:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'request',
    value: function request(permission, rationale) {
      var shouldShowRationale;
      return regeneratorRuntime.async(function request$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              if (!rationale) {
                _context2.next = 6;
                break;
              }

              _context2.next = 3;
              return regeneratorRuntime.awrap(Permissions.shouldShowRequestPermissionRationale(permission));

            case 3:
              shouldShowRationale = _context2.sent;

              if (!shouldShowRationale) {
                _context2.next = 6;
                break;
              }

              return _context2.abrupt('return', new Promise(function (resolve, reject) {
                DialogManagerAndroid.showAlert(rationale, function () {
                  return reject(new Error('Error showing rationale'));
                }, function () {
                  return resolve(Permissions.requestPermission(permission));
                });
              }));

            case 6:
              return _context2.abrupt('return', Permissions.requestPermission(permission));

            case 7:
            case 'end':
              return _context2.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'requestMultiple',
    value: function requestMultiple(permissions) {
      return Permissions.requestMultiplePermissions(permissions);
    }
  }]);
  return PermissionsAndroid;
}();

PermissionsAndroid = new PermissionsAndroid();

module.exports = PermissionsAndroid;
}, 392, null, "PermissionsAndroid");
__d(/* PushNotificationIOS */function(global, require, module, exports) {
'use strict';

var NativeEventEmitter = require(79                  ); // 79 = NativeEventEmitter
var RCTPushNotificationManager = require(57             ).PushNotificationManager; // 57 = NativeModules
var invariant = require(18                  ); // 18 = fbjs/lib/invariant

var PushNotificationEmitter = new NativeEventEmitter(RCTPushNotificationManager);

var _notifHandlers = new Map();

var DEVICE_NOTIF_EVENT = 'remoteNotificationReceived';
var NOTIF_REGISTER_EVENT = 'remoteNotificationsRegistered';
var NOTIF_REGISTRATION_ERROR_EVENT = 'remoteNotificationRegistrationError';
var DEVICE_LOCAL_NOTIF_EVENT = 'localNotificationReceived';

var PushNotificationIOS = function () {
  babelHelpers.createClass(PushNotificationIOS, null, [{
    key: 'presentLocalNotification',
    value: function presentLocalNotification(details) {
      RCTPushNotificationManager.presentLocalNotification(details);
    }
  }, {
    key: 'scheduleLocalNotification',
    value: function scheduleLocalNotification(details) {
      RCTPushNotificationManager.scheduleLocalNotification(details);
    }
  }, {
    key: 'cancelAllLocalNotifications',
    value: function cancelAllLocalNotifications() {
      RCTPushNotificationManager.cancelAllLocalNotifications();
    }
  }, {
    key: 'setApplicationIconBadgeNumber',
    value: function setApplicationIconBadgeNumber(number) {
      RCTPushNotificationManager.setApplicationIconBadgeNumber(number);
    }
  }, {
    key: 'getApplicationIconBadgeNumber',
    value: function getApplicationIconBadgeNumber(callback) {
      RCTPushNotificationManager.getApplicationIconBadgeNumber(callback);
    }
  }, {
    key: 'cancelLocalNotifications',
    value: function cancelLocalNotifications(userInfo) {
      RCTPushNotificationManager.cancelLocalNotifications(userInfo);
    }
  }, {
    key: 'getScheduledLocalNotifications',
    value: function getScheduledLocalNotifications(callback) {
      RCTPushNotificationManager.getScheduledLocalNotifications(callback);
    }
  }, {
    key: 'addEventListener',
    value: function addEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener;
      if (type === 'notification') {
        listener = PushNotificationEmitter.addListener(DEVICE_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'localNotification') {
        listener = PushNotificationEmitter.addListener(DEVICE_LOCAL_NOTIF_EVENT, function (notifData) {
          handler(new PushNotificationIOS(notifData));
        });
      } else if (type === 'register') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTER_EVENT, function (registrationInfo) {
          handler(registrationInfo.deviceToken);
        });
      } else if (type === 'registrationError') {
        listener = PushNotificationEmitter.addListener(NOTIF_REGISTRATION_ERROR_EVENT, function (errorInfo) {
          handler(errorInfo);
        });
      }
      _notifHandlers.set(type, listener);
    }
  }, {
    key: 'removeEventListener',
    value: function removeEventListener(type, handler) {
      invariant(type === 'notification' || type === 'register' || type === 'registrationError' || type === 'localNotification', 'PushNotificationIOS only supports `notification`, `register`, `registrationError`, and `localNotification` events');
      var listener = _notifHandlers.get(type);
      if (!listener) {
        return;
      }
      listener.remove();
      _notifHandlers.delete(type);
    }
  }, {
    key: 'requestPermissions',
    value: function requestPermissions(permissions) {
      var requestedPermissions = {};
      if (permissions) {
        requestedPermissions = {
          alert: !!permissions.alert,
          badge: !!permissions.badge,
          sound: !!permissions.sound
        };
      } else {
        requestedPermissions = {
          alert: true,
          badge: true,
          sound: true
        };
      }
      return RCTPushNotificationManager.requestPermissions(requestedPermissions);
    }
  }, {
    key: 'abandonPermissions',
    value: function abandonPermissions() {
      RCTPushNotificationManager.abandonPermissions();
    }
  }, {
    key: 'checkPermissions',
    value: function checkPermissions(callback) {
      invariant(typeof callback === 'function', 'Must provide a valid callback');
      RCTPushNotificationManager.checkPermissions(callback);
    }
  }, {
    key: 'getInitialNotification',
    value: function getInitialNotification() {
      return RCTPushNotificationManager.getInitialNotification().then(function (notification) {
        return notification && new PushNotificationIOS(notification);
      });
    }
  }]);

  function PushNotificationIOS(nativeNotif) {
    var _this = this;

    babelHelpers.classCallCheck(this, PushNotificationIOS);

    this._data = {};
    this._remoteNotificationCompleteCalllbackCalled = false;
    this._isRemote = nativeNotif.remote;
    if (this._isRemote) {
      this._notificationId = nativeNotif.notificationId;
    }

    if (nativeNotif.remote) {
      Object.keys(nativeNotif).forEach(function (notifKey) {
        var notifVal = nativeNotif[notifKey];
        if (notifKey === 'aps') {
          _this._alert = notifVal.alert;
          _this._sound = notifVal.sound;
          _this._badgeCount = notifVal.badge;
        } else {
          _this._data[notifKey] = notifVal;
        }
      });
    } else {
      this._badgeCount = nativeNotif.applicationIconBadgeNumber;
      this._sound = nativeNotif.soundName;
      this._alert = nativeNotif.alertBody;
      this._data = nativeNotif.userInfo;
    }
  }

  babelHelpers.createClass(PushNotificationIOS, [{
    key: 'finish',
    value: function finish(fetchResult) {
      if (!this._isRemote || !this._notificationId || this._remoteNotificationCompleteCalllbackCalled) {
        return;
      }
      this._remoteNotificationCompleteCalllbackCalled = true;

      RCTPushNotificationManager.onFinishRemoteNotification(this._notificationId, fetchResult);
    }
  }, {
    key: 'getMessage',
    value: function getMessage() {
      return this._alert;
    }
  }, {
    key: 'getSound',
    value: function getSound() {
      return this._sound;
    }
  }, {
    key: 'getAlert',
    value: function getAlert() {
      return this._alert;
    }
  }, {
    key: 'getBadgeCount',
    value: function getBadgeCount() {
      return this._badgeCount;
    }
  }, {
    key: 'getData',
    value: function getData() {
      return this._data;
    }
  }]);
  return PushNotificationIOS;
}();

PushNotificationIOS.FetchResult = {
  NewData: 'UIBackgroundFetchResultNewData',
  NoData: 'UIBackgroundFetchResultNoData',
  ResultFailed: 'UIBackgroundFetchResultFailed'
};


module.exports = PushNotificationIOS;
}, 393, null, "PushNotificationIOS");
__d(/* Settings */function(global, require, module, exports) {
'use strict';

var Settings = {
  get: function get(key) {
    console.warn('Settings is not yet supported on Android');
    return null;
  },
  set: function set(settings) {
    console.warn('Settings is not yet supported on Android');
  },
  watchKeys: function watchKeys(keys, callback) {
    console.warn('Settings is not yet supported on Android');
    return -1;
  },
  clearWatch: function clearWatch(watchId) {
    console.warn('Settings is not yet supported on Android');
  }
};

module.exports = Settings;
}, 394, null, "Settings");
__d(/* Share */function(global, require, module, exports) {
'use strict';

var Platform = require(56        ); // 56 = Platform

var _require = require(57             ), // 57 = NativeModules
    ActionSheetManager = _require.ActionSheetManager,
    ShareModule = _require.ShareModule;

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var processColor = require(119           ); // 119 = processColor

var Share = function () {
  function Share() {
    babelHelpers.classCallCheck(this, Share);
  }

  babelHelpers.createClass(Share, null, [{
    key: 'share',
    value: function share(content) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      invariant(typeof content === 'object' && content !== null, 'Content to share must be a valid object');
      invariant(typeof content.url === 'string' || typeof content.message === 'string', 'At least one of URL and message is required');
      invariant(typeof options === 'object' && options !== null, 'Options must be a valid object');

      if (Platform.OS === 'android') {
        invariant(!content.title || typeof content.title === 'string', 'Invalid title: title should be a string.');
        return ShareModule.share(content, options.dialogTitle);
      } else if (Platform.OS === 'ios') {
        return new Promise(function (resolve, reject) {
          ActionSheetManager.showShareActionSheetWithOptions(babelHelpers.extends({}, content, options, { tintColor: processColor(options.tintColor) }), function (error) {
            return reject(error);
          }, function (success, activityType) {
            if (success) {
              resolve({
                'action': 'sharedAction',
                'activityType': activityType
              });
            } else {
              resolve({
                'action': 'dismissedAction'
              });
            }
          });
        });
      } else {
        return Promise.reject(new Error('Unsupported platform'));
      }
    }
  }, {
    key: 'sharedAction',
    get: function get() {
      return 'sharedAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return Share;
}();

module.exports = Share;
}, 395, null, "Share");
__d(/* TimePickerAndroid */function(global, require, module, exports) {
'use strict';

var TimePickerModule = require(57             ).TimePickerAndroid; // 57 = NativeModules

var TimePickerAndroid = function () {
  function TimePickerAndroid() {
    babelHelpers.classCallCheck(this, TimePickerAndroid);
  }

  babelHelpers.createClass(TimePickerAndroid, null, [{
    key: 'open',
    value: function open(options) {
      return regeneratorRuntime.async(function open$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              return _context.abrupt('return', TimePickerModule.open(options));

            case 1:
            case 'end':
              return _context.stop();
          }
        }
      }, null, this);
    }
  }, {
    key: 'timeSetAction',
    get: function get() {
      return 'timeSetAction';
    }
  }, {
    key: 'dismissedAction',
    get: function get() {
      return 'dismissedAction';
    }
  }]);
  return TimePickerAndroid;
}();

module.exports = TimePickerAndroid;
}, 396, null, "TimePickerAndroid");
__d(/* Vibration */function(global, require, module, exports) {
'use strict';

var RCTVibration = require(57             ).Vibration; // 57 = NativeModules
var Platform = require(56        ); // 56 = Platform

var _vibrating = false;
var _id = 0;

function vibrateByPattern(pattern) {
  var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (_vibrating) {
    return;
  }
  _vibrating = true;
  if (pattern[0] === 0) {
    RCTVibration.vibrate();
    pattern = pattern.slice(1);
  }
  if (pattern.length === 0) {
    _vibrating = false;
    return;
  }
  setTimeout(function () {
    return vibrateScheduler(++_id, pattern, repeat, 1);
  }, pattern[0]);
}

function vibrateScheduler(id, pattern, repeat, nextIndex) {
  if (!_vibrating || id !== _id) {
    return;
  }
  RCTVibration.vibrate();
  if (nextIndex >= pattern.length) {
    if (repeat) {
      nextIndex = 0;
    } else {
      _vibrating = false;
      return;
    }
  }
  setTimeout(function () {
    return vibrateScheduler(id, pattern, repeat, nextIndex + 1);
  }, pattern[nextIndex]);
}

var Vibration = {
  vibrate: function vibrate() {
    var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 400;
    var repeat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    if (Platform.OS === 'android') {
      if (typeof pattern === 'number') {
        RCTVibration.vibrate(pattern);
      } else if (Array.isArray(pattern)) {
        RCTVibration.vibrateByPattern(pattern, repeat ? 0 : -1);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    } else {
      if (_vibrating) {
        return;
      }
      if (typeof pattern === 'number') {
        RCTVibration.vibrate();
      } else if (Array.isArray(pattern)) {
        vibrateByPattern(pattern, repeat);
      } else {
        throw new Error('Vibration pattern should be a number or array');
      }
    }
  },

  cancel: function cancel() {
    if (Platform.OS === 'ios') {
      _vibrating = false;
    } else {
      RCTVibration.cancel();
    }
  }
};

module.exports = Vibration;
}, 397, null, "Vibration");
__d(/* VibrationIOS */function(global, require, module, exports) {
'use strict';

var warning = require(21                ); // 21 = fbjs/lib/warning

var VibrationIOS = {
  vibrate: function vibrate() {
    warning('VibrationIOS is not supported on this platform!');
  }
};

module.exports = VibrationIOS;
}, 398, null, "VibrationIOS");
__d(/* react/lib/LinkedStateMixin.js */function(global, require, module, exports) {

'use strict';

var ReactLink = require(400          ); // 400 = ./ReactLink
var ReactStateSetters = require(401                  ); // 401 = ./ReactStateSetters

var LinkedStateMixin = {
  linkState: function linkState(key) {
    return new ReactLink(this.state[key], ReactStateSetters.createStateKeySetter(this, key));
  }
};

module.exports = LinkedStateMixin;
}, 399, null, "react/lib/LinkedStateMixin.js");
__d(/* react/lib/ReactLink.js */function(global, require, module, exports) {

'use strict';

var React = require(13       ); // 13 = ./React

function ReactLink(value, requestChange) {
  this.value = value;
  this.requestChange = requestChange;
}

function createLinkTypeChecker(linkType) {
  var shapes = {
    value: linkType === undefined ? React.PropTypes.any.isRequired : linkType.isRequired,
    requestChange: React.PropTypes.func.isRequired
  };
  return React.PropTypes.shape(shapes);
}

ReactLink.PropTypes = {
  link: createLinkTypeChecker
};

module.exports = ReactLink;
}, 400, null, "react/lib/ReactLink.js");
__d(/* react/lib/ReactStateSetters.js */function(global, require, module, exports) {

'use strict';

var ReactStateSetters = {
  createStateSetter: function createStateSetter(component, funcReturningState) {
    return function (a, b, c, d, e, f) {
      var partialState = funcReturningState.call(component, a, b, c, d, e, f);
      if (partialState) {
        component.setState(partialState);
      }
    };
  },

  createStateKeySetter: function createStateKeySetter(component, key) {
    var cache = component.__keySetters || (component.__keySetters = {});
    return cache[key] || (cache[key] = _createStateKeySetter(component, key));
  }
};

function _createStateKeySetter(component, key) {
  var partialState = {};
  return function stateKeySetter(value) {
    partialState[key] = value;
    component.setState(partialState);
  };
}

ReactStateSetters.Mixin = {
  createStateSetter: function createStateSetter(funcReturningState) {
    return ReactStateSetters.createStateSetter(this, funcReturningState);
  },

  createStateKeySetter: function createStateKeySetter(key) {
    return ReactStateSetters.createStateKeySetter(this, key);
  }
};

module.exports = ReactStateSetters;
}, 401, null, "react/lib/ReactStateSetters.js");
__d(/* react/lib/ReactFragment.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ); // 17 = ./reactProdInvariant

var ReactChildren = require(15               ); // 15 = ./ReactChildren
var ReactElement = require(19              ); // 19 = ./ReactElement

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var warning = require(21                ); // 21 = fbjs/lib/warning

var numericPropertyRegex = /^\d+$/;

var warnedAboutNumeric = false;

var ReactFragment = {
  create: function create(object) {
    if (typeof object !== 'object' || !object || Array.isArray(object)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment only accepts a single object. Got: %s', object) : void 0;
      return object;
    }
    if (ReactElement.isValidElement(object)) {
      process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment does not accept a ReactElement ' + 'without a wrapper object.') : void 0;
      return object;
    }

    !(object.nodeType !== 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'React.addons.createFragment(...): Encountered an invalid child; DOM elements are not valid children of React components.') : _prodInvariant('0') : void 0;

    var result = [];

    for (var key in object) {
      if (process.env.NODE_ENV !== 'production') {
        if (!warnedAboutNumeric && numericPropertyRegex.test(key)) {
          process.env.NODE_ENV !== 'production' ? warning(false, 'React.addons.createFragment(...): Child objects should have ' + 'non-numeric keys so ordering is preserved.') : void 0;
          warnedAboutNumeric = true;
        }
      }
      ReactChildren.mapIntoWithKeyPrefixInternal(object[key], result, key, emptyFunction.thatReturnsArgument);
    }

    return result;
  }
};

module.exports = ReactFragment;
}, 402, null, "react/lib/ReactFragment.js");
__d(/* react/lib/update.js */function(global, require, module, exports) {

'use strict';

var _prodInvariant = require(17                    ), // 17 = ./reactProdInvariant
    _assign = require(14             ); // 14 = object-assign

var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var hasOwnProperty = {}.hasOwnProperty;

function shallowCopy(x) {
  if (Array.isArray(x)) {
    return x.concat();
  } else if (x && typeof x === 'object') {
    return _assign(new x.constructor(), x);
  } else {
    return x;
  }
}

var COMMAND_PUSH = '$push';
var COMMAND_UNSHIFT = '$unshift';
var COMMAND_SPLICE = '$splice';
var COMMAND_SET = '$set';
var COMMAND_MERGE = '$merge';
var COMMAND_APPLY = '$apply';

var ALL_COMMANDS_LIST = [COMMAND_PUSH, COMMAND_UNSHIFT, COMMAND_SPLICE, COMMAND_SET, COMMAND_MERGE, COMMAND_APPLY];

var ALL_COMMANDS_SET = {};

ALL_COMMANDS_LIST.forEach(function (command) {
  ALL_COMMANDS_SET[command] = true;
});

function invariantArrayCase(value, spec, command) {
  !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected target of %s to be an array; got %s.', command, value) : _prodInvariant('1', command, value) : void 0;
  var specValue = spec[command];
  !Array.isArray(specValue) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array; got %s. Did you forget to wrap your parameter in an array?', command, specValue) : _prodInvariant('2', command, specValue) : void 0;
}

function update(value, spec) {
  !(typeof spec === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): You provided a key path to update() that did not contain one of %s. Did you forget to include {%s: ...}?', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : _prodInvariant('3', ALL_COMMANDS_LIST.join(', '), COMMAND_SET) : void 0;

  if (hasOwnProperty.call(spec, COMMAND_SET)) {
    !(Object.keys(spec).length === 1) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Cannot have more than one key in an object with %s', COMMAND_SET) : _prodInvariant('4', COMMAND_SET) : void 0;

    return spec[COMMAND_SET];
  }

  var nextValue = shallowCopy(value);

  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
    var mergeObj = spec[COMMAND_MERGE];
    !(mergeObj && typeof mergeObj === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a spec of type \'object\'; got %s', COMMAND_MERGE, mergeObj) : _prodInvariant('5', COMMAND_MERGE, mergeObj) : void 0;
    !(nextValue && typeof nextValue === 'object') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): %s expects a target of type \'object\'; got %s', COMMAND_MERGE, nextValue) : _prodInvariant('6', COMMAND_MERGE, nextValue) : void 0;
    _assign(nextValue, spec[COMMAND_MERGE]);
  }

  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
    invariantArrayCase(value, spec, COMMAND_PUSH);
    spec[COMMAND_PUSH].forEach(function (item) {
      nextValue.push(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
    spec[COMMAND_UNSHIFT].forEach(function (item) {
      nextValue.unshift(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
    !Array.isArray(value) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'Expected %s target to be an array; got %s', COMMAND_SPLICE, value) : _prodInvariant('7', COMMAND_SPLICE, value) : void 0;
    !Array.isArray(spec[COMMAND_SPLICE]) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : _prodInvariant('8', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : void 0;
    spec[COMMAND_SPLICE].forEach(function (args) {
      !Array.isArray(args) ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be an array of arrays; got %s. Did you forget to wrap your parameters in an array?', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : _prodInvariant('8', COMMAND_SPLICE, spec[COMMAND_SPLICE]) : void 0;
      nextValue.splice.apply(nextValue, args);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
    !(typeof spec[COMMAND_APPLY] === 'function') ? process.env.NODE_ENV !== 'production' ? invariant(false, 'update(): expected spec of %s to be a function; got %s.', COMMAND_APPLY, spec[COMMAND_APPLY]) : _prodInvariant('9', COMMAND_APPLY, spec[COMMAND_APPLY]) : void 0;
    nextValue = spec[COMMAND_APPLY](nextValue);
  }

  for (var k in spec) {
    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
      nextValue[k] = update(value[k], spec[k]);
    }
  }

  return nextValue;
}

module.exports = update;
}, 403, null, "react/lib/update.js");
__d(/* throwOnWrongReactAPI */function(global, require, module, exports) {

'use strict';

function throwOnWrongReactAPI(key) {
  throw new Error('Seems you\'re trying to access \'ReactNative.' + key + '\' from the \'react-native\' package. Perhaps you meant to access \'React.' + key + '\' from the \'react\' package instead?\n\nFor example, instead of:\n\n  import React, { Component, View } from \'react-native\';\n\nYou should now do:\n\n  import React, { Component } from \'react\';\n  import { View } from \'react-native\';\n\nCheck the release notes on how to upgrade your code - https://github.com/facebook/react-native/releases/tag/v0.25.1\n');
}

module.exports = throwOnWrongReactAPI;
}, 404, null, "throwOnWrongReactAPI");
__d(/* react-native-splash-screen/index.js */function(global, require, module, exports) {
'use strict';

var _reactNative = require(46            ); // 46 = react-native

module.exports = _reactNative.NativeModules.SplashScreen;
}, 405, null, "react-native-splash-screen/index.js");
__d(/* react-navigation/src/react-navigation.js */function(global, require, module, exports) {

module.exports = {
  get createNavigationContainer() {
    return require(407                          ).default; // 407 = ./createNavigationContainer
  },
  get StateUtils() {
    return require(411           ).default; // 411 = ./StateUtils
  },
  get addNavigationHelpers() {
    return require(410                     ).default; // 410 = ./addNavigationHelpers
  },
  get NavigationActions() {
    return require(409                  ).default; // 409 = ./NavigationActions
  },

  get createNavigator() {
    return require(412                           ).default; // 412 = ./navigators/createNavigator
  },
  get StackNavigator() {
    return require(413                          ).default; // 413 = ./navigators/StackNavigator
  },
  get TabNavigator() {
    return require(442                        ).default; // 442 = ./navigators/TabNavigator
  },
  get DrawerNavigator() {
    return require(458                           ).default; // 458 = ./navigators/DrawerNavigator
  },

  get StackRouter() {
    return require(433                    ).default; // 433 = ./routers/StackRouter
  },
  get TabRouter() {
    return require(443                  ).default; // 443 = ./routers/TabRouter
  },

  get Transitioner() {
    return require(431                   ).default; // 431 = ./views/Transitioner
  },
  get CardStack() {
    return require(415                ).default; // 415 = ./views/CardStack
  },
  get Card() {
    return require(417           ).default; // 417 = ./views/Card
  },

  get Header() {
    return require(420             ).default; // 420 = ./views/Header
  },
  get HeaderTitle() {
    return require(421                  ).default; // 421 = ./views/HeaderTitle
  },
  get HeaderBackButton() {
    return require(422                       ).default; // 422 = ./views/HeaderBackButton
  },

  get DrawerView() {
    return require(460                        ).default; // 460 = ./views/Drawer/DrawerView
  },
  get DrawerItems() {
    return require(463                                  ).default; // 463 = ./views/Drawer/DrawerNavigatorItems
  },

  get TabView() {
    return require(444                      ).default; // 444 = ./views/TabView/TabView
  },
  get TabBarTop() {
    return require(455                        ).default; // 455 = ./views/TabView/TabBarTop
  },
  get TabBarBottom() {
    return require(457                           ).default; // 457 = ./views/TabView/TabBarBottom
  },

  get withNavigation() {
    return require(464                     ).default; // 464 = ./views/withNavigation
  }
};
}, 406, null, "react-navigation/src/react-navigation.js");
__d(/* react-navigation/src/createNavigationContainer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/createNavigationContainer.js';
exports.default = createNavigationContainer;

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var _PlatformHelpers = require(408                ); // 408 = ./PlatformHelpers

var _NavigationActions = require(409                  ); // 409 = ./NavigationActions

var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

var _addNavigationHelpers = require(410                     ); // 410 = ./addNavigationHelpers

var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

function createNavigationContainer(Component, containerOptions) {
  (0, _invariant2.default)(typeof containerOptions === 'undefined', 'containerOptions.URIPrefix has been removed. Pass the uriPrefix prop to the navigator instead');

  var NavigationContainer = function (_React$Component) {
    babelHelpers.inherits(NavigationContainer, _React$Component);

    function NavigationContainer(props) {
      babelHelpers.classCallCheck(this, NavigationContainer);

      var _this = babelHelpers.possibleConstructorReturn(this, (NavigationContainer.__proto__ || Object.getPrototypeOf(NavigationContainer)).call(this, props));

      _this.subs = null;

      _this._handleOpenURL = function (url) {
        var parsedUrl = _this._urlToPathAndParams(url);
        if (parsedUrl) {
          var path = parsedUrl.path,
              params = parsedUrl.params;

          var action = Component.router.getActionForPathAndParams(path, params);
          if (action) {
            _this.dispatch(action);
          }
        }
      };

      _this.dispatch = function (action) {
        var state = _this.state;

        if (!_this._isStateful()) {
          return false;
        }
        var nav = Component.router.getStateForAction(action, state.nav);
        if (nav && nav !== state.nav) {
          _this.setState({ nav: nav }, function () {
            return _this._onNavigationStateChange(state.nav, nav, action);
          });
          return true;
        }
        return false;
      };

      _this._validateProps(props);

      _this.state = {
        nav: _this._isStateful() ? Component.router.getStateForAction(_NavigationActions2.default.init()) : null
      };
      return _this;
    }

    babelHelpers.createClass(NavigationContainer, [{
      key: '_isStateful',
      value: function _isStateful() {
        return !this.props.navigation;
      }
    }, {
      key: '_validateProps',
      value: function _validateProps(props) {
        if (this._isStateful()) {
          return;
        }

        var navigation = props.navigation,
            screenProps = props.screenProps,
            containerProps = babelHelpers.objectWithoutProperties(props, ['navigation', 'screenProps']);


        var keys = Object.keys(containerProps);

        (0, _invariant2.default)(keys.length === 0, 'This navigator has both navigation and container props, so it is ' + ('unclear if it should own its own state. Remove props: "' + keys.join(', ') + '" ') + 'if the navigator should get its state from the navigation prop. If the ' + 'navigator should maintain its own state, do not pass a navigation prop.');
      }
    }, {
      key: '_urlToPathAndParams',
      value: function _urlToPathAndParams(url) {
        var params = {};
        var delimiter = this.props.uriPrefix || '://';
        var path = url.split(delimiter)[1];
        if (!path) {
          path = url;
        }
        return {
          path: path,
          params: params
        };
      }
    }, {
      key: '_onNavigationStateChange',
      value: function _onNavigationStateChange(prevNav, nav, action) {
        if (typeof this.props.onNavigationStateChange === 'undefined' && this._isStateful()) {
          if (console.group) {
            console.group('Navigation Dispatch: ');
            console.log('Action: ', action);
            console.log('New State: ', nav);
            console.log('Last State: ', prevNav);
            console.groupEnd();
          } else {
            console.log('Navigation Dispatch: ', {
              action: action,
              newState: nav,
              lastState: prevNav
            });
          }

          return;
        }

        if (typeof this.props.onNavigationStateChange === 'function') {
          this.props.onNavigationStateChange(prevNav, nav, action);
        }
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._validateProps(nextProps);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        var _this2 = this;

        if (!this._isStateful()) {
          return;
        }

        this.subs = _PlatformHelpers.BackAndroid.addEventListener('backPress', function () {
          return _this2.dispatch(_NavigationActions2.default.back());
        });

        _PlatformHelpers.Linking.addEventListener('url', function (_ref) {
          var url = _ref.url;

          _this2._handleOpenURL(url);
        });

        _PlatformHelpers.Linking.getInitialURL().then(function (url) {
          return url && _this2._handleOpenURL(url);
        });
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        _PlatformHelpers.Linking.removeEventListener('url', this._handleOpenURL);
        this.subs && this.subs.remove();
      }
    }, {
      key: 'render',
      value: function render() {
        var navigation = this.props.navigation;
        if (this._isStateful()) {
          if (!this._navigation || this._navigation.state !== this.state.nav) {
            this._navigation = (0, _addNavigationHelpers2.default)({
              dispatch: this.dispatch,
              state: this.state.nav
            });
          }
          navigation = this._navigation;
        }
        return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, { navigation: navigation, __source: {
            fileName: _jsxFileName,
            lineNumber: 202
          }
        }));
      }
    }]);
    return NavigationContainer;
  }(_react2.default.Component);

  NavigationContainer.router = Component.router;


  return NavigationContainer;
}
}, 407, null, "react-navigation/src/createNavigationContainer.js");
__d(/* react-navigation/src/PlatformHelpers.native.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Linking = exports.BackAndroid = undefined;

var _reactNative = require(46            ); // 46 = react-native

var BackAndroid = _reactNative.BackHandler || _reactNative.BackAndroid;

exports.BackAndroid = BackAndroid;
exports.Linking = _reactNative.Linking;
}, 408, null, "react-navigation/src/PlatformHelpers.native.js");
__d(/* react-navigation/src/NavigationActions.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});


var BACK = 'Navigation/BACK';
var INIT = 'Navigation/INIT';
var NAVIGATE = 'Navigation/NAVIGATE';
var RESET = 'Navigation/RESET';
var SET_PARAMS = 'Navigation/SET_PARAMS';
var URI = 'Navigation/URI';

var createAction = function createAction(type) {
  return function () {
    var payload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return babelHelpers.extends({
      type: type
    }, payload);
  };
};

var back = createAction(BACK);
var init = createAction(INIT);
var navigate = createAction(NAVIGATE);
var reset = createAction(RESET);
var setParams = createAction(SET_PARAMS);
var uri = createAction(URI);

var deprecatedActionMap = {
  Back: BACK,
  Init: INIT,
  Navigate: NAVIGATE,
  Reset: RESET,
  SetParams: SET_PARAMS,
  Uri: URI
};

var mapDeprecatedActionAndWarn = function mapDeprecatedActionAndWarn(action) {
  var mappedType = deprecatedActionMap[action.type];
  if (!mappedType) {
    return action;
  }

  console.warn(['The action type \'' + action.type + '\' has been renamed to \'' + mappedType + '\'.', '\'' + action.type + '\' will continue to work while in beta but will be removed', 'in the first major release. Moving forward, you should use the', 'action constants and action creators exported by this library in', "the 'actions' object.", 'See https://github.com/react-community/react-navigation/pull/120 for', 'more details.'].join(' '));

  return babelHelpers.extends({}, action, {
    type: deprecatedActionMap[action.type]
  });
};

exports.default = {
  BACK: BACK,
  INIT: INIT,
  NAVIGATE: NAVIGATE,
  RESET: RESET,
  SET_PARAMS: SET_PARAMS,
  URI: URI,

  back: back,
  init: init,
  navigate: navigate,
  reset: reset,
  setParams: setParams,
  uri: uri,

  mapDeprecatedActionAndWarn: mapDeprecatedActionAndWarn
};
}, 409, null, "react-navigation/src/NavigationActions.js");
__d(/* react-navigation/src/addNavigationHelpers.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (navigation) {
  return babelHelpers.extends({}, navigation, {
    goBack: function goBack(key) {
      return navigation.dispatch(_NavigationActions2.default.back({
        key: key === undefined ? navigation.state.key : key
      }));
    },
    navigate: function navigate(routeName, params, action) {
      return navigation.dispatch(_NavigationActions2.default.navigate({
        routeName: routeName,
        params: params,
        action: action
      }));
    },

    setParams: function setParams(params) {
      return navigation.dispatch(_NavigationActions2.default.setParams({
        params: params,
        key: navigation.state.key
      }));
    }
  });
};

var _NavigationActions = require(409                  ); // 409 = ./NavigationActions

var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);
}, 410, null, "react-navigation/src/addNavigationHelpers.js");
__d(/* react-navigation/src/StateUtils.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var StateUtils = {
  get: function get(state, key) {
    return state.routes.find(function (route) {
      return route.key === key;
    }) || null;
  },
  indexOf: function indexOf(state, key) {
    return state.routes.map(function (route) {
      return route.key;
    }).indexOf(key);
  },
  has: function has(state, key) {
    return !!state.routes.some(function (route) {
      return route.key === key;
    });
  },
  push: function push(state, route) {
    (0, _invariant2.default)(StateUtils.indexOf(state, route.key) === -1, 'should not push route with duplicated key %s', route.key);

    var routes = state.routes.slice();
    routes.push(route);

    return babelHelpers.extends({}, state, {
      index: routes.length - 1,
      routes: routes
    });
  },
  pop: function pop(state) {
    if (state.index <= 0) {
      return state;
    }
    var routes = state.routes.slice(0, -1);
    return babelHelpers.extends({}, state, {
      index: routes.length - 1,
      routes: routes
    });
  },
  jumpToIndex: function jumpToIndex(state, index) {
    if (index === state.index) {
      return state;
    }

    (0, _invariant2.default)(!!state.routes[index], 'invalid index %s to jump to', index);

    return babelHelpers.extends({}, state, {
      index: index
    });
  },
  jumpTo: function jumpTo(state, key) {
    var index = StateUtils.indexOf(state, key);
    return StateUtils.jumpToIndex(state, index);
  },
  back: function back(state) {
    var index = state.index - 1;
    var route = state.routes[index];
    return route ? StateUtils.jumpToIndex(state, index) : state;
  },
  forward: function forward(state) {
    var index = state.index + 1;
    var route = state.routes[index];
    return route ? StateUtils.jumpToIndex(state, index) : state;
  },
  replaceAt: function replaceAt(state, key, route) {
    var index = StateUtils.indexOf(state, key);
    return StateUtils.replaceAtIndex(state, index, route);
  },
  replaceAtIndex: function replaceAtIndex(state, index, route) {
    (0, _invariant2.default)(!!state.routes[index], 'invalid index %s for replacing route %s', index, route.key);

    if (state.routes[index] === route) {
      return state;
    }

    var routes = state.routes.slice();
    routes[index] = route;

    return babelHelpers.extends({}, state, {
      index: index,
      routes: routes
    });
  },
  reset: function reset(state, routes, index) {
    (0, _invariant2.default)(routes.length && Array.isArray(routes), 'invalid routes to replace');

    var nextIndex = index === undefined ? routes.length - 1 : index;

    if (state.routes.length === routes.length && state.index === nextIndex) {
      var compare = function compare(route, ii) {
        return routes[ii] === route;
      };
      if (state.routes.every(compare)) {
        return state;
      }
    }

    (0, _invariant2.default)(!!routes[nextIndex], 'invalid index %s to reset', nextIndex);

    return babelHelpers.extends({}, state, {
      index: nextIndex,
      routes: routes
    });
  }
};

exports.default = StateUtils;
}, 411, null, "react-navigation/src/StateUtils.js");
__d(/* react-navigation/src/navigators/createNavigator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/navigators/createNavigator.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var createNavigator = function createNavigator(router, routeConfigs, navigatorConfig, navigatorType) {
  return function (View) {
    var Navigator = function (_React$Component) {
      babelHelpers.inherits(Navigator, _React$Component);

      function Navigator() {
        babelHelpers.classCallCheck(this, Navigator);
        return babelHelpers.possibleConstructorReturn(this, (Navigator.__proto__ || Object.getPrototypeOf(Navigator)).apply(this, arguments));
      }

      babelHelpers.createClass(Navigator, [{
        key: 'render',
        value: function render() {
          return _react2.default.createElement(View, babelHelpers.extends({}, this.props, { router: router, __source: {
              fileName: _jsxFileName,
              lineNumber: 33
            }
          }));
        }
      }]);
      return Navigator;
    }(_react2.default.Component);

    Navigator.router = router;
    Navigator.routeConfigs = routeConfigs;
    Navigator.navigatorConfig = navigatorConfig;
    Navigator.navigatorType = navigatorType;


    return Navigator;
  };
};

exports.default = createNavigator;
}, 412, null, "react-navigation/src/navigators/createNavigator.js");
__d(/* react-navigation/src/navigators/StackNavigator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/navigators/StackNavigator.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _createNavigationContainer = require(407                           ); // 407 = ../createNavigationContainer

var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

var _createNavigator = require(412                ); // 412 = ./createNavigator

var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

var _CardStackTransitioner = require(414                             ); // 414 = ../views/CardStackTransitioner

var _CardStackTransitioner2 = babelHelpers.interopRequireDefault(_CardStackTransitioner);

var _StackRouter = require(433                     ); // 433 = ../routers/StackRouter

var _StackRouter2 = babelHelpers.interopRequireDefault(_StackRouter);

var _NavigatorTypes = require(441               ); // 441 = ./NavigatorTypes

var _NavigatorTypes2 = babelHelpers.interopRequireDefault(_NavigatorTypes);

exports.default = function (routeConfigMap) {
  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var initialRouteName = stackConfig.initialRouteName,
      initialRouteParams = stackConfig.initialRouteParams,
      paths = stackConfig.paths,
      headerMode = stackConfig.headerMode,
      mode = stackConfig.mode,
      cardStyle = stackConfig.cardStyle,
      transitionConfig = stackConfig.transitionConfig,
      onTransitionStart = stackConfig.onTransitionStart,
      onTransitionEnd = stackConfig.onTransitionEnd,
      navigationOptions = stackConfig.navigationOptions;

  var stackRouterConfig = {
    initialRouteName: initialRouteName,
    initialRouteParams: initialRouteParams,
    paths: paths,
    navigationOptions: navigationOptions
  };

  var router = (0, _StackRouter2.default)(routeConfigMap, stackRouterConfig);

  var navigator = (0, _createNavigator2.default)(router, routeConfigMap, stackConfig, _NavigatorTypes2.default.STACK)(function (props) {
    return _react2.default.createElement(_CardStackTransitioner2.default, babelHelpers.extends({}, props, {
      headerMode: headerMode,
      mode: mode,
      cardStyle: cardStyle,
      transitionConfig: transitionConfig,
      onTransitionStart: onTransitionStart,
      onTransitionEnd: onTransitionEnd,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 52
      }
    }));
  });

  return (0, _createNavigationContainer2.default)(navigator, stackConfig.containerOptions);
};
}, 413, null, "react-navigation/src/navigators/StackNavigator.js");
__d(/* react-navigation/src/views/CardStackTransitioner.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/CardStackTransitioner.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _CardStack = require(415          ); // 415 = ./CardStack

var _CardStack2 = babelHelpers.interopRequireDefault(_CardStack);

var _CardStackStyleInterpolator = require(430                           ); // 430 = ./CardStackStyleInterpolator

var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

var _Transitioner = require(431             ); // 431 = ./Transitioner

var _Transitioner2 = babelHelpers.interopRequireDefault(_Transitioner);

var _TransitionConfigs = require(429                  ); // 429 = ./TransitionConfigs

var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

var NativeAnimatedModule = _reactNative.NativeModules && _reactNative.NativeModules.NativeAnimatedModule;

var CardStackTransitioner = function (_Component) {
  babelHelpers.inherits(CardStackTransitioner, _Component);

  function CardStackTransitioner() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, CardStackTransitioner);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStackTransitioner.__proto__ || Object.getPrototypeOf(CardStackTransitioner)).call.apply(_ref, [this].concat(args))), _this), _this._configureTransition = function (transitionProps, prevTransitionProps) {
      var isModal = _this.props.mode === 'modal';

      var transitionSpec = babelHelpers.extends({}, _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, transitionProps, prevTransitionProps, isModal).transitionSpec);
      if (!!NativeAnimatedModule && _CardStackStyleInterpolator2.default.canUseNativeDriver(isModal)) {
        transitionSpec.useNativeDriver = true;
      }
      return transitionSpec;
    }, _this._render = function (props) {
      var _this$props = _this.props,
          screenProps = _this$props.screenProps,
          headerMode = _this$props.headerMode,
          mode = _this$props.mode,
          router = _this$props.router,
          cardStyle = _this$props.cardStyle,
          transitionConfig = _this$props.transitionConfig,
          style = _this$props.style;

      return _react2.default.createElement(_CardStack2.default, babelHelpers.extends({
        screenProps: screenProps,
        headerMode: headerMode,
        mode: mode,
        router: router,
        cardStyle: cardStyle,
        transitionConfig: transitionConfig,
        style: style
      }, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 110
        }
      }));
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(CardStackTransitioner, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(_Transitioner2.default, {
        configureTransition: this._configureTransition,
        navigation: this.props.navigation,
        render: this._render,
        style: this.props.style,
        onTransitionStart: this.props.onTransitionStart,
        onTransitionEnd: this.props.onTransitionEnd,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 60
        }
      });
    }
  }]);
  return CardStackTransitioner;
}(_react.Component);

CardStackTransitioner.defaultProps = {
  mode: 'card'
};
exports.default = CardStackTransitioner;
}, 414, null, "react-navigation/src/views/CardStackTransitioner.js");
__d(/* react-navigation/src/views/CardStack.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/CardStack.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _clamp = require(416    ); // 416 = clamp

var _clamp2 = babelHelpers.interopRequireDefault(_clamp);

var _reactNative = require(46            ); // 46 = react-native

var _Card = require(417     ); // 417 = ./Card

var _Card2 = babelHelpers.interopRequireDefault(_Card);

var _Header = require(420       ); // 420 = ./Header

var _Header2 = babelHelpers.interopRequireDefault(_Header);

var _NavigationActions = require(409                   ); // 409 = ../NavigationActions

var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

var _addNavigationHelpers = require(410                      ); // 410 = ../addNavigationHelpers

var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

var _SceneView = require(426          ); // 426 = ./SceneView

var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

var _TransitionConfigs = require(429                  ); // 429 = ./TransitionConfigs

var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

var emptyFunction = function emptyFunction() {};

var ANIMATION_DURATION = 500;

var POSITION_THRESHOLD = 1 / 2;

var RESPOND_THRESHOLD = 20;

var GESTURE_RESPONSE_DISTANCE_HORIZONTAL = 25;
var GESTURE_RESPONSE_DISTANCE_VERTICAL = 135;

var animatedSubscribeValue = function animatedSubscribeValue(animatedValue) {
  if (!animatedValue.__isNative) {
    return;
  }
  if (Object.keys(animatedValue._listeners).length === 0) {
    animatedValue.addListener(emptyFunction);
  }
};

var CardStack = function (_Component) {
  babelHelpers.inherits(CardStack, _Component);

  function CardStack() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, CardStack);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = CardStack.__proto__ || Object.getPrototypeOf(CardStack)).call.apply(_ref, [this].concat(args))), _this), _this._gestureStartValue = 0, _this._isResponding = false, _this._immediateIndex = null, _this._screenDetails = {}, _this._getScreenDetails = function (scene) {
      var _this$props = _this.props,
          screenProps = _this$props.screenProps,
          navigation = _this$props.navigation,
          router = _this$props.router;

      var screenDetails = _this._screenDetails[scene.key];
      if (!screenDetails || screenDetails.state !== scene.route) {
        var screenNavigation = (0, _addNavigationHelpers2.default)(babelHelpers.extends({}, navigation, {
          state: scene.route
        }));
        screenDetails = {
          state: scene.route,
          navigation: screenNavigation,
          options: router.getScreenOptions(screenNavigation, screenProps)
        };
        _this._screenDetails[scene.key] = screenDetails;
      }
      return screenDetails;
    }, _this._renderCard = function (scene) {
      var isModal = _this.props.mode === 'modal';

      var _TransitionConfigs$ge = _TransitionConfigs2.default.getTransitionConfig(_this.props.transitionConfig, {}, {}, isModal),
          screenInterpolator = _TransitionConfigs$ge.screenInterpolator;

      var style = screenInterpolator && screenInterpolator(babelHelpers.extends({}, _this.props, { scene: scene }));

      var SceneComponent = _this.props.router.getComponentForRouteName(scene.route.routeName);

      return _react2.default.createElement(
        _Card2.default,
        babelHelpers.extends({}, _this.props, {
          key: 'card_' + scene.key,
          style: [style, _this.props.cardStyle],
          scene: scene,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 430
          }
        }),
        _this._renderInnerScene(SceneComponent, scene)
      );
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(CardStack, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(props) {
      var _this2 = this;

      if (props.screenProps !== this.props.screenProps) {
        this._screenDetails = {};
      }
      props.scenes.forEach(function (newScene) {
        if (_this2._screenDetails[newScene.key] && _this2._screenDetails[newScene.key].state !== newScene.route) {
          _this2._screenDetails[newScene.key] = null;
        }
      });
    }
  }, {
    key: '_renderHeader',
    value: function _renderHeader(scene, headerMode) {
      var header = this._getScreenDetails(scene).options.header;

      if (typeof header !== 'undefined' && typeof header !== 'function') {
        return header;
      }

      var renderHeader = header || function (props) {
        return _react2.default.createElement(_Header2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 173
          }
        }));
      };

      var _props = this.props,
          mode = _props.mode,
          passProps = babelHelpers.objectWithoutProperties(_props, ['mode']);


      return renderHeader(babelHelpers.extends({}, passProps, {
        scene: scene,
        mode: headerMode,
        getScreenDetails: this._getScreenDetails
      }));
    }
  }, {
    key: '_animatedSubscribe',
    value: function _animatedSubscribe(props) {
      animatedSubscribeValue(props.layout.width);
      animatedSubscribeValue(props.layout.height);
      animatedSubscribeValue(props.position);
    }
  }, {
    key: '_reset',
    value: function _reset(resetToIndex, duration) {
      _reactNative.Animated.timing(this.props.position, {
        toValue: resetToIndex,
        duration: duration,
        easing: _reactNative.Easing.linear(),
        useNativeDriver: this.props.position.__isNative
      }).start();
    }
  }, {
    key: '_goBack',
    value: function _goBack(backFromIndex, duration) {
      var _this3 = this;

      var _props2 = this.props,
          navigation = _props2.navigation,
          position = _props2.position,
          scenes = _props2.scenes;

      var toValue = Math.max(backFromIndex - 1, 0);

      this._immediateIndex = toValue;

      _reactNative.Animated.timing(position, {
        toValue: toValue,
        duration: duration,
        easing: _reactNative.Easing.linear(),
        useNativeDriver: position.__isNative
      }).start(function () {
        _this3._immediateIndex = null;
        var backFromScene = scenes.find(function (s) {
          return s.index === toValue + 1;
        });
        if (!_this3._isResponding && backFromScene) {
          navigation.dispatch(_NavigationActions2.default.back({ key: backFromScene.route.key }));
        }
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var _this4 = this;

      var floatingHeader = null;
      var headerMode = this._getHeaderMode();
      if (headerMode === 'float') {
        floatingHeader = this._renderHeader(this.props.scene, headerMode);
      }
      var _props3 = this.props,
          navigation = _props3.navigation,
          position = _props3.position,
          layout = _props3.layout,
          scene = _props3.scene,
          scenes = _props3.scenes,
          mode = _props3.mode;
      var index = navigation.state.index;

      var isVertical = mode === 'modal';

      var responder = _reactNative.PanResponder.create({
        onPanResponderTerminate: function onPanResponderTerminate() {
          _this4._isResponding = false;
          _this4._reset(index, 0);
        },
        onPanResponderGrant: function onPanResponderGrant() {
          position.stopAnimation(function (value) {
            _this4._isResponding = true;
            _this4._gestureStartValue = value;
          });
        },
        onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(event, gesture) {
          if (index !== scene.index) {
            return false;
          }
          var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;
          var currentDragDistance = gesture[isVertical ? 'dy' : 'dx'];
          var currentDragPosition = event.nativeEvent[isVertical ? 'pageY' : 'pageX'];
          var axisLength = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var axisHasBeenMeasured = !!axisLength;

          var screenEdgeDistance = currentDragPosition - currentDragDistance;

          var gestureResponseDistance = isVertical ? GESTURE_RESPONSE_DISTANCE_VERTICAL : GESTURE_RESPONSE_DISTANCE_HORIZONTAL;

          if (screenEdgeDistance > gestureResponseDistance) {
            return false;
          }

          var hasDraggedEnough = Math.abs(currentDragDistance) > RESPOND_THRESHOLD;

          var isOnFirstCard = immediateIndex === 0;
          var shouldSetResponder = hasDraggedEnough && axisHasBeenMeasured && !isOnFirstCard;
          return shouldSetResponder;
        },
        onPanResponderMove: function onPanResponderMove(event, gesture) {
          var startValue = _this4._gestureStartValue;
          var axis = isVertical ? 'dy' : 'dx';
          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var currentValue = _reactNative.I18nManager.isRTL && axis === 'dx' ? startValue + gesture[axis] / axisDistance : startValue - gesture[axis] / axisDistance;
          var value = (0, _clamp2.default)(index - 1, currentValue, index);
          position.setValue(value);
        },
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return false;
        },
        onPanResponderRelease: function onPanResponderRelease(event, gesture) {
          if (!_this4._isResponding) {
            return;
          }
          _this4._isResponding = false;

          var immediateIndex = _this4._immediateIndex == null ? index : _this4._immediateIndex;

          var axisDistance = isVertical ? layout.height.__getValue() : layout.width.__getValue();
          var movedDistance = gesture[isVertical ? 'moveY' : 'moveX'];
          var defaultVelocity = axisDistance / ANIMATION_DURATION;
          var gestureVelocity = gesture[isVertical ? 'vy' : 'vx'];
          var velocity = Math.max(gestureVelocity, defaultVelocity);
          var resetDuration = movedDistance / velocity;
          var goBackDuration = (axisDistance - movedDistance) / velocity;

          position.stopAnimation(function (value) {
            if (gestureVelocity < -0.5) {
              _this4._reset(immediateIndex, resetDuration);
              return;
            }
            if (gestureVelocity > 0.5) {
              _this4._goBack(immediateIndex, goBackDuration);
              return;
            }

            if (value <= index - POSITION_THRESHOLD) {
              _this4._goBack(immediateIndex, goBackDuration);
            } else {
              _this4._reset(immediateIndex, resetDuration);
            }
          });
        }
      });

      var _getScreenDetails = this._getScreenDetails(scene),
          options = _getScreenDetails.options;

      var gesturesEnabled = typeof options.gesturesEnabled === 'boolean' ? options.gesturesEnabled : _reactNative.Platform.OS === 'ios';

      var handlers = gesturesEnabled ? responder.panHandlers : {};

      return _react2.default.createElement(
        _reactNative.View,
        babelHelpers.extends({}, handlers, { style: styles.container, __source: {
            fileName: _jsxFileName,
            lineNumber: 363
          }
        }),
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.scenes, __source: {
              fileName: _jsxFileName,
              lineNumber: 364
            }
          },
          scenes.map(function (s) {
            return _this4._renderCard(s);
          })
        ),
        floatingHeader
      );
    }
  }, {
    key: '_getHeaderMode',
    value: function _getHeaderMode() {
      if (this.props.headerMode) {
        return this.props.headerMode;
      }
      if (_reactNative.Platform.OS === 'android' || this.props.mode === 'modal') {
        return 'screen';
      }
      return 'float';
    }
  }, {
    key: '_renderInnerScene',
    value: function _renderInnerScene(SceneComponent, scene) {
      var _getScreenDetails2 = this._getScreenDetails(scene),
          navigation = _getScreenDetails2.navigation;

      var screenProps = this.props.screenProps;

      var headerMode = this._getHeaderMode();
      if (headerMode === 'screen') {
        return _react2.default.createElement(
          _reactNative.View,
          { style: styles.container, __source: {
              fileName: _jsxFileName,
              lineNumber: 391
            }
          },
          _react2.default.createElement(
            _reactNative.View,
            { style: { flex: 1 }, __source: {
                fileName: _jsxFileName,
                lineNumber: 392
              }
            },
            _react2.default.createElement(_SceneView2.default, {
              screenProps: screenProps,
              navigation: navigation,
              component: SceneComponent,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 393
              }
            })
          ),
          this._renderHeader(scene, headerMode)
        );
      }
      return _react2.default.createElement(_SceneView2.default, {
        screenProps: this.props.screenProps,
        navigation: navigation,
        component: SceneComponent,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 404
        }
      });
    }
  }]);
  return CardStack;
}(_react.Component);

var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,

    flexDirection: 'column-reverse'
  },
  scenes: {
    flex: 1
  }
});

exports.default = CardStack;
}, 415, null, "react-navigation/src/views/CardStack.js");
__d(/* clamp/index.js */function(global, require, module, exports) {module.exports = clamp;

function clamp(value, min, max) {
  return min < max ? value < min ? min : value > max ? max : value : value < max ? max : value > min ? min : value;
}
}, 416, null, "clamp/index.js");
__d(/* react-navigation/src/views/Card.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/Card.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _PointerEventsContainer = require(418                       ); // 418 = ./PointerEventsContainer

var _PointerEventsContainer2 = babelHelpers.interopRequireDefault(_PointerEventsContainer);

var Card = function (_React$Component) {
  babelHelpers.inherits(Card, _React$Component);

  function Card() {
    babelHelpers.classCallCheck(this, Card);
    return babelHelpers.possibleConstructorReturn(this, (Card.__proto__ || Object.getPrototypeOf(Card)).apply(this, arguments));
  }

  babelHelpers.createClass(Card, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          pointerEvents = _props.pointerEvents,
          style = _props.style;

      return _react2.default.createElement(
        _reactNative.Animated.View,
        {
          pointerEvents: pointerEvents,
          ref: this.props.onComponentRef,
          style: [styles.main, style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 27
          }
        },
        children
      );
    }
  }]);
  return Card;
}(_react2.default.Component);

var styles = _reactNative.StyleSheet.create({
  main: {
    backgroundColor: '#E9E9EF',
    bottom: 0,
    left: 0,
    position: 'absolute',
    right: 0,
    shadowColor: 'black',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.4,
    shadowRadius: 10,
    top: 0
  }
});

Card = (0, _PointerEventsContainer2.default)(Card);

exports.default = Card;
}, 417, null, "react-navigation/src/views/Card.js");
__d(/* react-navigation/src/views/PointerEventsContainer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/PointerEventsContainer.js';
exports.default = create;

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var _AnimatedValueSubscription = require(419                          ); // 419 = ./AnimatedValueSubscription

var _AnimatedValueSubscription2 = babelHelpers.interopRequireDefault(_AnimatedValueSubscription);

var MIN_POSITION_OFFSET = 0.01;

function create(Component) {
  var Container = function (_React$Component) {
    babelHelpers.inherits(Container, _React$Component);

    function Container(props, context) {
      babelHelpers.classCallCheck(this, Container);

      var _this = babelHelpers.possibleConstructorReturn(this, (Container.__proto__ || Object.getPrototypeOf(Container)).call(this, props, context));

      _this._pointerEvents = _this._computePointerEvents();
      return _this;
    }

    babelHelpers.createClass(Container, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._onPositionChange = this._onPositionChange.bind(this);
        this._onComponentRef = this._onComponentRef.bind(this);
      }
    }, {
      key: 'componentDidMount',
      value: function componentDidMount() {
        this._bindPosition(this.props);
      }
    }, {
      key: 'componentWillUnmount',
      value: function componentWillUnmount() {
        this._positionListener && this._positionListener.remove();
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._bindPosition(nextProps);
      }
    }, {
      key: 'render',
      value: function render() {
        this._pointerEvents = this._computePointerEvents();
        return _react2.default.createElement(Component, babelHelpers.extends({}, this.props, {
          pointerEvents: this._pointerEvents,
          onComponentRef: this._onComponentRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 55
          }
        }));
      }
    }, {
      key: '_onComponentRef',
      value: function _onComponentRef(component) {
        this._component = component;
        if (component) {
          (0, _invariant2.default)(typeof component.setNativeProps === 'function', 'component must implement method `setNativeProps`');
        }
      }
    }, {
      key: '_bindPosition',
      value: function _bindPosition(props) {
        this._positionListener && this._positionListener.remove();
        this._positionListener = new _AnimatedValueSubscription2.default(props.position, this._onPositionChange);
      }
    }, {
      key: '_onPositionChange',
      value: function _onPositionChange() {
        if (this._component) {
          var pointerEvents = this._computePointerEvents();
          if (this._pointerEvents !== pointerEvents) {
            this._pointerEvents = pointerEvents;
            this._component.setNativeProps({ pointerEvents: pointerEvents });
          }
        }
      }
    }, {
      key: '_computePointerEvents',
      value: function _computePointerEvents() {
        var _props = this.props,
            navigation = _props.navigation,
            position = _props.position,
            scene = _props.scene;


        if (scene.isStale || navigation.state.index !== scene.index) {
          return scene.index > navigation.state.index ? 'box-only' : 'none';
        }

        var offset = position.__getAnimatedValue() - navigation.state.index;
        if (Math.abs(offset) > MIN_POSITION_OFFSET) {
          return 'box-only';
        }

        return 'auto';
      }
    }]);
    return Container;
  }(_react2.default.Component);

  return Container;
}
}, 418, null, "react-navigation/src/views/PointerEventsContainer.js");
__d(/* react-navigation/src/views/AnimatedValueSubscription.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require(46            ); // 46 = react-native

var AnimatedValueSubscription = function () {
  function AnimatedValueSubscription(value, callback) {
    babelHelpers.classCallCheck(this, AnimatedValueSubscription);

    this._value = value;
    this._token = value.addListener(callback);
  }

  babelHelpers.createClass(AnimatedValueSubscription, [{
    key: 'remove',
    value: function remove() {
      this._value.removeListener(this._token);
    }
  }]);
  return AnimatedValueSubscription;
}();

exports.default = AnimatedValueSubscription;
}, 419, null, "react-navigation/src/views/AnimatedValueSubscription.js");
__d(/* react-navigation/src/views/Header.js */function(global, require, module, exports) {

'no babel-plugin-flow-react-proptypes';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/Header.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _HeaderTitle = require(421            ); // 421 = ./HeaderTitle

var _HeaderTitle2 = babelHelpers.interopRequireDefault(_HeaderTitle);

var _HeaderBackButton = require(422                 ); // 422 = ./HeaderBackButton

var _HeaderBackButton2 = babelHelpers.interopRequireDefault(_HeaderBackButton);

var _HeaderStyleInterpolator = require(425                        ); // 425 = ./HeaderStyleInterpolator

var _HeaderStyleInterpolator2 = babelHelpers.interopRequireDefault(_HeaderStyleInterpolator);

var APPBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 44 : 56;
var STATUSBAR_HEIGHT = _reactNative.Platform.OS === 'ios' ? 20 : 0;
var TITLE_OFFSET = _reactNative.Platform.OS === 'ios' ? 70 : 40;

var Header = function (_React$PureComponent) {
  babelHelpers.inherits(Header, _React$PureComponent);

  function Header() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, Header);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = Header.__proto__ || Object.getPrototypeOf(Header)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      widths: {}
    }, _this._renderTitleComponent = function (props) {
      var details = _this.props.getScreenDetails(props.scene);
      var headerTitle = details.options.headerTitle;
      if (headerTitle && typeof headerTitle !== 'string') {
        return headerTitle;
      }
      var titleString = _this._getHeaderTitleString(props.scene);

      var titleStyle = details.options.headerTitleStyle;
      var color = details.options.headerTintColor;

      var onLayoutIOS = _reactNative.Platform.OS === 'ios' ? function (e) {
        _this.setState({
          widths: babelHelpers.extends({}, _this.state.widths, babelHelpers.defineProperty({}, props.scene.key, e.nativeEvent.layout.width))
        });
      } : undefined;

      return _react2.default.createElement(
        _HeaderTitle2.default,
        {
          onLayout: onLayoutIOS,
          style: [color ? { color: color } : null, titleStyle],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 105
          }
        },
        titleString
      );
    }, _this._renderLeftComponent = function (props) {
      var options = _this.props.getScreenDetails(props.scene).options;
      if (typeof options.headerLeft !== 'undefined') {
        return options.headerLeft;
      }
      if (props.scene.index === 0) {
        return null;
      }
      var backButtonTitle = _this._getBackButtonTitleString(props.scene);
      var truncatedBackButtonTitle = _this._getTruncatedBackButtonTitle(props.scene);
      var width = _this.state.widths[props.scene.key] ? (_this.props.layout.initWidth - _this.state.widths[props.scene.key]) / 2 : undefined;
      return _react2.default.createElement(_HeaderBackButton2.default, {
        onPress: function onPress() {
          _this.props.navigation.goBack(null);
        },
        pressColorAndroid: options.headerPressColorAndroid,
        tintColor: options.headerTintColor,
        title: backButtonTitle,
        truncatedTitle: truncatedBackButtonTitle,
        titleStyle: options.headerBackTitleStyle,
        width: width,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 130
        }
      });
    }, _this._renderRightComponent = function (props) {
      var details = _this.props.getScreenDetails(props.scene);
      var headerRight = details.options.headerRight;

      return headerRight || null;
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(Header, [{
    key: '_getHeaderTitleString',
    value: function _getHeaderTitleString(scene) {
      var sceneOptions = this.props.getScreenDetails(scene).options;
      if (typeof sceneOptions.headerTitle === 'string') {
        return sceneOptions.headerTitle;
      }
      return sceneOptions.title;
    }
  }, {
    key: '_getLastScene',
    value: function _getLastScene(scene) {
      return this.props.scenes.find(function (s) {
        return s.index === scene.index - 1;
      });
    }
  }, {
    key: '_getBackButtonTitleString',
    value: function _getBackButtonTitleString(scene) {
      var lastScene = this._getLastScene(scene);
      if (!lastScene) {
        return null;
      }
      var headerBackTitle = this.props.getScreenDetails(lastScene).options.headerBackTitle;

      if (headerBackTitle || headerBackTitle === null) {
        return headerBackTitle;
      }
      return this._getHeaderTitleString(lastScene);
    }
  }, {
    key: '_getTruncatedBackButtonTitle',
    value: function _getTruncatedBackButtonTitle(scene) {
      var lastScene = this._getLastScene(scene);
      if (!lastScene) {
        return null;
      }
      return this.props.getScreenDetails(lastScene).options.headerTruncatedBackTitle;
    }
  }, {
    key: '_renderLeft',
    value: function _renderLeft(props) {
      return this._renderSubView(props, 'left', this._renderLeftComponent, _HeaderStyleInterpolator2.default.forLeft);
    }
  }, {
    key: '_renderTitle',
    value: function _renderTitle(props, options) {
      var style = {};

      if (_reactNative.Platform.OS === 'android') {
        if (!options.hasLeftComponent) {
          style.left = 0;
        }
        if (!options.hasRightComponent) {
          style.right = 0;
        }
      }

      return this._renderSubView(babelHelpers.extends({}, props, { style: style }), 'title', this._renderTitleComponent, _HeaderStyleInterpolator2.default.forCenter);
    }
  }, {
    key: '_renderRight',
    value: function _renderRight(props) {
      return this._renderSubView(props, 'right', this._renderRightComponent, _HeaderStyleInterpolator2.default.forRight);
    }
  }, {
    key: '_renderSubView',
    value: function _renderSubView(props, name, renderer, styleInterpolator) {
      var scene = props.scene;
      var index = scene.index,
          isStale = scene.isStale,
          key = scene.key;


      var offset = this.props.navigation.state.index - index;

      if (Math.abs(offset) > 2) {
        return null;
      }

      var subView = renderer(props);

      if (subView == null) {
        return null;
      }

      var pointerEvents = offset !== 0 || isStale ? 'none' : 'box-none';

      return _react2.default.createElement(
        _reactNative.Animated.View,
        {
          pointerEvents: pointerEvents,
          key: name + '_' + key,
          style: [styles.item, styles[name], props.style, styleInterpolator(babelHelpers.extends({}, this.props, props))],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 214
          }
        },
        subView
      );
    }
  }, {
    key: '_renderHeader',
    value: function _renderHeader(props) {
      var left = this._renderLeft(props);
      var right = this._renderRight(props);
      var title = this._renderTitle(props, {
        hasLeftComponent: !!left,
        hasRightComponent: !!right
      });

      return _react2.default.createElement(
        _reactNative.View,
        {
          style: [_reactNative.StyleSheet.absoluteFill, styles.header],
          key: 'scene_' + props.scene.key,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 242
          }
        },
        title,
        left,
        right
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var appBar = void 0;

      if (this.props.mode === 'float') {
        var scenesProps = this.props.scenes.map(function (scene) {
          return {
            position: _this2.props.position,
            progress: _this2.props.progress,
            scene: scene
          };
        });
        appBar = scenesProps.map(this._renderHeader, this);
      } else {
        appBar = this._renderHeader({
          position: new _reactNative.Animated.Value(this.props.scene.index),
          progress: new _reactNative.Animated.Value(0),
          scene: this.props.scene
        });
      }

      var _props = this.props,
          scenes = _props.scenes,
          scene = _props.scene,
          position = _props.position,
          screenProps = _props.screenProps,
          progress = _props.progress,
          style = _props.style,
          rest = babelHelpers.objectWithoutProperties(_props, ['scenes', 'scene', 'position', 'screenProps', 'progress', 'style']);

      var _props$getScreenDetai = this.props.getScreenDetails(scene, screenProps),
          options = _props$getScreenDetai.options;

      var headerStyle = options.headerStyle;

      return _react2.default.createElement(
        _reactNative.Animated.View,
        babelHelpers.extends({}, rest, { style: [styles.container, headerStyle, style], __source: {
            fileName: _jsxFileName,
            lineNumber: 288
          }
        }),
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.appBar, __source: {
              fileName: _jsxFileName,
              lineNumber: 289
            }
          },
          appBar
        )
      );
    }
  }]);
  return Header;
}(_react2.default.PureComponent);

Header.HEIGHT = APPBAR_HEIGHT + STATUSBAR_HEIGHT;


var styles = _reactNative.StyleSheet.create({
  container: {
    paddingTop: STATUSBAR_HEIGHT,
    backgroundColor: _reactNative.Platform.OS === 'ios' ? '#EFEFF2' : '#FFF',
    height: STATUSBAR_HEIGHT + APPBAR_HEIGHT,
    shadowColor: 'black',
    shadowOpacity: 0.1,
    shadowRadius: _reactNative.StyleSheet.hairlineWidth,
    shadowOffset: {
      height: _reactNative.StyleSheet.hairlineWidth
    },
    elevation: 4
  },
  appBar: {
    flex: 1
  },
  header: {
    flexDirection: 'row'
  },
  item: {
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'transparent'
  },
  title: {
    bottom: 0,
    left: TITLE_OFFSET,
    right: TITLE_OFFSET,
    top: 0,
    position: 'absolute',
    alignItems: _reactNative.Platform.OS === 'ios' ? 'center' : 'flex-start'
  },
  left: {
    left: 0,
    bottom: 0,
    top: 0,
    position: 'absolute'
  },
  right: {
    right: 0,
    bottom: 0,
    top: 0,
    position: 'absolute'
  }
});

exports.default = Header;
}, 420, null, "react-navigation/src/views/Header.js");
__d(/* react-navigation/src/views/HeaderTitle.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/HeaderTitle.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var HeaderTitle = function HeaderTitle(_ref) {
  var style = _ref.style,
      rest = babelHelpers.objectWithoutProperties(_ref, ['style']);
  return _react2.default.createElement(_reactNative.Text, babelHelpers.extends({
    numberOfLines: 1
  }, rest, {
    style: [styles.title, style],
    accessibilityTraits: 'header',
    __source: {
      fileName: _jsxFileName,
      lineNumber: 15
    }
  }));
};

var styles = _reactNative.StyleSheet.create({
  title: {
    fontSize: _reactNative.Platform.OS === 'ios' ? 17 : 18,
    fontWeight: _reactNative.Platform.OS === 'ios' ? '600' : '500',
    color: 'rgba(0, 0, 0, .9)',
    textAlign: _reactNative.Platform.OS === 'ios' ? 'center' : 'left',
    marginHorizontal: 16
  }
});

exports.default = HeaderTitle;
}, 421, null, "react-navigation/src/views/HeaderTitle.js");
__d(/* react-navigation/src/views/HeaderBackButton.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/HeaderBackButton.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _TouchableItem = require(423              ); // 423 = ./TouchableItem

var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

var HeaderBackButton = function (_React$PureComponent) {
  babelHelpers.inherits(HeaderBackButton, _React$PureComponent);

  function HeaderBackButton() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, HeaderBackButton);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = HeaderBackButton.__proto__ || Object.getPrototypeOf(HeaderBackButton)).call.apply(_ref, [this].concat(args))), _this), _this.state = {}, _this._onTextLayout = function (e) {
      if (_this.state.initialTextWidth) {
        return;
      }
      _this.setState({
        initialTextWidth: e.nativeEvent.layout.x + e.nativeEvent.layout.width
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(HeaderBackButton, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          onPress = _props.onPress,
          pressColorAndroid = _props.pressColorAndroid,
          width = _props.width,
          title = _props.title,
          titleStyle = _props.titleStyle,
          tintColor = _props.tintColor,
          truncatedTitle = _props.truncatedTitle;


      var renderTruncated = this.state.initialTextWidth && width ? this.state.initialTextWidth > width : false;

      var backButtonTitle = renderTruncated ? truncatedTitle : title;

      var asset = require(424                     ); // 424 = ./assets/back-icon.png

      return _react2.default.createElement(
        _TouchableItem2.default,
        {
          accessibilityComponentType: 'button',
          accessibilityLabel: backButtonTitle,
          accessibilityTraits: 'button',
          testID: 'header-back',
          delayPressIn: 0,
          onPress: onPress,
          pressColor: pressColorAndroid,
          style: styles.container,
          borderless: true,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 78
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.container, __source: {
              fileName: _jsxFileName,
              lineNumber: 89
            }
          },
          _react2.default.createElement(_reactNative.Image, {
            style: [styles.icon, title && styles.iconWithTitle, { tintColor: tintColor }],
            source: asset,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 90
            }
          }),
          _reactNative.Platform.OS === 'ios' && title && _react2.default.createElement(
            _reactNative.Text,
            {
              onLayout: this._onTextLayout,
              style: [styles.title, { color: tintColor }, titleStyle],
              numberOfLines: 1,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 96
              }
            },
            backButtonTitle
          )
        )
      );
    }
  }]);
  return HeaderBackButton;
}(_react2.default.PureComponent);

HeaderBackButton.defaultProps = {
  pressColorAndroid: 'rgba(0, 0, 0, .32)',
  tintColor: _reactNative.Platform.select({
    ios: '#037aff'
  }),
  truncatedTitle: 'Back'
};


var styles = _reactNative.StyleSheet.create({
  container: {
    alignItems: 'center',
    flexDirection: 'row',
    backgroundColor: 'transparent'
  },
  title: {
    fontSize: 17,
    paddingRight: 10
  },
  icon: _reactNative.Platform.OS === 'ios' ? {
    height: 20,
    width: 12,
    marginLeft: 10,
    marginRight: 22,
    marginVertical: 12,
    resizeMode: 'contain',
    transform: [{ scaleX: _reactNative.I18nManager.isRTL ? -1 : 1 }]
  } : {
    height: 24,
    width: 24,
    margin: 16,
    resizeMode: 'contain',
    transform: [{ scaleX: _reactNative.I18nManager.isRTL ? -1 : 1 }]
  },
  iconWithTitle: _reactNative.Platform.OS === 'ios' ? {
    marginRight: 5
  } : {}
});

exports.default = HeaderBackButton;
}, 422, null, "react-navigation/src/views/HeaderBackButton.js");
__d(/* react-navigation/src/views/TouchableItem.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/TouchableItem.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ANDROID_VERSION_LOLLIPOP = 21;

var TouchableItem = function (_Component) {
  babelHelpers.inherits(TouchableItem, _Component);

  function TouchableItem() {
    babelHelpers.classCallCheck(this, TouchableItem);
    return babelHelpers.possibleConstructorReturn(this, (TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).apply(this, arguments));
  }

  babelHelpers.createClass(TouchableItem, [{
    key: 'render',
    value: function render() {
      if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= ANDROID_VERSION_LOLLIPOP) {
        var _props = this.props,
            _style = _props.style,
            rest = babelHelpers.objectWithoutProperties(_props, ['style']);


        return _react2.default.createElement(
          _reactNative.TouchableNativeFeedback,
          babelHelpers.extends({}, rest, {
            style: null,
            background: _reactNative.TouchableNativeFeedback.Ripple(this.props.pressColor, this.props.borderless),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 59
            }
          }),
          _react2.default.createElement(
            _reactNative.View,
            { style: this.props.style, __source: {
                fileName: _jsxFileName,
                lineNumber: 67
              }
            },
            _react.Children.only(this.props.children)
          )
        );
      }

      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        babelHelpers.extends({}, this.props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 75
          }
        }),
        this.props.children
      );
    }
  }]);
  return TouchableItem;
}(_react.Component);

TouchableItem.defaultProps = {
  pressColor: 'rgba(0, 0, 0, .32)'
};
exports.default = TouchableItem;
}, 423, null, "react-navigation/src/views/TouchableItem.js");
__d(/* react-navigation/src/views/assets/back-icon.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/node_modules/react-navigation/src/views/assets","width":24,"height":24,"scales":[1,1.5,2,3,4],"hash":"a364dc7a784101f7c8f6791c7b4514ce","name":"back-icon","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 424, null, "react-navigation/src/views/assets/back-icon.png");
__d(/* react-navigation/src/views/HeaderStyleInterpolator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require(46            ); // 46 = react-native

function forLeft(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index - 0.5, index, index + 0.5, index + 1],
      outputRange: [0, 0, 1, 0, 0]
    })
  };
}

function forCenter(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    }),
    transform: [{
      translateX: position.interpolate({
        inputRange: [index - 1, index + 1],
        outputRange: _reactNative.I18nManager.isRTL ? [-200, 200] : [200, -200]
      })
    }]
  };
}

function forRight(props) {
  var position = props.position,
      scene = props.scene;
  var index = scene.index;

  return {
    opacity: position.interpolate({
      inputRange: [index - 1, index, index + 1],
      outputRange: [0, 1, 0]
    })
  };
}

exports.default = {
  forLeft: forLeft,
  forCenter: forCenter,
  forRight: forRight
};
}, 425, null, "react-navigation/src/views/HeaderStyleInterpolator.js");
__d(/* react-navigation/src/views/SceneView.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/SceneView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var SceneView = function (_PureComponent) {
  babelHelpers.inherits(SceneView, _PureComponent);

  function SceneView() {
    babelHelpers.classCallCheck(this, SceneView);
    return babelHelpers.possibleConstructorReturn(this, (SceneView.__proto__ || Object.getPrototypeOf(SceneView)).apply(this, arguments));
  }

  babelHelpers.createClass(SceneView, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        navigation: this.props.navigation
      };
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          screenProps = _props.screenProps,
          navigation = _props.navigation,
          Component = _props.component;


      return _react2.default.createElement(Component, { screenProps: screenProps, navigation: navigation, __source: {
          fileName: _jsxFileName,
          lineNumber: 35
        }
      });
    }
  }]);
  return SceneView;
}(_react.PureComponent);

SceneView.childContextTypes = {
  navigation: _propTypes2.default.object.isRequired
};
exports.default = SceneView;
}, 426, null, "react-navigation/src/views/SceneView.js");
__d(/* prop-types/index.js */function(global, require, module, exports) {

if (process.env.NODE_ENV !== 'production') {
  var REACT_ELEMENT_TYPE = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.for : '@@for') && (typeof Symbol === 'function' ? Symbol.for : '@@for')('react.element') || 0xeac7;

  var isValidElement = function isValidElement(object) {
    return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
  };

  var throwOnDirectAccess = true;
  module.exports = require(41                         )(isValidElement, throwOnDirectAccess); // 41 = ./factoryWithTypeCheckers
} else {
  module.exports = require(428                         )(); // 428 = ./factoryWithThrowingShims
}
}, 427, null, "prop-types/index.js");
__d(/* prop-types/factoryWithThrowingShims.js */function(global, require, module, exports) {

'use strict';

var emptyFunction = require(22                      ); // 22 = fbjs/lib/emptyFunction
var invariant = require(18                  ); // 18 = fbjs/lib/invariant
var ReactPropTypesSecret = require(42                          ); // 42 = ./lib/ReactPropTypesSecret

module.exports = function () {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      return;
    }
    invariant(false, 'Calling PropTypes validators directly is not supported by the `prop-types` package. ' + 'Use PropTypes.checkPropTypes() to call them. ' + 'Read more at http://fb.me/use-check-prop-types');
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };

  var ReactPropTypes = {
    array: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim
  };

  ReactPropTypes.checkPropTypes = emptyFunction;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};
}, 428, null, "prop-types/factoryWithThrowingShims.js");
__d(/* react-navigation/src/views/TransitionConfigs.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require(46            ); // 46 = react-native

var _CardStackStyleInterpolator = require(430                           ); // 430 = ./CardStackStyleInterpolator

var _CardStackStyleInterpolator2 = babelHelpers.interopRequireDefault(_CardStackStyleInterpolator);

var DefaultTransitionSpec = {
  duration: 250,
  easing: _reactNative.Easing.inOut(_reactNative.Easing.ease),
  timing: _reactNative.Animated.timing
};

var IOSTransitionSpec = {
  duration: 500,
  easing: _reactNative.Easing.bezier(0.2833, 0.99, 0.31833, 0.99),
  timing: _reactNative.Animated.timing
};

var SlideFromRightIOS = {
  transitionSpec: IOSTransitionSpec,
  screenInterpolator: _CardStackStyleInterpolator2.default.forHorizontal
};

var ModalSlideFromBottomIOS = {
  transitionSpec: IOSTransitionSpec,
  screenInterpolator: _CardStackStyleInterpolator2.default.forVertical
};

var FadeInFromBottomAndroid = {
  transitionSpec: {
    duration: 350,
    easing: _reactNative.Easing.out(_reactNative.Easing.poly(5)),
    timing: _reactNative.Animated.timing
  },
  screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
};

var FadeOutToBottomAndroid = {
  transitionSpec: {
    duration: 230,
    easing: _reactNative.Easing.in(_reactNative.Easing.poly(4)),
    timing: _reactNative.Animated.timing
  },
  screenInterpolator: _CardStackStyleInterpolator2.default.forFadeFromBottomAndroid
};

function defaultTransitionConfig(transitionProps, prevTransitionProps, isModal) {
  if (_reactNative.Platform.OS === 'android') {
    if (prevTransitionProps && transitionProps.index < prevTransitionProps.index) {
      return FadeOutToBottomAndroid;
    }
    return FadeInFromBottomAndroid;
  }

  if (isModal) {
    return ModalSlideFromBottomIOS;
  }
  return SlideFromRightIOS;
}

function getTransitionConfig(transitionConfigurer, transitionProps, prevTransitionProps, isModal) {
  var defaultConfig = defaultTransitionConfig(transitionProps, prevTransitionProps, isModal);
  if (transitionConfigurer) {
    return babelHelpers.extends({}, defaultConfig, transitionConfigurer());
  }
  return defaultConfig;
}

exports.default = {
  DefaultTransitionSpec: DefaultTransitionSpec,
  defaultTransitionConfig: defaultTransitionConfig,
  getTransitionConfig: getTransitionConfig
};
}, 429, null, "react-navigation/src/views/TransitionConfigs.js");
__d(/* react-navigation/src/views/CardStackStyleInterpolator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require(46            ); // 46 = react-native

function forInitial(props) {
  var navigation = props.navigation,
      scene = props.scene;


  var focused = navigation.state.index === scene.index;
  var opacity = focused ? 1 : 0;

  var translate = focused ? 0 : 1000000;
  return {
    opacity: opacity,
    transform: [{ translateX: translate }, { translateY: translate }]
  };
}

function forHorizontal(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 1];

  var width = layout.initWidth;
  var outputRange = _reactNative.I18nManager.isRTL ? [-width, 0, 10] : [width, 0, -10];

  var opacity = position.interpolate({
    inputRange: [index - 1, index - 0.99, index, index + 0.99, index + 1],
    outputRange: [0, 1, 1, 0.3, 0]
  });

  var translateY = 0;
  var translateX = position.interpolate({
    inputRange: inputRange,
    outputRange: outputRange
  });

  return {
    opacity: opacity,
    transform: [{ translateX: translateX }, { translateY: translateY }]
  };
}

function forVertical(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var height = layout.initHeight;

  var opacity = position.interpolate({
    inputRange: [index - 1, index - 0.99, index, index + 0.99, index + 1],
    outputRange: [0, 1, 1, 0.3, 0]
  });

  var translateX = 0;
  var translateY = position.interpolate({
    inputRange: [index - 1, index, index + 1],
    outputRange: [height, 0, 0]
  });

  return {
    opacity: opacity,
    transform: [{ translateX: translateX }, { translateY: translateY }]
  };
}

function forFadeFromBottomAndroid(props) {
  var layout = props.layout,
      position = props.position,
      scene = props.scene;


  if (!layout.isMeasured) {
    return forInitial(props);
  }

  var index = scene.index;
  var inputRange = [index - 1, index, index + 0.99, index + 1];

  var opacity = position.interpolate({
    inputRange: inputRange,
    outputRange: [0, 1, 1, 0]
  });

  var translateX = 0;
  var translateY = position.interpolate({
    inputRange: inputRange,
    outputRange: [50, 0, 0, 0]
  });

  return {
    opacity: opacity,
    transform: [{ translateX: translateX }, { translateY: translateY }]
  };
}

function canUseNativeDriver() {
  return true;
}

exports.default = {
  forHorizontal: forHorizontal,
  forVertical: forVertical,
  forFadeFromBottomAndroid: forFadeFromBottomAndroid,
  canUseNativeDriver: canUseNativeDriver
};
}, 430, null, "react-navigation/src/views/CardStackStyleInterpolator.js");
__d(/* react-navigation/src/views/Transitioner.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/Transitioner.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var _ScenesReducer = require(432              ); // 432 = ./ScenesReducer

var _ScenesReducer2 = babelHelpers.interopRequireDefault(_ScenesReducer);

var _TransitionConfigs = require(429                  ); // 429 = ./TransitionConfigs

var _TransitionConfigs2 = babelHelpers.interopRequireDefault(_TransitionConfigs);

var DefaultTransitionSpec = _TransitionConfigs2.default.DefaultTransitionSpec;

var Transitioner = function (_React$Component) {
  babelHelpers.inherits(Transitioner, _React$Component);

  function Transitioner(props, context) {
    babelHelpers.classCallCheck(this, Transitioner);

    var _this = babelHelpers.possibleConstructorReturn(this, (Transitioner.__proto__ || Object.getPrototypeOf(Transitioner)).call(this, props, context));

    var layout = {
      height: new _reactNative.Animated.Value(0),
      initHeight: 0,
      initWidth: 0,
      isMeasured: false,
      width: new _reactNative.Animated.Value(0)
    };

    _this.state = {
      layout: layout,
      position: new _reactNative.Animated.Value(_this.props.navigation.state.index),
      progress: new _reactNative.Animated.Value(1),
      scenes: (0, _ScenesReducer2.default)([], _this.props.navigation.state)
    };

    _this._prevTransitionProps = null;
    _this._transitionProps = buildTransitionProps(props, _this.state);
    _this._isMounted = false;
    _this._isTransitionRunning = false;
    _this._queuedTransition = null;
    return _this;
  }

  babelHelpers.createClass(Transitioner, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._onLayout = this._onLayout.bind(this);
      this._onTransitionEnd = this._onTransitionEnd.bind(this);
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._isMounted = true;
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._isMounted = false;
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var nextScenes = (0, _ScenesReducer2.default)(this.state.scenes, nextProps.navigation.state, this.props.navigation.state);

      if (nextScenes === this.state.scenes) {
        return;
      }

      var indexHasChanged = nextProps.navigation.state.index !== this.props.navigation.state.index;
      if (this._isTransitionRunning) {
        this._queuedTransition = { nextProps: nextProps, nextScenes: nextScenes, indexHasChanged: indexHasChanged };
        return;
      }

      this._startTransition(nextProps, nextScenes, indexHasChanged);
    }
  }, {
    key: '_startTransition',
    value: function _startTransition(nextProps, nextScenes, indexHasChanged) {
      var _this2 = this;

      var nextState = babelHelpers.extends({}, this.state, {
        scenes: nextScenes
      });

      var position = nextState.position,
          progress = nextState.progress;


      progress.setValue(0);

      this._prevTransitionProps = this._transitionProps;
      this._transitionProps = buildTransitionProps(nextProps, nextState);

      var transitionUserSpec = nextProps.configureTransition ? nextProps.configureTransition(this._transitionProps, this._prevTransitionProps) : null;

      var transitionSpec = babelHelpers.extends({}, DefaultTransitionSpec, transitionUserSpec);

      var timing = transitionSpec.timing;

      delete transitionSpec.timing;

      var toValue = nextProps.navigation.state.index;
      var positionHasChanged = position.__getValue() !== toValue;

      var animations = indexHasChanged && positionHasChanged ? [timing(progress, babelHelpers.extends({}, transitionSpec, {
        toValue: 1
      })), timing(position, babelHelpers.extends({}, transitionSpec, {
        toValue: nextProps.navigation.state.index
      }))] : [];

      this._isTransitionRunning = true;
      this.setState(nextState, function () {
        nextProps.onTransitionStart && nextProps.onTransitionStart(_this2._transitionProps, _this2._prevTransitionProps);
        _reactNative.Animated.parallel(animations).start(_this2._onTransitionEnd);
      });
    }
  }, {
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.View,
        { onLayout: this._onLayout, style: [styles.main, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 187
          }
        },
        this.props.render(this._transitionProps, this._prevTransitionProps)
      );
    }
  }, {
    key: '_onLayout',
    value: function _onLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          height = _event$nativeEvent$la.height,
          width = _event$nativeEvent$la.width;

      if (this.state.layout.initWidth === width && this.state.layout.initHeight === height) {
        return;
      }
      var layout = babelHelpers.extends({}, this.state.layout, {
        initHeight: height,
        initWidth: width,
        isMeasured: true
      });

      layout.height.setValue(height);
      layout.width.setValue(width);

      var nextState = babelHelpers.extends({}, this.state, {
        layout: layout
      });

      this._transitionProps = buildTransitionProps(this.props, nextState);
      this.setState(nextState);
    }
  }, {
    key: '_onTransitionEnd',
    value: function _onTransitionEnd() {
      var _this3 = this;

      if (!this._isMounted) {
        return;
      }
      var prevTransitionProps = this._prevTransitionProps;
      this._prevTransitionProps = null;

      var nextState = babelHelpers.extends({}, this.state, {
        scenes: this.state.scenes.filter(isSceneNotStale)
      });

      this._transitionProps = buildTransitionProps(this.props, nextState);

      this.setState(nextState, function () {
        _this3.props.onTransitionEnd && _this3.props.onTransitionEnd(_this3._transitionProps, prevTransitionProps);
        if (_this3._queuedTransition) {
          _this3._startTransition(_this3._queuedTransition.nextProps, _this3._queuedTransition.nextScenes, _this3._queuedTransition.indexHasChanged);
          _this3._queuedTransition = null;
        } else {
          _this3._isTransitionRunning = false;
        }
      });
    }
  }]);
  return Transitioner;
}(_react2.default.Component);

function buildTransitionProps(props, state) {
  var navigation = props.navigation;
  var layout = state.layout,
      position = state.position,
      progress = state.progress,
      scenes = state.scenes;


  var scene = scenes.find(isSceneActive);

  (0, _invariant2.default)(scene, 'Could not find active scene');

  return {
    layout: layout,
    navigation: navigation,
    position: position,
    progress: progress,
    scenes: scenes,
    scene: scene,
    index: scene.index
  };
}

function isSceneNotStale(scene) {
  return !scene.isStale;
}

function isSceneActive(scene) {
  return scene.isActive;
}

var styles = _reactNative.StyleSheet.create({
  main: {
    flex: 1
  }
});

exports.default = Transitioner;
}, 431, null, "react-navigation/src/views/Transitioner.js");
__d(/* react-navigation/src/views/ScenesReducer.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ScenesReducer;

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var _shallowEqual = require(165                    ); // 165 = fbjs/lib/shallowEqual

var _shallowEqual2 = babelHelpers.interopRequireDefault(_shallowEqual);

var SCENE_KEY_PREFIX = 'scene_';

function compareKey(one, two) {
  var delta = one.length - two.length;
  if (delta > 0) {
    return 1;
  }
  if (delta < 0) {
    return -1;
  }
  return one > two ? 1 : -1;
}

function compareScenes(one, two) {
  if (one.index > two.index) {
    return 1;
  }
  if (one.index < two.index) {
    return -1;
  }

  return compareKey(one.key, two.key);
}

function areScenesShallowEqual(one, two) {
  return one.key === two.key && one.index === two.index && one.isStale === two.isStale && one.isActive === two.isActive && areRoutesShallowEqual(one.route, two.route);
}

function areRoutesShallowEqual(one, two) {
  if (!one || !two) {
    return one === two;
  }

  if (one.key !== two.key) {
    return false;
  }

  return (0, _shallowEqual2.default)(one, two);
}

function ScenesReducer(scenes, nextState, prevState) {
  if (prevState === nextState) {
    return scenes;
  }

  var prevScenes = new Map();
  var freshScenes = new Map();
  var staleScenes = new Map();

  scenes.forEach(function (scene) {
    var key = scene.key;

    if (scene.isStale) {
      staleScenes.set(key, scene);
    }
    prevScenes.set(key, scene);
  });

  var nextKeys = new Set();
  nextState.routes.forEach(function (route, index) {
    var key = SCENE_KEY_PREFIX + route.key;
    var scene = {
      index: index,
      isActive: false,
      isStale: false,
      key: key,
      route: route
    };
    (0, _invariant2.default)(!nextKeys.has(key), 'navigation.state.routes[' + index + '].key "' + key + '" conflicts with ' + 'another route!');
    nextKeys.add(key);

    if (staleScenes.has(key)) {
      staleScenes.delete(key);
    }
    freshScenes.set(key, scene);
  });

  if (prevState) {
    prevState.routes.forEach(function (route, index) {
      var key = SCENE_KEY_PREFIX + route.key;
      if (freshScenes.has(key)) {
        return;
      }
      staleScenes.set(key, {
        index: index,
        isActive: false,
        isStale: true,
        key: key,
        route: route
      });
    });
  }

  var nextScenes = [];

  var mergeScene = function mergeScene(nextScene) {
    var key = nextScene.key;

    var prevScene = prevScenes.has(key) ? prevScenes.get(key) : null;
    if (prevScene && areScenesShallowEqual(prevScene, nextScene)) {
      nextScenes.push(prevScene);
    } else {
      nextScenes.push(nextScene);
    }
  };

  staleScenes.forEach(mergeScene);
  freshScenes.forEach(mergeScene);

  nextScenes.sort(compareScenes);

  var activeScenesCount = 0;
  nextScenes.forEach(function (scene, ii) {
    var isActive = !scene.isStale && scene.index === nextState.index;
    if (isActive !== scene.isActive) {
      nextScenes[ii] = babelHelpers.extends({}, scene, {
        isActive: isActive
      });
    }
    if (isActive) {
      activeScenesCount++;
    }
  });

  (0, _invariant2.default)(activeScenesCount === 1, 'there should always be only one scene active, not %s.', activeScenesCount);

  if (nextScenes.length !== scenes.length) {
    return nextScenes;
  }

  if (nextScenes.some(function (scene, index) {
    return !areScenesShallowEqual(scenes[index], scene);
  })) {
    return nextScenes;
  }

  return scenes;
}
}, 432, null, "react-navigation/src/views/ScenesReducer.js");
__d(/* react-navigation/src/routers/StackRouter.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _pathToRegexp = require(434             ); // 434 = path-to-regexp

var _pathToRegexp2 = babelHelpers.interopRequireDefault(_pathToRegexp);

var _NavigationActions = require(409                   ); // 409 = ../NavigationActions

var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

var _createConfigGetter = require(436                   ); // 436 = ./createConfigGetter

var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

var _getScreenForRouteName = require(437                      ); // 437 = ./getScreenForRouteName

var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

var _StateUtils = require(411            ); // 411 = ../StateUtils

var _StateUtils2 = babelHelpers.interopRequireDefault(_StateUtils);

var _validateRouteConfigMap = require(439                       ); // 439 = ./validateRouteConfigMap

var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

var _getScreenConfigDeprecated = require(440                          ); // 440 = ./getScreenConfigDeprecated

var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

var uniqueBaseId = 'id-' + Date.now();
var uuidCount = 0;
function _getUuid() {
  return uniqueBaseId + '-' + uuidCount++;
}

exports.default = function (routeConfigs) {
  var stackConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  (0, _validateRouteConfigMap2.default)(routeConfigs);

  var childRouters = {};
  var routeNames = Object.keys(routeConfigs);

  routeNames.forEach(function (routeName) {
    var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
    if (screen && screen.router) {
      childRouters[routeName] = screen.router;
    } else {
      childRouters[routeName] = null;
    }
  });

  var initialRouteParams = stackConfig.initialRouteParams;


  var initialRouteName = stackConfig.initialRouteName || routeNames[0];

  var initialChildRouter = childRouters[initialRouteName];
  var paths = stackConfig.paths || {};

  routeNames.forEach(function (routeName) {
    var pathPattern = paths[routeName] || routeConfigs[routeName].path;
    var matchExact = !!pathPattern && !childRouters[routeName];
    if (typeof pathPattern !== 'string') {
      pathPattern = routeName;
    }
    var keys = [];
    var re = (0, _pathToRegexp2.default)(pathPattern, keys);
    if (!matchExact) {
      var wildcardRe = (0, _pathToRegexp2.default)(pathPattern + '/*', keys);
      re = new RegExp('(?:' + re.source + ')|(?:' + wildcardRe.source + ')');
    }

    paths[routeName] = { re: re, keys: keys, toPath: _pathToRegexp2.default.compile(pathPattern) };
  });

  return {
    getComponentForState: function getComponentForState(state) {
      var activeChildRoute = state.routes[state.index];
      var routeName = activeChildRoute.routeName;

      if (childRouters[routeName]) {
        return childRouters[routeName].getComponentForState(activeChildRoute);
      }
      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
    },
    getComponentForRouteName: function getComponentForRouteName(routeName) {
      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
    },
    getStateForAction: function getStateForAction(passedAction, state) {
      var action = _NavigationActions2.default.mapDeprecatedActionAndWarn(passedAction);

      if (!state) {
        var route = {};
        if (action.type === _NavigationActions2.default.NAVIGATE && childRouters[action.routeName] !== undefined) {
          return {
            index: 0,
            routes: [babelHelpers.extends({}, action, {
              type: undefined,
              key: 'Init-' + _getUuid()
            })]
          };
        }
        if (initialChildRouter) {
          route = initialChildRouter.getStateForAction(_NavigationActions2.default.navigate({
            routeName: initialRouteName,
            params: initialRouteParams
          }));
        }
        var params = (route.params || action.params || initialRouteParams) && babelHelpers.extends({}, route.params || {}, action.params || {}, initialRouteParams || {});
        route = babelHelpers.extends({}, route, {
          routeName: initialRouteName,
          key: 'Init-' + _getUuid()
        }, params ? { params: params } : {});

        state = {
          index: 0,
          routes: [route]
        };
      }

      if (action.type !== _NavigationActions2.default.RESET || action.key !== null) {
        var keyIndex = action.key ? _StateUtils2.default.indexOf(state, action.key) : -1;
        var childIndex = keyIndex >= 0 ? keyIndex : state.index;
        var childRoute = state.routes[childIndex];
        var childRouter = childRouters[childRoute.routeName];
        if (childRouter) {
          var _route = childRouter.getStateForAction(action, childRoute);
          if (_route === null) {
            return state;
          }
          if (_route && _route !== childRoute) {
            return _StateUtils2.default.replaceAt(state, childRoute.key, _route);
          }
        }
      }

      if (action.type === _NavigationActions2.default.NAVIGATE && childRouters[action.routeName] !== undefined) {
        var _childRouter = childRouters[action.routeName];
        var _route2 = void 0;
        if (_childRouter) {
          var childAction = action.action || _NavigationActions2.default.init({ params: action.params });
          _route2 = babelHelpers.extends({
            params: action.params
          }, _childRouter.getStateForAction(childAction), {
            key: _getUuid(),
            routeName: action.routeName
          });
        } else {
          _route2 = {
            params: action.params,
            key: _getUuid(),
            routeName: action.routeName
          };
        }
        return _StateUtils2.default.push(state, _route2);
      }

      if (action.type === _NavigationActions2.default.NAVIGATE) {
        var childRouterNames = Object.keys(childRouters);
        for (var i = 0; i < childRouterNames.length; i++) {
          var childRouterName = childRouterNames[i];
          var _childRouter2 = childRouters[childRouterName];
          if (_childRouter2) {
            var initChildRoute = _childRouter2.getStateForAction(_NavigationActions2.default.init());

            var navigatedChildRoute = _childRouter2.getStateForAction(action, initChildRoute);
            var routeToPush = null;
            if (navigatedChildRoute === null) {
              routeToPush = initChildRoute;
            } else if (navigatedChildRoute !== initChildRoute) {
              routeToPush = navigatedChildRoute;
            }
            if (routeToPush) {
              return _StateUtils2.default.push(state, babelHelpers.extends({}, routeToPush, {
                key: _getUuid(),
                routeName: childRouterName
              }));
            }
          }
        }
      }

      if (action.type === _NavigationActions2.default.SET_PARAMS) {
        var lastRoute = state.routes.find(function (route) {
          return route.key === action.key;
        });
        if (lastRoute) {
          var _params = babelHelpers.extends({}, lastRoute.params, action.params);
          var routes = [].concat(babelHelpers.toConsumableArray(state.routes));
          routes[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
            params: _params
          });
          return babelHelpers.extends({}, state, {
            routes: routes
          });
        }
      }

      if (action.type === _NavigationActions2.default.RESET) {
        var resetAction = action;

        return babelHelpers.extends({}, state, {
          routes: resetAction.actions.map(function (childAction) {
            var router = childRouters[childAction.routeName];
            if (router) {
              return babelHelpers.extends({}, childAction, router.getStateForAction(childAction), {
                routeName: childAction.routeName,
                key: _getUuid()
              });
            }
            var route = babelHelpers.extends({}, childAction, {
              key: _getUuid()
            });
            delete route.type;
            return route;
          }),
          index: action.index
        });
      }

      if (action.type === _NavigationActions2.default.BACK) {
        var backRouteIndex = null;
        if (action.key) {
          var backRoute = state.routes.find(function (route) {
            return route.key === action.key;
          });

          backRouteIndex = state.routes.indexOf(backRoute);
        }
        if (backRouteIndex == null) {
          return _StateUtils2.default.pop(state);
        }
        if (backRouteIndex > 0) {
          return babelHelpers.extends({}, state, {
            routes: state.routes.slice(0, backRouteIndex),
            index: backRouteIndex - 1
          });
        }
      }
      return state;
    },
    getPathAndParamsForState: function getPathAndParamsForState(state) {
      var route = state.routes[state.index];
      var routeName = route.routeName;
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);

      var subPath = paths[routeName].toPath(route.params);
      var path = subPath;
      var params = route.params;
      if (screen && screen.router) {
        var child = screen.router.getPathAndParamsForState(route);
        path = subPath ? subPath + '/' + child.path : child.path;
        params = child.params ? babelHelpers.extends({}, params, child.params) : params;
      }
      return {
        path: path,
        params: params
      };
    },
    getActionForPathAndParams: function getActionForPathAndParams(pathToResolve) {
      if (!pathToResolve) {
        return _NavigationActions2.default.navigate({
          routeName: initialRouteName
        });
      }

      var _pathToResolve$split = pathToResolve.split('?'),
          _pathToResolve$split2 = babelHelpers.slicedToArray(_pathToResolve$split, 2),
          pathNameToResolve = _pathToResolve$split2[0],
          queryString = _pathToResolve$split2[1];

      var matchedRouteName = void 0;
      var pathMatch = void 0;
      var pathMatchKeys = void 0;

      for (var _iterator = Object.entries(paths), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
        var _ref3;

        if (_isArray) {
          if (_i >= _iterator.length) break;
          _ref3 = _iterator[_i++];
        } else {
          _i = _iterator.next();
          if (_i.done) break;
          _ref3 = _i.value;
        }

        var _ref = _ref3;

        var _ref2 = babelHelpers.slicedToArray(_ref, 2);

        var routeName = _ref2[0];
        var path = _ref2[1];
        var re = path.re,
            keys = path.keys;

        pathMatch = re.exec(pathNameToResolve);
        if (pathMatch && pathMatch.length) {
          pathMatchKeys = keys;
          matchedRouteName = routeName;
          break;
        }
      }

      if (!matchedRouteName) {
        return null;
      }

      var nestedAction = void 0;
      if (childRouters[matchedRouteName]) {
        nestedAction = childRouters[matchedRouteName].getActionForPathAndParams(pathMatch.slice(pathMatchKeys.length).join('/'));
      }

      var queryParams = (queryString || '').split('&').reduce(function (result, item) {
        if (item !== '') {
          var nextResult = result || {};

          var _item$split = item.split('='),
              _item$split2 = babelHelpers.slicedToArray(_item$split, 2),
              key = _item$split2[0],
              value = _item$split2[1];

          nextResult[key] = value;
          return nextResult;
        }
        return result;
      }, null);

      var params = pathMatch.slice(1).reduce(function (result, matchResult, i) {
        var key = pathMatchKeys[i];
        if (key.asterisk || !key) {
          return result;
        }
        var nextResult = result || {};
        var paramName = key.name;
        nextResult[paramName] = matchResult;
        return nextResult;
      }, queryParams);

      return _NavigationActions2.default.navigate(babelHelpers.extends({
        routeName: matchedRouteName
      }, params ? { params: params } : {}, nestedAction ? { action: nestedAction } : {}));
    },


    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, stackConfig.navigationOptions),

    getScreenConfig: _getScreenConfigDeprecated2.default
  };
};
}, 433, null, "react-navigation/src/routers/StackRouter.js");
__d(/* path-to-regexp/index.js */function(global, require, module, exports) {var isarray = require(435      ); // 435 = isarray

module.exports = pathToRegexp;
module.exports.parse = parse;
module.exports.compile = compile;
module.exports.tokensToFunction = tokensToFunction;
module.exports.tokensToRegExp = tokensToRegExp;

var PATH_REGEXP = new RegExp(['(\\\\.)', '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'].join('|'), 'g');

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || '/';
  var res;

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length;

    if (escaped) {
      path += escaped[1];
      continue;
    }

    var next = str[index];
    var prefix = res[2];
    var name = res[3];
    var capture = res[4];
    var group = res[5];
    var modifier = res[6];
    var asterisk = res[7];

    if (path) {
      tokens.push(path);
      path = '';
    }

    var partial = prefix != null && next != null && next !== prefix;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = res[2] || defaultDelimiter;
    var pattern = capture || group;

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?'
    });
  }

  if (index < str.length) {
    path += str.substr(index);
  }

  if (path) {
    tokens.push(path);
  }

  return tokens;
}

function compile(str, options) {
  return tokensToFunction(parse(str, options));
}

function encodeURIComponentPretty(str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

function encodeAsterisk(str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase();
  });
}

function tokensToFunction(tokens) {
  var matches = new Array(tokens.length);

  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (obj, opts) {
    var path = '';
    var data = obj || {};
    var options = opts || {};
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;

        continue;
      }

      var value = data[token.name];
      var segment;

      if (value == null) {
        if (token.optional) {
          if (token.partial) {
            path += token.prefix;
          }

          continue;
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined');
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`');
        }

        if (value.length === 0) {
          if (token.optional) {
            continue;
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty');
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j]);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value);

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"');
      }

      path += token.prefix + segment;
    }

    return path;
  };
}

function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1');
}

function escapeGroup(group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

function attachKeys(re, keys) {
  re.keys = keys;
  return re;
}

function flags(options) {
  return options.sensitive ? '' : 'i';
}

function regexpToRegexp(path, keys) {
  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      });
    }
  }

  return attachKeys(path, keys);
}

function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options));

  return attachKeys(regexp, keys);
}

function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}

function tokensToRegExp(tokens, keys, options) {
  if (!isarray(keys)) {
    options = keys || options;
    keys = [];
  }

  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var route = '';

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
    } else {
      var prefix = escapeString(token.prefix);
      var capture = '(?:' + token.pattern + ')';

      keys.push(token);

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*';
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?';
        } else {
          capture = prefix + '(' + capture + ')?';
        }
      } else {
        capture = prefix + '(' + capture + ')';
      }

      route += capture;
    }
  }

  var delimiter = escapeString(options.delimiter || '/');
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter;

  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?';
  }

  if (end) {
    route += '$';
  } else {
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)';
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys);
}

function pathToRegexp(path, keys, options) {
  if (!isarray(keys)) {
    options = keys || options;
    keys = [];
  }

  options = options || {};

  if (path instanceof RegExp) {
    return regexpToRegexp(path, keys);
  }

  if (isarray(path)) {
    return arrayToRegexp(path, keys, options);
  }

  return stringToRegexp(path, keys, options);
}
}, 434, null, "path-to-regexp/index.js");
__d(/* isarray/index.js */function(global, require, module, exports) {module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};
}, 435, null, "isarray/index.js");
__d(/* react-navigation/src/routers/createConfigGetter.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var _getScreenForRouteName = require(437                      ); // 437 = ./getScreenForRouteName

var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

var _addNavigationHelpers = require(410                      ); // 410 = ../addNavigationHelpers

var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

var _validateScreenOptions = require(438                      ); // 438 = ./validateScreenOptions

var _validateScreenOptions2 = babelHelpers.interopRequireDefault(_validateScreenOptions);

function applyConfig(configurer, navigationOptions, configProps) {
  if (typeof configurer === 'function') {
    return babelHelpers.extends({}, navigationOptions, configurer(babelHelpers.extends({}, configProps, {
      navigationOptions: navigationOptions
    })));
  }
  if (typeof configurer === 'object') {
    return babelHelpers.extends({}, navigationOptions, configurer);
  }
  return navigationOptions;
}

exports.default = function (routeConfigs, navigatorScreenConfig) {
  return function (navigation, screenProps) {
    var state = navigation.state,
        dispatch = navigation.dispatch;

    var route = state;
    var _ref = route,
        routes = _ref.routes,
        index = _ref.index;


    (0, _invariant2.default)(route.routeName && typeof route.routeName === 'string', 'Cannot get config because the route does not have a routeName.');

    var Component = (0, _getScreenForRouteName2.default)(routeConfigs, route.routeName);

    var outputConfig = {};

    if (Component.router) {
      (0, _invariant2.default)(route && routes && index != null, 'Expect nav state to have routes and index, ' + JSON.stringify(route));
      var childRoute = routes[index];
      var childNavigation = (0, _addNavigationHelpers2.default)({
        state: childRoute,
        dispatch: dispatch
      });
      outputConfig = Component.router.getScreenOptions(childNavigation, screenProps);
    }

    var routeConfig = routeConfigs[route.routeName];

    var routeScreenConfig = routeConfig.navigationOptions;
    var componentScreenConfig = Component.navigationOptions;

    var configOptions = { navigation: navigation, screenProps: screenProps || {} };

    outputConfig = applyConfig(navigatorScreenConfig, outputConfig, configOptions);
    outputConfig = applyConfig(componentScreenConfig, outputConfig, configOptions);
    outputConfig = applyConfig(routeScreenConfig, outputConfig, configOptions);

    (0, _validateScreenOptions2.default)(outputConfig, route);

    return outputConfig;
  };
};
}, 436, null, "react-navigation/src/routers/createConfigGetter.js");
__d(/* react-navigation/src/routers/getScreenForRouteName.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = getScreenForRouteName;

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

function getScreenForRouteName(routeConfigs, routeName) {
  var routeConfig = routeConfigs[routeName];

  (0, _invariant2.default)(routeConfig, 'There is no route defined for key ' + routeName + '.\n' + ('Must be one of: ' + Object.keys(routeConfigs).map(function (a) {
    return '\'' + a + '\'';
  }).join(',')));

  if (routeConfig.screen) {
    return routeConfig.screen;
  }

  if (typeof routeConfig.getScreen === 'function') {
    var screen = routeConfig.getScreen();
    (0, _invariant2.default)(typeof screen === 'function', 'The getScreen defined for route \'' + routeName + ' didn\'t return a valid ' + 'screen or navigator.\n\n' + 'Please pass it like this:\n' + (routeName + ': {\n  getScreen: () => require(\'./MyScreen\').default\n}'));
    return screen;
  }

  (0, _invariant2.default)(false, 'Route ' + routeName + ' must define a screen or a getScreen.');
}
}, 437, null, "react-navigation/src/routers/getScreenForRouteName.js");
__d(/* react-navigation/src/routers/validateScreenOptions.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var deprecatedKeys = ['tabBar'];

exports.default = function (screenOptions, route) {
  var keys = Object.keys(screenOptions);

  var deprecatedKey = keys.find(function (key) {
    return deprecatedKeys.includes(key);
  });

  if (typeof screenOptions.title === 'function') {
    (0, _invariant2.default)(false, ['`title` cannot be defined as a function in navigation options for `' + route.routeName + '` screen. \n', 'Try replacing the following:', '{', '    title: ({ state }) => state...', '}', '', 'with:', '({ navigation }) => ({', '    title: navigation.state...', '})'].join('\n'));
  }

  if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'function') {
    (0, _invariant2.default)(false, ['`' + deprecatedKey + '` cannot be defined as a function in navigation options for `' + route.routeName + '` screen. \n', 'Try replacing the following:', '{', '    ' + deprecatedKey + ': ({ state }) => ({', '         key: state...', '    })', '}', '', 'with:', '({ navigation }) => ({', '    ' + deprecatedKey + 'Key: navigation.state...', '})'].join('\n'));
  }

  if (deprecatedKey && typeof screenOptions[deprecatedKey] === 'object') {
    (0, _invariant2.default)(false, ['Invalid key `' + deprecatedKey + '` defined in navigation options for `' + route.routeName + '` screen.', '\n', 'Try replacing the following navigation options:', '{', '    ' + deprecatedKey + ': {'].concat(babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
      return '        ' + key + ': ...,';
    })), ['    },', '}', '\n', 'with:', '{'], babelHelpers.toConsumableArray(Object.keys(screenOptions[deprecatedKey]).map(function (key) {
      return '    ' + (deprecatedKey + key[0].toUpperCase() + key.slice(1)) + ': ...,';
    })), ['}']).join('\n'));
  }
};
}, 438, null, "react-navigation/src/routers/validateScreenOptions.js");
__d(/* react-navigation/src/routers/validateRouteConfigMap.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

function validateRouteConfigMap(routeConfigs) {
  var routeNames = Object.keys(routeConfigs);
  (0, _invariant2.default)(routeNames.length > 0, 'Please specify at least one route when configuring a navigator.');

  routeNames.forEach(function (routeName) {
    var routeConfig = routeConfigs[routeName];

    (0, _invariant2.default)(routeConfig.screen || routeConfig.getScreen, 'Route \'' + routeName + '\' should declare a screen. ' + 'For example:\n\n' + "import MyScreen from './MyScreen';\n" + '...\n' + (routeName + ': {\n') + '  screen: MyScreen,\n' + '}');

    if (routeConfig.screen && routeConfig.getScreen) {
      (0, _invariant2.default)(false, 'Route \'' + routeName + '\' should declare a screen or ' + 'a getScreen, not both.');
    }

    if (routeConfig.screen) {
      (0, _invariant2.default)(typeof routeConfig.screen === 'function', 'The component for route \'' + routeName + '\' must be a ' + 'a React component. For example:\n\n' + "import MyScreen from './MyScreen';\n" + '...\n' + (routeName + ': {\n') + '  screen: MyScreen,\n' + '}\n\n' + 'You can also use a navigator:\n\n' + "import MyNavigator from './MyNavigator';\n" + '...\n' + (routeName + ': {\n') + '  screen: MyNavigator,\n' + '}');
    }
  });
}

exports.default = validateRouteConfigMap;
}, 439, null, "react-navigation/src/routers/validateRouteConfigMap.js");
__d(/* react-navigation/src/routers/getScreenConfigDeprecated.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

exports.default = function () {
  return (0, _invariant2.default)(false, '`getScreenConfig` has been replaced with `getScreenOptions`');
};
}, 440, null, "react-navigation/src/routers/getScreenConfigDeprecated.js");
__d(/* react-navigation/src/navigators/NavigatorTypes.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});


var STACK = 'react-navigation/STACK';
var TABS = 'react-navigation/TABS';
var DRAWER = 'react-navigation/DRAWER';

exports.default = {
  STACK: STACK,
  TABS: TABS,
  DRAWER: DRAWER
};
}, 441, null, "react-navigation/src/navigators/NavigatorTypes.js");
__d(/* react-navigation/src/navigators/TabNavigator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/navigators/TabNavigator.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _createNavigator = require(412                ); // 412 = ./createNavigator

var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

var _createNavigationContainer = require(407                           ); // 407 = ../createNavigationContainer

var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

var _TabRouter = require(443                   ); // 443 = ../routers/TabRouter

var _TabRouter2 = babelHelpers.interopRequireDefault(_TabRouter);

var _TabView = require(444                       ); // 444 = ../views/TabView/TabView

var _TabView2 = babelHelpers.interopRequireDefault(_TabView);

var _TabBarTop = require(455                         ); // 455 = ../views/TabView/TabBarTop

var _TabBarTop2 = babelHelpers.interopRequireDefault(_TabBarTop);

var _TabBarBottom = require(457                            ); // 457 = ../views/TabView/TabBarBottom

var _TabBarBottom2 = babelHelpers.interopRequireDefault(_TabBarBottom);

var _NavigatorTypes = require(441               ); // 441 = ./NavigatorTypes

var _NavigatorTypes2 = babelHelpers.interopRequireDefault(_NavigatorTypes);

var TabNavigator = function TabNavigator(routeConfigs) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var mergedConfig = babelHelpers.extends({}, TabNavigator.Presets.Default, config);
  var tabBarComponent = mergedConfig.tabBarComponent,
      tabBarPosition = mergedConfig.tabBarPosition,
      tabBarOptions = mergedConfig.tabBarOptions,
      swipeEnabled = mergedConfig.swipeEnabled,
      animationEnabled = mergedConfig.animationEnabled,
      lazy = mergedConfig.lazy,
      tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ['tabBarComponent', 'tabBarPosition', 'tabBarOptions', 'swipeEnabled', 'animationEnabled', 'lazy']);


  var router = (0, _TabRouter2.default)(routeConfigs, tabsConfig);

  var navigator = (0, _createNavigator2.default)(router, routeConfigs, config, _NavigatorTypes2.default.STACK)(function (props) {
    return _react2.default.createElement(_TabView2.default, babelHelpers.extends({}, props, {
      tabBarComponent: tabBarComponent,
      tabBarPosition: tabBarPosition,
      tabBarOptions: tabBarOptions,
      swipeEnabled: swipeEnabled,
      animationEnabled: animationEnabled,
      lazy: lazy,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 51
      }
    }));
  });

  return (0, _createNavigationContainer2.default)(navigator, tabsConfig.containerOptions);
};

var Presets = {
  iOSBottomTabs: {
    tabBarComponent: _TabBarBottom2.default,
    tabBarPosition: 'bottom',
    swipeEnabled: false,
    animationEnabled: false,
    lazy: false
  },
  AndroidTopTabs: {
    tabBarComponent: _TabBarTop2.default,
    tabBarPosition: 'top',
    swipeEnabled: true,
    animationEnabled: true,
    lazy: false
  }
};

TabNavigator.Presets = {
  iOSBottomTabs: Presets.iOSBottomTabs,
  AndroidTopTabs: Presets.AndroidTopTabs,
  Default: _reactNative.Platform.OS === 'ios' ? Presets.iOSBottomTabs : Presets.AndroidTopTabs
};

exports.default = TabNavigator;
}, 442, null, "react-navigation/src/navigators/TabNavigator.js");
__d(/* react-navigation/src/routers/TabRouter.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _invariant = require(18                  ); // 18 = fbjs/lib/invariant

var _invariant2 = babelHelpers.interopRequireDefault(_invariant);

var _getScreenForRouteName = require(437                      ); // 437 = ./getScreenForRouteName

var _getScreenForRouteName2 = babelHelpers.interopRequireDefault(_getScreenForRouteName);

var _createConfigGetter = require(436                   ); // 436 = ./createConfigGetter

var _createConfigGetter2 = babelHelpers.interopRequireDefault(_createConfigGetter);

var _NavigationActions = require(409                   ); // 409 = ../NavigationActions

var _NavigationActions2 = babelHelpers.interopRequireDefault(_NavigationActions);

var _validateRouteConfigMap = require(439                       ); // 439 = ./validateRouteConfigMap

var _validateRouteConfigMap2 = babelHelpers.interopRequireDefault(_validateRouteConfigMap);

var _getScreenConfigDeprecated = require(440                          ); // 440 = ./getScreenConfigDeprecated

var _getScreenConfigDeprecated2 = babelHelpers.interopRequireDefault(_getScreenConfigDeprecated);

exports.default = function (routeConfigs) {
  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  (0, _validateRouteConfigMap2.default)(routeConfigs);

  var order = config.order || Object.keys(routeConfigs);
  var paths = config.paths || {};
  var initialRouteName = config.initialRouteName || order[0];
  var initialRouteIndex = order.indexOf(initialRouteName);
  var backBehavior = config.backBehavior || 'initialRoute';
  var shouldBackNavigateToInitialRoute = backBehavior === 'initialRoute';
  var tabRouters = {};
  order.forEach(function (routeName) {
    var routeConfig = routeConfigs[routeName];
    paths[routeName] = typeof routeConfig.path === 'string' ? routeConfig.path : routeName;
    tabRouters[routeName] = null;
    if (routeConfig.screen && routeConfig.screen.router) {
      tabRouters[routeName] = routeConfig.screen.router;
    }
  });
  (0, _invariant2.default)(initialRouteIndex !== -1, 'Invalid initialRouteName \'' + initialRouteName + '\' for TabRouter. ' + ('Should be one of ' + order.map(function (n) {
    return '"' + n + '"';
  }).join(', ')));
  return {
    getStateForAction: function getStateForAction(action, inputState) {
      action = _NavigationActions2.default.mapDeprecatedActionAndWarn(action);

      var state = inputState;
      if (!state) {
        var _routes = order.map(function (routeName) {
          var tabRouter = tabRouters[routeName];
          if (tabRouter) {
            var childAction = action.action || _NavigationActions2.default.init(babelHelpers.extends({}, action.params ? { params: action.params } : {}));
            return babelHelpers.extends({}, tabRouter.getStateForAction(childAction), {
              key: routeName,
              routeName: routeName
            });
          }
          return {
            key: routeName,
            routeName: routeName
          };
        });
        state = {
          routes: _routes,
          index: initialRouteIndex
        };
      }

      if (action.type === _NavigationActions2.default.INIT) {
        var _action = action,
            params = _action.params;

        if (params) {
          state.routes = state.routes.map(function (route) {
            return babelHelpers.extends({}, route, {
              params: babelHelpers.extends({}, route.params, params)
            });
          });
        }
      }

      var activeTabLastState = state.routes[state.index];
      var activeTabRouter = tabRouters[order[state.index]];
      if (activeTabRouter) {
        var activeTabState = activeTabRouter.getStateForAction(action.action || action, activeTabLastState);
        if (!activeTabState && inputState) {
          return null;
        }
        if (activeTabState && activeTabState !== activeTabLastState) {
          var _routes2 = [].concat(babelHelpers.toConsumableArray(state.routes));
          _routes2[state.index] = activeTabState;
          return babelHelpers.extends({}, state, {
            routes: _routes2
          });
        }
      }

      var activeTabIndex = state.index;
      var isBackEligible = action.key == null || action.key === activeTabLastState.key;
      if (action.type === _NavigationActions2.default.BACK && isBackEligible && shouldBackNavigateToInitialRoute) {
        activeTabIndex = initialRouteIndex;
      }
      var didNavigate = false;
      if (action.type === _NavigationActions2.default.NAVIGATE) {
        var navigateAction = action;
        didNavigate = !!order.find(function (tabId, i) {
          if (tabId === navigateAction.routeName) {
            activeTabIndex = i;
            return true;
          }
          return false;
        });
        if (didNavigate) {
          var childState = state.routes[activeTabIndex];
          var newChildState = void 0;

          var tabRouter = tabRouters[action.routeName];

          if (action.action) {
            newChildState = tabRouter ? tabRouter.getStateForAction(action.action, childState) : null;
          } else if (!tabRouter && action.params) {
            newChildState = babelHelpers.extends({}, childState, {
              params: babelHelpers.extends({}, childState.params || {}, action.params)
            });
          }

          if (newChildState && newChildState !== childState) {
            var _routes3 = [].concat(babelHelpers.toConsumableArray(state.routes));
            _routes3[activeTabIndex] = newChildState;
            return babelHelpers.extends({}, state, {
              routes: _routes3,
              index: activeTabIndex
            });
          }
        }
      }
      if (action.type === _NavigationActions2.default.SET_PARAMS) {
        var lastRoute = state.routes.find(function (route) {
          return route.key === action.key;
        });
        if (lastRoute) {
          var _params = babelHelpers.extends({}, lastRoute.params, action.params);
          var _routes4 = [].concat(babelHelpers.toConsumableArray(state.routes));
          _routes4[state.routes.indexOf(lastRoute)] = babelHelpers.extends({}, lastRoute, {
            params: _params
          });
          return babelHelpers.extends({}, state, {
            routes: _routes4
          });
        }
      }
      if (activeTabIndex !== state.index) {
        return babelHelpers.extends({}, state, {
          index: activeTabIndex
        });
      } else if (didNavigate && !inputState) {
        return state;
      } else if (didNavigate) {
        return null;
      }

      var index = state.index;

      var routes = state.routes;
      order.find(function (tabId, i) {
        var tabRouter = tabRouters[tabId];
        if (i === index) {
          return false;
        }
        var tabState = routes[i];
        if (tabRouter) {
          tabState = tabRouter.getStateForAction(action, tabState);
        }
        if (!tabState) {
          index = i;
          return true;
        }
        if (tabState !== routes[i]) {
          routes = [].concat(babelHelpers.toConsumableArray(routes));
          routes[i] = tabState;
          index = i;
          return true;
        }
        return false;
      });


      if (index !== state.index || routes !== state.routes) {
        return babelHelpers.extends({}, state, {
          index: index,
          routes: routes
        });
      }
      return state;
    },
    getComponentForState: function getComponentForState(state) {
      var routeName = order[state.index];
      (0, _invariant2.default)(routeName, 'There is no route defined for index ' + state.index + '. Check that\n        that you passed in a navigation state with a valid tab/screen index.');
      var childRouter = tabRouters[routeName];
      if (childRouter) {
        return childRouter.getComponentForState(state.routes[state.index]);
      }
      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
    },
    getComponentForRouteName: function getComponentForRouteName(routeName) {
      return (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
    },
    getPathAndParamsForState: function getPathAndParamsForState(state) {
      var route = state.routes[state.index];
      var routeName = order[state.index];
      var subPath = paths[routeName];
      var screen = (0, _getScreenForRouteName2.default)(routeConfigs, routeName);
      var path = subPath;
      var params = route.params;
      if (screen && screen.router) {
        var child = screen.router.getPathAndParamsForState(route);
        path = subPath ? subPath + '/' + child.path : child.path;
        params = child.params ? babelHelpers.extends({}, params, child.params) : params;
      }
      return {
        path: path,
        params: params
      };
    },
    getActionForPathAndParams: function getActionForPathAndParams(path, params) {
      return order.map(function (tabId) {
        var parts = path.split('/');
        var pathToTest = paths[tabId];
        if (parts[0] === pathToTest) {
          var tabRouter = tabRouters[tabId];
          var action = _NavigationActions2.default.navigate({
            routeName: tabId
          });
          if (tabRouter && tabRouter.getActionForPathAndParams) {
            action.action = tabRouter.getActionForPathAndParams(parts.slice(1).join('/'), params);
          } else if (params) {
            action.params = params;
          }
          return action;
        }
        return null;
      }).find(function (action) {
        return !!action;
      }) || order.map(function (tabId) {
        var tabRouter = tabRouters[tabId];
        return tabRouter && tabRouter.getActionForPathAndParams(path, params);
      }).find(function (action) {
        return !!action;
      }) || null;
    },


    getScreenOptions: (0, _createConfigGetter2.default)(routeConfigs, config.navigationOptions),

    getScreenConfig: _getScreenConfigDeprecated2.default
  };
};
}, 443, null, "react-navigation/src/routers/TabRouter.js");
__d(/* react-navigation/src/views/TabView/TabView.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/TabView/TabView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNativeTabView = require(445                    ); // 445 = react-native-tab-view

var _SceneView = require(426           ); // 426 = ../SceneView

var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

var _withCachedChildNavigation = require(454                              ); // 454 = ../../withCachedChildNavigation

var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

var TabView = function (_PureComponent) {
  babelHelpers.inherits(TabView, _PureComponent);

  function TabView() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TabView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabView.__proto__ || Object.getPrototypeOf(TabView)).call.apply(_ref, [this].concat(args))), _this), _this._handlePageChanged = function (index) {
      var navigation = _this.props.navigation;

      navigation.navigate(navigation.state.routes[index].routeName);
    }, _this._renderScene = function (_ref2) {
      var route = _ref2.route;
      var screenProps = _this.props.screenProps;

      var childNavigation = _this.props.childNavigationProps[route.key];
      var TabComponent = _this.props.router.getComponentForRouteName(route.routeName);
      return _react2.default.createElement(
        _reactNative.View,
        { style: styles.page, __source: {
            fileName: _jsxFileName,
            lineNumber: 69
          }
        },
        _react2.default.createElement(_SceneView2.default, {
          screenProps: screenProps,
          component: TabComponent,
          navigation: childNavigation,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 70
          }
        })
      );
    }, _this._getLabel = function (_ref3) {
      var route = _ref3.route,
          tintColor = _ref3.tintColor,
          focused = _ref3.focused;

      var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});

      if (options.tabBarLabel) {
        return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({ tintColor: tintColor, focused: focused }) : options.tabBarLabel;
      }

      if (typeof options.title === 'string') {
        return options.title;
      }

      return route.routeName;
    }, _this._renderIcon = function (_ref4) {
      var focused = _ref4.focused,
          route = _ref4.route,
          tintColor = _ref4.tintColor;

      var options = _this.props.router.getScreenOptions(_this.props.childNavigationProps[route.key], _this.props.screenProps || {});
      if (options.tabBarIcon) {
        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ tintColor: tintColor, focused: focused }) : options.tabBarIcon;
      }
      return null;
    }, _this._renderTabBar = function (props) {
      var _this$props = _this.props,
          tabBarOptions = _this$props.tabBarOptions,
          TabBarComponent = _this$props.tabBarComponent,
          animationEnabled = _this$props.animationEnabled;

      if (typeof TabBarComponent === 'undefined') {
        return null;
      }
      return _react2.default.createElement(TabBarComponent, babelHelpers.extends({}, props, tabBarOptions, {
        navigation: _this.props.navigation,
        getLabel: _this._getLabel,
        renderIcon: _this._renderIcon,
        animationEnabled: animationEnabled,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 121
        }
      }));
    }, _this._renderPager = function (props) {
      return _react2.default.createElement(_reactNativeTabView.TabViewPagerPan, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 132
        }
      }));
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TabView, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          router = _props.router,
          tabBarComponent = _props.tabBarComponent,
          tabBarPosition = _props.tabBarPosition,
          animationEnabled = _props.animationEnabled,
          swipeEnabled = _props.swipeEnabled,
          lazy = _props.lazy,
          screenProps = _props.screenProps;


      var renderHeader = void 0;
      var renderFooter = void 0;
      var renderPager = void 0;

      var state = this.props.navigation.state;

      var options = router.getScreenOptions(this.props.childNavigationProps[state.routes[state.index].key], screenProps || {});

      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;

      if (tabBarComponent !== undefined && tabBarVisible) {
        if (tabBarPosition === 'bottom') {
          renderFooter = this._renderTabBar;
        } else {
          renderHeader = this._renderTabBar;
        }
      }

      if (animationEnabled === false && swipeEnabled === false) {
        renderPager = this._renderPager;
      }

      var props = {
        lazy: lazy,
        animationEnabled: animationEnabled,
        swipeEnabled: swipeEnabled,
        renderPager: renderPager,
        renderHeader: renderHeader,
        renderFooter: renderFooter,
        renderScene: this._renderScene,
        onRequestChangeTab: this._handlePageChanged,
        navigationState: this.props.navigation.state,
        screenProps: this.props.screenProps,
        style: styles.container
      };

      return _react2.default.createElement(_reactNativeTabView.TabViewAnimated, babelHelpers.extends({}, props, {
        __source: {
          fileName: _jsxFileName,
          lineNumber: 185
        }
      }));
    }
  }]);
  return TabView;
}(_react.PureComponent);

exports.default = (0, _withCachedChildNavigation2.default)(TabView);


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },

  page: {
    flex: 1,
    overflow: 'hidden'
  }
});
}, 444, null, "react-navigation/src/views/TabView/TabView.js");
__d(/* react-native-tab-view/src/index.js */function(global, require, module, exports) {

module.exports = {
  get TabViewAnimated() {
    return require(446                ).default; // 446 = ./TabViewAnimated
  },
  get TabViewPagerPan() {
    return require(450                ).default; // 450 = ./TabViewPagerPan
  },
  get TabViewPagerScroll() {
    return require(449                   ).default; // 449 = ./TabViewPagerScroll
  },
  get TabViewPagerAndroid() {
    return require(448                    ).default; // 448 = ./TabViewPagerAndroid
  },
  get TabBar() {
    return require(451       ).default; // 451 = ./TabBar
  },
  get SceneMap() {
    return require(453         ).default; // 453 = ./SceneMap
  }
};
}, 445, null, "react-native-tab-view/src/index.js");
__d(/* react-native-tab-view/src/TabViewAnimated.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-view/src/TabViewAnimated.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require(46            ); // 46 = react-native

var _TabViewPropTypes = require(447                 ); // 447 = ./TabViewPropTypes

var TabViewPager = void 0;

switch (_reactNative.Platform.OS) {
  case 'android':
    TabViewPager = require(448                    ).default; // 448 = ./TabViewPagerAndroid
    break;
  case 'ios':
    TabViewPager = require(449                   ).default; // 449 = ./TabViewPagerScroll
    break;
  default:
    TabViewPager = require(450                ).default; // 450 = ./TabViewPagerPan
    break;
}

var TabViewAnimated = function (_PureComponent) {
  babelHelpers.inherits(TabViewAnimated, _PureComponent);

  function TabViewAnimated(props) {
    babelHelpers.classCallCheck(this, TabViewAnimated);

    var _this = babelHelpers.possibleConstructorReturn(this, (TabViewAnimated.__proto__ || Object.getPrototypeOf(TabViewAnimated)).call(this, props));

    _initialiseProps.call(_this);

    _this.state = {
      loaded: [_this.props.navigationState.index],
      layout: babelHelpers.extends({}, _this.props.initialLayout, {
        measured: false
      }),
      position: new _reactNative.Animated.Value(_this.props.navigationState.index)
    };
    return _this;
  }

  babelHelpers.createClass(TabViewAnimated, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._mounted = true;
      this._positionListener = this.state.position.addListener(this._trackPosition);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._mounted = false;
      this.state.position.removeListener(this._positionListener);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          navigationState = _props.navigationState,
          onRequestChangeTab = _props.onRequestChangeTab,
          onChangePosition = _props.onChangePosition,
          canJumpToTab = _props.canJumpToTab,
          lazy = _props.lazy,
          initialLayout = _props.initialLayout,
          renderScene = _props.renderScene,
          renderPager = _props.renderPager,
          renderHeader = _props.renderHeader,
          renderFooter = _props.renderFooter,
          rest = babelHelpers.objectWithoutProperties(_props, ['navigationState', 'onRequestChangeTab', 'onChangePosition', 'canJumpToTab', 'lazy', 'initialLayout', 'renderScene', 'renderPager', 'renderHeader', 'renderFooter']);

      var props = this._buildSceneRendererProps();

      return _react2.default.createElement(
        _reactNative.View,
        {
          onLayout: this._handleLayout,
          loaded: this.state.loaded,
          style: [styles.container, this.props.style],
          __source: {
            fileName: _jsxFileName,
            lineNumber: 260
          }
        },
        renderHeader && _react2.default.createElement(
          _reactNative.View,
          { collapsable: false, __source: {
              fileName: _jsxFileName,
              lineNumber: 265
            }
          },
          renderHeader(props)
        ),
        renderPager(babelHelpers.extends({}, props, rest, {
          children: navigationState.routes.map(function (route, index) {
            return _this2._renderScene(babelHelpers.extends({}, props, {
              route: route,
              index: index,
              focused: index === navigationState.index
            }));
          })
        })),
        renderFooter && _react2.default.createElement(
          _reactNative.View,
          { collapsable: false, __source: {
              fileName: _jsxFileName,
              lineNumber: 278
            }
          },
          renderFooter(props)
        )
      );
    }
  }]);
  return TabViewAnimated;
}(_react.PureComponent);

TabViewAnimated.propTypes = {
  navigationState: _TabViewPropTypes.NavigationStatePropType.isRequired,
  onRequestChangeTab: _propTypes2.default.func.isRequired,
  onChangePosition: _propTypes2.default.func,
  initialLayout: _propTypes2.default.shape({
    height: _propTypes2.default.number.isRequired,
    width: _propTypes2.default.number.isRequired
  }),
  canJumpToTab: _propTypes2.default.func,
  renderPager: _propTypes2.default.func.isRequired,
  renderScene: _propTypes2.default.func.isRequired,
  renderHeader: _propTypes2.default.func,
  renderFooter: _propTypes2.default.func,
  lazy: _propTypes2.default.bool
};
TabViewAnimated.defaultProps = {
  renderPager: function renderPager(props) {
    return _react2.default.createElement(TabViewPager, babelHelpers.extends({}, props, {
      __source: {
        fileName: _jsxFileName,
        lineNumber: 81
      }
    }));
  },
  initialLayout: {
    height: 0,
    width: 0
  }
};

var _initialiseProps = function _initialiseProps() {
  var _this3 = this;

  this._mounted = false;
  this._subscriptions = {};

  this._renderScene = function (props) {
    var _props2 = _this3.props,
        renderScene = _props2.renderScene,
        lazy = _props2.lazy;
    var navigationState = props.navigationState;
    var loaded = _this3.state.loaded;

    if (lazy) {
      if (loaded.includes(navigationState.routes.indexOf(props.route))) {
        return renderScene(props);
      }
      return null;
    }
    return renderScene(props);
  };

  this._handleChangePosition = function (value) {
    var _props3 = _this3.props,
        onChangePosition = _props3.onChangePosition,
        navigationState = _props3.navigationState,
        lazy = _props3.lazy;

    if (onChangePosition) {
      onChangePosition(value);
    }
    var loaded = _this3.state.loaded;

    if (lazy) {
      var next = Math.ceil(value);
      if (next === navigationState.index) {
        next = Math.floor(value);
      }
      if (loaded.includes(next)) {
        return;
      }
      _this3.setState({
        loaded: [].concat(babelHelpers.toConsumableArray(loaded), [next])
      });
    }
  };

  this._trackPosition = function (e) {
    _this3._handleChangePosition(e.value);
    _this3._triggerEvent('position', e.value);
    _this3._lastPosition = e.value;
    var onChangePosition = _this3.props.onChangePosition;

    if (onChangePosition) {
      onChangePosition(e.value);
    }
  };

  this._getLastPosition = function () {
    if (typeof _this3._lastPosition === 'number') {
      return _this3._lastPosition;
    } else {
      return _this3.props.navigationState.index;
    }
  };

  this._handleLayout = function (e) {
    var _e$nativeEvent$layout = e.nativeEvent.layout,
        height = _e$nativeEvent$layout.height,
        width = _e$nativeEvent$layout.width;


    if (_this3.state.layout.width === width && _this3.state.layout.height === height) {
      return;
    }

    _this3.setState({
      layout: {
        measured: true,
        height: height,
        width: width
      }
    });
  };

  this._buildSceneRendererProps = function () {
    return {
      layout: _this3.state.layout,
      navigationState: _this3.props.navigationState,
      position: _this3.state.position,
      jumpToIndex: _this3._jumpToIndex,
      getLastPosition: _this3._getLastPosition,
      subscribe: _this3._addSubscription
    };
  };

  this._jumpToIndex = function (index) {
    if (!_this3._mounted) {
      return;
    }

    var _props4 = _this3.props,
        canJumpToTab = _props4.canJumpToTab,
        navigationState = _props4.navigationState;


    if (canJumpToTab && !canJumpToTab(navigationState.routes[index])) {
      _this3._triggerEvent('reset', navigationState.index);
      return;
    }

    if (index !== navigationState.index) {
      _this3.props.onRequestChangeTab(index);
    }
  };

  this._addSubscription = function (event, callback) {
    if (!_this3._subscriptions[event]) {
      _this3._subscriptions[event] = [];
    }
    _this3._subscriptions[event].push(callback);
    return {
      remove: function remove() {
        var index = _this3._subscriptions[event].indexOf(callback);
        if (index > -1) {
          _this3._subscriptions[event].splice(index, 1);
        }
      }
    };
  };

  this._triggerEvent = function (event, value) {
    if (_this3._subscriptions[event]) {
      _this3._subscriptions[event].forEach(function (fn) {
        return fn(value);
      });
    }
  };
};

exports.default = TabViewAnimated;


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    overflow: 'hidden'
  }
});
}, 446, null, "react-native-tab-view/src/TabViewAnimated.js");
__d(/* react-native-tab-view/src/TabViewPropTypes.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SceneRendererPropType = exports.NavigationStatePropType = exports.NavigationRoutePropType = undefined;

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require(46            ); // 46 = react-native

var NavigationRoutePropType = exports.NavigationRoutePropType = _propTypes2.default.shape({
  title: _propTypes2.default.string,
  key: _propTypes2.default.string.isRequired
});

var NavigationStatePropType = exports.NavigationStatePropType = _propTypes2.default.shape({
  routes: _propTypes2.default.arrayOf(NavigationRoutePropType).isRequired,
  index: _propTypes2.default.number.isRequired
});

var SceneRendererPropType = exports.SceneRendererPropType = {
  layout: _propTypes2.default.shape({
    measured: _propTypes2.default.bool.isRequired,
    height: _propTypes2.default.number.isRequired,
    width: _propTypes2.default.number.isRequired
  }).isRequired,
  navigationState: NavigationStatePropType.isRequired,
  position: _propTypes2.default.instanceOf(_reactNative.Animated.Value).isRequired,
  jumpToIndex: _propTypes2.default.func.isRequired,
  getLastPosition: _propTypes2.default.func.isRequired,
  subscribe: _propTypes2.default.func.isRequired
};
}, 447, null, "react-native-tab-view/src/TabViewPropTypes.js");
__d(/* react-native-tab-view/src/TabViewPagerAndroid.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-view/src/TabViewPagerAndroid.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require(46            ); // 46 = react-native

var _TabViewPropTypes = require(447                 ); // 447 = ./TabViewPropTypes

var TabViewPagerAndroid = function (_PureComponent) {
  babelHelpers.inherits(TabViewPagerAndroid, _PureComponent);

  function TabViewPagerAndroid(props) {
    babelHelpers.classCallCheck(this, TabViewPagerAndroid);

    var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerAndroid.__proto__ || Object.getPrototypeOf(TabViewPagerAndroid)).call(this, props));

    _this._isIdle = true;
    _this._currentIndex = 0;

    _this._getPageIndex = function (index) {
      return _reactNative.I18nManager.isRTL ? _this.props.navigationState.routes.length - (index + 1) : index;
    };

    _this._setPage = function (index) {
      if (_this._viewPager) {
        var page = _this._getPageIndex(index);
        if (_this.props.animationEnabled !== false) {
          _this._viewPager.setPage(page);
        } else {
          _this._viewPager.setPageWithoutAnimation(page);
        }
      }
    };

    _this._handlePageChange = function (index) {
      if (_this._isIdle && _this._currentIndex !== index) {
        _this._setPage(index);
        _this._currentIndex = index;
      }
    };

    _this._handlePageScroll = function (e) {
      _this.props.position.setValue(_this._getPageIndex(e.nativeEvent.position) + e.nativeEvent.offset * (_reactNative.I18nManager.isRTL ? -1 : 1));
    };

    _this._handlePageScrollStateChanged = function (e) {
      _this._isIdle = e === 'idle';
      _this.props.jumpToIndex(_this._currentIndex);
    };

    _this._handlePageSelected = function (e) {
      var index = _this._getPageIndex(e.nativeEvent.position);
      _this._currentIndex = index;
    };

    _this._setRef = function (el) {
      return _this._viewPager = el;
    };

    _this._currentIndex = _this.props.navigationState.index;
    return _this;
  }

  babelHelpers.createClass(TabViewPagerAndroid, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._resetListener = this.props.subscribe('reset', this._handlePageChange);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var _this2 = this;

      if (this.props.layout !== nextProps.layout || _react.Children.count(this.props.children) !== _react.Children.count(nextProps.children)) {
        global.requestAnimationFrame(function () {
          if (_this2._viewPager) {
            var navigationState = nextProps.navigationState;

            var page = _reactNative.I18nManager.isRTL ? navigationState.routes.length - (navigationState.index + 1) : navigationState.index;

            _this2._viewPager.setPageWithoutAnimation(page);
          }
        });
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate() {
      this._handlePageChange(this.props.navigationState.index);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._resetListener.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          navigationState = _props.navigationState,
          swipeEnabled = _props.swipeEnabled;

      var content = _react.Children.map(children, function (child, i) {
        return _react2.default.createElement(
          _reactNative.View,
          {
            key: navigationState.routes[i].key,
            testID: navigationState.routes[i].testID,
            style: styles.page,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 118
            }
          },
          child
        );
      });

      if (_reactNative.I18nManager.isRTL) {
        content.reverse();
      }

      var initialPage = this._getPageIndex(navigationState.index);

      return _react2.default.createElement(
        _reactNative.ViewPagerAndroid,
        {
          key: navigationState.routes.length,
          keyboardDismissMode: 'on-drag',
          initialPage: initialPage,
          scrollEnabled: swipeEnabled !== false,
          onPageScroll: this._handlePageScroll,
          onPageScrollStateChanged: this._handlePageScrollStateChanged,
          onPageSelected: this._handlePageSelected,
          style: styles.container,
          ref: this._setRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 134
          }
        },
        content
      );
    }
  }]);
  return TabViewPagerAndroid;
}(_react.PureComponent);

TabViewPagerAndroid.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
  animationEnabled: _propTypes2.default.bool,
  swipeEnabled: _propTypes2.default.bool,
  children: _propTypes2.default.node
});
exports.default = TabViewPagerAndroid;


var styles = _reactNative.StyleSheet.create({
  container: {
    flexGrow: 1
  },

  page: {
    overflow: 'hidden'
  }
});
}, 448, null, "react-native-tab-view/src/TabViewPagerAndroid.js");
__d(/* react-native-tab-view/src/TabViewPagerScroll.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-view/src/TabViewPagerScroll.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require(46            ); // 46 = react-native

var _TabViewPropTypes = require(447                 ); // 447 = ./TabViewPropTypes

var TabViewPagerScroll = function (_PureComponent) {
  babelHelpers.inherits(TabViewPagerScroll, _PureComponent);

  function TabViewPagerScroll(props) {
    babelHelpers.classCallCheck(this, TabViewPagerScroll);

    var _this = babelHelpers.possibleConstructorReturn(this, (TabViewPagerScroll.__proto__ || Object.getPrototypeOf(TabViewPagerScroll)).call(this, props));

    _this._nextOffset = 0;
    _this._isIdle = true;

    _this._scrollTo = function (x) {
      var animated = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this.props.animationEnabled !== false;

      _this._nextOffset = x;

      if (_this._isIdle && _this._scrollView) {
        _this._scrollView.scrollTo({
          x: x,
          animated: animated
        });
      }
    };

    _this._handleMomentumScrollEnd = function (e) {
      var nextIndex = Math.round(e.nativeEvent.contentOffset.x / _this.props.layout.width);
      _this._isIdle = true;
      _this.props.jumpToIndex(nextIndex);
    };

    _this._handleScroll = function (e) {
      _this._isIdle = e.nativeEvent.contentOffset.x === _this._nextOffset;
      _this.props.position.setValue(e.nativeEvent.contentOffset.x / _this.props.layout.width);
    };

    _this._setRef = function (el) {
      return _this._scrollView = el;
    };

    _this.state = {
      initialOffset: {
        x: _this.props.navigationState.index * _this.props.layout.width,
        y: 0
      }
    };
    return _this;
  }

  babelHelpers.createClass(TabViewPagerScroll, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._scrollTo(this.props.navigationState.index * this.props.layout.width, false);
      this._resetListener = this.props.subscribe('reset', this._scrollTo);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      var amount = this.props.navigationState.index * this.props.layout.width;
      if (prevProps.navigationState !== this.props.navigationState || prevProps.layout !== this.props.layout) {
        if (_reactNative.Platform.OS === 'android' || prevProps.navigationState !== this.props.navigationState) {
          global.requestAnimationFrame(function () {
            return _this2._scrollTo(amount);
          });
        } else {
          this._scrollTo(amount, false);
        }
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._resetListener.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          layout = _props.layout,
          navigationState = _props.navigationState;

      return _react2.default.createElement(
        _reactNative.ScrollView,
        {
          horizontal: true,
          pagingEnabled: true,
          directionalLockEnabled: true,
          keyboardDismissMode: 'on-drag',
          keyboardShouldPersistTaps: 'always',
          scrollEnabled: this.props.swipeEnabled,
          automaticallyAdjustContentInsets: false,
          bounces: false,
          alwaysBounceHorizontal: false,
          scrollsToTop: false,
          showsHorizontalScrollIndicator: false,
          scrollEventThrottle: 16,
          onScroll: this._handleScroll,
          onMomentumScrollEnd: this._handleMomentumScrollEnd,
          contentOffset: this.state.initialOffset,
          style: styles.container,
          contentContainerStyle: layout.width ? null : styles.container,
          ref: this._setRef,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 114
          }
        },
        _react.Children.map(children, function (child, i) {
          return _react2.default.createElement(
            _reactNative.View,
            {
              key: navigationState.routes[i].key,
              testID: navigationState.routes[i].testID,
              style: layout.width ? { width: layout.width, overflow: 'hidden' } : i === navigationState.index ? styles.page : null,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 135
              }
            },
            i === navigationState.index || layout.width ? child : null
          );
        })
      );
    }
  }]);
  return TabViewPagerScroll;
}(_react.PureComponent);

TabViewPagerScroll.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
  animationEnabled: _propTypes2.default.bool,
  swipeEnabled: _propTypes2.default.bool,
  children: _propTypes2.default.node
});
exports.default = TabViewPagerScroll;


var styles = _reactNative.StyleSheet.create({
  container: {
    flexGrow: 1
  },

  page: {
    flex: 1,
    overflow: 'hidden'
  }
});
}, 449, null, "react-native-tab-view/src/TabViewPagerScroll.js");
__d(/* react-native-tab-view/src/TabViewPagerPan.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-view/src/TabViewPagerPan.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require(46            ); // 46 = react-native

var _TabViewPropTypes = require(447                 ); // 447 = ./TabViewPropTypes

var DEAD_ZONE = 12;

var DefaultTransitionSpec = {
  timing: _reactNative.Animated.spring,
  tension: 300,
  friction: 35
};

var TabViewPagerPan = function (_PureComponent) {
  babelHelpers.inherits(TabViewPagerPan, _PureComponent);

  function TabViewPagerPan() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TabViewPagerPan);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabViewPagerPan.__proto__ || Object.getPrototypeOf(TabViewPagerPan)).call.apply(_ref, [this].concat(args))), _this), _this._pendingIndex = null, _this._lastValue = null, _this._isMoving = null, _this._startDirection = 0, _this._isIndexInRange = function (index) {
      var routes = _this.props.navigationState.routes;

      return index >= 0 && index <= routes.length - 1;
    }, _this._isMovingHorizontally = function (evt, gestureState) {
      return Math.abs(gestureState.dx) > Math.abs(gestureState.dy * 3) && Math.abs(gestureState.vx) > Math.abs(gestureState.vy * 3);
    }, _this._isReverseDirection = function (gestureState) {
      if (_this._startDirection > 0) {
        return gestureState.vx < 0;
      } else {
        return gestureState.vx > 0;
      }
    }, _this._getNextIndex = function (evt, gestureState) {
      var currentIndex = typeof _this._pendingIndex === 'number' ? _this._pendingIndex : _this.props.navigationState.index;

      var swipeVelocityThreshold = _this.props.swipeVelocityThreshold;

      if (_reactNative.Platform.OS === 'android') {
        swipeVelocityThreshold /= 1000000;
      }

      if (Math.abs(gestureState.dx) > _this.props.swipeDistanceThreshold || Math.abs(gestureState.vx) > swipeVelocityThreshold) {
        var nextIndex = currentIndex - gestureState.dx / Math.abs(gestureState.dx) * (_reactNative.I18nManager.isRTL ? -1 : 1);
        if (_this._isIndexInRange(nextIndex)) {
          return nextIndex;
        }
      }
      return currentIndex;
    }, _this._canMoveScreen = function (evt, gestureState) {
      if (_this.props.swipeEnabled === false) {
        return false;
      }
      var _this$props$navigatio = _this.props.navigationState,
          routes = _this$props$navigatio.routes,
          index = _this$props$navigatio.index;

      var canMove = _this._isMovingHorizontally(evt, gestureState) && (gestureState.dx >= DEAD_ZONE && index >= 0 || gestureState.dx <= -DEAD_ZONE && index <= routes.length - 1);
      if (canMove) {
        _this._startDirection = gestureState.dx;
      }
      return canMove;
    }, _this._startGesture = function () {
      _this._lastValue = _this.props.getLastPosition();
      _this.props.position.stopAnimation();
    }, _this._respondToGesture = function (evt, gestureState) {
      var width = _this.props.layout.width;

      var currentPosition = typeof _this._lastValue === 'number' ? _this._lastValue : _this.props.navigationState.index;
      var nextPosition = currentPosition - gestureState.dx / width * (_reactNative.I18nManager.isRTL ? -1 : 1);
      if (_this._isMoving === null) {
        _this._isMoving = _this._isMovingHorizontally(evt, gestureState);
      }
      if (_this._isMoving && _this._isIndexInRange(nextPosition)) {
        _this.props.position.setValue(nextPosition);
      }
    }, _this._finishGesture = function (evt, gestureState) {
      var currentIndex = _this.props.navigationState.index;
      var currentValue = _this.props.getLastPosition();
      if (currentValue !== currentIndex) {
        if (_this._isMoving && !_this._isReverseDirection(gestureState)) {
          var nextIndex = _this._getNextIndex(evt, gestureState);
          _this._transitionTo(nextIndex);
        } else {
          _this._transitionTo(currentIndex);
        }
      }
      _this._lastValue = null;
      _this._isMoving = null;
    }, _this._transitionTo = function (toValue) {
      var lastPosition = _this.props.getLastPosition();
      var currentTransitionProps = {
        progress: lastPosition
      };
      var nextTransitionProps = {
        progress: toValue
      };

      _this._pendingIndex = toValue;

      if (_this.props.animationEnabled !== false) {
        var transitionSpec = _this.props.configureTransition(currentTransitionProps, nextTransitionProps);
        var timing = transitionSpec.timing,
            transitionConfig = babelHelpers.objectWithoutProperties(transitionSpec, ['timing']);


        timing(_this.props.position, babelHelpers.extends({}, transitionConfig, {
          toValue: toValue
        })).start(function (_ref2) {
          var finished = _ref2.finished;

          if (finished) {
            _this.props.jumpToIndex(toValue);
            _this._pendingIndex = null;
          }
        });
      } else {
        _this.props.position.setValue(toValue);
        _this.props.jumpToIndex(toValue);
        _this._pendingIndex = null;
      }
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TabViewPagerPan, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._panResponder = _reactNative.PanResponder.create({
        onMoveShouldSetPanResponder: this._canMoveScreen,
        onMoveShouldSetPanResponderCapture: this._canMoveScreen,
        onPanResponderGrant: this._startGesture,
        onPanResponderMove: this._respondToGesture,
        onPanResponderTerminate: this._finishGesture,
        onPanResponderRelease: this._finishGesture,
        onPanResponderTerminationRequest: function onPanResponderTerminationRequest() {
          return true;
        }
      });
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._resetListener = this.props.subscribe('reset', this._transitionTo);
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      if (prevProps.navigationState.index !== this.props.navigationState.index) {
        this._transitionTo(this.props.navigationState.index);
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._resetListener.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          layout = _props.layout,
          position = _props.position,
          navigationState = _props.navigationState,
          children = _props.children;
      var width = layout.width;
      var routes = navigationState.routes;

      var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
        return i;
      })));
      var outputRange = inputRange.map(function (i) {
        return width * i * (_reactNative.I18nManager.isRTL ? 1 : -1);
      });

      var translateX = position.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });

      return _react2.default.createElement(
        _reactNative.Animated.View,
        babelHelpers.extends({
          style: [styles.sheet, width ? { width: routes.length * width, transform: [{ translateX: translateX }] } : null]
        }, this._panResponder.panHandlers, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 275
          }
        }),
        _react.Children.map(children, function (child, i) {
          return _react2.default.createElement(
            _reactNative.View,
            {
              key: navigationState.routes[i].key,
              testID: navigationState.routes[i].testID,
              style: width ? { width: width } : i === navigationState.index ? _reactNative.StyleSheet.absoluteFill : null,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 285
              }
            },
            i === navigationState.index || width ? child : null
          );
        })
      );
    }
  }]);
  return TabViewPagerPan;
}(_react.PureComponent);

TabViewPagerPan.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
  configureTransition: _propTypes2.default.func.isRequired,
  animationEnabled: _propTypes2.default.bool,
  swipeEnabled: _propTypes2.default.bool,
  swipeDistanceThreshold: _propTypes2.default.number.isRequired,
  swipeVelocityThreshold: _propTypes2.default.number.isRequired,
  children: _propTypes2.default.node
});
TabViewPagerPan.defaultProps = {
  configureTransition: function configureTransition() {
    return DefaultTransitionSpec;
  },
  initialLayout: {
    height: 0,
    width: 0
  },
  swipeDistanceThreshold: 120,
  swipeVelocityThreshold: 0.25
};
exports.default = TabViewPagerPan;


var styles = _reactNative.StyleSheet.create({
  sheet: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'stretch'
  }
});
}, 450, null, "react-native-tab-view/src/TabViewPagerPan.js");
__d(/* react-native-tab-view/src/TabBar.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-view/src/TabBar.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require(46            ); // 46 = react-native

var _TouchableItem = require(452              ); // 452 = ./TouchableItem

var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

var _TabViewPropTypes = require(447                 ); // 447 = ./TabViewPropTypes

var TabBar = function (_PureComponent) {
  babelHelpers.inherits(TabBar, _PureComponent);

  function TabBar(props) {
    babelHelpers.classCallCheck(this, TabBar);

    var _this = babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).call(this, props));

    _initialiseProps.call(_this);

    var initialVisibility = 0;

    if (_this.props.scrollEnabled === true) {
      var tabWidth = _this._getTabWidthFromStyle(_this.props.tabStyle);
      if (_this.props.layout.width || tabWidth) {
        initialVisibility = 1;
      }
    } else {
      initialVisibility = 1;
    }

    _this.state = {
      offset: new _reactNative.Animated.Value(0),
      visibility: new _reactNative.Animated.Value(initialVisibility),
      initialOffset: {
        x: _this._getScrollAmount(_this.props, _this.props.navigationState.index),
        y: 0
      }
    };
    return _this;
  }

  babelHelpers.createClass(TabBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      this._adjustScroll(this.props.navigationState.index);
      this._positionListener = this.props.subscribe('position', this._adjustScroll);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.navigationState !== nextProps.navigationState) {
        this._resetScrollOffset(nextProps);
      }

      var nextTabWidth = this._getTabWidthFromStyle(nextProps.tabStyle);

      if (this.props.tabStyle !== nextProps.tabStyle && nextTabWidth || this.props.layout.width !== nextProps.layout.width && nextProps.layout.width) {
        this.state.visibility.setValue(1);
      }
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this2 = this;

      if (this.props.scrollEnabled && (prevProps.layout !== this.props.layout || prevProps.tabStyle !== this.props.tabStyle)) {
        global.requestAnimationFrame(function () {
          return _this2._adjustScroll(_this2.props.navigationState.index);
        });
      }
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this._positionListener.remove();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          position = _props.position,
          navigationState = _props.navigationState,
          scrollEnabled = _props.scrollEnabled;
      var routes = navigationState.routes,
          index = navigationState.index;

      var maxDistance = this._getMaxScrollableDistance(this.props);
      var finalTabWidth = this._getFinalTabWidth(this.props);
      var tabBarWidth = finalTabWidth * routes.length;

      var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
        return i;
      })));
      var translateOutputRange = inputRange.map(function (i) {
        return _this3._getScrollAmount(_this3.props, i) * -1;
      });

      var translateX = _reactNative.Animated.add(position.interpolate({
        inputRange: inputRange,
        outputRange: translateOutputRange
      }), this.state.offset).interpolate({
        inputRange: [-maxDistance, 0],
        outputRange: [-maxDistance, 0],
        extrapolate: 'clamp'
      });

      return _react2.default.createElement(
        _reactNative.Animated.View,
        { style: [styles.tabBar, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 354
          }
        },
        _react2.default.createElement(
          _reactNative.Animated.View,
          {
            pointerEvents: 'none',
            style: [styles.indicatorContainer, scrollEnabled ? { width: tabBarWidth, transform: [{ translateX: translateX }] } : null],
            __source: {
              fileName: _jsxFileName,
              lineNumber: 355
            }
          },
          this._renderIndicator(babelHelpers.extends({}, this.props, {
            width: new _reactNative.Animated.Value(finalTabWidth)
          }))
        ),
        _react2.default.createElement(
          _reactNative.View,
          { style: styles.scroll, __source: {
              fileName: _jsxFileName,
              lineNumber: 369
            }
          },
          _react2.default.createElement(
            _reactNative.ScrollView,
            {
              horizontal: true,
              scrollEnabled: scrollEnabled,
              bounces: false,
              alwaysBounceHorizontal: false,
              scrollsToTop: false,
              showsHorizontalScrollIndicator: false,
              automaticallyAdjustContentInsets: false,
              overScrollMode: 'never',
              contentContainerStyle: [styles.tabContent, scrollEnabled ? null : styles.container],
              scrollEventThrottle: 16,
              onScroll: this._handleScroll,
              onScrollBeginDrag: this._handleBeginDrag,
              onScrollEndDrag: this._handleEndDrag,
              onMomentumScrollBegin: this._handleMomentumScrollBegin,
              onMomentumScrollEnd: this._handleMomentumScrollEnd,
              contentOffset: this.state.initialOffset,
              ref: this._setRef,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 370
              }
            },
            routes.map(function (route, i) {
              var focused = index === i;
              var outputRange = inputRange.map(function (inputIndex) {
                return inputIndex === i ? 1 : 0.7;
              });
              var opacity = _reactNative.Animated.multiply(_this3.state.visibility, position.interpolate({
                inputRange: inputRange,
                outputRange: outputRange
              }));
              var scene = {
                route: route,
                focused: focused,
                index: i
              };
              var label = _this3._renderLabel(scene);
              var icon = _this3.props.renderIcon ? _this3.props.renderIcon(scene) : null;
              var badge = _this3.props.renderBadge ? _this3.props.renderBadge(scene) : null;

              var tabStyle = {};

              tabStyle.opacity = opacity;

              if (icon) {
                if (label) {
                  tabStyle.paddingTop = 8;
                } else {
                  tabStyle.padding = 12;
                }
              }

              var passedTabStyle = _reactNative.StyleSheet.flatten(_this3.props.tabStyle);
              var isWidthSet = passedTabStyle && typeof passedTabStyle.width !== 'undefined' || scrollEnabled === true;
              var tabContainerStyle = {};

              if (isWidthSet) {
                tabStyle.width = finalTabWidth;
              }

              if (passedTabStyle && typeof passedTabStyle.flex === 'number') {
                tabContainerStyle.flex = passedTabStyle.flex;
              } else if (!isWidthSet) {
                tabContainerStyle.flex = 1;
              }

              var accessibilityLabel = route.accessibilityLabel || route.title;

              return _react2.default.createElement(
                _TouchableItem2.default,
                {
                  borderless: true,
                  key: route.key,
                  testID: route.testID,
                  accessible: route.accessible,
                  accessibilityLabel: accessibilityLabel,
                  accessibilityTraits: 'button',
                  pressColor: _this3.props.pressColor,
                  pressOpacity: _this3.props.pressOpacity,
                  delayPressIn: 0,
                  onPress: function onPress() {
                    var _props2 = _this3.props,
                        onTabPress = _props2.onTabPress,
                        jumpToIndex = _props2.jumpToIndex;

                    jumpToIndex(i);
                    if (onTabPress) {
                      onTabPress(scene);
                    }
                  },
                  style: tabContainerStyle,
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 450
                  }
                },
                _react2.default.createElement(
                  _reactNative.View,
                  { style: styles.container, __source: {
                      fileName: _jsxFileName,
                      lineNumber: 470
                    }
                  },
                  _react2.default.createElement(
                    _reactNative.Animated.View,
                    {
                      style: [styles.tabItem, tabStyle, passedTabStyle, styles.container],
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 471
                      }
                    },
                    icon,
                    label
                  ),
                  badge ? _react2.default.createElement(
                    _reactNative.Animated.View,
                    {
                      style: [styles.badge, { opacity: _this3.state.visibility }],
                      __source: {
                        fileName: _jsxFileName,
                        lineNumber: 483
                      }
                    },
                    badge
                  ) : null
                )
              );
            })
          )
        )
      );
    }
  }]);
  return TabBar;
}(_react.PureComponent);

TabBar.propTypes = babelHelpers.extends({}, _TabViewPropTypes.SceneRendererPropType, {
  scrollEnabled: _propTypes2.default.bool,
  pressColor: _TouchableItem2.default.propTypes.pressColor,
  pressOpacity: _TouchableItem2.default.propTypes.pressOpacity,
  getLabelText: _propTypes2.default.func,
  renderIcon: _propTypes2.default.func,
  renderLabel: _propTypes2.default.func,
  renderIndicator: _propTypes2.default.func,
  onTabPress: _propTypes2.default.func,
  labelStyle: _reactNative.Text.propTypes.style,
  style: _propTypes2.default.any
});
TabBar.defaultProps = {
  getLabelText: function getLabelText(_ref) {
    var route = _ref.route;
    return route.title ? route.title.toUpperCase() : null;
  }
};

var _initialiseProps = function _initialiseProps() {
  var _this4 = this;

  this._isManualScroll = false;
  this._isMomentumScroll = false;

  this._renderLabel = function (scene) {
    if (typeof _this4.props.renderLabel !== 'undefined') {
      return _this4.props.renderLabel(scene);
    }
    var label = _this4.props.getLabelText(scene);
    if (typeof label !== 'string') {
      return null;
    }
    return _react2.default.createElement(
      _reactNative.Text,
      { style: [styles.tabLabel, _this4.props.labelStyle], __source: {
          fileName: _jsxFileName,
          lineNumber: 162
        }
      },
      label
    );
  };

  this._renderIndicator = function (props) {
    if (typeof _this4.props.renderIndicator !== 'undefined') {
      return _this4.props.renderIndicator(props);
    }
    var width = props.width,
        position = props.position;

    var translateX = _reactNative.Animated.multiply(_reactNative.Animated.multiply(position, width), _reactNative.I18nManager.isRTL ? -1 : 1);
    return _react2.default.createElement(_reactNative.Animated.View, {
      style: [styles.indicator, { width: width, transform: [{ translateX: translateX }] }, _this4.props.indicatorStyle],
      __source: {
        fileName: _jsxFileName,
        lineNumber: 176
      }
    });
  };

  this._getTabWidthFromStyle = function (style) {
    if (_this4._tabWidthCache && _this4._tabWidthCache.style === style) {
      return _this4._tabWidthCache.width;
    }
    var passedTabStyle = _reactNative.StyleSheet.flatten(_this4.props.tabStyle);
    var cache = {
      style: style,
      width: passedTabStyle ? passedTabStyle.width : null
    };
    _this4._tabWidthCache = cache;
    return cache;
  };

  this._getFinalTabWidth = function (props) {
    var layout = props.layout,
        navigationState = props.navigationState;

    var tabWidth = _this4._getTabWidthFromStyle(props.tabStyle);
    if (typeof tabWidth === 'number') {
      return tabWidth;
    }
    if (typeof tabWidth === 'string' && tabWidth.endsWith('%')) {
      return layout.width * (parseFloat(tabWidth, 10) / 100);
    }
    if (props.scrollEnabled) {
      return layout.width / 5 * 2;
    }
    return layout.width / navigationState.routes.length;
  };

  this._getMaxScrollableDistance = function (props) {
    var layout = props.layout,
        navigationState = props.navigationState;

    if (layout.width === 0) {
      return 0;
    }
    var finalTabWidth = _this4._getFinalTabWidth(props);
    var tabBarWidth = finalTabWidth * navigationState.routes.length;
    var maxDistance = tabBarWidth - layout.width;
    return Math.max(maxDistance, 0);
  };

  this._normalizeScrollValue = function (props, value) {
    var maxDistance = _this4._getMaxScrollableDistance(props);
    return Math.max(Math.min(value, maxDistance), 0);
  };

  this._getScrollAmount = function (props, i) {
    var layout = props.layout;

    var finalTabWidth = _this4._getFinalTabWidth(props);
    var centerDistance = finalTabWidth * i + finalTabWidth / 2;
    var scrollAmount = centerDistance - layout.width / 2;
    return _this4._normalizeScrollValue(props, scrollAmount);
  };

  this._resetScrollOffset = function (props) {
    if (!props.scrollEnabled || !_this4._scrollView) {
      return;
    }

    var scrollAmount = _this4._getScrollAmount(props, props.navigationState.index);
    _this4._scrollView.scrollTo({
      x: scrollAmount,
      animated: true
    });
    _reactNative.Animated.timing(_this4.state.offset, {
      toValue: 0,
      duration: 150
    }).start();
  };

  this._adjustScroll = function (index) {
    if (!_this4.props.scrollEnabled || !_this4._scrollView) {
      return;
    }

    var scrollAmount = _this4._getScrollAmount(_this4.props, index);
    _this4._scrollView.scrollTo({
      x: scrollAmount,
      animated: false
    });
  };

  this._adjustOffset = function (value) {
    if (!_this4._isManualScroll || !_this4.props.scrollEnabled) {
      return;
    }

    var scrollAmount = _this4._getScrollAmount(_this4.props, _this4.props.navigationState.index);
    var scrollOffset = value - scrollAmount;

    if (_this4._isMomentumScroll) {
      _reactNative.Animated.spring(_this4.state.offset, {
        toValue: -scrollOffset,
        tension: 300,
        friction: 35
      }).start();
    } else {
      _this4.state.offset.setValue(-scrollOffset);
    }
  };

  this._handleScroll = function (e) {
    _this4._adjustOffset(e.nativeEvent.contentOffset.x);
  };

  this._handleBeginDrag = function () {
    _this4._isManualScroll = true;
    _this4._isMomentumScroll = false;
  };

  this._handleEndDrag = function () {
    global.requestAnimationFrame(function () {
      if (_this4._isMomentumScroll) {
        return;
      }
      _this4._isManualScroll = false;
    });
  };

  this._handleMomentumScrollBegin = function () {
    _this4._isMomentumScroll = true;
  };

  this._handleMomentumScrollEnd = function () {
    _this4._isMomentumScroll = false;
    _this4._isManualScroll = false;
  };

  this._setRef = function (el) {
    return _this4._scrollView = el;
  };
};

exports.default = TabBar;


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  scroll: {
    overflow: _reactNative.Platform.OS === 'web' ? 'auto' : 'scroll'
  },
  tabBar: {
    backgroundColor: '#2196f3',
    elevation: 4,
    shadowColor: 'black',
    shadowOpacity: 0.1,
    shadowRadius: _reactNative.StyleSheet.hairlineWidth,
    shadowOffset: {
      height: _reactNative.StyleSheet.hairlineWidth
    },
    zIndex: 1
  },
  tabContent: {
    flexDirection: 'row',
    flexWrap: 'nowrap'
  },
  tabLabel: {
    backgroundColor: 'transparent',
    color: 'white',
    margin: 8
  },
  tabItem: {
    flexGrow: 1,
    padding: 8,
    alignItems: 'center',
    justifyContent: 'center'
  },
  badge: {
    position: 'absolute',
    top: 0,
    right: 0
  },
  indicatorContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0
  },
  indicator: {
    backgroundColor: '#ffeb3b',
    position: 'absolute',
    left: 0,
    bottom: 0,
    right: 0,
    height: 2
  }
});
}, 451, null, "react-native-tab-view/src/TabBar.js");
__d(/* react-native-tab-view/src/TouchableItem.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-view/src/TouchableItem.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _reactNative = require(46            ); // 46 = react-native

var LOLLIPOP = 21;

var TouchableItem = function (_PureComponent) {
  babelHelpers.inherits(TouchableItem, _PureComponent);

  function TouchableItem() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TouchableItem);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TouchableItem.__proto__ || Object.getPrototypeOf(TouchableItem)).call.apply(_ref, [this].concat(args))), _this), _this._handlePress = function () {
      global.requestAnimationFrame(_this.props.onPress);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TouchableItem, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          style = _props.style,
          pressOpacity = _props.pressOpacity,
          pressColor = _props.pressColor,
          borderless = _props.borderless,
          rest = babelHelpers.objectWithoutProperties(_props, ['style', 'pressOpacity', 'pressColor', 'borderless']);


      if (_reactNative.Platform.OS === 'android' && _reactNative.Platform.Version >= LOLLIPOP) {
        return _react2.default.createElement(
          _reactNative.TouchableNativeFeedback,
          babelHelpers.extends({}, rest, {
            onPress: this._handlePress,
            background: _reactNative.TouchableNativeFeedback.Ripple(pressColor, borderless),
            __source: {
              fileName: _jsxFileName,
              lineNumber: 54
            }
          }),
          _react2.default.createElement(
            _reactNative.View,
            { style: style, __source: {
                fileName: _jsxFileName,
                lineNumber: 59
              }
            },
            _react.Children.only(this.props.children)
          )
        );
      } else {
        return _react2.default.createElement(
          _reactNative.TouchableOpacity,
          babelHelpers.extends({}, rest, {
            onPress: this._handlePress,
            style: style,
            activeOpacity: pressOpacity,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          }),
          this.props.children
        );
      }
    }
  }]);
  return TouchableItem;
}(_react.PureComponent);

TouchableItem.propTypes = {
  onPress: _propTypes2.default.func.isRequired,
  delayPressIn: _propTypes2.default.number,
  borderless: _propTypes2.default.bool,
  pressColor: _propTypes2.default.string,
  pressOpacity: _propTypes2.default.number,
  children: _propTypes2.default.node.isRequired
};
TouchableItem.defaultProps = {
  pressColor: 'rgba(255, 255, 255, .4)'
};
exports.default = TouchableItem;
}, 452, null, "react-native-tab-view/src/TouchableItem.js");
__d(/* react-native-tab-view/src/SceneMap.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-view/src/SceneMap.js';
exports.default = SceneMap;

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

function SceneMap(scenes) {
  var SceneComponent = function (_PureComponent) {
    babelHelpers.inherits(SceneComponent, _PureComponent);

    function SceneComponent() {
      babelHelpers.classCallCheck(this, SceneComponent);
      return babelHelpers.possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
    }

    babelHelpers.createClass(SceneComponent, [{
      key: 'render',
      value: function render() {
        return _react2.default.createElement(scenes[this.props.route.key], this.props);
      }
    }]);
    return SceneComponent;
  }(_react.PureComponent);

  return function (_ref) {
    var route = _ref.route;
    return _react2.default.createElement(SceneComponent, { key: route.key, route: route, __source: {
        fileName: _jsxFileName,
        lineNumber: 13
      }
    });
  };
}
}, 453, null, "react-native-tab-view/src/SceneMap.js");
__d(/* react-navigation/src/withCachedChildNavigation.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/withCachedChildNavigation.js';
exports.default = withCachedChildNavigation;

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _addNavigationHelpers = require(410                     ); // 410 = ./addNavigationHelpers

var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

function withCachedChildNavigation(Comp) {
  var _class, _temp2;

  return _temp2 = _class = function (_PureComponent) {
    babelHelpers.inherits(_class, _PureComponent);

    function _class() {
      var _ref;

      var _temp, _this, _ret;

      babelHelpers.classCallCheck(this, _class);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args))), _this), _this._updateNavigationProps = function (navigation) {
        if (!_this._childNavigationProps) {
          _this._childNavigationProps = {};
        }
        navigation.state.routes.forEach(function (route) {
          var childNavigation = _this._childNavigationProps[route.key];
          if (childNavigation && childNavigation.state === route) {
            return;
          }
          _this._childNavigationProps[route.key] = (0, _addNavigationHelpers2.default)(babelHelpers.extends({}, navigation, {
            state: route
          }));
        });
      }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
    }

    babelHelpers.createClass(_class, [{
      key: 'componentWillMount',
      value: function componentWillMount() {
        this._updateNavigationProps(this.props.navigation);
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        this._updateNavigationProps(nextProps.navigation);
      }
    }, {
      key: 'render',
      value: function render() {
        return _react2.default.createElement(Comp, babelHelpers.extends({}, this.props, {
          childNavigationProps: this._childNavigationProps,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 59
          }
        }));
      }
    }]);
    return _class;
  }(_react.PureComponent), _class.displayName = 'withCachedChildNavigation(' + (Comp.displayName || Comp.name) + ')', _temp2;
}
}, 454, null, "react-navigation/src/withCachedChildNavigation.js");
__d(/* react-navigation/src/views/TabView/TabBarTop.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/TabView/TabBarTop.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNativeTabView = require(445                    ); // 445 = react-native-tab-view

var _TabBarIcon = require(456           ); // 456 = ./TabBarIcon

var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

var TabBarTop = function (_PureComponent) {
  babelHelpers.inherits(TabBarTop, _PureComponent);

  function TabBarTop() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TabBarTop);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarTop.__proto__ || Object.getPrototypeOf(TabBarTop)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
      var _this$props = _this.props,
          position = _this$props.position,
          navigation = _this$props.navigation,
          activeTintColor = _this$props.activeTintColor,
          inactiveTintColor = _this$props.inactiveTintColor,
          showLabel = _this$props.showLabel,
          upperCaseLabel = _this$props.upperCaseLabel,
          labelStyle = _this$props.labelStyle;

      if (showLabel === false) {
        return null;
      }
      var index = scene.index;
      var routes = navigation.state.routes;

      var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
        return i;
      })));
      var outputRange = inputRange.map(function (inputIndex) {
        return inputIndex === index ? activeTintColor : inactiveTintColor;
      });
      var color = position.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });

      var tintColor = scene.focused ? activeTintColor : inactiveTintColor;
      var label = _this.props.getLabel(babelHelpers.extends({}, scene, { tintColor: tintColor }));
      if (typeof label === 'string') {
        return _react2.default.createElement(
          _reactNative.Animated.Text,
          { style: [styles.label, { color: color }, labelStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 81
            }
          },
          upperCaseLabel ? label.toUpperCase() : label
        );
      }
      if (typeof label === 'function') {
        return label(babelHelpers.extends({}, scene, { tintColor: tintColor }));
      }

      return label;
    }, _this._renderIcon = function (scene) {
      var _this$props2 = _this.props,
          position = _this$props2.position,
          navigation = _this$props2.navigation,
          activeTintColor = _this$props2.activeTintColor,
          inactiveTintColor = _this$props2.inactiveTintColor,
          renderIcon = _this$props2.renderIcon,
          showIcon = _this$props2.showIcon,
          iconStyle = _this$props2.iconStyle;

      if (showIcon === false) {
        return null;
      }
      return _react2.default.createElement(_TabBarIcon2.default, {
        position: position,
        navigation: navigation,
        activeTintColor: activeTintColor,
        inactiveTintColor: inactiveTintColor,
        renderIcon: renderIcon,
        scene: scene,
        style: [styles.icon, iconStyle],
        __source: {
          fileName: _jsxFileName,
          lineNumber: 107
        }
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TabBarTop, [{
    key: 'render',
    value: function render() {
      var props = this.props;

      return _react2.default.createElement(_reactNativeTabView.TabBar, babelHelpers.extends({}, props, {
        renderIcon: this._renderIcon,
        renderLabel: this._renderLabel,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 124
        }
      }));
    }
  }]);
  return TabBarTop;
}(_react.PureComponent);

TabBarTop.defaultProps = {
  activeTintColor: '#fff',
  inactiveTintColor: '#fff',
  showIcon: false,
  showLabel: true,
  upperCaseLabel: true
};
exports.default = TabBarTop;


var styles = _reactNative.StyleSheet.create({
  icon: {
    height: 24,
    width: 24
  },
  label: {
    textAlign: 'center',
    fontSize: 13,
    margin: 8,
    backgroundColor: 'transparent'
  }
});
}, 455, null, "react-navigation/src/views/TabView/TabBarTop.js");
__d(/* react-navigation/src/views/TabView/TabBarIcon.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/TabView/TabBarIcon.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TabBarIcon = function (_PureComponent) {
  babelHelpers.inherits(TabBarIcon, _PureComponent);

  function TabBarIcon() {
    babelHelpers.classCallCheck(this, TabBarIcon);
    return babelHelpers.possibleConstructorReturn(this, (TabBarIcon.__proto__ || Object.getPrototypeOf(TabBarIcon)).apply(this, arguments));
  }

  babelHelpers.createClass(TabBarIcon, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          position = _props.position,
          scene = _props.scene,
          navigation = _props.navigation,
          activeTintColor = _props.activeTintColor,
          inactiveTintColor = _props.inactiveTintColor,
          style = _props.style;
      var route = scene.route,
          index = scene.index;
      var routes = navigation.state.routes;

      var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
        return i;
      })));
      var activeOpacity = position.interpolate({
        inputRange: inputRange,
        outputRange: inputRange.map(function (i) {
          return i === index ? 1 : 0;
        })
      });
      var inactiveOpacity = position.interpolate({
        inputRange: inputRange,
        outputRange: inputRange.map(function (i) {
          return i === index ? 0 : 1;
        })
      });

      return _react2.default.createElement(
        _reactNative.View,
        { style: style, __source: {
            fileName: _jsxFileName,
            lineNumber: 52
          }
        },
        _react2.default.createElement(
          _reactNative.Animated.View,
          { style: [styles.icon, { opacity: activeOpacity }], __source: {
              fileName: _jsxFileName,
              lineNumber: 53
            }
          },
          this.props.renderIcon({
            route: route,
            index: index,
            focused: true,
            tintColor: activeTintColor
          })
        ),
        _react2.default.createElement(
          _reactNative.Animated.View,
          { style: [styles.icon, { opacity: inactiveOpacity }], __source: {
              fileName: _jsxFileName,
              lineNumber: 61
            }
          },
          this.props.renderIcon({
            route: route,
            index: index,
            focused: false,
            tintColor: inactiveTintColor
          })
        )
      );
    }
  }]);
  return TabBarIcon;
}(_react.PureComponent);

exports.default = TabBarIcon;


var styles = _reactNative.StyleSheet.create({
  icon: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    alignItems: 'center',
    justifyContent: 'center'
  }
});
}, 456, null, "react-navigation/src/views/TabView/TabBarIcon.js");
__d(/* react-navigation/src/views/TabView/TabBarBottom.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/TabView/TabBarBottom.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _TabBarIcon = require(456           ); // 456 = ./TabBarIcon

var _TabBarIcon2 = babelHelpers.interopRequireDefault(_TabBarIcon);

var TabBarBottom = function (_PureComponent) {
  babelHelpers.inherits(TabBarBottom, _PureComponent);

  function TabBarBottom() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, TabBarBottom);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = TabBarBottom.__proto__ || Object.getPrototypeOf(TabBarBottom)).call.apply(_ref, [this].concat(args))), _this), _this._renderLabel = function (scene) {
      var _this$props = _this.props,
          position = _this$props.position,
          navigation = _this$props.navigation,
          activeTintColor = _this$props.activeTintColor,
          inactiveTintColor = _this$props.inactiveTintColor,
          labelStyle = _this$props.labelStyle,
          showLabel = _this$props.showLabel;

      if (showLabel === false) {
        return null;
      }
      var index = scene.index;
      var routes = navigation.state.routes;

      var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
        return i;
      })));
      var outputRange = inputRange.map(function (inputIndex) {
        return inputIndex === index ? activeTintColor : inactiveTintColor;
      });
      var color = position.interpolate({
        inputRange: inputRange,
        outputRange: outputRange
      });

      var tintColor = scene.focused ? activeTintColor : inactiveTintColor;
      var label = _this.props.getLabel(babelHelpers.extends({}, scene, { tintColor: tintColor }));
      if (typeof label === 'string') {
        return _react2.default.createElement(
          _reactNative.Animated.Text,
          { style: [styles.label, { color: color }, labelStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 84
            }
          },
          label
        );
      }

      if (typeof label === 'function') {
        return label(babelHelpers.extends({}, scene, { tintColor: tintColor }));
      }

      return label;
    }, _this._renderIcon = function (scene) {
      var _this$props2 = _this.props,
          position = _this$props2.position,
          navigation = _this$props2.navigation,
          activeTintColor = _this$props2.activeTintColor,
          inactiveTintColor = _this$props2.inactiveTintColor,
          renderIcon = _this$props2.renderIcon,
          showIcon = _this$props2.showIcon;

      if (showIcon === false) {
        return null;
      }
      return _react2.default.createElement(_TabBarIcon2.default, {
        position: position,
        navigation: navigation,
        activeTintColor: activeTintColor,
        inactiveTintColor: inactiveTintColor,
        renderIcon: renderIcon,
        scene: scene,
        style: styles.icon,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 110
        }
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(TabBarBottom, [{
    key: 'render',
    value: function render() {
      var _this2 = this;

      var _props = this.props,
          position = _props.position,
          navigation = _props.navigation,
          jumpToIndex = _props.jumpToIndex,
          activeBackgroundColor = _props.activeBackgroundColor,
          inactiveBackgroundColor = _props.inactiveBackgroundColor,
          style = _props.style;
      var routes = navigation.state.routes;

      var inputRange = [-1].concat(babelHelpers.toConsumableArray(routes.map(function (x, i) {
        return i;
      })));
      return _react2.default.createElement(
        _reactNative.Animated.View,
        { style: [styles.tabBar, style], __source: {
            fileName: _jsxFileName,
            lineNumber: 135
          }
        },
        routes.map(function (route, index) {
          var focused = index === navigation.state.index;
          var scene = { route: route, index: index, focused: focused };
          var outputRange = inputRange.map(function (inputIndex) {
            return inputIndex === index ? activeBackgroundColor : inactiveBackgroundColor;
          });
          var backgroundColor = position.interpolate({
            inputRange: inputRange,
            outputRange: outputRange
          });
          var justifyContent = _this2.props.showIcon ? 'flex-end' : 'center';
          return _react2.default.createElement(
            _reactNative.TouchableWithoutFeedback,
            {
              key: route.key,
              onPress: function onPress() {
                return jumpToIndex(index);
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 151
              }
            },
            _react2.default.createElement(
              _reactNative.Animated.View,
              {
                style: [styles.tab, { backgroundColor: backgroundColor, justifyContent: justifyContent }],
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 155
                }
              },
              _this2._renderIcon(scene),
              _this2._renderLabel(scene)
            )
          );
        })
      );
    }
  }]);
  return TabBarBottom;
}(_react.PureComponent);

TabBarBottom.defaultProps = {
  activeTintColor: '#3478f6',
  activeBackgroundColor: 'transparent',
  inactiveTintColor: '#929292',
  inactiveBackgroundColor: 'transparent',
  showLabel: true,
  showIcon: true
};
exports.default = TabBarBottom;


var styles = _reactNative.StyleSheet.create({
  tabBar: {
    height: 49,
    flexDirection: 'row',
    borderTopWidth: _reactNative.StyleSheet.hairlineWidth,
    borderTopColor: 'rgba(0, 0, 0, .2)',
    backgroundColor: '#f4f4f4' },
  tab: {
    flex: 1,
    alignItems: 'stretch',
    justifyContent: 'flex-end'
  },
  icon: {
    flexGrow: 1
  },
  label: {
    textAlign: 'center',
    fontSize: 10,
    marginBottom: 1.5,
    backgroundColor: 'transparent'
  }
});
}, 457, null, "react-navigation/src/views/TabView/TabBarBottom.js");
__d(/* react-navigation/src/navigators/DrawerNavigator.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/navigators/DrawerNavigator.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _createNavigator = require(412                ); // 412 = ./createNavigator

var _createNavigator2 = babelHelpers.interopRequireDefault(_createNavigator);

var _createNavigationContainer = require(407                           ); // 407 = ../createNavigationContainer

var _createNavigationContainer2 = babelHelpers.interopRequireDefault(_createNavigationContainer);

var _TabRouter = require(443                   ); // 443 = ../routers/TabRouter

var _TabRouter2 = babelHelpers.interopRequireDefault(_TabRouter);

var _DrawerScreen = require(459                           ); // 459 = ../views/Drawer/DrawerScreen

var _DrawerScreen2 = babelHelpers.interopRequireDefault(_DrawerScreen);

var _DrawerView = require(460                         ); // 460 = ../views/Drawer/DrawerView

var _DrawerView2 = babelHelpers.interopRequireDefault(_DrawerView);

var _DrawerNavigatorItems = require(463                                   ); // 463 = ../views/Drawer/DrawerNavigatorItems

var _DrawerNavigatorItems2 = babelHelpers.interopRequireDefault(_DrawerNavigatorItems);

var _NavigatorTypes = require(441               ); // 441 = ./NavigatorTypes

var _NavigatorTypes2 = babelHelpers.interopRequireDefault(_NavigatorTypes);

var DefaultDrawerConfig = {
  drawerWidth: _reactNative.Dimensions.get('window').width - (_reactNative.Platform.OS === 'android' ? 56 : 64),
  contentComponent: _DrawerNavigatorItems2.default,
  drawerPosition: 'left'
};

var DrawerNavigator = function DrawerNavigator(routeConfigs, config) {
  var mergedConfig = babelHelpers.extends({}, DefaultDrawerConfig, config);
  var containerConfig = mergedConfig.containerConfig,
      drawerWidth = mergedConfig.drawerWidth,
      contentComponent = mergedConfig.contentComponent,
      contentOptions = mergedConfig.contentOptions,
      drawerPosition = mergedConfig.drawerPosition,
      tabsConfig = babelHelpers.objectWithoutProperties(mergedConfig, ['containerConfig', 'drawerWidth', 'contentComponent', 'contentOptions', 'drawerPosition']);


  var contentRouter = (0, _TabRouter2.default)(routeConfigs, tabsConfig);

  var drawerRouter = (0, _TabRouter2.default)({
    DrawerClose: {
      screen: (0, _createNavigator2.default)(contentRouter, routeConfigs, config, _NavigatorTypes2.default.DRAWER)(function (props) {
        return _react2.default.createElement(_DrawerScreen2.default, babelHelpers.extends({}, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 61
          }
        }));
      })
    },
    DrawerOpen: {
      screen: function screen() {
        return null;
      }
    }
  }, {
    initialRouteName: 'DrawerClose'
  });

  var navigator = (0, _createNavigator2.default)(drawerRouter, routeConfigs, config, _NavigatorTypes2.default.DRAWER)(function (props) {
    return _react2.default.createElement(_DrawerView2.default, babelHelpers.extends({}, props, {
      drawerWidth: drawerWidth,
      contentComponent: contentComponent,
      contentOptions: contentOptions,
      drawerPosition: drawerPosition,
      __source: {
        fileName: _jsxFileName,
        lineNumber: 78
      }
    }));
  });

  return (0, _createNavigationContainer2.default)(navigator, containerConfig);
};

exports.default = DrawerNavigator;
}, 458, null, "react-navigation/src/navigators/DrawerNavigator.js");
__d(/* react-navigation/src/views/Drawer/DrawerScreen.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/Drawer/DrawerScreen.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _SceneView = require(426           ); // 426 = ../SceneView

var _SceneView2 = babelHelpers.interopRequireDefault(_SceneView);

var _withCachedChildNavigation = require(454                              ); // 454 = ../../withCachedChildNavigation

var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

var DrawerScreen = function (_PureComponent) {
  babelHelpers.inherits(DrawerScreen, _PureComponent);

  function DrawerScreen() {
    babelHelpers.classCallCheck(this, DrawerScreen);
    return babelHelpers.possibleConstructorReturn(this, (DrawerScreen.__proto__ || Object.getPrototypeOf(DrawerScreen)).apply(this, arguments));
  }

  babelHelpers.createClass(DrawerScreen, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          router = _props.router,
          navigation = _props.navigation,
          childNavigationProps = _props.childNavigationProps,
          screenProps = _props.screenProps;
      var _navigation$state = navigation.state,
          routes = _navigation$state.routes,
          index = _navigation$state.index;

      var childNavigation = childNavigationProps[routes[index].key];
      var Content = router.getComponentForRouteName(routes[index].routeName);
      return _react2.default.createElement(_SceneView2.default, {
        screenProps: screenProps,
        component: Content,
        navigation: childNavigation,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 47
        }
      });
    }
  }]);
  return DrawerScreen;
}(_react.PureComponent);

exports.default = (0, _withCachedChildNavigation2.default)(DrawerScreen);
}, 459, null, "react-navigation/src/views/Drawer/DrawerScreen.js");
__d(/* react-navigation/src/views/Drawer/DrawerView.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/Drawer/DrawerView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNativeDrawerLayoutPolyfill = require(461                                  ); // 461 = react-native-drawer-layout-polyfill

var _reactNativeDrawerLayoutPolyfill2 = babelHelpers.interopRequireDefault(_reactNativeDrawerLayoutPolyfill);

var _addNavigationHelpers = require(410                         ); // 410 = ../../addNavigationHelpers

var _addNavigationHelpers2 = babelHelpers.interopRequireDefault(_addNavigationHelpers);

var _DrawerSidebar = require(462              ); // 462 = ./DrawerSidebar

var _DrawerSidebar2 = babelHelpers.interopRequireDefault(_DrawerSidebar);

var DrawerView = function (_PureComponent) {
  babelHelpers.inherits(DrawerView, _PureComponent);

  function DrawerView() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, DrawerView);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerView.__proto__ || Object.getPrototypeOf(DrawerView)).call.apply(_ref, [this].concat(args))), _this), _this._handleDrawerOpen = function () {
      var navigation = _this.props.navigation;
      var _navigation$state = navigation.state,
          routes = _navigation$state.routes,
          index = _navigation$state.index;

      if (routes[index].routeName !== 'DrawerOpen') {
        _this.props.navigation.navigate('DrawerOpen');
      }
    }, _this._handleDrawerClose = function () {
      var navigation = _this.props.navigation;
      var _navigation$state2 = navigation.state,
          routes = _navigation$state2.routes,
          index = _navigation$state2.index;

      if (routes[index].routeName !== 'DrawerClose') {
        _this.props.navigation.navigate('DrawerClose');
      }
    }, _this._updateScreenNavigation = function (navigation) {
      var navigationState = navigation.state.routes.find(function (route) {
        return route.routeName === 'DrawerClose';
      });
      if (_this._screenNavigationProp && _this._screenNavigationProp.state === navigationState) {
        return;
      }
      _this._screenNavigationProp = (0, _addNavigationHelpers2.default)(babelHelpers.extends({}, navigation, {
        state: navigationState
      }));
    }, _this._getNavigationState = function (navigation) {
      var navigationState = navigation.state.routes.find(function (route) {
        return route.routeName === 'DrawerClose';
      });
      return navigationState;
    }, _this._renderNavigationView = function () {
      return _react2.default.createElement(_DrawerSidebar2.default, {
        screenProps: _this.props.screenProps,
        navigation: _this._screenNavigationProp,
        router: _this.props.router,
        contentComponent: _this.props.contentComponent,
        contentOptions: _this.props.contentOptions,
        style: _this.props.style,
        __source: {
          fileName: _jsxFileName,
          lineNumber: 119
        }
      });
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(DrawerView, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this._updateScreenNavigation(this.props.navigation);
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.navigation.state.index !== nextProps.navigation.state.index) {
        var _nextProps$navigation = nextProps.navigation.state,
            routes = _nextProps$navigation.routes,
            _index = _nextProps$navigation.index;

        if (routes[_index].routeName === 'DrawerOpen') {
          this._drawer.openDrawer();
        } else {
          this._drawer.closeDrawer();
        }
      }
      this._updateScreenNavigation(nextProps.navigation);
    }
  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      var DrawerScreen = this.props.router.getComponentForRouteName('DrawerClose');
      return _react2.default.createElement(
        _reactNativeDrawerLayoutPolyfill2.default,
        {
          ref: function ref(c) {
            _this2._drawer = c;
          },
          drawerWidth: this.props.drawerWidth,
          onDrawerOpen: this._handleDrawerOpen,
          onDrawerClose: this._handleDrawerClose,
          renderNavigationView: this._renderNavigationView,
          drawerPosition: this.props.drawerPosition === 'right' ? _reactNativeDrawerLayoutPolyfill2.default.positions.Right : _reactNativeDrawerLayoutPolyfill2.default.positions.Left,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 136
          }
        },
        _react2.default.createElement(DrawerScreen, {
          screenProps: this.props.screenProps,
          navigation: this._screenNavigationProp,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 150
          }
        })
      );
    }
  }]);
  return DrawerView;
}(_react.PureComponent);

exports.default = DrawerView;
}, 460, null, "react-navigation/src/views/Drawer/DrawerView.js");
__d(/* react-native-drawer-layout-polyfill/dist/index.android.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", { value: true });var _reactNative = require(46            );exports.default = _reactNative.DrawerLayoutAndroid; // 46 = react-native
}, 461, null, "react-native-drawer-layout-polyfill/dist/index.android.js");
__d(/* react-navigation/src/views/Drawer/DrawerSidebar.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/Drawer/DrawerSidebar.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _withCachedChildNavigation = require(454                              ); // 454 = ../../withCachedChildNavigation

var _withCachedChildNavigation2 = babelHelpers.interopRequireDefault(_withCachedChildNavigation);

var DrawerSidebar = function (_PureComponent) {
  babelHelpers.inherits(DrawerSidebar, _PureComponent);

  function DrawerSidebar() {
    var _ref;

    var _temp, _this, _ret;

    babelHelpers.classCallCheck(this, DrawerSidebar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = babelHelpers.possibleConstructorReturn(this, (_ref = DrawerSidebar.__proto__ || Object.getPrototypeOf(DrawerSidebar)).call.apply(_ref, [this].concat(args))), _this), _this._getScreenOptions = function (routeKey) {
      var DrawerScreen = _this.props.router.getComponentForRouteName('DrawerClose');
      return DrawerScreen.router.getScreenOptions(_this.props.childNavigationProps[routeKey], _this.props.screenProps);
    }, _this._getLabel = function (_ref2) {
      var focused = _ref2.focused,
          tintColor = _ref2.tintColor,
          route = _ref2.route;

      var _this$_getScreenOptio = _this._getScreenOptions(route.key),
          drawerLabel = _this$_getScreenOptio.drawerLabel,
          title = _this$_getScreenOptio.title;

      if (drawerLabel) {
        return typeof drawerLabel === 'function' ? drawerLabel({ tintColor: tintColor, focused: focused }) : drawerLabel;
      }

      if (typeof title === 'string') {
        return title;
      }

      return route.routeName;
    }, _this._renderIcon = function (_ref3) {
      var focused = _ref3.focused,
          tintColor = _ref3.tintColor,
          route = _ref3.route;

      var _this$_getScreenOptio2 = _this._getScreenOptions(route.key),
          drawerIcon = _this$_getScreenOptio2.drawerIcon;

      if (drawerIcon) {
        return typeof drawerIcon === 'function' ? drawerIcon({ tintColor: tintColor, focused: focused }) : drawerIcon;
      }
      return null;
    }, _this._onItemPress = function (_ref4) {
      var route = _ref4.route;

      _this.props.navigation.navigate('DrawerClose');
      _this.props.navigation.navigate(route.routeName);
    }, _temp), babelHelpers.possibleConstructorReturn(_this, _ret);
  }

  babelHelpers.createClass(DrawerSidebar, [{
    key: 'render',
    value: function render() {
      var ContentComponent = this.props.contentComponent;
      var state = this.props.navigation.state;

      return _react2.default.createElement(
        _reactNative.View,
        { style: [styles.container, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 87
          }
        },
        _react2.default.createElement(ContentComponent, babelHelpers.extends({}, this.props.contentOptions, {
          navigation: this.props.navigation,
          items: state.routes,
          activeItemKey: state.routes[state.index] && state.routes[state.index].key,
          screenProps: this.props.screenProps,
          getLabel: this._getLabel,
          renderIcon: this._renderIcon,
          onItemPress: this._onItemPress,
          router: this.props.router,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 88
          }
        }))
      );
    }
  }]);
  return DrawerSidebar;
}(_react.PureComponent);

exports.default = (0, _withCachedChildNavigation2.default)(DrawerSidebar);


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff'
  }
});
}, 462, null, "react-navigation/src/views/Drawer/DrawerSidebar.js");
__d(/* react-navigation/src/views/Drawer/DrawerNavigatorItems.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/Drawer/DrawerNavigatorItems.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _TouchableItem = require(423               ); // 423 = ../TouchableItem

var _TouchableItem2 = babelHelpers.interopRequireDefault(_TouchableItem);

var DrawerNavigatorItems = function DrawerNavigatorItems(_ref) {
  var _ref$navigation = _ref.navigation,
      state = _ref$navigation.state,
      navigate = _ref$navigation.navigate,
      items = _ref.items,
      activeItemKey = _ref.activeItemKey,
      activeTintColor = _ref.activeTintColor,
      activeBackgroundColor = _ref.activeBackgroundColor,
      inactiveTintColor = _ref.inactiveTintColor,
      inactiveBackgroundColor = _ref.inactiveBackgroundColor,
      getLabel = _ref.getLabel,
      renderIcon = _ref.renderIcon,
      onItemPress = _ref.onItemPress,
      style = _ref.style,
      labelStyle = _ref.labelStyle;
  return _react2.default.createElement(
    _reactNative.View,
    { style: [styles.container, style], __source: {
        fileName: _jsxFileName,
        lineNumber: 49
      }
    },
    items.map(function (route, index) {
      var focused = activeItemKey === route.key;
      var color = focused ? activeTintColor : inactiveTintColor;
      var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;
      var scene = { route: route, index: index, focused: focused, tintColor: color };
      var icon = renderIcon(scene);
      var label = getLabel(scene);
      return _react2.default.createElement(
        _TouchableItem2.default,
        {
          key: route.key,
          onPress: function onPress() {
            onItemPress({ route: route, focused: focused });
          },
          delayPressIn: 0,
          __source: {
            fileName: _jsxFileName,
            lineNumber: 60
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          { style: [styles.item, { backgroundColor: backgroundColor }], __source: {
              fileName: _jsxFileName,
              lineNumber: 67
            }
          },
          icon ? _react2.default.createElement(
            _reactNative.View,
            {
              style: [styles.icon, focused ? null : styles.inactiveIcon],
              __source: {
                fileName: _jsxFileName,
                lineNumber: 69
              }
            },
            icon
          ) : null,
          typeof label === 'string' ? _react2.default.createElement(
            _reactNative.Text,
            { style: [styles.label, { color: color }, labelStyle], __source: {
                fileName: _jsxFileName,
                lineNumber: 76
              }
            },
            label
          ) : label
        )
      );
    })
  );
};

DrawerNavigatorItems.defaultProps = {
  activeTintColor: '#2196f3',
  activeBackgroundColor: 'rgba(0, 0, 0, .04)',
  inactiveTintColor: 'rgba(0, 0, 0, .87)',
  inactiveBackgroundColor: 'transparent'
};

var styles = _reactNative.StyleSheet.create({
  container: {
    marginTop: _reactNative.Platform.OS === 'ios' ? 20 : 0,
    paddingVertical: 4
  },
  item: {
    flexDirection: 'row',
    alignItems: 'center'
  },
  icon: {
    marginHorizontal: 16,
    width: 24,
    alignItems: 'center'
  },
  inactiveIcon: {
    opacity: 0.62
  },
  label: {
    margin: 16,
    fontWeight: 'bold'
  }
});

exports.default = DrawerNavigatorItems;
}, 463, null, "react-navigation/src/views/Drawer/DrawerNavigatorItems.js");
__d(/* react-navigation/src/views/withNavigation.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-navigation/src/views/withNavigation.js';
exports.default = withNavigation;

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _propTypes = require(427         ); // 427 = prop-types

var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

var _hoistNonReactStatics = require(465                      ); // 465 = hoist-non-react-statics

var _hoistNonReactStatics2 = babelHelpers.interopRequireDefault(_hoistNonReactStatics);

function withNavigation(Component) {
  var componentWithNavigation = function componentWithNavigation(props, _ref) {
    var navigation = _ref.navigation;
    return _react2.default.createElement(Component, babelHelpers.extends({}, props, { navigation: navigation, __source: {
        fileName: _jsxFileName,
        lineNumber: 21
      }
    }));
  };

  componentWithNavigation.displayName = 'withNavigation(' + (Component.displayName || Component.name) + ')';

  componentWithNavigation.contextTypes = {
    navigation: _propTypes2.default.object.isRequired
  };

  return (0, _hoistNonReactStatics2.default)(componentWithNavigation, Component);
}
}, 464, null, "react-navigation/src/views/withNavigation.js");
__d(/* hoist-non-react-statics/index.js */function(global, require, module, exports) {
'use strict';

var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    arguments: true,
    arity: true
};

var isGetOwnPropertySymbolsAvailable = typeof Object.getOwnPropertySymbols === 'function';

module.exports = function hoistNonReactStatics(targetComponent, sourceComponent, customStatics) {
    if (typeof sourceComponent !== 'string') {
        var keys = Object.getOwnPropertyNames(sourceComponent);

        if (isGetOwnPropertySymbolsAvailable) {
            keys = keys.concat(Object.getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            if (!REACT_STATICS[keys[i]] && !KNOWN_STATICS[keys[i]] && (!customStatics || !customStatics[keys[i]])) {
                try {
                    targetComponent[keys[i]] = sourceComponent[keys[i]];
                } catch (error) {}
            }
        }
    }

    return targetComponent;
};
}, 465, null, "hoist-non-react-statics/index.js");
__d(/* react-native-code-push/CodePush.js */function(global, require, module, exports) {var _jsxFileName = "/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-code-push/CodePush.js";

var _acquisitionSdk = require(467                               ); // 467 = code-push/script/acquisition-sdk

var _AlertAdapter = require(468             ); // 468 = ./AlertAdapter

var _requestFetchAdapter = require(469                      ); // 469 = ./request-fetch-adapter

var _requestFetchAdapter2 = babelHelpers.interopRequireDefault(_requestFetchAdapter);

var _reactNative = require(46            ); // 46 = react-native

var _RestartManager = require(471               ); // 471 = ./RestartManager

var _RestartManager2 = babelHelpers.interopRequireDefault(_RestartManager);

var _logging = require(472        ); // 472 = ./logging

var _logging2 = babelHelpers.interopRequireDefault(_logging);

var NativeCodePush = require(46            ).NativeModules.CodePush; // 46 = react-native
var PackageMixins = require(473               )(NativeCodePush); // 473 = ./package-mixins

function checkForUpdate() {
  var deploymentKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
  var nativeConfig, config, sdk, localPackage, queryPackage, update, remotePackage;
  return regeneratorRuntime.async(function checkForUpdate$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _context.next = 2;
          return regeneratorRuntime.awrap(getConfiguration());

        case 2:
          nativeConfig = _context.sent;
          config = deploymentKey ? babelHelpers.extends({}, nativeConfig, { deploymentKey: deploymentKey }) : nativeConfig;
          sdk = getPromisifiedSdk(_requestFetchAdapter2.default, config);
          _context.next = 7;
          return regeneratorRuntime.awrap(module.exports.getCurrentPackage());

        case 7:
          localPackage = _context.sent;
          queryPackage = void 0;

          if (localPackage) {
            queryPackage = localPackage;
          } else {
            queryPackage = { appVersion: config.appVersion };
            if (_reactNative.Platform.OS === "ios" && config.packageHash) {
              queryPackage.packageHash = config.packageHash;
            }
          }

          _context.next = 12;
          return regeneratorRuntime.awrap(sdk.queryUpdateWithCurrentPackage(queryPackage));

        case 12:
          update = _context.sent;

          if (!(!update || update.updateAppVersion || localPackage && update.packageHash === localPackage.packageHash || (!localPackage || localPackage._isDebugOnly) && config.packageHash === update.packageHash)) {
            _context.next = 18;
            break;
          }

          if (update && update.updateAppVersion) {
            (0, _logging2.default)("An update is available but it is not targeting the binary version of your app.");
          }

          return _context.abrupt("return", null);

        case 18:
          remotePackage = babelHelpers.extends({}, update, PackageMixins.remote(sdk.reportStatusDownload));
          _context.next = 21;
          return regeneratorRuntime.awrap(NativeCodePush.isFailedUpdate(remotePackage.packageHash));

        case 21:
          remotePackage.failedInstall = _context.sent;

          remotePackage.deploymentKey = deploymentKey || nativeConfig.deploymentKey;
          return _context.abrupt("return", remotePackage);

        case 24:
        case "end":
          return _context.stop();
      }
    }
  }, null, this);
}

var getConfiguration = function () {
  var config = void 0;
  return function getConfiguration() {
    return regeneratorRuntime.async(function getConfiguration$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!config) {
              _context2.next = 4;
              break;
            }

            return _context2.abrupt("return", config);

          case 4:
            if (!testConfig) {
              _context2.next = 8;
              break;
            }

            return _context2.abrupt("return", testConfig);

          case 8:
            _context2.next = 10;
            return regeneratorRuntime.awrap(NativeCodePush.getConfiguration());

          case 10:
            config = _context2.sent;
            return _context2.abrupt("return", config);

          case 12:
          case "end":
            return _context2.stop();
        }
      }
    }, null, this);
  };
}();

function getCurrentPackage() {
  return regeneratorRuntime.async(function getCurrentPackage$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return regeneratorRuntime.awrap(getUpdateMetadata(CodePush.UpdateState.LATEST));

        case 2:
          return _context3.abrupt("return", _context3.sent);

        case 3:
        case "end":
          return _context3.stop();
      }
    }
  }, null, this);
}

function getUpdateMetadata(updateState) {
  var updateMetadata;
  return regeneratorRuntime.async(function getUpdateMetadata$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return regeneratorRuntime.awrap(NativeCodePush.getUpdateMetadata(updateState || CodePush.UpdateState.RUNNING));

        case 2:
          updateMetadata = _context4.sent;

          if (!updateMetadata) {
            _context4.next = 11;
            break;
          }

          updateMetadata = babelHelpers.extends({}, PackageMixins.local, updateMetadata);
          _context4.next = 7;
          return regeneratorRuntime.awrap(NativeCodePush.isFailedUpdate(updateMetadata.packageHash));

        case 7:
          updateMetadata.failedInstall = _context4.sent;
          _context4.next = 10;
          return regeneratorRuntime.awrap(NativeCodePush.isFirstRun(updateMetadata.packageHash));

        case 10:
          updateMetadata.isFirstRun = _context4.sent;

        case 11:
          return _context4.abrupt("return", updateMetadata);

        case 12:
        case "end":
          return _context4.stop();
      }
    }
  }, null, this);
}

function getPromisifiedSdk(requestFetchAdapter, config) {
  var sdk = new module.exports.AcquisitionSdk(requestFetchAdapter, config);
  sdk.queryUpdateWithCurrentPackage = function (queryPackage) {
    return new Promise(function (resolve, reject) {
      module.exports.AcquisitionSdk.prototype.queryUpdateWithCurrentPackage.call(sdk, queryPackage, function (err, update) {
        if (err) {
          reject(err);
        } else {
          resolve(update);
        }
      });
    });
  };

  sdk.reportStatusDeploy = function (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey) {
    return new Promise(function (resolve, reject) {
      module.exports.AcquisitionSdk.prototype.reportStatusDeploy.call(sdk, deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, function (err) {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  };

  sdk.reportStatusDownload = function (downloadedPackage) {
    return new Promise(function (resolve, reject) {
      module.exports.AcquisitionSdk.prototype.reportStatusDownload.call(sdk, downloadedPackage, function (err) {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    });
  };

  return sdk;
}

var notifyApplicationReady = function () {
  var notifyApplicationReadyPromise = void 0;
  return function () {
    if (!notifyApplicationReadyPromise) {
      notifyApplicationReadyPromise = notifyApplicationReadyInternal();
    }

    return notifyApplicationReadyPromise;
  };
}();

function notifyApplicationReadyInternal() {
  var statusReport;
  return regeneratorRuntime.async(function notifyApplicationReadyInternal$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          _context5.next = 2;
          return regeneratorRuntime.awrap(NativeCodePush.notifyApplicationReady());

        case 2:
          _context5.next = 4;
          return regeneratorRuntime.awrap(NativeCodePush.getNewStatusReport());

        case 4:
          statusReport = _context5.sent;

          statusReport && tryReportStatus(statusReport);return _context5.abrupt("return", statusReport);

        case 7:
        case "end":
          return _context5.stop();
      }
    }
  }, null, this);
}

function tryReportStatus(statusReport, _resumeListener) {
  var _this = this;

  var config, previousLabelOrAppVersion, previousDeploymentKey, sdk, label, _sdk;

  return regeneratorRuntime.async(function tryReportStatus$(_context7) {
    while (1) {
      switch (_context7.prev = _context7.next) {
        case 0:
          _context7.next = 2;
          return regeneratorRuntime.awrap(getConfiguration());

        case 2:
          config = _context7.sent;
          previousLabelOrAppVersion = statusReport.previousLabelOrAppVersion;
          previousDeploymentKey = statusReport.previousDeploymentKey || config.deploymentKey;
          _context7.prev = 5;

          if (!statusReport.appVersion) {
            _context7.next = 13;
            break;
          }

          (0, _logging2.default)("Reporting binary update (" + statusReport.appVersion + ")");

          sdk = getPromisifiedSdk(_requestFetchAdapter2.default, config);
          _context7.next = 11;
          return regeneratorRuntime.awrap(sdk.reportStatusDeploy(null, null, previousLabelOrAppVersion, previousDeploymentKey));

        case 11:
          _context7.next = 19;
          break;

        case 13:
          label = statusReport.package.label;

          if (statusReport.status === "DeploymentSucceeded") {
            (0, _logging2.default)("Reporting CodePush update success (" + label + ")");
          } else {
            (0, _logging2.default)("Reporting CodePush update rollback (" + label + ")");
          }

          config.deploymentKey = statusReport.package.deploymentKey;
          _sdk = getPromisifiedSdk(_requestFetchAdapter2.default, config);
          _context7.next = 19;
          return regeneratorRuntime.awrap(_sdk.reportStatusDeploy(statusReport.package, statusReport.status, previousLabelOrAppVersion, previousDeploymentKey));

        case 19:

          NativeCodePush.recordStatusReported(statusReport);
          _resumeListener && _reactNative.AppState.removeEventListener("change", _resumeListener);
          _context7.next = 28;
          break;

        case 23:
          _context7.prev = 23;
          _context7.t0 = _context7["catch"](5);

          (0, _logging2.default)("Report status failed: " + JSON.stringify(statusReport));
          NativeCodePush.saveStatusReportForRetry(statusReport);

          if (!_resumeListener) {
            _resumeListener = function resumeListener(newState) {
              var refreshedStatusReport;
              return regeneratorRuntime.async(function resumeListener$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      if (!(newState !== "active")) {
                        _context6.next = 2;
                        break;
                      }

                      return _context6.abrupt("return");

                    case 2:
                      _context6.next = 4;
                      return regeneratorRuntime.awrap(NativeCodePush.getNewStatusReport());

                    case 4:
                      refreshedStatusReport = _context6.sent;

                      if (refreshedStatusReport) {
                        tryReportStatus(refreshedStatusReport, _resumeListener);
                      } else {
                        _reactNative.AppState.removeEventListener("change", _resumeListener);
                      }

                    case 6:
                    case "end":
                      return _context6.stop();
                  }
                }
              }, null, _this);
            };
            _reactNative.AppState.addEventListener("change", _resumeListener);
          }

        case 28:
        case "end":
          return _context7.stop();
      }
    }
  }, null, this, [[5, 23]]);
}

var testConfig;

function setUpTestDependencies(testSdk, providedTestConfig, testNativeBridge) {
  if (testSdk) module.exports.AcquisitionSdk = testSdk;
  if (providedTestConfig) testConfig = providedTestConfig;
  if (testNativeBridge) NativeCodePush = testNativeBridge;
}

var sync = function () {
  var syncInProgress = false;
  var setSyncCompleted = function setSyncCompleted() {
    syncInProgress = false;
  };

  return function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    var syncStatusChangeCallback = arguments[1];
    var downloadProgressCallback = arguments[2];

    if (syncInProgress) {
      typeof syncStatusChangeCallback === "function" ? syncStatusChangeCallback(CodePush.SyncStatus.SYNC_IN_PROGRESS) : (0, _logging2.default)("Sync already in progress.");
      return Promise.resolve(CodePush.SyncStatus.SYNC_IN_PROGRESS);
    }

    syncInProgress = true;
    var syncPromise = syncInternal(options, syncStatusChangeCallback, downloadProgressCallback);
    syncPromise.then(setSyncCompleted).catch(setSyncCompleted);

    return syncPromise;
  };
}();

function syncInternal() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var _this2 = this;

  var syncStatusChangeCallback = arguments[1];
  var downloadProgressCallback = arguments[2];
  var resolvedInstallMode, syncOptions, remotePackage, doDownloadAndInstall, updateShouldBeIgnored;
  return regeneratorRuntime.async(function syncInternal$(_context9) {
    while (1) {
      switch (_context9.prev = _context9.next) {
        case 0:
          resolvedInstallMode = void 0;
          syncOptions = babelHelpers.extends({
            deploymentKey: null,
            ignoreFailedUpdates: true,
            installMode: CodePush.InstallMode.ON_NEXT_RESTART,
            mandatoryInstallMode: CodePush.InstallMode.IMMEDIATE,
            minimumBackgroundDuration: 0,
            updateDialog: null
          }, options);


          syncStatusChangeCallback = typeof syncStatusChangeCallback === "function" ? syncStatusChangeCallback : function (syncStatus) {
            switch (syncStatus) {
              case CodePush.SyncStatus.CHECKING_FOR_UPDATE:
                (0, _logging2.default)("Checking for update.");
                break;
              case CodePush.SyncStatus.AWAITING_USER_ACTION:
                (0, _logging2.default)("Awaiting user action.");
                break;
              case CodePush.SyncStatus.DOWNLOADING_PACKAGE:
                (0, _logging2.default)("Downloading package.");
                break;
              case CodePush.SyncStatus.INSTALLING_UPDATE:
                (0, _logging2.default)("Installing update.");
                break;
              case CodePush.SyncStatus.UP_TO_DATE:
                (0, _logging2.default)("App is up to date.");
                break;
              case CodePush.SyncStatus.UPDATE_IGNORED:
                (0, _logging2.default)("User cancelled the update.");
                break;
              case CodePush.SyncStatus.UPDATE_INSTALLED:
                if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESTART) {
                  (0, _logging2.default)("Update is installed and will be run on the next app restart.");
                } else if (resolvedInstallMode == CodePush.InstallMode.ON_NEXT_RESUME) {
                  if (syncOptions.minimumBackgroundDuration > 0) {
                    (0, _logging2.default)("Update is installed and will be run after the app has been in the background for at least " + syncOptions.minimumBackgroundDuration + " seconds.");
                  } else {
                    (0, _logging2.default)("Update is installed and will be run when the app next resumes.");
                  }
                }
                break;
              case CodePush.SyncStatus.UNKNOWN_ERROR:
                (0, _logging2.default)("An unknown error occurred.");
                break;
            }
          };

          _context9.prev = 3;
          _context9.next = 6;
          return regeneratorRuntime.awrap(CodePush.notifyApplicationReady());

        case 6:

          syncStatusChangeCallback(CodePush.SyncStatus.CHECKING_FOR_UPDATE);
          _context9.next = 9;
          return regeneratorRuntime.awrap(checkForUpdate(syncOptions.deploymentKey));

        case 9:
          remotePackage = _context9.sent;

          doDownloadAndInstall = function doDownloadAndInstall() {
            var localPackage;
            return regeneratorRuntime.async(function doDownloadAndInstall$(_context8) {
              while (1) {
                switch (_context8.prev = _context8.next) {
                  case 0:
                    syncStatusChangeCallback(CodePush.SyncStatus.DOWNLOADING_PACKAGE);
                    _context8.next = 3;
                    return regeneratorRuntime.awrap(remotePackage.download(downloadProgressCallback));

                  case 3:
                    localPackage = _context8.sent;

                    resolvedInstallMode = localPackage.isMandatory ? syncOptions.mandatoryInstallMode : syncOptions.installMode;

                    syncStatusChangeCallback(CodePush.SyncStatus.INSTALLING_UPDATE);
                    _context8.next = 8;
                    return regeneratorRuntime.awrap(localPackage.install(resolvedInstallMode, syncOptions.minimumBackgroundDuration, function () {
                      syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_INSTALLED);
                    }));

                  case 8:
                    return _context8.abrupt("return", CodePush.SyncStatus.UPDATE_INSTALLED);

                  case 9:
                  case "end":
                    return _context8.stop();
                }
              }
            }, null, _this2);
          };

          updateShouldBeIgnored = remotePackage && remotePackage.failedInstall && syncOptions.ignoreFailedUpdates;

          if (!(!remotePackage || updateShouldBeIgnored)) {
            _context9.next = 18;
            break;
          }

          if (updateShouldBeIgnored) {
            (0, _logging2.default)("An update is available, but it is being ignored due to having been previously rolled back.");
          }

          syncStatusChangeCallback(CodePush.SyncStatus.UP_TO_DATE);
          return _context9.abrupt("return", CodePush.SyncStatus.UP_TO_DATE);

        case 18:
          if (!syncOptions.updateDialog) {
            _context9.next = 25;
            break;
          }

          if (typeof syncOptions.updateDialog !== "object") {
            syncOptions.updateDialog = CodePush.DEFAULT_UPDATE_DIALOG;
          } else {
            syncOptions.updateDialog = babelHelpers.extends({}, CodePush.DEFAULT_UPDATE_DIALOG, syncOptions.updateDialog);
          }

          _context9.next = 22;
          return regeneratorRuntime.awrap(new Promise(function (resolve, reject) {
            var message = null;
            var dialogButtons = [{
              text: null,
              onPress: function onPress() {
                doDownloadAndInstall().then(resolve, reject);
              }
            }];

            if (remotePackage.isMandatory) {
              message = syncOptions.updateDialog.mandatoryUpdateMessage;
              dialogButtons[0].text = syncOptions.updateDialog.mandatoryContinueButtonLabel;
            } else {
              message = syncOptions.updateDialog.optionalUpdateMessage;
              dialogButtons[0].text = syncOptions.updateDialog.optionalInstallButtonLabel;

              dialogButtons.push({
                text: syncOptions.updateDialog.optionalIgnoreButtonLabel,
                onPress: function onPress() {
                  syncStatusChangeCallback(CodePush.SyncStatus.UPDATE_IGNORED);
                  resolve(CodePush.SyncStatus.UPDATE_IGNORED);
                }
              });
            }

            if (syncOptions.updateDialog.appendReleaseDescription && remotePackage.description) {
              message += syncOptions.updateDialog.descriptionPrefix + " " + remotePackage.description;
            }

            syncStatusChangeCallback(CodePush.SyncStatus.AWAITING_USER_ACTION);
            _AlertAdapter.Alert.alert(syncOptions.updateDialog.title, message, dialogButtons);
          }));

        case 22:
          return _context9.abrupt("return", _context9.sent);

        case 25:
          _context9.next = 27;
          return regeneratorRuntime.awrap(doDownloadAndInstall());

        case 27:
          return _context9.abrupt("return", _context9.sent);

        case 28:
          _context9.next = 35;
          break;

        case 30:
          _context9.prev = 30;
          _context9.t0 = _context9["catch"](3);

          syncStatusChangeCallback(CodePush.SyncStatus.UNKNOWN_ERROR);
          (0, _logging2.default)(_context9.t0.message);
          throw _context9.t0;

        case 35:
        case "end":
          return _context9.stop();
      }
    }
  }, null, this, [[3, 30]]);
};

var CodePush = void 0;

function codePushify() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var React = void 0;
  var ReactNative = require(46            ); // 46 = react-native

  try {
    React = require(12     ); // 12 = react
  } catch (e) {}
  if (!React) {
    try {
      React = ReactNative.React;
    } catch (e) {}
    if (!React) {
      throw new Error("Unable to find the 'React' module.");
    }
  }

  if (!React.Component) {
    throw new Error("Unable to find the \"Component\" class, please either:\n1. Upgrade to a newer version of React Native that supports it, or\n2. Call the codePush.sync API in your component instead of using the @codePush decorator");
  }

  var decorator = function decorator(RootComponent) {
    return function (_React$Component) {
      babelHelpers.inherits(CodePushComponent, _React$Component);

      function CodePushComponent() {
        babelHelpers.classCallCheck(this, CodePushComponent);
        return babelHelpers.possibleConstructorReturn(this, (CodePushComponent.__proto__ || Object.getPrototypeOf(CodePushComponent)).apply(this, arguments));
      }

      babelHelpers.createClass(CodePushComponent, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (options.checkFrequency === CodePush.CheckFrequency.MANUAL) {
            CodePush.notifyAppReady();
          } else {
            var rootComponentInstance = this.refs.rootComponent;

            var syncStatusCallback = void 0;
            if (rootComponentInstance && rootComponentInstance.codePushStatusDidChange) {
              syncStatusCallback = rootComponentInstance.codePushStatusDidChange;
              if (rootComponentInstance instanceof React.Component) {
                syncStatusCallback = syncStatusCallback.bind(rootComponentInstance);
              }
            }

            var downloadProgressCallback = void 0;
            if (rootComponentInstance && rootComponentInstance.codePushDownloadDidProgress) {
              downloadProgressCallback = rootComponentInstance.codePushDownloadDidProgress;
              if (rootComponentInstance instanceof React.Component) {
                downloadProgressCallback = downloadProgressCallback.bind(rootComponentInstance);
              }
            }

            CodePush.sync(options, syncStatusCallback, downloadProgressCallback);
            if (options.checkFrequency === CodePush.CheckFrequency.ON_APP_RESUME) {
              ReactNative.AppState.addEventListener("change", function (newState) {
                newState === "active" && CodePush.sync(options, syncStatusCallback, downloadProgressCallback);
              });
            }
          }
        }
      }, {
        key: "render",
        value: function render() {
          return React.createElement(RootComponent, babelHelpers.extends({}, this.props, { ref: "rootComponent", __source: {
              fileName: _jsxFileName,
              lineNumber: 458
            }
          }));
        }
      }]);
      return CodePushComponent;
    }(React.Component);
  };

  if (typeof options === "function") {
    return decorator(options);
  } else {
    return decorator;
  }
}

if (NativeCodePush) {
  CodePush = codePushify;
  babelHelpers.extends(CodePush, {
    AcquisitionSdk: _acquisitionSdk.AcquisitionManager,
    checkForUpdate: checkForUpdate,
    getConfiguration: getConfiguration,
    getCurrentPackage: getCurrentPackage,
    getUpdateMetadata: getUpdateMetadata,
    log: _logging2.default,
    notifyAppReady: notifyApplicationReady,
    notifyApplicationReady: notifyApplicationReady,
    restartApp: _RestartManager2.default.restartApp,
    setUpTestDependencies: setUpTestDependencies,
    sync: sync,
    disallowRestart: _RestartManager2.default.disallow,
    allowRestart: _RestartManager2.default.allow,
    InstallMode: {
      IMMEDIATE: NativeCodePush.codePushInstallModeImmediate,
      ON_NEXT_RESTART: NativeCodePush.codePushInstallModeOnNextRestart,
      ON_NEXT_RESUME: NativeCodePush.codePushInstallModeOnNextResume },
    SyncStatus: {
      UP_TO_DATE: 0,
      UPDATE_INSTALLED: 1,
      UPDATE_IGNORED: 2,
      UNKNOWN_ERROR: 3,
      SYNC_IN_PROGRESS: 4,
      CHECKING_FOR_UPDATE: 5,
      AWAITING_USER_ACTION: 6,
      DOWNLOADING_PACKAGE: 7,
      INSTALLING_UPDATE: 8
    },
    CheckFrequency: {
      ON_APP_START: 0,
      ON_APP_RESUME: 1,
      MANUAL: 2
    },
    UpdateState: {
      RUNNING: NativeCodePush.codePushUpdateStateRunning,
      PENDING: NativeCodePush.codePushUpdateStatePending,
      LATEST: NativeCodePush.codePushUpdateStateLatest
    },
    DeploymentStatus: {
      FAILED: "DeploymentFailed",
      SUCCEEDED: "DeploymentSucceeded"
    },
    DEFAULT_UPDATE_DIALOG: {
      appendReleaseDescription: false,
      descriptionPrefix: " Description: ",
      mandatoryContinueButtonLabel: "Continue",
      mandatoryUpdateMessage: "An update is available that must be installed.",
      optionalIgnoreButtonLabel: "Ignore",
      optionalInstallButtonLabel: "Install",
      optionalUpdateMessage: "An update is available. Would you like to install it?",
      title: "Update available"
    }
  });
} else {
  (0, _logging2.default)("The CodePush module doesn't appear to be properly installed. Please double-check that everything is setup correctly.");
}

module.exports = CodePush;
}, 466, null, "react-native-code-push/CodePush.js");
__d(/* code-push/script/acquisition-sdk.js */function(global, require, module, exports) {
var AcquisitionStatus = function () {
    function AcquisitionStatus() {}
    AcquisitionStatus.DeploymentSucceeded = "DeploymentSucceeded";
    AcquisitionStatus.DeploymentFailed = "DeploymentFailed";
    return AcquisitionStatus;
}();
exports.AcquisitionStatus = AcquisitionStatus;
var AcquisitionManager = function () {
    function AcquisitionManager(httpRequester, configuration) {
        this._httpRequester = httpRequester;
        this._serverUrl = configuration.serverUrl;
        if (this._serverUrl.slice(-1) !== "/") {
            this._serverUrl += "/";
        }
        this._appVersion = configuration.appVersion;
        this._clientUniqueId = configuration.clientUniqueId;
        this._deploymentKey = configuration.deploymentKey;
        this._ignoreAppVersion = configuration.ignoreAppVersion;
    }
    AcquisitionManager.prototype.queryUpdateWithCurrentPackage = function (currentPackage, callback) {
        var _this = this;
        if (!currentPackage || !currentPackage.appVersion) {
            throw new Error("Calling common acquisition SDK with incorrect package");
        }
        var updateRequest = {
            deploymentKey: this._deploymentKey,
            appVersion: currentPackage.appVersion,
            packageHash: currentPackage.packageHash,
            isCompanion: this._ignoreAppVersion,
            label: currentPackage.label,
            clientUniqueId: this._clientUniqueId
        };
        var requestUrl = this._serverUrl + "updateCheck?" + queryStringify(updateRequest);
        this._httpRequester.request(0, requestUrl, function (error, response) {
            if (error) {
                callback(error, null);
                return;
            }
            if (response.statusCode !== 200) {
                callback(new Error(response.statusCode + ": " + response.body), null);
                return;
            }
            try {
                var responseObject = JSON.parse(response.body);
                var updateInfo = responseObject.updateInfo;
            } catch (error) {
                callback(error, null);
                return;
            }
            if (!updateInfo) {
                callback(error, null);
                return;
            } else if (updateInfo.updateAppVersion) {
                callback(null, { updateAppVersion: true, appVersion: updateInfo.appVersion });
                return;
            } else if (!updateInfo.isAvailable) {
                callback(null, null);
                return;
            }
            var remotePackage = {
                deploymentKey: _this._deploymentKey,
                description: updateInfo.description,
                label: updateInfo.label,
                appVersion: updateInfo.appVersion,
                isMandatory: updateInfo.isMandatory,
                packageHash: updateInfo.packageHash,
                packageSize: updateInfo.packageSize,
                downloadUrl: updateInfo.downloadURL
            };
            callback(null, remotePackage);
        });
    };
    AcquisitionManager.prototype.reportStatusDeploy = function (deployedPackage, status, previousLabelOrAppVersion, previousDeploymentKey, callback) {
        var url = this._serverUrl + "reportStatus/deploy";
        var body = {
            appVersion: this._appVersion,
            deploymentKey: this._deploymentKey
        };
        if (this._clientUniqueId) {
            body.clientUniqueId = this._clientUniqueId;
        }
        if (deployedPackage) {
            body.label = deployedPackage.label;
            body.appVersion = deployedPackage.appVersion;
            switch (status) {
                case AcquisitionStatus.DeploymentSucceeded:
                case AcquisitionStatus.DeploymentFailed:
                    body.status = status;
                    break;
                default:
                    if (callback) {
                        if (!status) {
                            callback(new Error("Missing status argument."), null);
                        } else {
                            callback(new Error("Unrecognized status \"" + status + "\"."), null);
                        }
                    }
                    return;
            }
        }
        if (previousLabelOrAppVersion) {
            body.previousLabelOrAppVersion = previousLabelOrAppVersion;
        }
        if (previousDeploymentKey) {
            body.previousDeploymentKey = previousDeploymentKey;
        }
        callback = typeof arguments[arguments.length - 1] === "function" && arguments[arguments.length - 1];
        this._httpRequester.request(2, url, JSON.stringify(body), function (error, response) {
            if (callback) {
                if (error) {
                    callback(error, null);
                    return;
                }
                if (response.statusCode !== 200) {
                    callback(new Error(response.statusCode + ": " + response.body), null);
                    return;
                }
                callback(null, null);
            }
        });
    };
    AcquisitionManager.prototype.reportStatusDownload = function (downloadedPackage, callback) {
        var url = this._serverUrl + "reportStatus/download";
        var body = {
            clientUniqueId: this._clientUniqueId,
            deploymentKey: this._deploymentKey,
            label: downloadedPackage.label
        };
        this._httpRequester.request(2, url, JSON.stringify(body), function (error, response) {
            if (callback) {
                if (error) {
                    callback(error, null);
                    return;
                }
                if (response.statusCode !== 200) {
                    callback(new Error(response.statusCode + ": " + response.body), null);
                    return;
                }
                callback(null, null);
            }
        });
    };
    return AcquisitionManager;
}();
exports.AcquisitionManager = AcquisitionManager;
function queryStringify(object) {
    var queryString = "";
    var isFirst = true;
    for (var property in object) {
        if (object.hasOwnProperty(property)) {
            var value = object[property];
            if (!isFirst) {
                queryString += "&";
            }
            queryString += encodeURIComponent(property) + "=";
            if (value !== null && typeof value !== "undefined") {
                queryString += encodeURIComponent(value);
            }
            isFirst = false;
        }
    }
    return queryString;
}
}, 467, null, "code-push/script/acquisition-sdk.js");
__d(/* react-native-code-push/AlertAdapter.js */function(global, require, module, exports) {var _reactNative = require(46            ); // 46 = react-native

var _reactNative2 = babelHelpers.interopRequireDefault(_reactNative);

var Alert = _reactNative2.default.Alert;


if (_reactNative.Platform.OS === "android") {
  var CodePushDialog = _reactNative2.default.NativeModules.CodePushDialog;


  Alert = {
    alert: function alert(title, message, buttons) {
      if (buttons.length > 2) {
        throw "Can only show 2 buttons for Android dialog.";
      }

      var button1Text = buttons[0] ? buttons[0].text : null,
          button2Text = buttons[1] ? buttons[1].text : null;

      CodePushDialog.showDialog(title, message, button1Text, button2Text, function (buttonId) {
        buttons[buttonId].onPress && buttons[buttonId].onPress();
      }, function (error) {
        throw error;
      });
    }
  };
}

module.exports = { Alert: Alert };
}, 468, null, "react-native-code-push/AlertAdapter.js");
__d(/* react-native-code-push/request-fetch-adapter.js */function(global, require, module, exports) {var packageJson = require(470             ); // 470 = ./package.json

module.exports = {
  request: function request(verb, url, requestBody, callback) {
    var headers, response, statusCode, body;
    return regeneratorRuntime.async(function request$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (typeof requestBody === "function") {
              callback = requestBody;
              requestBody = null;
            }

            headers = {
              "Accept": "application/json",
              "Content-Type": "application/json",
              "X-CodePush-Plugin-Name": packageJson.name,
              "X-CodePush-Plugin-Version": packageJson.version,
              "X-CodePush-SDK-Version": packageJson.dependencies["code-push"]
            };


            if (requestBody && typeof requestBody === "object") {
              requestBody = JSON.stringify(requestBody);
            }

            _context.prev = 3;
            _context.next = 6;
            return regeneratorRuntime.awrap(fetch(url, {
              method: getHttpMethodName(verb),
              headers: headers,
              body: requestBody
            }));

          case 6:
            response = _context.sent;
            statusCode = response.status;
            _context.next = 10;
            return regeneratorRuntime.awrap(response.text());

          case 10:
            body = _context.sent;

            callback(null, { statusCode: statusCode, body: body });
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](3);

            callback(_context.t0);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, null, this, [[3, 14]]);
  }
};

function getHttpMethodName(verb) {
  return ["GET", "HEAD", "POST", "PUT", "DELETE", "TRACE", "OPTIONS", "CONNECT", "PATCH"][verb];
}
}, 469, null, "react-native-code-push/request-fetch-adapter.js");
__d(/* react-native-code-push/package.json */function(global, require, module, exports) {module.exports = module.exports = {
  "_args": [[{
    "raw": "react-native-code-push@^1.17.4-beta",
    "scope": null,
    "escapedName": "react-native-code-push",
    "name": "react-native-code-push",
    "rawSpec": "^1.17.4-beta",
    "spec": ">=1.17.4-beta <2.0.0",
    "type": "range"
  }, "/Users/weichuang/Documents/file/workspace/RN/TodayProject"]],
  "_cnpm_publish_time": 1493841664560,
  "_from": "react-native-code-push@>=1.17.4-beta <2.0.0",
  "_hasShrinkwrap": false,
  "_id": "react-native-code-push@1.17.4-beta",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-native-code-push",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/react-native-code-push-1.17.4-beta.tgz_1493841663152_0.707911174511537"
  },
  "_npmUser": {
    "name": "max-mironov",
    "email": "v-maximi@microsoft.com"
  },
  "_npmVersion": "4.4.1",
  "_phantomChildren": {
    "ansi-escapes": "1.4.0",
    "chalk": "1.1.3",
    "cli-cursor": "1.0.2",
    "cli-width": "2.1.0",
    "external-editor": "1.1.1",
    "figures": "1.7.0",
    "is-promise": "2.1.0",
    "lodash": "4.17.4",
    "pegjs": "0.9.0",
    "pinkie-promise": "2.0.1",
    "rx": "4.1.0",
    "simple-plist": "0.1.4",
    "string-width": "1.0.2",
    "strip-ansi": "3.0.1",
    "through": "2.3.8"
  },
  "_requested": {
    "raw": "react-native-code-push@^1.17.4-beta",
    "scope": null,
    "escapedName": "react-native-code-push",
    "name": "react-native-code-push",
    "rawSpec": "^1.17.4-beta",
    "spec": ">=1.17.4-beta <2.0.0",
    "type": "range"
  },
  "_requiredBy": ["/"],
  "_resolved": "https://registry.npm.taobao.org/react-native-code-push/download/react-native-code-push-1.17.4-beta.tgz",
  "_shasum": "6badac8d69100252e42e051d6c9f9544e7eb8bc7",
  "_shrinkwrap": null,
  "_spec": "react-native-code-push@^1.17.4-beta",
  "_where": "/Users/weichuang/Documents/file/workspace/RN/TodayProject",
  "author": {
    "name": "Microsoft Corporation"
  },
  "bugs": {
    "url": "https://github.com/Microsoft/react-native-code-push/issues"
  },
  "dependencies": {
    "code-push": "1.8.0-beta",
    "glob": "^5.0.15",
    "inquirer": "1.1.2",
    "plist": "1.2.0",
    "xcode": "0.9.1"
  },
  "description": "React Native plugin for the CodePush service",
  "devDependencies": {
    "archiver": "latest",
    "body-parser": "latest",
    "code-push-plugin-testing-framework": "file:./code-push-plugin-testing-framework",
    "del": "latest",
    "express": "latest",
    "gulp-insert": "latest",
    "gulp-tslint": "latest",
    "gulp-typescript": "2.12.2",
    "mkdirp": "latest",
    "q": "^1.4.1",
    "run-sequence": "latest",
    "tslint": "^4.3.1",
    "typescript": "^2.1.5"
  },
  "directories": {},
  "dist": {
    "shasum": "6badac8d69100252e42e051d6c9f9544e7eb8bc7",
    "size": 247109,
    "noattachment": false,
    "tarball": "http://registry.npm.taobao.org/react-native-code-push/download/react-native-code-push-1.17.4-beta.tgz"
  },
  "gitHead": "77c1546a77831b9757dfc1f9f295cfc70a284922",
  "homepage": "https://microsoft.github.io/code-push",
  "keywords": ["react-native", "code", "push"],
  "license": "MIT",
  "main": "CodePush.js",
  "maintainers": [{
    "name": "axemclion",
    "email": "code@r.nparashuram.com"
  }, {
    "name": "bokang",
    "email": "buptkang@gmail.com"
  }, {
    "name": "bretjohnson",
    "email": "bret.johnson@microsoft.com"
  }, {
    "name": "max-mironov",
    "email": "v-maximi@microsoft.com"
  }, {
    "name": "maximpop",
    "email": "maximpop@microsoft.com"
  }, {
    "name": "pniko",
    "email": "patrick.nikoletich@microsoft.com"
  }, {
    "name": "ryanjsalva",
    "email": "ryanjsalva@gmail.com"
  }, {
    "name": "sergey-akhalkov",
    "email": "v-seakha@microsoft.com"
  }, {
    "name": "silhouettes",
    "email": "rich@rkhua.com"
  }],
  "name": "react-native-code-push",
  "optionalDependencies": {},
  "publish_time": 1493841664560,
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Microsoft/react-native-code-push.git"
  },
  "rnpm": {
    "android": {
      "packageInstance": "new CodePush(${androidDeploymentKey}, getApplicationContext(), BuildConfig.DEBUG)"
    },
    "ios": {
      "sharedLibraries": ["libz"]
    },
    "params": [{
      "type": "input",
      "name": "androidDeploymentKey",
      "message": "What is your CodePush deployment key for Android (hit <ENTER> to ignore)"
    }],
    "commands": {
      "postlink": "node node_modules/react-native-code-push/scripts/postlink/run"
    }
  },
  "scripts": {},
  "typings": "typings/react-native-code-push.d.ts",
  "version": "1.17.4-beta"
};
}, 470, null, "react-native-code-push/package.json");
__d(/* react-native-code-push/RestartManager.js */function(global, require, module, exports) {var log = require(472        ); // 472 = ./logging
var NativeCodePush = require(46            ).NativeModules.CodePush; // 46 = react-native

var RestartManager = function () {
    var _allowed = true;
    var _restartInProgress = false;
    var _restartQueue = [];

    function allow() {
        log("Re-allowing restarts");
        _allowed = true;

        if (_restartQueue.length) {
            log("Executing pending restart");
            restartApp(_restartQueue.shift(1));
        }
    }

    function clearPendingRestart() {
        _restartQueue = [];
    }

    function disallow() {
        log("Disallowing restarts");
        _allowed = false;
    }

    function restartApp() {
        var onlyIfUpdateIsPending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        return regeneratorRuntime.async(function restartApp$(_context) {
            while (1) {
                switch (_context.prev = _context.next) {
                    case 0:
                        if (!_restartInProgress) {
                            _context.next = 5;
                            break;
                        }

                        log("Restart request queued until the current restart is completed");
                        _restartQueue.push(onlyIfUpdateIsPending);
                        _context.next = 18;
                        break;

                    case 5:
                        if (_allowed) {
                            _context.next = 10;
                            break;
                        }

                        log("Restart request queued until restarts are re-allowed");
                        _restartQueue.push(onlyIfUpdateIsPending);
                        _context.next = 18;
                        break;

                    case 10:
                        _restartInProgress = true;
                        _context.next = 13;
                        return regeneratorRuntime.awrap(NativeCodePush.restartApp(onlyIfUpdateIsPending));

                    case 13:
                        if (!_context.sent) {
                            _context.next = 16;
                            break;
                        }

                        log("Restarting app");
                        return _context.abrupt("return");

                    case 16:

                        _restartInProgress = false;
                        if (_restartQueue.length) {
                            restartApp(_restartQueue.shift(1));
                        }

                    case 18:
                    case "end":
                        return _context.stop();
                }
            }
        }, null, this);
    }

    return {
        allow: allow,
        clearPendingRestart: clearPendingRestart,
        disallow: disallow,
        restartApp: restartApp
    };
}();

module.exports = RestartManager;
}, 471, null, "react-native-code-push/RestartManager.js");
__d(/* react-native-code-push/logging.js */function(global, require, module, exports) {
function log(message) {
  console.log("[CodePush] " + message);
}

module.exports = log;
}, 472, null, "react-native-code-push/logging.js");
__d(/* react-native-code-push/package-mixins.js */function(global, require, module, exports) {var _acquisitionSdk = require(467                               ); // 467 = code-push/script/acquisition-sdk

var _reactNative = require(46            ); // 46 = react-native

var _RestartManager = require(471               ); // 471 = ./RestartManager

var _RestartManager2 = babelHelpers.interopRequireDefault(_RestartManager);

module.exports = function (NativeCodePush) {
  var remote = function remote(reportStatusDownload) {
    return {
      download: function download(downloadProgressCallback) {
        var downloadProgressSubscription, codePushEventEmitter, updatePackageCopy, downloadedPackage;
        return regeneratorRuntime.async(function download$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (this.downloadUrl) {
                  _context.next = 2;
                  break;
                }

                throw new Error("Cannot download an update without a download url");

              case 2:
                downloadProgressSubscription = void 0;

                if (downloadProgressCallback) {
                  codePushEventEmitter = new _reactNative.NativeEventEmitter(NativeCodePush);

                  downloadProgressSubscription = codePushEventEmitter.addListener("CodePushDownloadProgress", downloadProgressCallback);
                }

                _context.prev = 4;
                updatePackageCopy = babelHelpers.extends({}, this);

                Object.keys(updatePackageCopy).forEach(function (key) {
                  return typeof updatePackageCopy[key] === 'function' && delete updatePackageCopy[key];
                });

                _context.next = 9;
                return regeneratorRuntime.awrap(NativeCodePush.downloadUpdate(updatePackageCopy, !!downloadProgressCallback));

              case 9:
                downloadedPackage = _context.sent;


                reportStatusDownload && reportStatusDownload(this);
                return _context.abrupt("return", babelHelpers.extends({}, downloadedPackage, local));

              case 12:
                _context.prev = 12;

                downloadProgressSubscription && downloadProgressSubscription.remove();
                return _context.finish(12);

              case 15:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[4,, 12, 15]]);
      },


      isPending: false };
  };

  var local = {
    install: function install() {
      var installMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NativeCodePush.codePushInstallModeOnNextRestart;
      var minimumBackgroundDuration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
      var updateInstalledCallback = arguments[2];
      var localPackage, localPackageCopy;
      return regeneratorRuntime.async(function install$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              localPackage = this;
              localPackageCopy = babelHelpers.extends({}, localPackage);
              _context2.next = 4;
              return regeneratorRuntime.awrap(NativeCodePush.installUpdate(localPackageCopy, installMode, minimumBackgroundDuration));

            case 4:
              updateInstalledCallback && updateInstalledCallback();
              if (installMode == NativeCodePush.codePushInstallModeImmediate) {
                _RestartManager2.default.restartApp(false);
              } else {
                _RestartManager2.default.clearPendingRestart();
                localPackage.isPending = true;
              }

            case 6:
            case "end":
              return _context2.stop();
          }
        }
      }, null, this);
    },


    isPending: false };

  return { local: local, remote: remote };
};
}, 473, null, "react-native-code-push/package-mixins.js");
__d(/* YrcnAppProject/src/common/YrcnApp.js */function(global, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var styles = require(478                    ); // 478 = ../common/RNStyles.js
var RNConfigs = require(479                     ); // 479 = ../common/RNConfigs.js
var RNLoginUser = require(480                       ); // 480 = ../common/RNLoginUser.js
var RNBASE64 = require(481                    ); // 481 = ../common/RNBASE64.js

var YRImage = require(482                                ); // 482 = ../component/overwrite/YRImage.js
var YRStatusBar = require(484                                    ); // 484 = ../component/overwrite/YRStatusBar.js
var YRNavigatorTitleView = require(485                                          ); // 485 = ../component/overwrite/YRNavigatorTitleView
var YRNavigatorLeftBtnView = require(486                                            ); // 486 = ../component/overwrite/YRNavigatorLeftBtnView
var YRNavigatorRightBtnView = require(487                                             ); // 487 = ../component/overwrite/YRNavigatorRightBtnView
var components = {
    Image: YRImage,
    StatusBar: YRStatusBar,
    NavigatorTitleView: YRNavigatorTitleView,
    NavigatorLeftBtnView: YRNavigatorLeftBtnView,
    NavigatorRightBtnView: YRNavigatorRightBtnView
};

_reactNative.Platform.isIOS = _reactNative.Platform.OS == 'ios';
var YrcnApp = {
    native: _reactNative.NativeModules,
    Platform: _reactNative.Platform,
    utils: RNUtils,
    base64: RNBASE64,
    services: RNAllService,
    styles: styles,
    loginUser: RNLoginUser,
    components: components,
    configs: RNConfigs,
    now: {}
};
global.YrcnApp = YrcnApp;

YrcnApp.native.RNUtilsModule.getAppInfo([], function (arrayObj) {
    var appInfo = YrcnApp.utils.parseJSON(arrayObj[0]);
    global.YrcnApp.appInfo = appInfo;
    YrcnApp.utils.log("YrcnApp.js", JSON.stringify(appInfo), "info");

    YrcnApp.utils.setAppInfo(appInfo);
});
exports.default = YrcnApp;
}, 474, null, "YrcnAppProject/src/common/YrcnApp.js");
__d(/* YrcnAppProject/src/common/RNUtils.js */function(global, require, module, exports) {
'use strict';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(476               ); // 476 = moment/moment.js
moment.locale('zh-cn');
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js

var RNUtilsModule = _reactNative.NativeModules.RNUtilsModule;

Number.prototype.toFixed = function (len) {
    var add = 0;
    var s, temp;
    var s1 = this + "";
    var start = s1.indexOf(".");
    if (s1.substr(start + len + 1, 1) >= 5) add = 1;
    var temp = Math.pow(10, len);
    s = Math.floor(this * temp) + add;
    return s / temp;
};

var AS_KEY_APP_INFO = "AS_000";
var AS_KEY_BOOKDESK = "AS_001";
var AS_KEY_BOOKINFO_PREV = "AS_002_";
var AS_KEY_BOOKSECTIONS_PREV = "AS_003_";
var AS_KEY_BOOKSECTION_PREV = "AS_004_";
var AS_KEY_BOOK_SHELF_LIST = "AS_005";
var AS_KEY_BOOK_SHELF_PREV = "AS_006_";
var AS_KEY_SEARCH_KEY = "AS_007_";
var AS_KEY_SEARCH_KEY_LAST = "AS_008_";
var AS_KEY_LOGIN_INFO = "AS_009";
var AS_KEY_READING_SETTINGS_INFO = "AS_010";
var AS_KEY_SCREEN_LIGHT = "AS_011";
var AS_KEY_ACCOUNT_PWD = "AS_012";
var AS_KEY_CARD_PWD = "AS_013";
var AS_KEY_TODAY_CONTENT_PREV = "AS_014_";
var AS_KEY_TODAY_CONTENT_TYPES = "AS_015";
var AS_KEY_NEW_FUNC_PREV = "AS_016_";
var AS_KEY_TODAY_SPORT_TYPES = "AS_017";
var AS_KEY_TODAY_SYNC_WEEK = "AS_018";
var AS_KEY_YOUKE_LOGIN_INFO = "AS_019";

var BOOKDESK_BOOKS_NUM = 12;

var RNUtils = function () {
    function RNUtils() {
        babelHelpers.classCallCheck(this, RNUtils);
    }

    babelHelpers.createClass(RNUtils, null, [{
        key: 'log',
        value: function log(fileName, msg, level) {
            level = level || "debug";
            console.log(fileName + " === " + level + " === " + msg);
        }
    }, {
        key: 'logObj',
        value: function logObj(fileName, obj, level) {
            level = level || "debug";
            console.log(fileName + " === " + level + " === ");
            console.log(obj);
        }
    }, {
        key: 'AsyncStorage_setItem',
        value: function AsyncStorage_setItem(key, obj, succCallbackFn, failedCallbackFn, isNoUser) {
            succCallbackFn = succCallbackFn || function () {};
            failedCallbackFn = failedCallbackFn || function () {};
            isNoUser = isNoUser || "0";
            if (isNoUser == "0") {
                key = global.YrcnApp.loginUser.userLogin.id + key;
            }
            _reactNative.AsyncStorage.setItem(key, JSON.stringify(obj)).then(function () {
                RNUtils.log("RNUtils.js AsyncStorage_setItem", "成功 key=" + key + " value=" + JSON.stringify(obj));
                succCallbackFn();
            }).catch(function (e) {
                RNUtils.log("RNUtils.js AsyncStorage_setItem", "异常 key=" + key);
                failedCallbackFn(e);
            }).done();
        }
    }, {
        key: 'AsyncStorage_getItem',
        value: function AsyncStorage_getItem(key, succCallbackFn, failedCallbackFn, isNoUser) {
            succCallbackFn = succCallbackFn || function () {};
            failedCallbackFn = failedCallbackFn || function () {};
            isNoUser = isNoUser || "0";
            if (isNoUser == "0") {
                key = global.YrcnApp.loginUser.userLogin.id + key;
            }
            _reactNative.AsyncStorage.getItem(key).then(function (obj) {
                if (obj) {
                    RNUtils.log("RNUtils.js AsyncStorage_getItem", "成功 key=" + key + " value=" + JSON.stringify(obj));
                    succCallbackFn(RNUtils.parseJSON(obj));
                } else {
                    succCallbackFn({});
                }
            }).catch(function (e) {
                RNUtils.log("RNUtils.js AsyncStorage_getItem", "异常 key=" + key);
                failedCallbackFn(e);
            }).done();
        }
    }, {
        key: 'AsyncStorage_removeItem',
        value: function AsyncStorage_removeItem(key, succCallbackFn, failedCallbackFn, isNoUser) {
            succCallbackFn = succCallbackFn || function () {};
            failedCallbackFn = failedCallbackFn || function () {};
            isNoUser = isNoUser || "0";
            if (isNoUser == "0") {
                key = global.YrcnApp.loginUser.userLogin.id + key;
            }
            _reactNative.AsyncStorage.removeItem(key).then(function () {
                succCallbackFn();
            }).catch(function (e) {
                RNUtils.log("RNUtils.js AsyncStorage_removeItem", "异常 key=" + key);
                failedCallbackFn(e);
            }).done();
        }
    }, {
        key: 'setAppInfo',
        value: function setAppInfo(appInfo) {
            RNUtils.AsyncStorage_setItem(AS_KEY_APP_INFO, appInfo, function () {}, function () {}, "1");
        }
    }, {
        key: 'getAppInfo',
        value: function getAppInfo(callbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_APP_INFO, callbackFn, function () {}, "1");
        }
    }, {
        key: 'getScreenWidthHeight',
        value: function getScreenWidthHeight() {
            return _reactNative.Dimensions.get('window');
        }
    }, {
        key: 'parseJSON',
        value: function parseJSON(obj) {
            var isJson = typeof obj == "object" && Object.prototype.toString.call(obj).toLowerCase() == "[object object]" && !obj.length;
            if (!isJson) {
                obj = JSON.parse(obj);
            }
            return obj;
        }
    }, {
        key: 'toJsonObject',
        value: function toJsonObject(json) {
            if (typeof json == "string") {
                return $.parseJSON(json);
            } else {
                return json;
            }
        }
    }, {
        key: 'toString',
        value: function toString(obj) {
            if (typeof obj == "object") {
                return JSON.stringify(obj);
            } else {
                return obj;
            }
        }
    }, {
        key: 'humanDt',
        value: function humanDt(dtStr) {
            var ret = moment(dtStr, 'YYYY-MM-DD HH:mm:ss').format("YYYY-MM-DD HH:mm:ss");;

            return ret;
        }
    }, {
        key: 'nowDt',
        value: function nowDt() {
            var ret = moment().format("YYYY-MM-DD HH:mm:ss");;

            return ret;
        }
    }, {
        key: 'nowDate',
        value: function nowDate() {
            var ret = moment().format("YYYY-MM-DD");;

            return ret;
        }
    }, {
        key: 'yesterdayDate',
        value: function yesterdayDate() {
            var ret = moment().subtract(1, 'days').format("YYYY-MM-DD");;

            return ret;
        }
    }, {
        key: 'lastMonth3Date',
        value: function lastMonth3Date() {
            var ret = moment().subtract(3, 'months').format("YYYY-MM-DD");;

            return ret;
        }
    }, {
        key: 'nowTime',
        value: function nowTime() {
            var ret = moment().format("HH:mm:ss");;

            return ret;
        }
    }, {
        key: 'nowTimeHHmm',
        value: function nowTimeHHmm() {
            var ret = moment().format("HH:mm");;

            return ret;
        }
    }, {
        key: 'isBefore',
        value: function isBefore(beforeDate, afterDate) {
            return moment(beforeDate).isBefore(afterDate);
        }
    }, {
        key: 'isAfter',
        value: function isAfter(beforeDate, afterDate) {
            return moment(beforeDate).isAfter(afterDate);
        }
    }, {
        key: 'deepCopy',
        value: function deepCopy(source) {
            var result = {};
            for (var key in source) {
                result[key] = typeof source[key] === 'object' ? RNUtils.deepCopy(source[key]) : source[key];
            }
            return result;
        }
    }, {
        key: 'alert',
        value: function alert(msg, callbackFn, title) {
            callbackFn = callbackFn || function () {};
            title = title || "温馨提示";
            _reactNative.Alert.alert(title, msg + "", [{
                text: "好的",
                onPress: function onPress() {
                    callbackFn();
                }
            }]);
        }
    }, {
        key: 'confirm',
        value: function confirm(msg, callbackFn, title, cancelCallbackFn) {
            callbackFn = callbackFn || function () {};
            cancelCallbackFn = cancelCallbackFn || function () {};
            title = title || "温馨提示";
            _reactNative.Alert.alert(title, msg + "", [{
                text: "确定",
                onPress: function onPress() {
                    callbackFn();
                }
            }, {
                text: "取消",
                onPress: function onPress() {
                    cancelCallbackFn();
                }
            }]);
        }
    }, {
        key: 'openDeleteCancel',
        value: function openDeleteCancel(msg, callbackFn, title) {
            callbackFn = callbackFn || function () {};
            title = title || "温馨提示";
            _reactNative.Alert.alert(title, msg + "", [{
                text: "打开",
                onPress: function onPress() {
                    callbackFn(0);
                }
            }, {
                text: "删除",
                onPress: function onPress() {
                    callbackFn(1);
                }
            }, {
                text: "取消",
                onPress: function onPress() {}
            }]);
        }
    }, {
        key: 'openUpdDeleteCancel',
        value: function openUpdDeleteCancel(msg, callbackFn, title) {
            callbackFn = callbackFn || function () {};
            title = title || "温馨提示";
            _reactNative.Alert.alert(title, msg + "", [{
                text: "打开",
                onPress: function onPress() {
                    callbackFn(0);
                }
            }, {
                text: "编辑",
                onPress: function onPress() {
                    callbackFn(1);
                }
            }, {
                text: "删除",
                onPress: function onPress() {
                    callbackFn(2);
                }
            }, {
                text: "取消",
                onPress: function onPress() {}
            }]);
        }
    }, {
        key: 'isBiaodianFuhao',
        value: function isBiaodianFuhao(xChar) {
            var isBiaodian = false;

            var reg = /[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/;
            if (reg.test(xChar)) {
                isBiaodian = true;
            }
            return isBiaodian;
        }
    }, {
        key: 'isBiaodianLineEnd',
        value: function isBiaodianLineEnd(xChar) {
            var isBiaodian = false;

            var reg = /[\u3002|\uff1f|\uff01|\uff0c|\u3001|\uff1b|\uff1a|\u201c|\u201d|\u2018|\u2019|\uff08|\uff09|\u300a|\u300b|\u3008|\u3009|\u3010|\u3011|\u300e|\u300f|\u300c|\u300d|\ufe43|\ufe44|\u3014|\u3015|\u2026|\u2014|\uff5e|\ufe4f|\uffe5]/;
            if (reg.test(xChar)) {
                isBiaodian = true;
            }
            return isBiaodian;
        }
    }, {
        key: 'isBiaodianFuhao_samll',
        value: function isBiaodianFuhao_samll(xChar) {
            var isBiaodian = false;
            if (xChar == '‘' || xChar == '’' || xChar == '“' || xChar == '”') {
                isBiaodian = true;
            }
            return isBiaodian;
        }
    }, {
        key: 'utf8ToUnicode',
        value: function utf8ToUnicode(strUtf8) {
            var bstr = "";
            var nTotalChars = strUtf8.length;
            var nOffset = 0;
            var nRemainingBytes = nTotalChars;
            var nOutputPosition = 0;
            var iCode, iCode1, iCode2;

            while (nOffset < nTotalChars) {
                iCode = strUtf8.charCodeAt(nOffset);
                if ((iCode & 0x80) == 0) {
                        if (nRemainingBytes < 1) break;

                        bstr += String.fromCharCode(iCode & 0x7F);
                        nOffset++;
                        nRemainingBytes -= 1;
                    } else if ((iCode & 0xE0) == 0xC0) {
                        iCode1 = strUtf8.charCodeAt(nOffset + 1);
                        if (nRemainingBytes < 2 || (iCode1 & 0xC0) != 0x80) {
                                break;
                            }

                        bstr += String.fromCharCode((iCode & 0x3F) << 6 | iCode1 & 0x3F);
                        nOffset += 2;
                        nRemainingBytes -= 2;
                    } else if ((iCode & 0xF0) == 0xE0) {
                        iCode1 = strUtf8.charCodeAt(nOffset + 1);
                        iCode2 = strUtf8.charCodeAt(nOffset + 2);
                        if (nRemainingBytes < 3 || (iCode1 & 0xC0) != 0x80 || (iCode2 & 0xC0) != 0x80) {
                            break;
                        }

                        bstr += String.fromCharCode((iCode & 0x0F) << 12 | (iCode1 & 0x3F) << 6 | iCode2 & 0x3F);
                        nOffset += 3;
                        nRemainingBytes -= 3;
                    } else break;
            }

            if (nRemainingBytes != 0) {
                return "";
            }

            return bstr;
        }
    }, {
        key: 'pushLoginInfo',
        value: function pushLoginInfo(obj, succCallbackFn) {
            global.YrcnApp.loginUser = obj;
            RNUtils.AsyncStorage_setItem(AS_KEY_LOGIN_INFO, obj, succCallbackFn, null, "1");
        }
    }, {
        key: 'pushYoukeLoginInfo',
        value: function pushYoukeLoginInfo(obj, succCallbackFn) {
            global.YrcnApp.loginUser = obj;
            RNUtils.AsyncStorage_setItem(AS_KEY_YOUKE_LOGIN_INFO, obj, succCallbackFn, null, "1");
        }
    }, {
        key: 'getLoginInfo',
        value: function getLoginInfo(succCallbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_LOGIN_INFO, succCallbackFn, null, "1");
        }
    }, {
        key: 'getYoukeLoginInfo',
        value: function getYoukeLoginInfo(succCallbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_YOUKE_LOGIN_INFO, succCallbackFn, null, "1");
        }
    }, {
        key: 'removeLoginInfo',
        value: function removeLoginInfo(succCallbackFn) {
            RNUtils.confirm("您确定要注销么？", function () {
                RNUtils.AsyncStorage_removeItem(AS_KEY_LOGIN_INFO, succCallbackFn, null, "1");
            });
        }
    }, {
        key: 'sycnJsonTodayContent',
        value: function sycnJsonTodayContent(day, contentObj, succCallbackFn) {
            if (contentObj) {
                if (contentObj && contentObj.day) {
                    delete contentObj.day;
                }
                if (contentObj && contentObj.contentArray) {
                    delete contentObj.contentArray;
                }
                RNUtils.AsyncStorage_setItem(AS_KEY_TODAY_CONTENT_PREV + day, contentObj, succCallbackFn);
            }
        }
    }, {
        key: 'getJsonTodayContent',
        value: function getJsonTodayContent(day, succCallbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_TODAY_CONTENT_PREV + day, function (getJsonTodayContentObj) {
                succCallbackFn(getJsonTodayContentObj);
            });
        }
    }, {
        key: 'getJsonTodayContentTypes',
        value: function getJsonTodayContentTypes(succCallbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_TODAY_CONTENT_TYPES, succCallbackFn);
        }
    }, {
        key: 'getJsonTodaySportTypes',
        value: function getJsonTodaySportTypes(succCallbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_TODAY_SPORT_TYPES, succCallbackFn);
        }
    }, {
        key: 'setJsonTodayContentTypes',
        value: function setJsonTodayContentTypes(obj, succCallbackFn) {
            RNUtils.AsyncStorage_setItem(AS_KEY_TODAY_CONTENT_TYPES, obj, succCallbackFn);
        }
    }, {
        key: 'setJsonTodaySportTypes',
        value: function setJsonTodaySportTypes(obj, succCallbackFn) {
            RNUtils.AsyncStorage_setItem(AS_KEY_TODAY_SPORT_TYPES, obj, succCallbackFn);
        }
    }, {
        key: 'getKeysTodayContent',
        value: function getKeysTodayContent(succCallbackFn) {
            _reactNative.AsyncStorage.getAllKeys().then(function (keys) {
                console.log(keys);
                var exeCount = 0;
                var dayLength = 0;
                var keysArr = [];
                var startIndex = (global.YrcnApp.loginUser.userLogin.id + AS_KEY_TODAY_CONTENT_PREV).length;
                for (var i = 0; i < keys.length; i++) {
                    var key = keys[i];
                    if (key.indexOf(global.YrcnApp.loginUser.userLogin.id + AS_KEY_TODAY_CONTENT_PREV) == 0) {
                        dayLength++;
                    }
                }
                if (dayLength == 0) {
                    innerFunc();
                } else {
                    for (var i = 0; i < keys.length; i++) {
                        var key = keys[i];
                        if (key.indexOf(global.YrcnApp.loginUser.userLogin.id + AS_KEY_TODAY_CONTENT_PREV) == 0) {
                            RNUtils.getJsonTodayContent(key.substring(startIndex), function (getJsonTodayContentObj) {
                                if (getJsonTodayContentObj) {
                                    YrcnApp.utils.logObj("RNUtils getKeysTodayContent", getJsonTodayContentObj);
                                    var ok = false;
                                    var aDay = "";
                                    for (var bkey in getJsonTodayContentObj) {
                                        if (RNUtils.isTrueContentObj(bkey, getJsonTodayContentObj)) {
                                            aDay = getJsonTodayContentObj[bkey].day;
                                            ok = true;
                                        }
                                    }
                                    if (ok) {
                                        keysArr.push(aDay);
                                    }
                                }
                                exeCount++;
                                innerFunc();
                            });
                        }
                    }
                }

                function innerFunc() {
                    console.log(exeCount + "====" + dayLength);
                    if (exeCount != dayLength) {
                        return;
                    }

                    keysArr = keysArr.sort(function (a, b) {
                        var a = moment(a);
                        var b = moment(b);

                        return b.toDate().getTime() - a.toDate().getTime();
                    });
                    succCallbackFn(keysArr);
                }
            });
        }
    }, {
        key: 'getJsonNewFunc',
        value: function getJsonNewFunc(funcName, succCallbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_NEW_FUNC_PREV + funcName, succCallbackFn);
        }
    }, {
        key: 'setJsonNewFunc',
        value: function setJsonNewFunc(funcName, succCallbackFn) {
            RNUtils.AsyncStorage_setItem(AS_KEY_NEW_FUNC_PREV + funcName, "1", succCallbackFn);
        }
    }, {
        key: 'getImageExt',
        value: function getImageExt(origURL, fileName) {
            var index = origURL.indexOf("ext=");
            if (index > -1) {
                return origURL.substring(index + 4).toLowerCase();
            } else {
                index = fileName.lastIndexOf(".");
                if (index > -1) {
                    return fileName.substring(index + 1).toLowerCase();
                } else {
                    return "jpg";
                }
            }
        }
    }, {
        key: 'getSandboxFileUri',
        value: function getSandboxFileUri(uri) {
            var uriArray = uri.split("Documents");
            console.log(uriArray);
            if (uriArray.length >= 2) {
                return "file://" + YrcnApp.appInfo.DocumentsPath + uriArray[uriArray.length - 1];
            } else {
                return uri;
            }
        }
    }, {
        key: 'getSandboxFileShortPath',
        value: function getSandboxFileShortPath(uri) {
            var uriArray = uri.split("Documents");
            console.log(uriArray);
            if (uriArray.length >= 2) {
                return uriArray[uriArray.length - 1];
            } else {
                return uri;
            }
        }
    }, {
        key: 'getSandboxFileLongPath',
        value: function getSandboxFileLongPath(uri) {
            if (YrcnApp.Platform.isIOS) {
                return "file://" + YrcnApp.appInfo.DocumentsPath + RNUtils.getSandboxFileShortPath(uri);
            } else {
                return uri;
            }
        }
    }, {
        key: 'handleSandboxImageSource',
        value: function handleSandboxImageSource(source) {
            console.log("handleSandboxImageSource");
            console.log(source);
            var uriArray = source.uri.split("Documents");
            console.log(uriArray);
            if (uriArray.length >= 2) {
                source.uri = "file://" + YrcnApp.appInfo.DocumentsPath + uriArray[uriArray.length - 1];
            }
            return source;
        }
    }, {
        key: 'isTrueContentObj',
        value: function isTrueContentObj(e, contentObj) {
            if (e != 'day' && e != 'contentArray' && contentObj[e] && (contentObj[e].content || Array.isArray(contentObj[e].oneImages) && contentObj[e].oneImages.length > 0 || contentObj[e].overtime || contentObj[e].qingjia)) {
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: 'isTyodaySyncWeek',
        value: function isTyodaySyncWeek(succCallbackFn) {
            RNUtils.AsyncStorage_getItem(AS_KEY_TODAY_SYNC_WEEK, function (AsyncStorage_getItemObj) {
                if (AsyncStorage_getItemObj && AsyncStorage_getItemObj.week) {
                    var nowWeek = moment().weeks();
                    if (AsyncStorage_getItemObj.week == nowWeek) {
                        succCallbackFn();
                    }
                } else {
                    RNUtils.AsyncStorage_setItem(AS_KEY_TODAY_SYNC_WEEK, { week: 0 }, function () {
                        succCallbackFn();
                    });
                }
            });
        }
    }, {
        key: 'setTyodaySyncWeek',
        value: function setTyodaySyncWeek() {
            var nowWeek = moment().weeks();
            RNUtils.AsyncStorage_setItem(AS_KEY_TODAY_SYNC_WEEK, { week: nowWeek }, function () {
                succCallbackFn();
            });
        }
    }, {
        key: 'appVersonGe',
        value: function appVersonGe(wellVerson) {
            var aPPVersions = "1.0.0";
            if (YrcnApp.appInfo && YrcnApp.appInfo.appV) {
                aPPVersions = YrcnApp.appInfo.appV || "9.9.9";
            }
            var arr = aPPVersions.split(".");
            var appV = 0;
            var appV2 = 0;
            if (arr.length >= 3) {
                appV = arr[0] * 1000000 + arr[1] * 10000 + arr[2] * 100;
            }
            var arr2 = wellVerson.split(".");
            if (arr2.length >= 3) {
                appV2 = arr2[0] * 1000000 + arr2[1] * 10000 + arr2[2] * 100;
            }
            if (appV >= appV2) {
                return true;
            } else {
                return false;
            }
        }
    }, {
        key: 'appIOSVersonGe',
        value: function appIOSVersonGe(wellVerson) {
            var aPPVersions = "1.0.0";
            if (YrcnApp.Platform.isIOS && YrcnApp.appInfo && YrcnApp.appInfo.appV) {
                aPPVersions = YrcnApp.appInfo.appV || "9.9.9";
            }
            var arr = aPPVersions.split(".");
            var appV = 0;
            var appV2 = 0;
            if (arr.length >= 3) {
                appV = arr[0] * 1000000 + arr[1] * 10000 + arr[2] * 100;
            }
            var arr2 = wellVerson.split(".");
            if (arr2.length >= 3) {
                appV2 = arr2[0] * 1000000 + arr2[1] * 10000 + arr2[2] * 100;
            }
            if (appV >= appV2) {
                return true;
            } else {
                return false;
            }
        }
    }]);
    return RNUtils;
}();

module.exports = RNUtils;

var defaultBoxBackgroundColor = '#ffffff';
var defaultBackgroundColor = '#efeff5';

(function () {
    var CHARS = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('');

    Math.uuid = function (len, radix) {
        var chars = CHARS,
            uuid = [],
            i;
        radix = radix || chars.length;

        if (len) {
            for (i = 0; i < len; i++) {
                uuid[i] = chars[0 | Math.random() * radix];
            }
        } else {
            var r;

            uuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';
            uuid[14] = '4';

            for (i = 0; i < 36; i++) {
                if (!uuid[i]) {
                    r = 0 | Math.random() * 16;
                    uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];
                }
            }
        }

        return uuid.join('');
    };

    Math.uuidFast = function () {
        var chars = CHARS,
            uuid = new Array(36),
            rnd = 0,
            r;
        for (var i = 0; i < 36; i++) {
            if (i == 8 || i == 13 || i == 18 || i == 23) {
                uuid[i] = '-';
            } else if (i == 14) {
                uuid[i] = '4';
            } else {
                if (rnd <= 0x02) rnd = 0x2000000 + Math.random() * 0x1000000 | 0;
                r = rnd & 0xf;
                rnd = rnd >> 4;
                uuid[i] = chars[i == 19 ? r & 0x3 | 0x8 : r];
            }
        }
        return uuid.join('');
    };

    Math.uuidCompact = function () {
        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
        });
    };
})();
}, 475, null, "YrcnAppProject/src/common/RNUtils.js");
__d(/* moment/moment.js */function(global, require, module, exports) {

;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory();
})(this, function () {
    'use strict';

    var hookCallback;

    function utils_hooks__hooks() {
        return hookCallback.apply(null, arguments);
    }

    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
            return false;
        }
        return true;
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [],
            i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function create_utc__createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            meridiem: null
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function some(fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function valid__isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);

            if (m._strict) {
                isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function valid__createInvalid(flags) {
        var m = create_utc__createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    function isUndefined(input) {
        return input === void 0;
    }

    var momentProperties = utils_hooks__hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);

        if (updateInProgress === false) {
            updateInProgress = true;
            utils_hooks__hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
    }

    function absFloor(number) {
        if (number < 0) {
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (utils_hooks__hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (utils_hooks__hooks.deprecationHandler != null) {
                utils_hooks__hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2);
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (utils_hooks__hooks.deprecationHandler != null) {
            utils_hooks__hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    utils_hooks__hooks.suppressDeprecationWarnings = false;
    utils_hooks__hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function locale_set__set(config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;

        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function keys(obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
    };

    function locale_calendar__calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
    };

    function relative__relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({ unit: u, priority: priorities[u] });
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                get_set__set(this, unit, value);
                utils_hooks__hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get_set__get(this, unit);
            }
        };
    }

    function get_set__get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function get_set__set(mom, unit, value) {
        if (mom.isValid()) {
            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function func() {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1 = /\d/;
    var match2 = /\d\d/;
    var match3 = /\d{3}/;
    var match4 = /\d{4}/;
    var match6 = /[+-]?\d{6}/;
    var match1to2 = /\d\d?/;
    var match3to4 = /\d\d\d\d?/;
    var match5to6 = /\d\d\d\d\d\d?/;
    var match1to3 = /\d{1,3}/;
    var match1to4 = /\d{1,4}/;
    var match1to6 = /[+-]?\d{1,6}/;

    var matchUnsigned = /\d+/;
    var matchSigned = /[+-]?\d+/;

    var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
    var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;

    var regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return isStrict && strictRegex ? strictRegex : regex;
        };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (typeof callback === 'number') {
            func = function func(input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function indexOf(o) {
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    addUnitAlias('month', 'M');

    addUnitPriority('month', 8);

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);

        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths(m, format) {
        if (!m) {
            return this._months;
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort(m, format) {
        if (!m) {
            return this._monthsShort;
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function units_month__handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = create_utc__createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return units_month__handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }

            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);

                if (typeof value !== 'number') {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            utils_hooks__hooks.updateOffset(this, true);
            return this;
        } else {
            return get_set__get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            mom = create_utc__createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }

        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    addUnitAlias('year', 'y');

    addUnitPriority('year', 1);

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? utils_hooks__hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = utils_hooks__hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
    }

    utils_hooks__hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        var date = new Date(y, m, d, h, M, s, ms);

        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy,
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0,
        doy: 6 };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);

        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays(m, format) {
        if (!m) {
            return this._weekdays;
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function day_of_week__handleStrictParse(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = create_utc__createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return day_of_week__handleStrictParse.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {

            mom = create_utc__createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }

            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            mom = create_utc__createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }

        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    addUnitAlias('hour', 'h');

    addUnitPriority('hour', 13);

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    function localeIsPM(input) {
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        ordinalParse: defaultOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    var locales = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;

        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                require('./locale/' + name);

                locale_locales__getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    function locale_locales__getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = locale_locales__getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                globalLocale = data;
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    deprecateSimple('parentLocaleUndefined', 'specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/');
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            locale_locales__getSetGlobalLocale(name);

            return locales[name];
        } else {
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                parentConfig = baseConfig;

            if (locales[name] != null) {
                parentConfig = locales[name]._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            locale_locales__getSetGlobalLocale(name);
        } else {
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    function locale_locales__getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function locale_locales__listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/], ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/], ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/], ['GGGG-[W]WW', /\d{4}-W\d\d/, false], ['YYYY-DDD', /\d{4}-\d{3}/], ['YYYY-MM', /\d{4}-\d\d/, false], ['YYYYYYMMDD', /[+-]\d{10}/], ['YYYYMMDD', /\d{8}/], ['GGGG[W]WWE', /\d{4}W\d{3}/], ['GGGG[W]WW', /\d{4}W\d{2}/, false], ['YYYYDDD', /\d{7}/]];

    var isoTimes = [['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/], ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/], ['HH:mm:ss', /\d\d:\d\d:\d\d/], ['HH:mm', /\d\d:\d\d/], ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/], ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/], ['HHmmss', /\d\d\d\d\d\d/], ['HHmm', /\d\d\d\d/], ['HH', /\d\d/]];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    utils_hooks__hooks.createFromInputFallback = deprecate('value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    });

    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        var nowValue = new Date(utils_hooks__hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        if (config._dayOfYear) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        for (; i < 7; i++) {
            config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }

        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);

        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(local__createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = defaults(w.gg, config._a[YEAR], weekOfYear(local__createLocal(), dow, doy).year);
            week = defaults(w.w, 1);

            if (w.d != null) {
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    utils_hooks__hooks.ISO_8601 = function () {};

    function configFromStringAndFormat(config) {
        if (config._f === utils_hooks__hooks.ISO_8601) {
            configFromISO(config);
            return;
        }

        config._a = [];
        getParsingFlags(config).empty = true;

        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];

            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }

            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;

        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            return hour;
        }
    }

    function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!valid__isValid(tempConfig)) {
                continue;
            }

            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || locale_locales__getLocale(config._l);

        if (input === null || format === undefined && input === '') {
            return valid__createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (isDate(input)) {
            config._d = input;
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!valid__isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
            config._d = new Date(utils_hooks__hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (typeof input === 'object') {
            configFromObject(config);
        } else if (typeof input === 'number') {
            config._d = new Date(input);
        } else {
            utils_hooks__hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (typeof locale === 'boolean') {
            strict = locale;
            locale = undefined;
        }

        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
            input = undefined;
        }

        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function local__createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = local__createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return valid__createInvalid();
        }
    });

    var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = local__createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return valid__createInvalid();
        }
    });

    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return local__createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function now() {
        return Date.now ? Date.now() : +new Date();
    };

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._milliseconds = +milliseconds + seconds * 1e3 + minutes * 6e4 + hours * 1000 * 60 * 60;
        this._days = +days + weeks * 7;

        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = locale_locales__getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher) || [];
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? minutes : -minutes;
    }

    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : local__createLocal(input).valueOf()) - res.valueOf();

            res._d.setTime(res._d.valueOf() + diff);
            utils_hooks__hooks.updateOffset(res, false);
            return res;
        } else {
            return local__createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    utils_hooks__hooks.updateOffset = function () {};

    function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
            } else if (Math.abs(input) < 16) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    add_subtract__addSubtract(this, create__createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    utils_hooks__hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm) {
            this.utcOffset(this._tzm);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);

            if (tZone === 0) {
                this.utcOffset(0, true);
            } else {
                this.utcOffset(offsetFromString(matchOffset, this._i));
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? local__createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? create_utc__createUTC(c._a) : local__createLocal(c._a);
            this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

    function create__createDuration(input, key) {
        var duration = input,
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign)
            };
        } else if (duration == null) {
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(local__createLocal(duration.from), local__createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    create__createDuration.fn = Duration.prototype;

    function parseIso(inp, sign) {
        var res = inp && parseFloat(inp.replace(',', '.'));

        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = { milliseconds: 0, months: 0 };

        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;

            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val;val = period;period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = create__createDuration(val, period);
            add_subtract__addSubtract(this, dur, direction);
            return this;
        };
    }

    function add_subtract__addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (days) {
            get_set__set(mom, 'Date', get_set__get(mom, 'Date') + days * isAdding);
        }
        if (months) {
            setMonth(mom, get_set__get(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            utils_hooks__hooks.updateOffset(mom, days || months);
        }
    }

    var add_subtract__add = createAdder(1, 'add');
    var add_subtract__subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function moment_calendar__calendar(time, formats) {
        var now = time || local__createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = utils_hooks__hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, local__createLocal(now)));
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : local__createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, delta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        if (units === 'year' || units === 'month' || units === 'quarter') {
            output = monthDiff(this, that);
            if (units === 'quarter') {
                output = output / 3;
            } else if (units === 'year') {
                output = output / 12;
            }
        } else {
            delta = this - that;
            output = units === 'second' ? delta / 1e3 : units === 'minute' ? delta / 6e4 : units === 'hour' ? delta / 36e5 : units === 'day' ? (delta - zoneDelta) / 864e5 : units === 'week' ? (delta - zoneDelta) / 6048e5 : delta;
        }
        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');

            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');

            adjust = (b - anchor) / (anchor2 - anchor);
        }

        return -(wholeMonthDiff + adjust) || 0;
    }

    utils_hooks__hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    utils_hooks__hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function moment_format__toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
            if (isFunction(Date.prototype.toISOString)) {
                return this.toDate().toISOString();
            } else {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        } else {
            return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? utils_hooks__hooks.defaultFormatUtc : utils_hooks__hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
            return create__createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(local__createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || local__createLocal(time).isValid())) {
            return create__createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(local__createLocal(), withoutSuffix);
    }

    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = locale_locales__getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    });

    function localeData() {
        return this._locale;
    }

    function startOf(units) {
        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                this.month(0);

            case 'quarter':
            case 'month':
                this.date(1);

            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);

            case 'hour':
                this.minutes(0);

            case 'minute':
                this.seconds(0);

            case 'second':
                this.milliseconds(0);
        }

        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms');
    }

    function to_type__valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON() {
        return this.isValid() ? this.toISOString() : null;
    }

    function moment_valid__isValid() {
        return valid__isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = utils_hooks__hooks.parseTwoDigitYear(input);
    });

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    addFormatToken('Q', 0, 'Qo', 'quarter');

    addUnitAlias('quarter', 'Q');

    addUnitPriority('quarter', 7);

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    addUnitAlias('date', 'D');

    addUnitPriority('date', 9);

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10);
    });

    var getSetDayOfMonth = makeGetSet('Date', true);

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    addUnitAlias('dayOfYear', 'DDD');

    addUnitPriority('dayOfYear', 4);

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    addFormatToken('m', ['mm', 2], 0, 'minute');

    addUnitAlias('minute', 'm');

    addUnitPriority('minute', 14);

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    var getSetMinute = makeGetSet('Minutes', false);

    addFormatToken('s', ['ss', 2], 0, 'second');

    addUnitAlias('second', 's');

    addUnitPriority('second', 15);

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    var getSetSecond = makeGetSet('Seconds', false);

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    addUnitAlias('millisecond', 'ms');

    addUnitPriority('millisecond', 16);

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }


    var getSetMillisecond = makeGetSet('Milliseconds', false);

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var momentPrototype__proto = Moment.prototype;

    momentPrototype__proto.add = add_subtract__add;
    momentPrototype__proto.calendar = moment_calendar__calendar;
    momentPrototype__proto.clone = clone;
    momentPrototype__proto.diff = diff;
    momentPrototype__proto.endOf = endOf;
    momentPrototype__proto.format = format;
    momentPrototype__proto.from = from;
    momentPrototype__proto.fromNow = fromNow;
    momentPrototype__proto.to = to;
    momentPrototype__proto.toNow = toNow;
    momentPrototype__proto.get = stringGet;
    momentPrototype__proto.invalidAt = invalidAt;
    momentPrototype__proto.isAfter = isAfter;
    momentPrototype__proto.isBefore = isBefore;
    momentPrototype__proto.isBetween = isBetween;
    momentPrototype__proto.isSame = isSame;
    momentPrototype__proto.isSameOrAfter = isSameOrAfter;
    momentPrototype__proto.isSameOrBefore = isSameOrBefore;
    momentPrototype__proto.isValid = moment_valid__isValid;
    momentPrototype__proto.lang = lang;
    momentPrototype__proto.locale = locale;
    momentPrototype__proto.localeData = localeData;
    momentPrototype__proto.max = prototypeMax;
    momentPrototype__proto.min = prototypeMin;
    momentPrototype__proto.parsingFlags = parsingFlags;
    momentPrototype__proto.set = stringSet;
    momentPrototype__proto.startOf = startOf;
    momentPrototype__proto.subtract = add_subtract__subtract;
    momentPrototype__proto.toArray = toArray;
    momentPrototype__proto.toObject = toObject;
    momentPrototype__proto.toDate = toDate;
    momentPrototype__proto.toISOString = moment_format__toISOString;
    momentPrototype__proto.toJSON = toJSON;
    momentPrototype__proto.toString = toString;
    momentPrototype__proto.unix = unix;
    momentPrototype__proto.valueOf = to_type__valueOf;
    momentPrototype__proto.creationData = creationData;

    momentPrototype__proto.year = getSetYear;
    momentPrototype__proto.isLeapYear = getIsLeapYear;

    momentPrototype__proto.weekYear = getSetWeekYear;
    momentPrototype__proto.isoWeekYear = getSetISOWeekYear;

    momentPrototype__proto.quarter = momentPrototype__proto.quarters = getSetQuarter;

    momentPrototype__proto.month = getSetMonth;
    momentPrototype__proto.daysInMonth = getDaysInMonth;

    momentPrototype__proto.week = momentPrototype__proto.weeks = getSetWeek;
    momentPrototype__proto.isoWeek = momentPrototype__proto.isoWeeks = getSetISOWeek;
    momentPrototype__proto.weeksInYear = getWeeksInYear;
    momentPrototype__proto.isoWeeksInYear = getISOWeeksInYear;

    momentPrototype__proto.date = getSetDayOfMonth;
    momentPrototype__proto.day = momentPrototype__proto.days = getSetDayOfWeek;
    momentPrototype__proto.weekday = getSetLocaleDayOfWeek;
    momentPrototype__proto.isoWeekday = getSetISODayOfWeek;
    momentPrototype__proto.dayOfYear = getSetDayOfYear;

    momentPrototype__proto.hour = momentPrototype__proto.hours = getSetHour;

    momentPrototype__proto.minute = momentPrototype__proto.minutes = getSetMinute;

    momentPrototype__proto.second = momentPrototype__proto.seconds = getSetSecond;

    momentPrototype__proto.millisecond = momentPrototype__proto.milliseconds = getSetMillisecond;

    momentPrototype__proto.utcOffset = getSetOffset;
    momentPrototype__proto.utc = setOffsetToUTC;
    momentPrototype__proto.local = setOffsetToLocal;
    momentPrototype__proto.parseZone = setOffsetToParsedOffset;
    momentPrototype__proto.hasAlignedHourOffset = hasAlignedHourOffset;
    momentPrototype__proto.isDST = isDaylightSavingTime;
    momentPrototype__proto.isLocal = isLocal;
    momentPrototype__proto.isUtcOffset = isUtcOffset;
    momentPrototype__proto.isUtc = isUtc;
    momentPrototype__proto.isUTC = isUtc;

    momentPrototype__proto.zoneAbbr = getZoneAbbr;
    momentPrototype__proto.zoneName = getZoneName;

    momentPrototype__proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    momentPrototype__proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    momentPrototype__proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    momentPrototype__proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    momentPrototype__proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    var momentPrototype = momentPrototype__proto;

    function moment__createUnix(input) {
        return local__createLocal(input * 1000);
    }

    function moment__createInZone() {
        return local__createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var prototype__proto = Locale.prototype;

    prototype__proto.calendar = locale_calendar__calendar;
    prototype__proto.longDateFormat = longDateFormat;
    prototype__proto.invalidDate = invalidDate;
    prototype__proto.ordinal = ordinal;
    prototype__proto.preparse = preParsePostFormat;
    prototype__proto.postformat = preParsePostFormat;
    prototype__proto.relativeTime = relative__relativeTime;
    prototype__proto.pastFuture = pastFuture;
    prototype__proto.set = locale_set__set;

    prototype__proto.months = localeMonths;
    prototype__proto.monthsShort = localeMonthsShort;
    prototype__proto.monthsParse = localeMonthsParse;
    prototype__proto.monthsRegex = monthsRegex;
    prototype__proto.monthsShortRegex = monthsShortRegex;

    prototype__proto.week = localeWeek;
    prototype__proto.firstDayOfYear = localeFirstDayOfYear;
    prototype__proto.firstDayOfWeek = localeFirstDayOfWeek;

    prototype__proto.weekdays = localeWeekdays;
    prototype__proto.weekdaysMin = localeWeekdaysMin;
    prototype__proto.weekdaysShort = localeWeekdaysShort;
    prototype__proto.weekdaysParse = localeWeekdaysParse;

    prototype__proto.weekdaysRegex = weekdaysRegex;
    prototype__proto.weekdaysShortRegex = weekdaysShortRegex;
    prototype__proto.weekdaysMinRegex = weekdaysMinRegex;

    prototype__proto.isPM = localeIsPM;
    prototype__proto.meridiem = localeMeridiem;

    function lists__get(format, index, field, setter) {
        var locale = locale_locales__getLocale();
        var utc = create_utc__createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (typeof format === 'number') {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return lists__get(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = lists__get(format, i, field, 'month');
        }
        return out;
    }

    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = locale_locales__getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return lists__get(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = lists__get(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function lists__listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function lists__listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function lists__listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function lists__listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function lists__listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    locale_locales__getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function ordinal(number) {
            var b = number % 10,
                output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
            return number + output;
        }
    });

    utils_hooks__hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', locale_locales__getSetGlobalLocale);
    utils_hooks__hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', locale_locales__getLocale);

    var mathAbs = Math.abs;

    function duration_abs__abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function duration_add_subtract__addSubtract(duration, input, value, direction) {
        var other = create__createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    function duration_add_subtract__add(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, 1);
    }

    function duration_add_subtract__subtract(input, value) {
        return duration_add_subtract__addSubtract(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        return days * 4800 / 146097;
    }

    function monthsToDays(months) {
        return months * 146097 / 4800;
    }

    function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;

                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    function duration_as__valueOf() {
        return this._milliseconds + this._days * 864e5 + this._months % 12 * 2592e6 + toInt(this._months / 12) * 31536e6;
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds = makeAs('s');
    var asMinutes = makeAs('m');
    var asHours = makeAs('h');
    var asDays = makeAs('d');
    var asWeeks = makeAs('w');
    var asMonths = makeAs('M');
    var asYears = makeAs('y');

    function duration_get__get(units) {
        units = normalizeUnits(units);
        return this[units + 's']();
    }

    function makeGetter(name) {
        return function () {
            return this._data[name];
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds = makeGetter('seconds');
    var minutes = makeGetter('minutes');
    var hours = makeGetter('hours');
    var days = makeGetter('days');
    var months = makeGetter('months');
    var years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        s: 45,
        m: 45,
        h: 22,
        d: 26,
        M: 11 };

    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function duration_humanize__relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = create__createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));

        var a = seconds < thresholds.s && ['s', seconds] || minutes <= 1 && ['m'] || minutes < thresholds.m && ['mm', minutes] || hours <= 1 && ['h'] || hours < thresholds.h && ['hh', hours] || days <= 1 && ['d'] || days < thresholds.d && ['dd', days] || months <= 1 && ['M'] || months < thresholds.M && ['MM', months] || years <= 1 && ['y'] || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    function duration_humanize__getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    function duration_humanize__getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        return true;
    }

    function humanize(withSuffix) {
        var locale = this.localeData();
        var output = duration_humanize__relativeTime(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var iso_string__abs = Math.abs;

    function iso_string__toISOString() {
        var seconds = iso_string__abs(this._milliseconds) / 1000;
        var days = iso_string__abs(this._days);
        var months = iso_string__abs(this._months);
        var minutes, hours, years;

        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        years = absFloor(months / 12);
        months %= 12;

        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();

        if (!total) {
            return 'P0D';
        }

        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '');
    }

    var duration_prototype__proto = Duration.prototype;

    duration_prototype__proto.abs = duration_abs__abs;
    duration_prototype__proto.add = duration_add_subtract__add;
    duration_prototype__proto.subtract = duration_add_subtract__subtract;
    duration_prototype__proto.as = as;
    duration_prototype__proto.asMilliseconds = asMilliseconds;
    duration_prototype__proto.asSeconds = asSeconds;
    duration_prototype__proto.asMinutes = asMinutes;
    duration_prototype__proto.asHours = asHours;
    duration_prototype__proto.asDays = asDays;
    duration_prototype__proto.asWeeks = asWeeks;
    duration_prototype__proto.asMonths = asMonths;
    duration_prototype__proto.asYears = asYears;
    duration_prototype__proto.valueOf = duration_as__valueOf;
    duration_prototype__proto._bubble = bubble;
    duration_prototype__proto.get = duration_get__get;
    duration_prototype__proto.milliseconds = milliseconds;
    duration_prototype__proto.seconds = seconds;
    duration_prototype__proto.minutes = minutes;
    duration_prototype__proto.hours = hours;
    duration_prototype__proto.days = days;
    duration_prototype__proto.weeks = weeks;
    duration_prototype__proto.months = months;
    duration_prototype__proto.years = years;
    duration_prototype__proto.humanize = humanize;
    duration_prototype__proto.toISOString = iso_string__toISOString;
    duration_prototype__proto.toString = iso_string__toISOString;
    duration_prototype__proto.toJSON = iso_string__toISOString;
    duration_prototype__proto.locale = locale;
    duration_prototype__proto.localeData = localeData;

    duration_prototype__proto.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', iso_string__toISOString);
    duration_prototype__proto.lang = lang;

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    utils_hooks__hooks.version = '2.15.2';

    setHookCallback(local__createLocal);

    utils_hooks__hooks.fn = momentPrototype;
    utils_hooks__hooks.min = min;
    utils_hooks__hooks.max = max;
    utils_hooks__hooks.now = now;
    utils_hooks__hooks.utc = create_utc__createUTC;
    utils_hooks__hooks.unix = moment__createUnix;
    utils_hooks__hooks.months = lists__listMonths;
    utils_hooks__hooks.isDate = isDate;
    utils_hooks__hooks.locale = locale_locales__getSetGlobalLocale;
    utils_hooks__hooks.invalid = valid__createInvalid;
    utils_hooks__hooks.duration = create__createDuration;
    utils_hooks__hooks.isMoment = isMoment;
    utils_hooks__hooks.weekdays = lists__listWeekdays;
    utils_hooks__hooks.parseZone = moment__createInZone;
    utils_hooks__hooks.localeData = locale_locales__getLocale;
    utils_hooks__hooks.isDuration = isDuration;
    utils_hooks__hooks.monthsShort = lists__listMonthsShort;
    utils_hooks__hooks.weekdaysMin = lists__listWeekdaysMin;
    utils_hooks__hooks.defineLocale = defineLocale;
    utils_hooks__hooks.updateLocale = updateLocale;
    utils_hooks__hooks.locales = locale_locales__listLocales;
    utils_hooks__hooks.weekdaysShort = lists__listWeekdaysShort;
    utils_hooks__hooks.normalizeUnits = normalizeUnits;
    utils_hooks__hooks.relativeTimeRounding = duration_humanize__getSetRelativeTimeRounding;
    utils_hooks__hooks.relativeTimeThreshold = duration_humanize__getSetRelativeTimeThreshold;
    utils_hooks__hooks.calendarFormat = getCalendarFormat;
    utils_hooks__hooks.prototype = momentPrototype;

    var _moment = utils_hooks__hooks;

    return _moment;
});
}, 476, null, "moment/moment.js");
__d(/* YrcnAppProject/src/common/RNAllService.js */function(global, require, module, exports) {
'use strict';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var SERVER_ROOT_PATH = "http://www.weichuanghome.com:28080/today";

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var requestThreadPool = {
    iamRunning: false,
    maxThreads: 15,
    runningThreads: [],
    fetchArray: [],
    runningInterval: null,
    push: function push(fetchObj) {
        requestThreadPool.fetchArray.push(fetchObj);

        if (!requestThreadPool.iamRunning) {
            requestThreadPool.iamRunning = true;
            requestThreadPool.handle();
        }
    },
    handle: function handle() {
        requestThreadPool.runningInterval = setInterval(function () {
            if (requestThreadPool.fetchArray.length > 0) {
                var thread = requestThreadPool.getIdealThread();
                if (thread) {
                    thread.isRunning = true;
                    var fetchObj = requestThreadPool.fetchArray.shift();
                    thread.fetchObj = fetchObj;

                    thread.executeHandle();
                } else {}
            } else {
                requestThreadPool.iamRunning = false;
                clearInterval(requestThreadPool.runningInterval);
            }
        }, 20);
    },
    getIdealThread: function getIdealThread() {
        var thread = null;
        for (var i = 0; i < requestThreadPool.runningThreads.length; i++) {
            if (!requestThreadPool.runningThreads[i].isRunning) {
                thread = requestThreadPool.runningThreads[i];

                break;
            }
        }
        return thread;
    },
    init: function init() {
        if (requestThreadPool.maxThreads == requestThreadPool.runningThreads.length) {
            return;
        }
        for (var i = 0; i < requestThreadPool.maxThreads; i++) {
            var threadTemp = {
                index: i,
                fetchObj: null,
                isRunning: false,
                executeHandle: function executeHandle() {
                    var _this = this;

                    var fetchParam2 = { method: this.fetchObj.params.method };

                    var body = "1=1";
                    _reactNative.AsyncStorage.getItem("AS_000").then(function (appInfo) {
                        var appInfoObj = JSON.parse(appInfo);
                        for (var e in appInfoObj) {
                            body += "&" + e + "=" + encodeURIComponent(encodeURIComponent(appInfoObj[e]));
                        }

                        _reactNative.AsyncStorage.getItem("AS_009").then(function (loginInfo) {
                            var loginInfoObj = JSON.parse(loginInfo);
                            if (loginInfoObj) {
                                var userLoginObj = loginInfoObj.userLogin;
                                for (var e in userLoginObj) {
                                    if (e == "id") {
                                        body += "&" + "userLoginId" + "=" + encodeURIComponent(encodeURIComponent(userLoginObj[e]));
                                    } else {
                                        body += "&" + e + "=" + encodeURIComponent(encodeURIComponent(userLoginObj[e]));
                                    }
                                }

                                innerFuncRequest();
                            } else {
                                innerFuncRequest();
                            }
                        }).catch(function (e) {
                            return console.log("获取失败");
                        }).done();
                    }).catch(function (e) {
                        return console.log("获取失败");
                    }).done();

                    function innerFuncRequest() {
                        if (_this.fetchObj.params.method == "POST") {
                            for (var e in _this.fetchObj.params) {

                                body += "&" + e + "=" + _this.fetchObj.params[e];
                            }
                            fetchParam2.body = body;
                            fetchParam2.headers = {
                                "Content-Type": "application/x-www-form-urlencoded",
                                'credentials': 'include'
                            };
                        }
                        console.log(SERVER_ROOT_PATH + _this.fetchObj.params.path);

                        fetch(SERVER_ROOT_PATH + _this.fetchObj.params.path, fetchParam2).then(function (response) {
                            return response.text();
                        }).then(function (responseText) {
                            _this.isRunning = false;

                            var responseJsonObj = JSON.parse(responseText);
                            if (responseJsonObj.RES_RESULT == "SUCCESS") {
                                _this.fetchObj.succCallbackFn(responseJsonObj.RES_DATA);
                            } else if (responseJsonObj.RES_RESULT == "FAILED") {
                                _this.fetchObj.failCallbackFn(responseJsonObj.RES_MSG);
                            } else {
                                console.warn("请求失败：" + responseJsonObj.RES_MSG);
                            }
                        }).catch(function (error) {
                            _this.isRunning = false;
                            console.warn("请求失败：" + error);
                        });
                    }
                }
            };
            requestThreadPool.runningThreads.push(threadTemp);
        }
    }
};

var RNAllService = function () {
    function RNAllService() {
        babelHelpers.classCallCheck(this, RNAllService);
    }

    babelHelpers.createClass(RNAllService, null, [{
        key: 'getData',
        value: function getData(params, succCallbackFn, failCallbackFn) {
            succCallbackFn = succCallbackFn || function () {};
            failCallbackFn = failCallbackFn || function (msg) {
                _reactNative.Alert.alert("温馨提示", msg, [{
                    text: "好的",
                    onPress: function onPress() {}
                }]);
            };
            params.method = params.method || "GET";
            var gtObj = {
                params: params,
                succCallbackFn: succCallbackFn,
                failCallbackFn: failCallbackFn
            };

            _reactNative.NetInfo.fetch().done(function (reach) {
                if (reach == "none") {
                    _reactNative.Alert.alert("温馨提示", "哎呀，貌似没有联网啊...", [{
                        text: "好的",
                        onPress: function onPress() {}
                    }]);
                } else if (reach == "wifi") {
                    innerHandle();
                } else if (reach == "cell") {
                    innerHandle();
                } else {
                    innerHandle();
                }
            });
            function innerHandle() {
                var fetchParam2 = { method: gtObj.params.method };

                var body = "1=1";
                if (params.isBack) {
                    if (requestThreadPool.iamRunning) {
                        requestThreadPool.push(gtObj);
                    } else {
                        requestThreadPool.init();
                        requestThreadPool.push(gtObj);
                    }
                } else {
                    _reactNative.AsyncStorage.getItem("AS_000").then(function (appInfo) {
                        var appInfoObj = JSON.parse(appInfo);
                        for (var e in appInfoObj) {
                            body += "&" + e + "=" + encodeURIComponent(encodeURIComponent(appInfoObj[e]));
                        }

                        _reactNative.AsyncStorage.getItem("AS_009").then(function (loginInfo) {
                            var loginInfoObj = JSON.parse(loginInfo);
                            if (loginInfoObj && gtObj.params.userFlag != "1") {
                                var userLoginObj = loginInfoObj.userLogin;
                                for (var e in userLoginObj) {
                                    if (e == "id") {
                                        body += "&" + "userLoginId" + "=" + encodeURIComponent(encodeURIComponent(userLoginObj[e]));
                                    } else {
                                        body += "&" + e + "=" + encodeURIComponent(encodeURIComponent(userLoginObj[e]));
                                    }
                                }

                                innerFuncRequest();
                            } else {
                                innerFuncRequest();
                            }
                        }).catch(function (e) {
                            return console.log("获取失败");
                        }).done();
                    }).catch(function (e) {
                        return console.log("获取失败");
                    }).done();
                }

                function innerFuncRequest() {
                    if (gtObj.params.method == "POST") {
                        for (var e in gtObj.params) {
                            body += "&" + e + "=" + gtObj.params[e];
                        }
                        fetchParam2.body = body;
                        fetchParam2.headers = {
                            "Content-Type": "application/x-www-form-urlencoded"
                        };
                    }
                    console.log("2======" + SERVER_ROOT_PATH + gtObj.params.path);

                    console.log("2======" + fetch);

                    fetch(SERVER_ROOT_PATH + gtObj.params.path, fetchParam2).then(function (response) {
                        return response.text();
                    }).then(function (responseText) {
                        console.log("responseText=" + responseText);
                        var responseJsonObj = JSON.parse(responseText);
                        if (responseJsonObj.RES_RESULT == "SUCCESS") {
                            gtObj.succCallbackFn(responseJsonObj.RES_DATA);
                        } else if (responseJsonObj.RES_RESULT == "FAILED") {
                            gtObj.failCallbackFn(responseJsonObj.RES_MSG);
                        } else {
                            failCallbackFn(responseJsonObj.RES_MSG);
                        }
                    }).catch(function (error) {
                        console.warn("请求失败：" + error);
                        _reactNative.Alert.alert("温馨提示", "请求网络异常", [{
                            text: "好的",
                            onPress: function onPress() {}
                        }]);
                    });
                }
            }
        }
    }, {
        key: 'checkVersions',
        value: function checkVersions(callbackFn) {
            var appInfo = global.YrcnApp.appInfo;
            var params = {
                path: "/app/json/checkVersions",
                appV: appInfo.appV,
                appBundleV: appInfo.appBundleV,
                method: "POST",
                isBack: true
            };
            RNAllService.getData(params, callbackFn);
        }
    }, {
        key: 'getValidateCodeRegister',
        value: function getValidateCodeRegister() {
            return SERVER_ROOT_PATH + "/validateCode.html?func=02";
        }
    }, {
        key: 'register',
        value: function register(param, callbackFn, failCallbackFn) {
            param = param || {};
            param.path = "/userlogin/register";
            param.method = "POST";
            param.requestFlag = "0";
            param.userFlag = "1";
            RNAllService.getData(param, callbackFn, failCallbackFn);
        }
    }, {
        key: 'login',
        value: function login(param, callbackFn, failCallbackFn) {
            param = param || {};
            param.path = "/userlogin/appLogin";
            param.method = "POST";
            param.userFlag = "1";
            RNAllService.getData(param, callbackFn, failCallbackFn);
        }
    }, {
        key: 'youkeLogin',
        value: function youkeLogin(param, callbackFn, failCallbackFn) {
            param = param || {};
            param.path = "/userlogin/youkeLogin";
            param.method = "POST";
            param.userFlag = "1";
            RNAllService.getData(param, callbackFn, failCallbackFn);
        }
    }, {
        key: 'logout',
        value: function logout(param, callbackFn, failCallbackFn) {
            param = param || {};
            param.path = "/userlogin/readingLogout";
            param.method = "POST";
            param.userFlag = "1";
            RNAllService.getData(param, callbackFn, failCallbackFn);
        }
    }, {
        key: 'getJson_getTodayContentTypes',
        value: function getJson_getTodayContentTypes(param, callbackFn) {
            global.YrcnApp.utils.getJsonTodayContentTypes(function (getJsonTodayContentTypesObj) {
                if (getJsonTodayContentTypesObj && getJsonTodayContentTypesObj.list) {
                    callbackFn(getJsonTodayContentTypesObj);
                } else {
                    global.YrcnApp.utils.setJsonTodayContentTypes(var_getJson_getTodayContentTypes);
                    callbackFn(var_getJson_getTodayContentTypes);
                }
            });
        }
    }, {
        key: 'getJson_getTodaySportTypes',
        value: function getJson_getTodaySportTypes(param, callbackFn) {
            global.YrcnApp.utils.getJsonTodaySportTypes(function (getJsonTodaySportTypesObj) {
                if (getJsonTodaySportTypesObj && getJsonTodaySportTypesObj.list) {
                    callbackFn(getJsonTodaySportTypesObj);
                } else {
                    global.YrcnApp.utils.setJsonTodaySportTypes(var_getJson_getTodaySportTypes);
                    callbackFn(var_getJson_getTodaySportTypes);
                }
            });
        }
    }, {
        key: 'getJson_today_getContentInfo',
        value: function getJson_today_getContentInfo(param, callbackFn) {
            var params = {
                path: "/today/getContentInfo",
                method: "POST",
                isBack: true
            };
            params.day = param.day;
            RNAllService.getData(params, function (contentInfoObj) {
                if (contentInfoObj && contentInfoObj.list) {
                    for (var _iterator = contentInfoObj.list, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var e = _ref;

                        if (e && e.oneImages) {
                            delete e.oneImages;
                        }
                    }
                }
                callbackFn(contentInfoObj);
            });
        }
    }, {
        key: 'getJson_today_synchronizeContentInfo',
        value: function getJson_today_synchronizeContentInfo(param, callbackFn) {
            var params = {
                path: "/today/synchronizeContentInfo",
                method: "POST",
                isBack: true
            };
            params.day = param.day;
            params.typeCode = param.typeCode;
            params.content = param.content;
            if (param.oneImages) {
                params.oneImages = encodeURIComponent(encodeURIComponent(JSON.stringify(param.oneImages)));
            }
            if (param.$key == YrcnApp.configs.AS_KEY_WORKING_LOG || param.$key == YrcnApp.configs.AS_KEY_STUDY || param.$key == YrcnApp.configs.AS_KEY_SPORT) {
                params.content = '...';
                var str = JSON.stringify(param);
                var p = JSON.parse(str);
                delete p.day;
                delete p.typeCode;
                delete p.$key;
                params.json = encodeURIComponent(encodeURIComponent(JSON.stringify(p)));
            } else if (!param.content) {
                return;
            }
            RNAllService.getData(params, callbackFn);
        }
    }]);
    return RNAllService;
}();

module.exports = RNAllService;

var var_getJson_getTodayContentTypes = {
    "list": [{
        "typeCode": "记忆深刻的地点/人物/事情",
        "typeContent": "记忆深刻的地点/人物/事情"
    }, {
        "typeCode": "需要记录备案的地点/人物/事情",
        "typeContent": "需要记录备案的地点/人物/事情"
    }, {
        "typeCode": "开心快乐的事情",
        "typeContent": "开心快乐的事情"
    }, {
        "typeCode": "让人生气的事情",
        "typeContent": "让人生气的事情"
    }, {
        "typeCode": "让人悲伤的事情",
        "typeContent": "让人悲伤的事情"
    }, {
        "typeCode": "吃吃吃、喝喝喝，吃货的故事",
        "typeContent": "吃吃吃、喝喝喝，吃货的故事"
    }, {
        "typeCode": "旅游、逛街、各种Happy",
        "typeContent": "旅游、逛街、各种Happy"
    }, {
        "typeCode": "加班",
        "typeContent": "加班"
    }]
};

var var_getJson_getTodaySportTypes = {
    "list": [{ "typeCode": "跑步", typeContent: '跑步' }, { "typeCode": "哑铃", typeContent: '哑铃' }, { "typeCode": "健身房", typeContent: '健身房' }, { "typeCode": "健美操", typeContent: '健美操' }, { "typeCode": "瑜伽", typeContent: '瑜伽' }]
};
}, 477, null, "YrcnAppProject/src/common/RNAllService.js");
__d(/* YrcnAppProject/src/common/RNStyles.js */function(global, require, module, exports) {var _reactNative = require(46            ); // 46 = react-native

var common = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height
    },
    navBar: {
        height: 50,
        backgroundColor: '#01bbfc',
        borderBottomColor: '#01bbfc',
        borderBottomWidth: 1,
        position: 'absolute',
        paddingLeft: 0,
        marginLeft: 0
    },
    status_0_View: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        justifyContent: 'center',
        alignItems: 'center'
    }
});

var styles = {
    common: common
};

module.exports = styles;
}, 478, null, "YrcnAppProject/src/common/RNStyles.js");
__d(/* YrcnAppProject/src/common/RNConfigs.js */function(global, require, module, exports) {
var configs = {
    AppName: '今天做了啥',
    IOS_APP_URL: 'https://itunes.apple.com/us/app/jin-tian-zuo-le-sha/id1167259165?l=zh&ls=1&mt=8',
    AS_KEY_WORKING_LOG: "AS_工作日志$$",
    AS_KEY_STUDY: "AS_学习$$",
    AS_KEY_SPORT: "AS_运动$$" };

module.exports = configs;
}, 479, null, "YrcnAppProject/src/common/RNConfigs.js");
__d(/* YrcnAppProject/src/common/RNLoginUser.js */function(global, require, module, exports) {
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLoginUser = {};
RNUtils.getLoginInfo(function (loginInfoObj) {
    global.YrcnApp.loginUser = loginInfoObj;
});

module.exports = RNLoginUser;
}, 480, null, "YrcnAppProject/src/common/RNLoginUser.js");
__d(/* YrcnAppProject/src/common/RNBASE64.js */function(global, require, module, exports) {
var BASE64_MAPPING = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '+', '/'];

var _toBinary = function _toBinary(ascii) {
    var binary = new Array();
    while (ascii > 0) {
        var b = ascii % 2;
        ascii = Math.floor(ascii / 2);
        binary.push(b);
    }

    binary.reverse();
    return binary;
};

var _toDecimal = function _toDecimal(binary) {
    var dec = 0;
    var p = 0;
    for (var i = binary.length - 1; i >= 0; --i) {
        var b = binary[i];
        if (b == 1) {
            dec += Math.pow(2, p);
        }
        ++p;
    }
    return dec;
};

var _toUTF8Binary = function _toUTF8Binary(c, binaryArray) {
    var mustLen = 8 - (c + 1) + (c - 1) * 6;
    var fatLen = binaryArray.length;
    var diff = mustLen - fatLen;
    while (--diff >= 0) {
        binaryArray.unshift(0);
    }
    var binary = [];
    var _c = c;
    while (--_c >= 0) {
        binary.push(1);
    }
    binary.push(0);
    var i = 0,
        len = 8 - (c + 1);
    for (; i < len; ++i) {
        binary.push(binaryArray[i]);
    }

    for (var j = 0; j < c - 1; ++j) {
        binary.push(1);
        binary.push(0);
        var sum = 6;
        while (--sum >= 0) {
            binary.push(binaryArray[i++]);
        }
    }
    return binary;
};

var __BASE64 = {
    encoder: function encoder(str) {
        var base64_Index = [];
        var binaryArray = [];
        for (var i = 0, len = str.length; i < len; ++i) {
            var unicode = str.charCodeAt(i);
            var _tmpBinary = _toBinary(unicode);
            if (unicode < 0x80) {
                var _tmpdiff = 8 - _tmpBinary.length;
                while (--_tmpdiff >= 0) {
                    _tmpBinary.unshift(0);
                }
                binaryArray = binaryArray.concat(_tmpBinary);
            } else if (unicode >= 0x80 && unicode <= 0x7FF) {
                binaryArray = binaryArray.concat(_toUTF8Binary(2, _tmpBinary));
            } else if (unicode >= 0x800 && unicode <= 0xFFFF) {
                binaryArray = binaryArray.concat(_toUTF8Binary(3, _tmpBinary));
            } else if (unicode >= 0x10000 && unicode <= 0x1FFFFF) {
                binaryArray = binaryArray.concat(_toUTF8Binary(4, _tmpBinary));
            } else if (unicode >= 0x200000 && unicode <= 0x3FFFFFF) {
                binaryArray = binaryArray.concat(_toUTF8Binary(5, _tmpBinary));
            } else if (unicode >= 4000000 && unicode <= 0x7FFFFFFF) {
                binaryArray = binaryArray.concat(_toUTF8Binary(6, _tmpBinary));
            }
        }

        var extra_Zero_Count = 0;
        for (var i = 0, len = binaryArray.length; i < len; i += 6) {
            var diff = i + 6 - len;
            if (diff == 2) {
                extra_Zero_Count = 2;
            } else if (diff == 4) {
                extra_Zero_Count = 4;
            }

            var _tmpExtra_Zero_Count = extra_Zero_Count;
            while (--_tmpExtra_Zero_Count >= 0) {
                binaryArray.push(0);
            }
            base64_Index.push(_toDecimal(binaryArray.slice(i, i + 6)));
        }

        var base64 = '';
        for (var i = 0, len = base64_Index.length; i < len; ++i) {
            base64 += BASE64_MAPPING[base64_Index[i]];
        }

        for (var i = 0, len = extra_Zero_Count / 2; i < len; ++i) {
            base64 += '=';
        }
        return base64;
    },

    decoder: function decoder(_base64Str) {
        var _len = _base64Str.length;
        var extra_Zero_Count = 0;

        if (_base64Str.charAt(_len - 1) == '=') {
            if (_base64Str.charAt(_len - 2) == '=') {
                extra_Zero_Count = 4;
                _base64Str = _base64Str.substring(0, _len - 2);
            } else {
                extra_Zero_Count = 2;
                _base64Str = _base64Str.substring(0, _len - 1);
            }
        }

        var binaryArray = [];
        for (var i = 0, len = _base64Str.length; i < len; ++i) {
            var c = _base64Str.charAt(i);
            for (var j = 0, size = BASE64_MAPPING.length; j < size; ++j) {
                if (c == BASE64_MAPPING[j]) {
                    var _tmp = _toBinary(j);

                    var _tmpLen = _tmp.length;
                    if (6 - _tmpLen > 0) {
                        for (var k = 6 - _tmpLen; k > 0; --k) {
                            _tmp.unshift(0);
                        }
                    }
                    binaryArray = binaryArray.concat(_tmp);
                    break;
                }
            }
        }

        if (extra_Zero_Count > 0) {
            binaryArray = binaryArray.slice(0, binaryArray.length - extra_Zero_Count);
        }

        var unicode = [];
        var unicodeBinary = [];
        for (var i = 0, len = binaryArray.length; i < len;) {
            if (binaryArray[i] == 0) {
                unicode = unicode.concat(_toDecimal(binaryArray.slice(i, i + 8)));
                i += 8;
            } else {
                var sum = 0;
                while (i < len) {
                    if (binaryArray[i] == 1) {
                        ++sum;
                    } else {
                        break;
                    }
                    ++i;
                }
                unicodeBinary = unicodeBinary.concat(binaryArray.slice(i + 1, i + 8 - sum));
                i += 8 - sum;
                while (sum > 1) {
                    unicodeBinary = unicodeBinary.concat(binaryArray.slice(i + 2, i + 8));
                    i += 8;
                    --sum;
                }
                unicode = unicode.concat(_toDecimal(unicodeBinary));
                unicodeBinary = [];
            }
        }
        return unicode;
    }
};

module.exports = __BASE64;
}, 481, null, "YrcnAppProject/src/common/RNBASE64.js");
__d(/* YrcnAppProject/src/component/overwrite/YRImage.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/overwrite/YRImage.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var YRImage = _react2.default.createClass({
    displayName: 'YRImage',

    render: function render() {
        var resizeMode = this.props.resizeMode || "contain";
        var defaultSource = this.props.defaultSource || require(483                          ); // 483 = ../../images/noFengmian.png
        var source = this.props.source || require(483                          ); // 483 = ../../images/noFengmian.png
        var style = this.props.style || { width: 60 };
        var type = this.props.type;
        if (this.props.source && (!this.props.source.uri || this.props.source.uri == '0')) {
            source = require(483                          ); // 483 = ../../images/noFengmian.png
        }

        return _react2.default.createElement(_reactNative.Image, { resizeMode: resizeMode, defaultSource: defaultSource, source: source, style: style, __source: {
                fileName: _jsxFileName,
                lineNumber: 26
            }
        });
    }
});

module.exports = YRImage;
}, 482, null, "YrcnAppProject/src/component/overwrite/YRImage.js");
__d(/* YrcnAppProject/src/images/noFengmian.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/src/images","width":60,"height":80,"scales":[1,2,3],"hash":"f63ce35a59d4b2106f511feca674f09e","name":"noFengmian","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 483, null, "YrcnAppProject/src/images/noFengmian.png");
__d(/* YrcnAppProject/src/component/overwrite/YRStatusBar.js */function(global, require, module, exports) {
'use strict';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var YRStatusBar = {
    setBarStyle: function setBarStyle(style, animated, backgroundColor) {
        style = style || 'dark-content';
        if (_reactNative.Platform.OS === 'ios') {
            _reactNative.StatusBar.setBarStyle(style, animated);
        } else {
            backgroundColor = backgroundColor || '#ffffff';
            _reactNative.StatusBar.setTranslucent(true);
            _reactNative.StatusBar.setBackgroundColor(backgroundColor, false);
            _reactNative.StatusBar.setBarStyle(style, true);
        }
    },
    setHidden: function setHidden(isHidden, type) {
        _reactNative.StatusBar.setHidden(isHidden, type);
    }
};

module.exports = YRStatusBar;
}, 484, null, "YrcnAppProject/src/component/overwrite/YRStatusBar.js");
__d(/* YrcnAppProject/src/component/overwrite/YRNavigatorTitleView.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/overwrite/YRNavigatorTitleView.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var YRNavigatorTitleView = _react2.default.createClass({
    displayName: 'YRNavigatorTitleView',

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: { top: 32, paddingRight: 50, width: _reactNative.Dimensions.get('window').width - 40 - 40 }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 19
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: { fontSize: 16, color: '#ffffff', fontWeight: '800', textAlign: 'center' }, numberOfLines: 1, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 20
                    }
                },
                this.props.title
            )
        );
    }
});

module.exports = YRNavigatorTitleView;
}, 485, null, "YrcnAppProject/src/component/overwrite/YRNavigatorTitleView.android.js");
__d(/* YrcnAppProject/src/component/overwrite/YRNavigatorLeftBtnView.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/overwrite/YRNavigatorLeftBtnView.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var YRNavigatorLeftBtnView = _react2.default.createClass({
    displayName: 'YRNavigatorLeftBtnView',

    getDefaultProps: function getDefaultProps() {
        return {
            onPress: function onPress() {},
            text: ""
        };
    },
    render: function render() {
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            { style: { top: 27, width: 40 }, onPress: this.props.onPress, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 26
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: { fontSize: 13, color: '#ffffff', fontWeight: '600', textAlign: 'center' }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 27
                    }
                },
                this.props.text
            )
        );
    }
});

module.exports = YRNavigatorLeftBtnView;
}, 486, null, "YrcnAppProject/src/component/overwrite/YRNavigatorLeftBtnView.android.js");
__d(/* YrcnAppProject/src/component/overwrite/YRNavigatorRightBtnView.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/overwrite/YRNavigatorRightBtnView.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var YRNavigatorRightBtnView = _react2.default.createClass({
    displayName: 'YRNavigatorRightBtnView',

    getDefaultProps: function getDefaultProps() {
        return {
            onPress: function onPress() {},
            text: ""
        };
    },
    render: function render() {
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            { style: { top: 27, width: 40 }, onPress: this.props.onPress, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 26
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: { fontSize: 13, color: '#ffffff', fontWeight: '600', textAlign: 'center' }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 27
                    }
                },
                this.props.text
            )
        );
    }
});

module.exports = YRNavigatorRightBtnView;
}, 487, null, "YrcnAppProject/src/component/overwrite/YRNavigatorRightBtnView.android.js");
__d(/* YrcnAppProject/src/view/ViewRoot.js */function(global, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewRoot.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNavigation = require(406               ); // 406 = react-navigation

var _navigator = require(489            ); // 489 = ../navigator/

var _guide = require(523            ); // 523 = ../view/guide

var _tab = require(491     ); // 491 = ../tab

var NavigatorGuidePages = require(527                               ); // 527 = ../navigator/NavigatorGuidePages
var ViewNewFunc = require(543                  ); // 543 = ../view/ViewNewFunc
var RNUtilsModule = global.YrcnApp.native.RNUtilsModule;
var RNUtils = global.YrcnApp.utils;
var RNAllService = global.YrcnApp.services;

var ViewEditTodayContent = require(545                             ); // 545 = ./../view/ViewEditTodayContent
var ViewEditYesterdayContent = require(562                                 ); // 562 = ./../view/ViewEditYesterdayContent
var RegisterIndexView = require(541                                   ); // 541 = ./../view/register/RegisterIndexView
var RegisterEmailView = require(542                                      ); // 542 = ./../view/register/RegisterEmailView.js
var LoginIndexView = require(529                             ); // 529 = ./../view/login/LoginIndexView
var LoginEmailView = require(531                                ); // 531 = ./../view/login/LoginEmailView.js
var ViewSpecialStatement = require(567                                ); // 567 = ./../view/ViewSpecialStatement.js
var ViewUseHelp = require(571                       ); // 571 = ./../view/ViewUseHelp.js
var ViewTime = require(576                 ); // 576 = ./../view/ViewTime
var ViewEditWorkingLog = require(550                           ); // 550 = ./../view/ViewEditWorkingLog
var ViewEditStudy = require(578                      ); // 578 = ./../view/ViewEditStudy
var ViewEditSport = require(579                      ); // 579 = ./../view/ViewEditSport
var ScrollViewSettingTodayType = require(572                                            ); // 572 = ./../scrollview/ScrollViewSettingTodayType.js
var ScrollViewSettingSportType = require(580                                            ); // 580 = ./../scrollview/ScrollViewSettingSportType.js
var ScrollViewShowTodayContent = require(551                                            ); // 551 = ./../scrollview/ScrollViewShowTodayContent.js
var ScrollViewShowTodayLlgBetweenContent = require(553                                                      ); // 553 = ./../scrollview/ScrollViewShowTodayLlgBetweenContent.js
var ScrollViewSearchTodayContent = require(554                                              ); // 554 = ./../scrollview/ScrollViewSearchTodayContent.js
var ScrollViewShowTodaysContent = require(558                                             ); // 558 = ./../scrollview/ScrollViewShowTodaysContent.js
var ScrollViewAddTodayType = require(574                                        ); // 574 = ./../scrollview/ScrollViewAddTodayType.js
var ScrollViewAddSportType = require(581                                        ); // 581 = ./../scrollview/ScrollViewAddSportType.js
var ScrollViewUpdTodayType = require(575                                        ); // 575 = ./../scrollview/ScrollViewUpdTodayType.js
var ScrollViewUpdSportType = require(582                                        ); // 582 = ./../scrollview/ScrollViewUpdSportType.js
var StackNavigatorRoot = require(544                                 ); // 544 = ../navigator/StackNavigatorRoot.js

var ViewRoot = function (_Component) {
    babelHelpers.inherits(ViewRoot, _Component);

    function ViewRoot(props) {
        babelHelpers.classCallCheck(this, ViewRoot);

        var _this2 = babelHelpers.possibleConstructorReturn(this, (ViewRoot.__proto__ || Object.getPrototypeOf(ViewRoot)).call(this, props));

        _this2._vars = { viewNames: ['GuideIndexView'] };
        _this2.state = {
            viewName: 'GuideIndexView',
            viewTitle: '',
            appUpgrade: false,
            appUpgradeVersion: "",
            appBundleUpgradeVersion: "",
            appUpgradeDesp: "",
            contentBottomText: "下载升级",
            isShowNewFunc: false,
            lookImage: null,
            isHideDelete: false
        };

        _this2.lookImage = _this2.lookImage.bind(_this2);
        _this2._onPressLookImageBack = _this2._onPressLookImageBack.bind(_this2);
        _this2._onPressLookImageDelete = _this2._onPressLookImageDelete.bind(_this2);
        return _this2;
    }

    babelHelpers.createClass(ViewRoot, [{
        key: 'shouldComponentUpdate',
        value: function shouldComponentUpdate(props, state) {
            if (true) {
                if (this._vars.viewNames.indexOf(state.viewName) == this._vars.viewNames.length - 2 && this._vars.viewNames.length > 1) {
                    this._vars.viewNames.pop();
                    if (this._vars.viewNames.length - 2 <= -1) {
                        this._vars.prevViewName = "";
                    } else {
                        this._vars.prevViewName = this._vars.viewNames[this._vars.viewNames.length - 2];
                    }
                } else {
                    this._vars.prevViewName = this.state.viewName;
                    this._vars.viewNames.push(state.viewName);
                }
            }

            return true;
        }
    }, {
        key: 'componentWillMount',
        value: function componentWillMount() {
            var _this = this;
            this._panResponder = _reactNative.PanResponder.create({
                onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {
                    return true;
                },
                onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {
                    return true;
                },
                onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {
                    return true;
                },
                onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {
                    return true;
                },

                onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {},
                onPanResponderMove: function onPanResponderMove(evt, gestureState) {},
                onPanResponderTerminationRequest: function onPanResponderTerminationRequest(evt, gestureState) {
                    return true;
                },
                onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
                    if (gestureState.x0 - gestureState.moveX > 100 && gestureState.moveX != 0) {
                        console.log("下一张图片");
                        var index = _this._vars.index + 1;
                        if (index == _this._vars.imageObjs.length && _this._vars.imageObjs.length > 1) {
                            index = 0;
                        }
                        _this._vars.index = index;
                        _this.setState({
                            lookImage: _this._vars.imageObjs[index]
                        });
                    } else if (gestureState.x0 - gestureState.moveX < -100 && gestureState.moveX != 0) {
                        console.log("上一张图片");
                        var index = _this._vars.index - 1;
                        if (index == -1 && _this._vars.imageObjs.length > 1) {
                            index = _this._vars.imageObjs.length - 1;
                        }
                        _this._vars.index = index;
                        _this.setState({
                            lookImage: _this._vars.imageObjs[index]
                        });
                    }
                },
                onPanResponderTerminate: function onPanResponderTerminate(evt, gestureState) {},
                onShouldBlockNativeResponder: function onShouldBlockNativeResponder(evt, gestureState) {
                    return true;
                }
            });
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this = this;
            RNUtils.getAppInfo(function (appInfo) {
                RNAllService.checkVersions(function (checkVersionsObj) {
                    if (checkVersionsObj.appUpgrade == "1") {

                        if (global.YrcnApp.Platform.OS === "ios") {
                            _this.setState({
                                appUpgrade: true,
                                appUpgradeVersion: checkVersionsObj.appUpgradeVersion,
                                appUpgradeMust: checkVersionsObj.appUpgradeMust,
                                appUpgradeDesp: checkVersionsObj.appUpgradeDesp
                            });
                        } else {
                            RNUtilsModule.appUpgrade([], function () {});
                        }
                    } else if (checkVersionsObj.appBundleUpgrade == "1") {
                        if (global.YrcnApp.Platform.OS === "ios") {
                            _this.setState({
                                appBundleUpgrade: true,
                                appBundleUpgradeVersion: checkVersionsObj.appBundleUpgradeVersion,
                                appBundleUpgradeMust: checkVersionsObj.appBundleUpgradeMust,
                                appBundleUpgradeDesp: checkVersionsObj.appBundleUpgradeDesp
                            });
                        } else {
                            RNUtilsModule.appUpgrade([], function () {});
                        }
                    }
                });
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this = this;
            global.YrcnApp.now.$ViewRoot = this;
            return _react2.default.createElement(
                _reactNative.View,
                { style: [global.YrcnApp.styles.common.container, { backgroundColor: '#ffffff' }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 200
                    }
                },
                this.state.viewName == 'GuideIndexView' ? function () {
                    return _react2.default.createElement(_guide.GuideIndexView, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 202
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'TabBarIndex' ? function () {
                    return _react2.default.createElement(_tab.TabBarIndex, { selectedTab: _this.state.selectedTab, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 205
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'StackNavigatorRoot' ? function () {
                    return _react2.default.createElement(StackNavigatorRoot, { title: _this.state.viewTitle, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 208
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewEditTodayContent' ? function () {
                    return _react2.default.createElement(ViewEditTodayContent, { title: _this.state.viewTitle, type: _this.state.type, coreObj: _this.state.coreObj, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 211
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewEditYesterdayContent' ? function () {
                    return _react2.default.createElement(ViewEditYesterdayContent, { title: _this.state.viewTitle, type: _this.state.type, coreObj: _this.state.coreObj, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 214
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'RegisterIndexView' ? function () {
                    return _react2.default.createElement(RegisterIndexView, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 217
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'RegisterEmailView' ? function () {
                    return _react2.default.createElement(RegisterEmailView, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 220
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'LoginIndexView' ? function () {
                    return _react2.default.createElement(LoginIndexView, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 223
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'LoginEmailView' ? function () {
                    return _react2.default.createElement(LoginEmailView, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 226
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewSpecialStatement' ? function () {
                    return _react2.default.createElement(ViewSpecialStatement, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 229
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewUseHelp' ? function () {
                    return _react2.default.createElement(ViewUseHelp, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 232
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewTime' ? function () {
                    return _react2.default.createElement(ViewTime, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 235
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewSettingTodayType' ? function () {
                    return _react2.default.createElement(ScrollViewSettingTodayType, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 238
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewSettingSportType' ? function () {
                    return _react2.default.createElement(ScrollViewSettingSportType, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 241
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewShowTodayContent' ? function () {
                    return _react2.default.createElement(ScrollViewShowTodayContent, { title: _this.state.viewTitle, day: _this.state.day, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 244
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewShowTodayLlgBetweenContent' ? function () {
                    return _react2.default.createElement(ScrollViewShowTodayLlgBetweenContent, { title: _this.state.viewTitle, between: _this.state.between, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 247
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewSearchTodayContent' ? function () {
                    return _react2.default.createElement(ScrollViewSearchTodayContent, { title: _this.state.viewTitle, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 250
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewShowTodaysContent' ? function () {
                    return _react2.default.createElement(ScrollViewShowTodaysContent, { title: _this.state.viewTitle, contentObjArray: _this.state.contentObjArray, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 253
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewAddTodayType' ? function () {
                    return _react2.default.createElement(ScrollViewAddTodayType, { title: _this.state.viewTitle, prevView: _this.state.prevView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 256
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewAddSportType' ? function () {
                    return _react2.default.createElement(ScrollViewAddSportType, { title: _this.state.viewTitle, prevView: _this.state.prevView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 259
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewUpdTodayType' ? function () {
                    return _react2.default.createElement(ScrollViewUpdTodayType, { title: _this.state.viewTitle, prevView: _this.state.prevView, typeObj: _this.state.typeObj, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 262
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ScrollViewUpdSportType' ? function () {
                    return _react2.default.createElement(ScrollViewUpdSportType, { title: _this.state.viewTitle, prevView: _this.state.prevView, typeObj: _this.state.typeObj, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 265
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewEditWorkingLog' ? function () {
                    return _react2.default.createElement(ViewEditWorkingLog, { title: _this.state.viewTitle, coreObj: _this.state.coreObj, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 268
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewEditStudy' ? function () {
                    return _react2.default.createElement(ViewEditStudy, { title: _this.state.viewTitle, coreObj: _this.state.coreObj, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 271
                        }
                    });
                }() : function () {}(),
                this.state.viewName == 'ViewEditSport' ? function () {
                    return _react2.default.createElement(ViewEditSport, { title: _this.state.viewTitle, coreObj: _this.state.coreObj, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 274
                        }
                    });
                }() : function () {}(),
                this.state.appUpgrade || this.state.appBundleUpgrade ? function () {
                    return _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.appUpgradeView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 279
                            }
                        },
                        _react2.default.createElement(_reactNative.TouchableOpacity, { style: styles.appUpgradeViewInner, onPress: _this._onPressBackView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 280
                            }
                        })
                    );
                }() : function () {}(),
                this.state.appUpgrade || this.state.appBundleUpgrade ? function () {
                    return _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.appUpgradeContentView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 286
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.contentTopView, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 287
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.contentTopText, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 288
                                    }
                                },
                                _this.state.appUpgradeVersion || _this.state.appBundleUpgradeVersion
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.contentTopText2, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 289
                                    }
                                },
                                '\u5347\u7EA7\u63D0\u9192'
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.contentCenterView, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 291
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.contentCenterText1, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 292
                                    }
                                },
                                global.YrcnApp.configs.AppName,
                                '\u5DF2\u66F4\u65B0\u5230',
                                _this.state.appUpgradeVersion || _this.state.appBundleUpgradeVersion,
                                '\u7248\u672C\u4E86'
                            ),
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.contentCenterText2, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 293
                                    }
                                },
                                _this.state.appUpgradeDesp || _this.state.appBundleUpgradeDesp
                            )
                        ),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.contentBottomView, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 295
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                { style: styles.contentBottomButton, onPress: _this._onPressUpgradeBtn, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 296
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    { style: styles.contentBottomText, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 297
                                        }
                                    },
                                    _this.state.contentBottomText
                                )
                            )
                        )
                    );
                }() : function () {}(),
                this.state.isShowNewFunc ? function () {
                    return _react2.default.createElement(ViewNewFunc, { onPress: _this._onPressNewFunc, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 305
                        }
                    });
                }() : function () {}(),
                function () {
                    if (_this.state.lookImage) {
                        return _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.lookView, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 312
                                }
                            },
                            _react2.default.createElement(_reactNative.Image, babelHelpers.extends({ source: _this.state.lookImage, style: styles.lookImage, resizeMode: 'contain' }, _this._panResponder.panHandlers, {
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 313
                                }
                            })),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.lookImageBottomContainer, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 314
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.lookImageBottomBack, onPress: _this._onPressLookImageBack, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 315
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        { style: styles.btnText, __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 316
                                            }
                                        },
                                        '\u8FD4\u56DE'
                                    )
                                ),
                                _react2.default.createElement(
                                    _reactNative.View,
                                    { style: styles.lookImageBottomCenter, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 318
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        { style: [{ textAlign: 'center' }], __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 319
                                            }
                                        },
                                        _this._vars.index + 1,
                                        '/',
                                        _this._vars.imageObjs.length
                                    )
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.lookImageBottomDelete, onPress: _this._onPressLookImageDelete, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 321
                                        }
                                    },
                                    _react2.default.createElement(
                                        _reactNative.Text,
                                        { style: styles.btnText, __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 322
                                            }
                                        },
                                        !_this.state.isHideDelete ? '删除' : ''
                                    )
                                )
                            )
                        );
                    }
                }()
            );
        }
    }, {
        key: '_renderScene',
        value: function _renderScene(route, navigator) {
            global.YrcnApp.now.rootNavigator = navigator;
            global.YrcnApp.now.rootRoute = route;

            var Component = null;
            var props = route || {};
            switch (route.name) {
                case "NavigatorSettingsInner":
                    Component = _navigator.NavigatorSettingsInner;
                    break;
                case "TabBarIndex":
                    Component = _tab.TabBarIndex;
                    break;
                case "NavigatorGuidePages":
                    Component = NavigatorGuidePages;
                    break;
                case "NavigatorTodayInner":
                    Component = _navigator.NavigatorTodayInner;
                    break;
                case "NavigatorLlgInner":
                    Component = _navigator.NavigatorLlgInner;
                    break;
                case "NavigatorYesterdayInner":
                    Component = _navigator.NavigatorYesterdayInner;
                    break;
            }

            return _react2.default.createElement(Component, babelHelpers.extends({ parent: this }, props, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 361
                }
            }));
        }
    }, {
        key: '_onPressBackView',
        value: function _onPressBackView() {
            var _this = this;
            if (this.state.appUpgrade && this.state.appUpgradeMust != "1" && this.state.contentBottomText == "下载升级") {
                _this.setState({
                    appUpgrade: false
                });
            }
            if (this.state.appBundleUpgrade && this.state.appBundleUpgradeMust != "1" && this.state.contentBottomText == "下载升级") {
                _this.setState({
                    appBundleUpgrade: false
                });
            }
        }
    }, {
        key: '_onPressUpgradeBtn',
        value: function _onPressUpgradeBtn() {
            this.setState({
                contentBottomText: "正在努力升级..."
            });
            if (this.state.contentBottomText == "下载升级") {
                if (this.state.appUpgrade) {
                    RNUtilsModule.appUpgrade([global.YrcnApp.configs.IOS_APP_URL]);
                } else {
                    RNUtilsModule.appBundleUpgrade([""]);
                }
            }
        }
    }, {
        key: 'renderNewFunc',
        value: function renderNewFunc() {
            this.setState({
                isShowNewFunc: true
            });
        }
    }, {
        key: '_onPressNewFunc',
        value: function _onPressNewFunc() {
            RNUtils.setJsonNewFunc("xian_she");
            this.setState({
                isShowNewFunc: false
            });
        }
    }, {
        key: 'lookImage',
        value: function lookImage(imageObj, callObj, index, isHideDelete) {
            var imageingObj = imageObj;

            if (Array.isArray(imageObj)) {
                imageingObj = imageObj[index];
                this._vars.imageObjs = imageObj;
            } else {
                this._vars.imageObjs = [imageObj];
            }
            this.setState({
                lookImage: imageingObj
            });
            this._vars.callObj = callObj;
            this._vars.index = index;

            this.setState({
                isHideDelete: isHideDelete
            });
        }
    }, {
        key: '_onPressLookImageBack',
        value: function _onPressLookImageBack() {
            this.setState({
                lookImage: null
            });
        }
    }, {
        key: '_onPressLookImageDelete',
        value: function _onPressLookImageDelete() {
            var _this = this;
            if (_this.state.isHideDelete) {
                return;
            }
            this.setState({
                lookImage: null
            });

            var iamgePath = this._vars.imageObjs[this._vars.index].uri;

            YrcnApp.native.RNUtilsModule.deleteSandboxFile([RNUtils.getSandboxFileShortPath(iamgePath)]);
            this._vars.callObj.deleteImage(this._vars.index);
        }
    }]);
    return ViewRoot;
}(_react.Component);

var styles = _reactNative.StyleSheet.create({
    appUpgradeView: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        position: 'absolute',
        top: 0,
        opacity: 0.7,
        backgroundColor: '#333333'
    },
    appUpgradeViewInner: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height
    },
    appUpgradeContentView: {
        width: _reactNative.Dimensions.get('window').width / 5 * 3.6,
        height: _reactNative.Dimensions.get('window').height / 7 * 2.7,
        position: 'absolute',
        top: _reactNative.Dimensions.get('window').height / 7 * 2,
        left: _reactNative.Dimensions.get('window').width / 5 * 0.7,
        backgroundColor: '#ffffff',
        flexDirection: 'column',
        opacity: 1,
        borderRadius: 10
    },
    contentTopView: {
        flex: 2,
        backgroundColor: '#01bbfc',
        paddingTop: 10,
        borderTopLeftRadius: 10,
        borderTopRightRadius: 10,
        justifyContent: 'center'
    },
    contentTopText: {
        color: '#ffffff',
        fontSize: 33,
        textAlign: 'center'
    },
    contentTopText2: {
        color: '#ffffff',
        fontSize: 15,
        textAlign: 'center'
    },
    contentCenterView: {
        flex: 2,
        backgroundColor: '#ffffff'
    },
    contentCenterText1: {
        color: '#6d6d6d',
        textAlign: 'center',
        fontSize: 16,
        lineHeight: 25
    },
    contentCenterText2: {
        color: '#6d6d6d',
        textAlign: 'left',
        fontSize: 13,
        paddingTop: 10,
        paddingLeft: 10
    },
    contentBottomView: {
        flex: 1,
        justifyContent: 'center'
    },
    contentBottomButton: {
        marginLeft: 10,
        marginRight: 10,
        backgroundColor: '#01bbfc',
        padding: 5,
        borderRadius: 5
    },
    contentBottomText: {
        color: '#ffffff',
        textAlign: 'center',
        fontSize: 15
    },
    lookView: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        position: 'absolute',
        top: 0,
        left: 0,
        backgroundColor: '#000000'
    },
    lookImage: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height
    },
    lookImageBottomContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        position: 'absolute',
        top: _reactNative.Dimensions.get('window').height - 50,
        left: 0,
        width: _reactNative.Dimensions.get('window').width,
        height: 50,
        backgroundColor: '#fefefe',
        opacity: 0.6
    },
    lookImageBottomBack: {
        flex: 1
    },
    lookImageBottomCenter: {
        flex: 4
    },
    lookImageBottomDelete: {
        flex: 1
    },
    btnText: {
        textAlign: 'center',
        fontWeight: '700'
    }
});
exports.default = ViewRoot;
}, 488, null, "YrcnAppProject/src/view/ViewRoot.js");
__d(/* YrcnAppProject/src/navigator/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _NavigatorRoot = require(490                 ); // 490 = ./NavigatorRoot.js

Object.defineProperty(exports, 'NavigatorRoot', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorRoot).default;
  }
});

var _NavigatorGuidePages = require(527                       ); // 527 = ./NavigatorGuidePages.js

Object.defineProperty(exports, 'NavigatorGuidePages', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorGuidePages).default;
  }
});

var _NavigatorToday = require(548                  ); // 548 = ./NavigatorToday.js

Object.defineProperty(exports, 'NavigatorToday', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorToday).default;
  }
});

var _NavigatorTodayInner = require(549                       ); // 549 = ./NavigatorTodayInner.js

Object.defineProperty(exports, 'NavigatorTodayInner', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorTodayInner).default;
  }
});

var _NavigatorYesterday = require(560                      ); // 560 = ./NavigatorYesterday.js

Object.defineProperty(exports, 'NavigatorYesterday', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorYesterday).default;
  }
});

var _NavigatorYesterdayInner = require(561                           ); // 561 = ./NavigatorYesterdayInner.js

Object.defineProperty(exports, 'NavigatorYesterdayInner', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorYesterdayInner).default;
  }
});

var _NavigatorLlg = require(563                ); // 563 = ./NavigatorLlg.js

Object.defineProperty(exports, 'NavigatorLlg', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorLlg).default;
  }
});

var _NavigatorLlgInner = require(564                     ); // 564 = ./NavigatorLlgInner.js

Object.defineProperty(exports, 'NavigatorLlgInner', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorLlgInner).default;
  }
});

var _NavigatorSettings = require(565                     ); // 565 = ./NavigatorSettings.js

Object.defineProperty(exports, 'NavigatorSettings', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorSettings).default;
  }
});

var _NavigatorSettingsInner = require(566                          ); // 566 = ./NavigatorSettingsInner.js

Object.defineProperty(exports, 'NavigatorSettingsInner', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_NavigatorSettingsInner).default;
  }
});
}, 489, null, "YrcnAppProject/src/navigator/index.js");
__d(/* YrcnAppProject/src/navigator/NavigatorRoot.js */function(global, require, module, exports) {
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorRoot.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNavigation = require(406               ); // 406 = react-navigation

var _tab = require(491     ); // 491 = ../tab

var _ = require(489 ); // 489 = ./

var _guide = require(523            ); // 523 = ../view/guide

var NavigatorGuidePages = require(527                    ); // 527 = ./NavigatorGuidePages
var ViewNewFunc = require(543                  ); // 543 = ../view/ViewNewFunc
var RNUtilsModule = global.YrcnApp.native.RNUtilsModule;
var RNUtils = global.YrcnApp.utils;
var RNAllService = global.YrcnApp.services;

var StackNavigatorRoot = require(544                                 ); // 544 = ../navigator/StackNavigatorRoot.js

var DrawerNavigatorRoot = (0, _reactNavigation.DrawerNavigator)({
    Home: { screen: _guide.GuideIndexView },
    TabBarIndex: { screen: _tab.TabBarIndex },
    StackNavigatorRoot: { screen: StackNavigatorRoot }
});

var NavigatorRoot = _react2.default.createClass({
    displayName: 'NavigatorRoot',

    _vars: {},

    getInitialState: function getInitialState() {
        return {
            appUpgrade: false,
            appUpgradeVersion: "",
            appBundleUpgradeVersion: "",
            appUpgradeDesp: "",
            contentBottomText: "下载升级",
            isShowNewFunc: false,
            lookImage: null,
            isHideDelete: false
        };
    },
    componentWillMount: function componentWillMount() {
        var _this = this;
        this._panResponder = _reactNative.PanResponder.create({
            onStartShouldSetPanResponder: function onStartShouldSetPanResponder(evt, gestureState) {
                return true;
            },
            onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture(evt, gestureState) {
                return true;
            },
            onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder(evt, gestureState) {
                return true;
            },
            onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture(evt, gestureState) {
                return true;
            },

            onPanResponderGrant: function onPanResponderGrant(evt, gestureState) {},
            onPanResponderMove: function onPanResponderMove(evt, gestureState) {},
            onPanResponderTerminationRequest: function onPanResponderTerminationRequest(evt, gestureState) {
                return true;
            },
            onPanResponderRelease: function onPanResponderRelease(evt, gestureState) {
                if (gestureState.x0 - gestureState.moveX > 100 && gestureState.moveX != 0) {
                    console.log("下一张图片");
                    var index = _this._vars.index + 1;
                    if (index == _this._vars.imageObjs.length && _this._vars.imageObjs.length > 1) {
                        index = 0;
                    }
                    _this._vars.index = index;
                    _this.setState({
                        lookImage: _this._vars.imageObjs[index]
                    });
                } else if (gestureState.x0 - gestureState.moveX < -100 && gestureState.moveX != 0) {
                    console.log("上一张图片");
                    var index = _this._vars.index - 1;
                    if (index == -1 && _this._vars.imageObjs.length > 1) {
                        index = _this._vars.imageObjs.length - 1;
                    }
                    _this._vars.index = index;
                    _this.setState({
                        lookImage: _this._vars.imageObjs[index]
                    });
                }
            },
            onPanResponderTerminate: function onPanResponderTerminate(evt, gestureState) {},
            onShouldBlockNativeResponder: function onShouldBlockNativeResponder(evt, gestureState) {
                return true;
            }
        });
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNUtils.getAppInfo(function (appInfo) {
            RNAllService.checkVersions(function (checkVersionsObj) {
                console.log(checkVersionsObj);

                if (checkVersionsObj.appUpgrade == "1") {

                    if (global.YrcnApp.Platform.OS === "ios") {
                        _this.setState({
                            appUpgrade: true,
                            appUpgradeVersion: checkVersionsObj.appUpgradeVersion,
                            appUpgradeMust: checkVersionsObj.appUpgradeMust,
                            appUpgradeDesp: checkVersionsObj.appUpgradeDesp
                        });
                    } else {
                        RNUtilsModule.appUpgrade([], function () {});
                    }
                } else if (checkVersionsObj.appBundleUpgrade == "1") {
                    if (global.YrcnApp.Platform.OS === "ios") {
                        _this.setState({
                            appBundleUpgrade: true,
                            appBundleUpgradeVersion: checkVersionsObj.appBundleUpgradeVersion,
                            appBundleUpgradeMust: checkVersionsObj.appBundleUpgradeMust,
                            appBundleUpgradeDesp: checkVersionsObj.appBundleUpgradeDesp
                        });
                    } else {
                        RNUtilsModule.appUpgrade([], function () {});
                    }
                }
            });
        });
    },
    render: function render() {
        var _this = this;
        global.YrcnApp.now.$NavigatorRoot = this;

        return _react2.default.createElement(
            _reactNative.View,
            { style: [global.YrcnApp.styles.common.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 212
                }
            },
            _react2.default.createElement(DrawerNavigatorRoot, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 213
                }
            }),
            this.state.appUpgrade || this.state.appBundleUpgrade ? function () {
                return _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.appUpgradeView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 217
                        }
                    },
                    _react2.default.createElement(_reactNative.TouchableOpacity, { style: styles.appUpgradeViewInner, onPress: _this._onPressBackView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 218
                        }
                    })
                );
            }() : function () {}(),
            this.state.appUpgrade || this.state.appBundleUpgrade ? function () {
                return _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.appUpgradeContentView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 224
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.contentTopView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 225
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: styles.contentTopText, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 226
                                }
                            },
                            _this.state.appUpgradeVersion || _this.state.appBundleUpgradeVersion
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: styles.contentTopText2, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 227
                                }
                            },
                            '\u5347\u7EA7\u63D0\u9192'
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.contentCenterView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 229
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: styles.contentCenterText1, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 230
                                }
                            },
                            global.YrcnApp.configs.AppName,
                            '\u5DF2\u66F4\u65B0\u5230',
                            _this.state.appUpgradeVersion || _this.state.appBundleUpgradeVersion,
                            '\u7248\u672C\u4E86'
                        ),
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: styles.contentCenterText2, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 231
                                }
                            },
                            _this.state.appUpgradeDesp || _this.state.appBundleUpgradeDesp
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.contentBottomView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 233
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            { style: styles.contentBottomButton, onPress: _this._onPressUpgradeBtn, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 234
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.contentBottomText, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 235
                                    }
                                },
                                _this.state.contentBottomText
                            )
                        )
                    )
                );
            }() : function () {}(),
            this.state.isShowNewFunc ? function () {
                return _react2.default.createElement(ViewNewFunc, { onPress: _this._onPressNewFunc, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 243
                    }
                });
            }() : function () {}(),
            function () {
                if (_this.state.lookImage) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.lookView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 250
                            }
                        },
                        _react2.default.createElement(_reactNative.Image, babelHelpers.extends({ source: _this.state.lookImage, style: styles.lookImage, resizeMode: 'contain' }, _this._panResponder.panHandlers, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 251
                            }
                        })),
                        _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.lookImageBottomContainer, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 252
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                { style: styles.lookImageBottomBack, onPress: _this._onPressLookImageBack, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 253
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    { style: styles.btnText, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 254
                                        }
                                    },
                                    '\u8FD4\u56DE'
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.lookImageBottomCenter, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 256
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    { style: [{ textAlign: 'center' }], __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 257
                                        }
                                    },
                                    _this._vars.index + 1,
                                    '/',
                                    _this._vars.imageObjs.length
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.TouchableOpacity,
                                { style: styles.lookImageBottomDelete, onPress: _this._onPressLookImageDelete, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 259
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.Text,
                                    { style: styles.btnText, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 260
                                        }
                                    },
                                    !_this.state.isHideDelete ? '删除' : ''
                                )
                            )
                        )
                    );
                }
            }()
        );
    },
    _renderScene: function _renderScene(route, navigator) {
        global.YrcnApp.now.rootNavigator = navigator;
        global.YrcnApp.now.rootRoute = route;

        var Component = null;
        var props = route || {};
        switch (route.name) {
            case "NavigatorSettingsInner":
                Component = _.NavigatorSettingsInner;
                break;
            case "TabBarIndex":
                Component = _tab.TabBarIndex;
                break;
            case "NavigatorGuidePages":
                Component = NavigatorGuidePages;
                break;
            case "NavigatorTodayInner":
                Component = _.NavigatorTodayInner;
                break;
            case "NavigatorLlgInner":
                Component = _.NavigatorLlgInner;
                break;
            case "NavigatorYesterdayInner":
                Component = _.NavigatorYesterdayInner;
                break;
        }

        return _react2.default.createElement(Component, babelHelpers.extends({ parent: this }, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 299
            }
        }));
    },
    _onPressBackView: function _onPressBackView() {
        var _this = this;
        if (this.state.appUpgrade && this.state.appUpgradeMust != "1" && this.state.contentBottomText == "下载升级") {
            _this.setState({
                appUpgrade: false
            });
        }
        if (this.state.appBundleUpgrade && this.state.appBundleUpgradeMust != "1" && this.state.contentBottomText == "下载升级") {
            _this.setState({
                appBundleUpgrade: false
            });
        }
    },
    _onPressUpgradeBtn: function _onPressUpgradeBtn() {
        this.setState({
            contentBottomText: "正在努力升级..."
        });
        if (this.state.contentBottomText == "下载升级") {
            if (this.state.appUpgrade) {
                RNUtilsModule.appUpgrade([global.YrcnApp.configs.IOS_APP_URL]);
            } else {
                RNUtilsModule.appBundleUpgrade([""]);
            }
        }
    },
    renderNewFunc: function renderNewFunc() {
        this.setState({
            isShowNewFunc: true
        });
    },
    _onPressNewFunc: function _onPressNewFunc() {
        RNUtils.setJsonNewFunc("xian_she");
        this.setState({
            isShowNewFunc: false
        });
    },
    lookImage: function lookImage(imageObj, callObj, index, isHideDelete) {
        var imageingObj = imageObj;
        if (Array.isArray(imageObj)) {
            imageingObj = imageObj[index];
            this._vars.imageObjs = imageObj;
        } else {
            this._vars.imageObjs = [imageObj];
        }
        this.setState({
            lookImage: imageingObj
        });
        this._vars.callObj = callObj;
        this._vars.index = index;
        console.log("isHideDelete=" + isHideDelete);
        this.setState({
            isHideDelete: isHideDelete
        });
    },
    _onPressLookImageBack: function _onPressLookImageBack() {
        this.setState({
            lookImage: null
        });
    },
    _onPressLookImageDelete: function _onPressLookImageDelete() {
        var _this = this;
        if (_this.state.isHideDelete) {
            return;
        }
        this.setState({
            lookImage: null
        });
        console.log(this._vars.imageObjs);
        console.log(this._vars.index);
        var iamgePath = this._vars.imageObjs[this._vars.index].uri;
        console.log("调用插件删除文件=" + iamgePath);
        YrcnApp.native.RNUtilsModule.deleteSandboxFile([RNUtils.getSandboxFileShortPath(iamgePath)]);
        this._vars.callObj.deleteImage(this._vars.index);
    }
});

var styles = _reactNative.StyleSheet.create({
    appUpgradeView: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        position: 'absolute',
        top: 0,
        opacity: 0.7,
        backgroundColor: '#333333'
    },
    appUpgradeViewInner: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height
    },
    appUpgradeContentView: {
        width: _reactNative.Dimensions.get('window').width / 5 * 3.6,
        height: _reactNative.Dimensions.get('window').height / 7 * 2.7,
        position: 'absolute',
        top: _reactNative.Dimensions.get('window').height / 7 * 2,
        left: _reactNative.Dimensions.get('window').width / 5 * 0.7,
        backgroundColor: '#ffffff',
        flexDirection: 'column',
        opacity: 1,
        borderRadius: 10
    },
    contentTopView: {
        flex: 2,
        backgroundColor: '#01bbfc',
        paddingTop: 10,
        borderTopLeftRadius: 10,
        borderTopRightRadius: 10,
        justifyContent: 'center'
    },
    contentTopText: {
        color: '#ffffff',
        fontSize: 33,
        textAlign: 'center'
    },
    contentTopText2: {
        color: '#ffffff',
        fontSize: 15,
        textAlign: 'center'
    },
    contentCenterView: {
        flex: 2,
        backgroundColor: '#ffffff'
    },
    contentCenterText1: {
        color: '#6d6d6d',
        textAlign: 'center',
        fontSize: 16,
        lineHeight: 25
    },
    contentCenterText2: {
        color: '#6d6d6d',
        textAlign: 'left',
        fontSize: 13,
        paddingTop: 10,
        paddingLeft: 10
    },
    contentBottomView: {
        flex: 1,
        justifyContent: 'center'
    },
    contentBottomButton: {
        marginLeft: 10,
        marginRight: 10,
        backgroundColor: '#01bbfc',
        padding: 5,
        borderRadius: 5
    },
    contentBottomText: {
        color: '#ffffff',
        textAlign: 'center',
        fontSize: 15
    },
    lookView: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        position: 'absolute',
        top: 0,
        left: 0,
        backgroundColor: '#000000'
    },
    lookImage: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height
    },
    lookImageBottomContainer: {
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        position: 'absolute',
        top: _reactNative.Dimensions.get('window').height - 50,
        left: 0,
        width: _reactNative.Dimensions.get('window').width,
        height: 50,
        backgroundColor: '#fefefe',
        opacity: 0.6
    },
    lookImageBottomBack: {
        flex: 1
    },
    lookImageBottomCenter: {
        flex: 4
    },
    lookImageBottomDelete: {
        flex: 1
    },
    btnText: {
        textAlign: 'center',
        fontWeight: '700'
    }
});
exports.default = NavigatorRoot;
}, 490, null, "YrcnAppProject/src/navigator/NavigatorRoot.js");
__d(/* YrcnAppProject/src/tab/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _TabBarIndex = require(492            ); // 492 = ./TabBarIndex

Object.defineProperty(exports, 'TabBarIndex', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_TabBarIndex).default;
  }
});
}, 491, null, "YrcnAppProject/src/tab/index.js");
__d(/* YrcnAppProject/src/tab/TabBarIndex.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/tab/TabBarIndex.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNativeTabNavigator = require(493                         ); // 493 = react-native-tab-navigator

var _reactNativeTabNavigator2 = babelHelpers.interopRequireDefault(_reactNativeTabNavigator);

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js


var ScrollViewToday = require(501                                 ); // 501 = ./../scrollview/ScrollViewToday.js
var ScrollViewYesterday = require(512                                     ); // 512 = ./../scrollview/ScrollViewYesterday.js
var ScrollViewLlg = require(513                               ); // 513 = ./../scrollview/ScrollViewLlg.js
var SettingsView = require(515                        ); // 515 = ./../view/ViewSettings.js

var TabBarIndex = _react2.default.createClass({
    displayName: 'TabBarIndex',

    getInitialState: function getInitialState() {
        var _this = this;
        return {
            selectedTab: _this.props.selectedTab || 'todayIcon'
        };
    },
    render: function render() {
        var _this2 = this;

        global.YrcnApp.components.StatusBar.setBarStyle('light-content', false, '#01bbfc');
        YrcnApp.components.StatusBar.setHidden(false, 'slide');
        return _react2.default.createElement(
            _reactNativeTabNavigator2.default,
            { tabBarStyle: { height: 50, overflow: 'hidden', paddingBottom: 0 },
                sceneStyle: {}, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 41
                }
            },
            _react2.default.createElement(
                _reactNativeTabNavigator2.default.Item,
                {
                    selected: this.state.selectedTab === 'todayIcon',
                    title: '\u4ECA\u5929',
                    titleStyle: { color: '#444444' },
                    selectedTitleStyle: { color: '#4ab854' },
                    tabStyle: {},
                    renderIcon: function renderIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(519                    ), __source: { // 519 = ../images/hotLife.png
                                fileName: _jsxFileName,
                                lineNumber: 49
                            }
                        });
                    },
                    renderSelectedIcon: function renderSelectedIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(519                    ), __source: { // 519 = ../images/hotLife.png
                                fileName: _jsxFileName,
                                lineNumber: 50
                            }
                        });
                    },
                    onPress: function onPress(item) {
                        _this2._onPressTabItem('todayIcon');
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 43
                    }
                },
                _react2.default.createElement(ScrollViewToday, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 52
                    }
                })
            ),
            _react2.default.createElement(
                _reactNativeTabNavigator2.default.Item,
                {
                    selected: this.state.selectedTab === 'yesterdayIcon',
                    title: '\u6628\u5929',
                    titleStyle: { color: '#444444' },
                    selectedTitleStyle: { color: '#4ab854' },
                    renderIcon: function renderIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(520                          ), __source: { // 520 = ../images/yesterdayIcon.png
                                fileName: _jsxFileName,
                                lineNumber: 59
                            }
                        });
                    },
                    renderSelectedIcon: function renderSelectedIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(520                          ), __source: { // 520 = ../images/yesterdayIcon.png
                                fileName: _jsxFileName,
                                lineNumber: 60
                            }
                        });
                    },
                    onPress: function onPress(item) {
                        _this2._onPressTabItem('yesterdayIcon');
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 54
                    }
                },
                _react2.default.createElement(ScrollViewYesterday, { contentDay: global.YrcnApp.utils.yesterdayDate(),
                    backgroundColor: '#ffffff', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 62
                    }
                })
            ),
            _react2.default.createElement(
                _reactNativeTabNavigator2.default.Item,
                {
                    selected: this.state.selectedTab === 'llgIcon',
                    title: '\u4EE5\u524D',
                    titleStyle: { color: '#444444' },
                    selectedTitleStyle: { color: '#4ab854' },
                    renderIcon: function renderIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(521                    ), __source: { // 521 = ../images/llgIcon.png
                                fileName: _jsxFileName,
                                lineNumber: 70
                            }
                        });
                    },
                    renderSelectedIcon: function renderSelectedIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(521                    ), __source: { // 521 = ../images/llgIcon.png
                                fileName: _jsxFileName,
                                lineNumber: 71
                            }
                        });
                    },
                    onPress: function onPress(item) {
                        _this2._onPressTabItem('llgIcon');
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 65
                    }
                },
                _react2.default.createElement(ScrollViewLlg, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 73
                    }
                })
            ),
            _react2.default.createElement(
                _reactNativeTabNavigator2.default.Item,
                {
                    selected: this.state.selectedTab === 'myLife',
                    title: '\u8BBE\u7F6E',
                    titleStyle: { color: '#444444' },
                    selectedTitleStyle: { color: '#4ab854' },
                    renderIcon: function renderIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(522                   ), __source: { // 522 = ../images/myLife.png
                                fileName: _jsxFileName,
                                lineNumber: 80
                            }
                        });
                    },
                    renderSelectedIcon: function renderSelectedIcon() {
                        return _react2.default.createElement(_reactNative.Image, { source: require(522                   ), __source: { // 522 = ../images/myLife.png
                                fileName: _jsxFileName,
                                lineNumber: 81
                            }
                        });
                    },
                    onPress: function onPress(item) {
                        _this2._onPressTabItem('myLife');
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 75
                    }
                },
                _react2.default.createElement(SettingsView, {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 83
                    }
                })
            )
        );
    },
    _onPressTabItem: function _onPressTabItem(item) {
        var _this = this;
        this.setState({
            selectedTab: item
        });
    }
});
var styles = _reactNative.StyleSheet.create({
    container: {
        borderTopWidth: 1,
        borderTopColor: '#000000',
        borderStyle: 'solid',
        backfaceVisibility: 'hidden'
    }
});

module.exports = TabBarIndex;
}, 492, null, "YrcnAppProject/src/tab/TabBarIndex.android.js");
__d(/* react-native-tab-navigator/TabNavigator.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-navigator/TabNavigator.js';

var _immutable = require(494        ); // 494 = immutable

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _Badge = require(495      ); // 495 = ./Badge

var _Badge2 = babelHelpers.interopRequireDefault(_Badge);

var _Layout = require(496       ); // 496 = ./Layout

var _Layout2 = babelHelpers.interopRequireDefault(_Layout);

var _StaticContainer = require(497                ); // 497 = ./StaticContainer

var _StaticContainer2 = babelHelpers.interopRequireDefault(_StaticContainer);

var _Tab = require(498    ); // 498 = ./Tab

var _Tab2 = babelHelpers.interopRequireDefault(_Tab);

var _TabBar = require(499       ); // 499 = ./TabBar

var _TabBar2 = babelHelpers.interopRequireDefault(_TabBar);

var _TabNavigatorItem = require(500                 ); // 500 = ./TabNavigatorItem

var _TabNavigatorItem2 = babelHelpers.interopRequireDefault(_TabNavigatorItem);

var TabNavigator = function (_React$Component) {
  babelHelpers.inherits(TabNavigator, _React$Component);

  function TabNavigator(props, context) {
    babelHelpers.classCallCheck(this, TabNavigator);

    var _this = babelHelpers.possibleConstructorReturn(this, (TabNavigator.__proto__ || Object.getPrototypeOf(TabNavigator)).call(this, props, context));

    _this.state = {
      renderedSceneKeys: _this._updateRenderedSceneKeys(props.children)
    };

    _this._renderTab = _this._renderTab.bind(_this);
    return _this;
  }

  babelHelpers.createClass(TabNavigator, [{
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      var renderedSceneKeys = this.state.renderedSceneKeys;

      this.setState({
        renderedSceneKeys: this._updateRenderedSceneKeys(nextProps.children, renderedSceneKeys)
      });
    }
  }, {
    key: '_getSceneKey',
    value: function _getSceneKey(item, index) {
      return 'scene-' + (item.key !== null ? item.key : index);
    }
  }, {
    key: '_updateRenderedSceneKeys',
    value: function _updateRenderedSceneKeys(children) {
      var _this2 = this;

      var oldSceneKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (0, _immutable.Set)();

      var newSceneKeys = (0, _immutable.Set)().asMutable();
      _react2.default.Children.forEach(children, function (item, index) {
        if (item === null) {
          return;
        }
        var key = _this2._getSceneKey(item, index);
        if (oldSceneKeys.has(key) || item.props.selected) {
          newSceneKeys.add(key);
        }
      });
      return newSceneKeys.asImmutable();
    }
  }, {
    key: 'render',
    value: function render() {
      var _this3 = this;

      var _props = this.props,
          style = _props.style,
          children = _props.children,
          tabBarStyle = _props.tabBarStyle,
          tabBarShadowStyle = _props.tabBarShadowStyle,
          sceneStyle = _props.sceneStyle,
          props = babelHelpers.objectWithoutProperties(_props, ['style', 'children', 'tabBarStyle', 'tabBarShadowStyle', 'sceneStyle']);

      var scenes = [];

      _react2.default.Children.forEach(children, function (item, index) {
        if (item === null) {
          return;
        }
        var sceneKey = _this3._getSceneKey(item, index);
        if (!_this3.state.renderedSceneKeys.has(sceneKey)) {
          return;
        }

        var selected = item.props.selected;

        var scene = _react2.default.createElement(
          SceneContainer,
          { key: sceneKey, selected: selected, style: sceneStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 80
            }
          },
          item
        );

        scenes.push(scene);
      });

      return _react2.default.createElement(
        _reactNative.View,
        babelHelpers.extends({}, props, { style: [styles.container, style], __source: {
            fileName: _jsxFileName,
            lineNumber: 88
          }
        }),
        scenes,
        _react2.default.createElement(
          _TabBar2.default,
          { style: tabBarStyle, shadowStyle: tabBarShadowStyle, __source: {
              fileName: _jsxFileName,
              lineNumber: 90
            }
          },
          _react2.default.Children.map(children, this._renderTab)
        )
      );
    }
  }, {
    key: '_renderTab',
    value: function _renderTab(item) {
      var icon = void 0;
      if (item === null) {
        return;
      }
      if (item.props.selected) {
        if (item.props.renderSelectedIcon) {
          icon = item.props.renderSelectedIcon();
        } else if (item.props.renderIcon) {
          var defaultIcon = item.props.renderIcon();
          icon = _react2.default.cloneElement(defaultIcon, {
            style: [defaultIcon.props.style, styles.defaultSelectedIcon]
          });
        }
      } else if (item.props.renderIcon) {
        icon = item.props.renderIcon();
      }

      var badge = void 0;
      if (item.props.renderBadge) {
        badge = item.props.renderBadge();
      } else if (item.props.badgeText) {
        badge = _react2.default.createElement(
          _Badge2.default,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 119
            }
          },
          item.props.badgeText
        );
      }

      return _react2.default.createElement(
        _Tab2.default,
        {
          testID: item.props.testID,
          title: item.props.title,
          allowFontScaling: item.props.allowFontScaling,
          titleStyle: [item.props.titleStyle, item.props.selected ? [styles.defaultSelectedTitle, item.props.selectedTitleStyle] : null],
          badge: badge,
          onPress: item.props.onPress,
          hidesTabTouch: this.props.hidesTabTouch,
          style: item.props.tabStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 123
          }
        },
        icon
      );
    }
  }]);
  return TabNavigator;
}(_react2.default.Component);

TabNavigator.propTypes = babelHelpers.extends({}, _reactNative.View.propTypes, {
  sceneStyle: _reactNative.View.propTypes.style,
  tabBarStyle: _TabBar2.default.propTypes.style,
  tabBarShadowStyle: _TabBar2.default.propTypes.shadowStyle,
  hidesTabTouch: _react.PropTypes.bool
});
exports.default = TabNavigator;

var SceneContainer = function (_React$Component2) {
  babelHelpers.inherits(SceneContainer, _React$Component2);

  function SceneContainer() {
    babelHelpers.classCallCheck(this, SceneContainer);
    return babelHelpers.possibleConstructorReturn(this, (SceneContainer.__proto__ || Object.getPrototypeOf(SceneContainer)).apply(this, arguments));
  }

  babelHelpers.createClass(SceneContainer, [{
    key: 'render',
    value: function render() {
      var _props2 = this.props,
          selected = _props2.selected,
          props = babelHelpers.objectWithoutProperties(_props2, ['selected']);

      return _react2.default.createElement(
        _reactNative.View,
        babelHelpers.extends({}, props, {
          pointerEvents: selected ? 'auto' : 'none',
          removeClippedSubviews: !selected,
          style: [styles.sceneContainer, selected ? null : styles.hiddenSceneContainer, props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 153
          }
        }),
        _react2.default.createElement(
          _StaticContainer2.default,
          { shouldUpdate: selected, __source: {
              fileName: _jsxFileName,
              lineNumber: 162
            }
          },
          this.props.children
        )
      );
    }
  }]);
  return SceneContainer;
}(_react2.default.Component);

SceneContainer.propTypes = babelHelpers.extends({}, _reactNative.View.propTypes, {
  selected: _react.PropTypes.bool
});


var styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1
  },
  sceneContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    paddingBottom: _Layout2.default.tabBarHeight
  },
  hiddenSceneContainer: {
    overflow: 'hidden',
    opacity: 0
  },
  defaultSelectedTitle: {
    color: 'rgb(0, 122, 255)'
  },
  defaultSelectedIcon: {
    tintColor: 'rgb(0, 122, 255)'
  }
});

TabNavigator.Item = _TabNavigatorItem2.default;
}, 493, null, "react-native-tab-navigator/TabNavigator.js");
__d(/* immutable/dist/immutable.js */function(global, require, module, exports) {

(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.Immutable = factory();
})(this, function () {
  'use strict';
  var SLICE$0 = Array.prototype.slice;

  function createClass(ctor, superClass) {
    if (superClass) {
      ctor.prototype = Object.create(superClass.prototype);
    }
    ctor.prototype.constructor = ctor;
  }

  function Iterable(value) {
    return isIterable(value) ? value : Seq(value);
  }

  createClass(KeyedIterable, Iterable);
  function KeyedIterable(value) {
    return isKeyed(value) ? value : KeyedSeq(value);
  }

  createClass(IndexedIterable, Iterable);
  function IndexedIterable(value) {
    return isIndexed(value) ? value : IndexedSeq(value);
  }

  createClass(SetIterable, Iterable);
  function SetIterable(value) {
    return isIterable(value) && !isAssociative(value) ? value : SetSeq(value);
  }

  function isIterable(maybeIterable) {
    return !!(maybeIterable && maybeIterable[IS_ITERABLE_SENTINEL]);
  }

  function isKeyed(maybeKeyed) {
    return !!(maybeKeyed && maybeKeyed[IS_KEYED_SENTINEL]);
  }

  function isIndexed(maybeIndexed) {
    return !!(maybeIndexed && maybeIndexed[IS_INDEXED_SENTINEL]);
  }

  function isAssociative(maybeAssociative) {
    return isKeyed(maybeAssociative) || isIndexed(maybeAssociative);
  }

  function isOrdered(maybeOrdered) {
    return !!(maybeOrdered && maybeOrdered[IS_ORDERED_SENTINEL]);
  }

  Iterable.isIterable = isIterable;
  Iterable.isKeyed = isKeyed;
  Iterable.isIndexed = isIndexed;
  Iterable.isAssociative = isAssociative;
  Iterable.isOrdered = isOrdered;

  Iterable.Keyed = KeyedIterable;
  Iterable.Indexed = IndexedIterable;
  Iterable.Set = SetIterable;

  var IS_ITERABLE_SENTINEL = '@@__IMMUTABLE_ITERABLE__@@';
  var IS_KEYED_SENTINEL = '@@__IMMUTABLE_KEYED__@@';
  var IS_INDEXED_SENTINEL = '@@__IMMUTABLE_INDEXED__@@';
  var IS_ORDERED_SENTINEL = '@@__IMMUTABLE_ORDERED__@@';

  var DELETE = 'delete';

  var SHIFT = 5;
  var SIZE = 1 << SHIFT;
  var MASK = SIZE - 1;

  var NOT_SET = {};

  var CHANGE_LENGTH = { value: false };
  var DID_ALTER = { value: false };

  function MakeRef(ref) {
    ref.value = false;
    return ref;
  }

  function SetRef(ref) {
    ref && (ref.value = true);
  }

  function OwnerID() {}

  function arrCopy(arr, offset) {
    offset = offset || 0;
    var len = Math.max(0, arr.length - offset);
    var newArr = new Array(len);
    for (var ii = 0; ii < len; ii++) {
      newArr[ii] = arr[ii + offset];
    }
    return newArr;
  }

  function ensureSize(iter) {
    if (iter.size === undefined) {
      iter.size = iter.__iterate(returnTrue);
    }
    return iter.size;
  }

  function wrapIndex(iter, index) {
    if (typeof index !== 'number') {
      var uint32Index = index >>> 0;
      if ('' + uint32Index !== index || uint32Index === 4294967295) {
        return NaN;
      }
      index = uint32Index;
    }
    return index < 0 ? ensureSize(iter) + index : index;
  }

  function returnTrue() {
    return true;
  }

  function wholeSlice(begin, end, size) {
    return (begin === 0 || size !== undefined && begin <= -size) && (end === undefined || size !== undefined && end >= size);
  }

  function resolveBegin(begin, size) {
    return resolveIndex(begin, size, 0);
  }

  function resolveEnd(end, size) {
    return resolveIndex(end, size, size);
  }

  function resolveIndex(index, size, defaultIndex) {
    return index === undefined ? defaultIndex : index < 0 ? Math.max(0, size + index) : size === undefined ? index : Math.min(size, index);
  }

  var ITERATE_KEYS = 0;
  var ITERATE_VALUES = 1;
  var ITERATE_ENTRIES = 2;

  var REAL_ITERATOR_SYMBOL = typeof Symbol === 'function' && (typeof Symbol === 'function' ? Symbol.iterator : '@@iterator');
  var FAUX_ITERATOR_SYMBOL = '@@iterator';

  var ITERATOR_SYMBOL = REAL_ITERATOR_SYMBOL || FAUX_ITERATOR_SYMBOL;

  function Iterator(next) {
    this.next = next;
  }

  Iterator.prototype.toString = function () {
    return '[Iterator]';
  };

  Iterator.KEYS = ITERATE_KEYS;
  Iterator.VALUES = ITERATE_VALUES;
  Iterator.ENTRIES = ITERATE_ENTRIES;

  Iterator.prototype.inspect = Iterator.prototype.toSource = function () {
    return this.toString();
  };
  Iterator.prototype[ITERATOR_SYMBOL] = function () {
    return this;
  };

  function iteratorValue(type, k, v, iteratorResult) {
    var value = type === 0 ? k : type === 1 ? v : [k, v];
    iteratorResult ? iteratorResult.value = value : iteratorResult = {
      value: value, done: false
    };
    return iteratorResult;
  }

  function iteratorDone() {
    return { value: undefined, done: true };
  }

  function hasIterator(maybeIterable) {
    return !!getIteratorFn(maybeIterable);
  }

  function isIterator(maybeIterator) {
    return maybeIterator && typeof maybeIterator.next === 'function';
  }

  function getIterator(iterable) {
    var iteratorFn = getIteratorFn(iterable);
    return iteratorFn && iteratorFn.call(iterable);
  }

  function getIteratorFn(iterable) {
    var iteratorFn = iterable && (REAL_ITERATOR_SYMBOL && iterable[REAL_ITERATOR_SYMBOL] || iterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  function isArrayLike(value) {
    return value && typeof value.length === 'number';
  }

  createClass(Seq, Iterable);
  function Seq(value) {
    return value === null || value === undefined ? emptySequence() : isIterable(value) ? value.toSeq() : seqFromValue(value);
  }

  Seq.of = function () {
    return Seq(arguments);
  };

  Seq.prototype.toSeq = function () {
    return this;
  };

  Seq.prototype.toString = function () {
    return this.__toString('Seq {', '}');
  };

  Seq.prototype.cacheResult = function () {
    if (!this._cache && this.__iterateUncached) {
      this._cache = this.entrySeq().toArray();
      this.size = this._cache.length;
    }
    return this;
  };

  Seq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, true);
  };

  Seq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, true);
  };

  createClass(KeyedSeq, Seq);
  function KeyedSeq(value) {
    return value === null || value === undefined ? emptySequence().toKeyedSeq() : isIterable(value) ? isKeyed(value) ? value.toSeq() : value.fromEntrySeq() : keyedSeqFromValue(value);
  }

  KeyedSeq.prototype.toKeyedSeq = function () {
    return this;
  };

  createClass(IndexedSeq, Seq);
  function IndexedSeq(value) {
    return value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value.toIndexedSeq();
  }

  IndexedSeq.of = function () {
    return IndexedSeq(arguments);
  };

  IndexedSeq.prototype.toIndexedSeq = function () {
    return this;
  };

  IndexedSeq.prototype.toString = function () {
    return this.__toString('Seq [', ']');
  };

  IndexedSeq.prototype.__iterate = function (fn, reverse) {
    return seqIterate(this, fn, reverse, false);
  };

  IndexedSeq.prototype.__iterator = function (type, reverse) {
    return seqIterator(this, type, reverse, false);
  };

  createClass(SetSeq, Seq);
  function SetSeq(value) {
    return (value === null || value === undefined ? emptySequence() : !isIterable(value) ? indexedSeqFromValue(value) : isKeyed(value) ? value.entrySeq() : value).toSetSeq();
  }

  SetSeq.of = function () {
    return SetSeq(arguments);
  };

  SetSeq.prototype.toSetSeq = function () {
    return this;
  };

  Seq.isSeq = isSeq;
  Seq.Keyed = KeyedSeq;
  Seq.Set = SetSeq;
  Seq.Indexed = IndexedSeq;

  var IS_SEQ_SENTINEL = '@@__IMMUTABLE_SEQ__@@';

  Seq.prototype[IS_SEQ_SENTINEL] = true;

  createClass(ArraySeq, IndexedSeq);
  function ArraySeq(array) {
    this._array = array;
    this.size = array.length;
  }

  ArraySeq.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._array[wrapIndex(this, index)] : notSetValue;
  };

  ArraySeq.prototype.__iterate = function (fn, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(array[reverse ? maxIndex - ii : ii], ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ArraySeq.prototype.__iterator = function (type, reverse) {
    var array = this._array;
    var maxIndex = array.length - 1;
    var ii = 0;
    return new Iterator(function () {
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii, array[reverse ? maxIndex - ii++ : ii++]);
    });
  };

  createClass(ObjectSeq, KeyedSeq);
  function ObjectSeq(object) {
    var keys = Object.keys(object);
    this._object = object;
    this._keys = keys;
    this.size = keys.length;
  }

  ObjectSeq.prototype.get = function (key, notSetValue) {
    if (notSetValue !== undefined && !this.has(key)) {
      return notSetValue;
    }
    return this._object[key];
  };

  ObjectSeq.prototype.has = function (key) {
    return this._object.hasOwnProperty(key);
  };

  ObjectSeq.prototype.__iterate = function (fn, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    for (var ii = 0; ii <= maxIndex; ii++) {
      var key = keys[reverse ? maxIndex - ii : ii];
      if (fn(object[key], key, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  ObjectSeq.prototype.__iterator = function (type, reverse) {
    var object = this._object;
    var keys = this._keys;
    var maxIndex = keys.length - 1;
    var ii = 0;
    return new Iterator(function () {
      var key = keys[reverse ? maxIndex - ii : ii];
      return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, key, object[key]);
    });
  };

  ObjectSeq.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(IterableSeq, IndexedSeq);
  function IterableSeq(iterable) {
    this._iterable = iterable;
    this.size = iterable.length || iterable.size;
  }

  IterableSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    var iterations = 0;
    if (isIterator(iterator)) {
      var step;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
    }
    return iterations;
  };

  IterableSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterable = this._iterable;
    var iterator = getIterator(iterable);
    if (!isIterator(iterator)) {
      return new Iterator(iteratorDone);
    }
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value);
    });
  };

  createClass(IteratorSeq, IndexedSeq);
  function IteratorSeq(iterator) {
    this._iterator = iterator;
    this._iteratorCache = [];
  }

  IteratorSeq.prototype.__iterateUncached = function (fn, reverse) {
    if (reverse) {
      return this.cacheResult().__iterate(fn, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    while (iterations < cache.length) {
      if (fn(cache[iterations], iterations++, this) === false) {
        return iterations;
      }
    }
    var step;
    while (!(step = iterator.next()).done) {
      var val = step.value;
      cache[iterations] = val;
      if (fn(val, iterations++, this) === false) {
        break;
      }
    }
    return iterations;
  };

  IteratorSeq.prototype.__iteratorUncached = function (type, reverse) {
    if (reverse) {
      return this.cacheResult().__iterator(type, reverse);
    }
    var iterator = this._iterator;
    var cache = this._iteratorCache;
    var iterations = 0;
    return new Iterator(function () {
      if (iterations >= cache.length) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        cache[iterations] = step.value;
      }
      return iteratorValue(type, iterations, cache[iterations++]);
    });
  };

  function isSeq(maybeSeq) {
    return !!(maybeSeq && maybeSeq[IS_SEQ_SENTINEL]);
  }

  var EMPTY_SEQ;

  function emptySequence() {
    return EMPTY_SEQ || (EMPTY_SEQ = new ArraySeq([]));
  }

  function keyedSeqFromValue(value) {
    var seq = Array.isArray(value) ? new ArraySeq(value).fromEntrySeq() : isIterator(value) ? new IteratorSeq(value).fromEntrySeq() : hasIterator(value) ? new IterableSeq(value).fromEntrySeq() : typeof value === 'object' ? new ObjectSeq(value) : undefined;
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of [k, v] entries, ' + 'or keyed object: ' + value);
    }
    return seq;
  }

  function indexedSeqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values: ' + value);
    }
    return seq;
  }

  function seqFromValue(value) {
    var seq = maybeIndexedSeqFromValue(value) || typeof value === 'object' && new ObjectSeq(value);
    if (!seq) {
      throw new TypeError('Expected Array or iterable object of values, or keyed object: ' + value);
    }
    return seq;
  }

  function maybeIndexedSeqFromValue(value) {
    return isArrayLike(value) ? new ArraySeq(value) : isIterator(value) ? new IteratorSeq(value) : hasIterator(value) ? new IterableSeq(value) : undefined;
  }

  function seqIterate(seq, fn, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      for (var ii = 0; ii <= maxIndex; ii++) {
        var entry = cache[reverse ? maxIndex - ii : ii];
        if (fn(entry[1], useKeys ? entry[0] : ii, seq) === false) {
          return ii + 1;
        }
      }
      return ii;
    }
    return seq.__iterateUncached(fn, reverse);
  }

  function seqIterator(seq, type, reverse, useKeys) {
    var cache = seq._cache;
    if (cache) {
      var maxIndex = cache.length - 1;
      var ii = 0;
      return new Iterator(function () {
        var entry = cache[reverse ? maxIndex - ii : ii];
        return ii++ > maxIndex ? iteratorDone() : iteratorValue(type, useKeys ? entry[0] : ii - 1, entry[1]);
      });
    }
    return seq.__iteratorUncached(type, reverse);
  }

  function fromJS(json, converter) {
    return converter ? fromJSWith(converter, json, '', { '': json }) : fromJSDefault(json);
  }

  function fromJSWith(converter, json, key, parentJSON) {
    if (Array.isArray(json)) {
      return converter.call(parentJSON, key, IndexedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    if (isPlainObj(json)) {
      return converter.call(parentJSON, key, KeyedSeq(json).map(function (v, k) {
        return fromJSWith(converter, v, k, json);
      }));
    }
    return json;
  }

  function fromJSDefault(json) {
    if (Array.isArray(json)) {
      return IndexedSeq(json).map(fromJSDefault).toList();
    }
    if (isPlainObj(json)) {
      return KeyedSeq(json).map(fromJSDefault).toMap();
    }
    return json;
  }

  function isPlainObj(value) {
    return value && (value.constructor === Object || value.constructor === undefined);
  }

  function is(valueA, valueB) {
    if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
      return true;
    }
    if (!valueA || !valueB) {
      return false;
    }
    if (typeof valueA.valueOf === 'function' && typeof valueB.valueOf === 'function') {
      valueA = valueA.valueOf();
      valueB = valueB.valueOf();
      if (valueA === valueB || valueA !== valueA && valueB !== valueB) {
        return true;
      }
      if (!valueA || !valueB) {
        return false;
      }
    }
    if (typeof valueA.equals === 'function' && typeof valueB.equals === 'function' && valueA.equals(valueB)) {
      return true;
    }
    return false;
  }

  function deepEqual(a, b) {
    if (a === b) {
      return true;
    }

    if (!isIterable(b) || a.size !== undefined && b.size !== undefined && a.size !== b.size || a.__hash !== undefined && b.__hash !== undefined && a.__hash !== b.__hash || isKeyed(a) !== isKeyed(b) || isIndexed(a) !== isIndexed(b) || isOrdered(a) !== isOrdered(b)) {
      return false;
    }

    if (a.size === 0 && b.size === 0) {
      return true;
    }

    var notAssociative = !isAssociative(a);

    if (isOrdered(a)) {
      var entries = a.entries();
      return b.every(function (v, k) {
        var entry = entries.next().value;
        return entry && is(entry[1], v) && (notAssociative || is(entry[0], k));
      }) && entries.next().done;
    }

    var flipped = false;

    if (a.size === undefined) {
      if (b.size === undefined) {
        if (typeof a.cacheResult === 'function') {
          a.cacheResult();
        }
      } else {
        flipped = true;
        var _ = a;
        a = b;
        b = _;
      }
    }

    var allEqual = true;
    var bSize = b.__iterate(function (v, k) {
      if (notAssociative ? !a.has(v) : flipped ? !is(v, a.get(k, NOT_SET)) : !is(a.get(k, NOT_SET), v)) {
        allEqual = false;
        return false;
      }
    });

    return allEqual && a.size === bSize;
  }

  createClass(Repeat, IndexedSeq);

  function Repeat(value, times) {
    if (!(this instanceof Repeat)) {
      return new Repeat(value, times);
    }
    this._value = value;
    this.size = times === undefined ? Infinity : Math.max(0, times);
    if (this.size === 0) {
      if (EMPTY_REPEAT) {
        return EMPTY_REPEAT;
      }
      EMPTY_REPEAT = this;
    }
  }

  Repeat.prototype.toString = function () {
    if (this.size === 0) {
      return 'Repeat []';
    }
    return 'Repeat [ ' + this._value + ' ' + this.size + ' times ]';
  };

  Repeat.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._value : notSetValue;
  };

  Repeat.prototype.includes = function (searchValue) {
    return is(this._value, searchValue);
  };

  Repeat.prototype.slice = function (begin, end) {
    var size = this.size;
    return wholeSlice(begin, end, size) ? this : new Repeat(this._value, resolveEnd(end, size) - resolveBegin(begin, size));
  };

  Repeat.prototype.reverse = function () {
    return this;
  };

  Repeat.prototype.indexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return 0;
    }
    return -1;
  };

  Repeat.prototype.lastIndexOf = function (searchValue) {
    if (is(this._value, searchValue)) {
      return this.size;
    }
    return -1;
  };

  Repeat.prototype.__iterate = function (fn, reverse) {
    for (var ii = 0; ii < this.size; ii++) {
      if (fn(this._value, ii, this) === false) {
        return ii + 1;
      }
    }
    return ii;
  };

  Repeat.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    var ii = 0;
    return new Iterator(function () {
      return ii < this$0.size ? iteratorValue(type, ii++, this$0._value) : iteratorDone();
    });
  };

  Repeat.prototype.equals = function (other) {
    return other instanceof Repeat ? is(this._value, other._value) : deepEqual(other);
  };

  var EMPTY_REPEAT;

  function invariant(condition, error) {
    if (!condition) throw new Error(error);
  }

  createClass(Range, IndexedSeq);

  function Range(start, end, step) {
    if (!(this instanceof Range)) {
      return new Range(start, end, step);
    }
    invariant(step !== 0, 'Cannot step a Range by 0');
    start = start || 0;
    if (end === undefined) {
      end = Infinity;
    }
    step = step === undefined ? 1 : Math.abs(step);
    if (end < start) {
      step = -step;
    }
    this._start = start;
    this._end = end;
    this._step = step;
    this.size = Math.max(0, Math.ceil((end - start) / step - 1) + 1);
    if (this.size === 0) {
      if (EMPTY_RANGE) {
        return EMPTY_RANGE;
      }
      EMPTY_RANGE = this;
    }
  }

  Range.prototype.toString = function () {
    if (this.size === 0) {
      return 'Range []';
    }
    return 'Range [ ' + this._start + '...' + this._end + (this._step !== 1 ? ' by ' + this._step : '') + ' ]';
  };

  Range.prototype.get = function (index, notSetValue) {
    return this.has(index) ? this._start + wrapIndex(this, index) * this._step : notSetValue;
  };

  Range.prototype.includes = function (searchValue) {
    var possibleIndex = (searchValue - this._start) / this._step;
    return possibleIndex >= 0 && possibleIndex < this.size && possibleIndex === Math.floor(possibleIndex);
  };

  Range.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    begin = resolveBegin(begin, this.size);
    end = resolveEnd(end, this.size);
    if (end <= begin) {
      return new Range(0, 0);
    }
    return new Range(this.get(begin, this._end), this.get(end, this._end), this._step);
  };

  Range.prototype.indexOf = function (searchValue) {
    var offsetValue = searchValue - this._start;
    if (offsetValue % this._step === 0) {
      var index = offsetValue / this._step;
      if (index >= 0 && index < this.size) {
        return index;
      }
    }
    return -1;
  };

  Range.prototype.lastIndexOf = function (searchValue) {
    return this.indexOf(searchValue);
  };

  Range.prototype.__iterate = function (fn, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    for (var ii = 0; ii <= maxIndex; ii++) {
      if (fn(value, ii, this) === false) {
        return ii + 1;
      }
      value += reverse ? -step : step;
    }
    return ii;
  };

  Range.prototype.__iterator = function (type, reverse) {
    var maxIndex = this.size - 1;
    var step = this._step;
    var value = reverse ? this._start + maxIndex * step : this._start;
    var ii = 0;
    return new Iterator(function () {
      var v = value;
      value += reverse ? -step : step;
      return ii > maxIndex ? iteratorDone() : iteratorValue(type, ii++, v);
    });
  };

  Range.prototype.equals = function (other) {
    return other instanceof Range ? this._start === other._start && this._end === other._end && this._step === other._step : deepEqual(this, other);
  };

  var EMPTY_RANGE;

  createClass(Collection, Iterable);
  function Collection() {
    throw TypeError('Abstract');
  }

  createClass(KeyedCollection, Collection);function KeyedCollection() {}

  createClass(IndexedCollection, Collection);function IndexedCollection() {}

  createClass(SetCollection, Collection);function SetCollection() {}

  Collection.Keyed = KeyedCollection;
  Collection.Indexed = IndexedCollection;
  Collection.Set = SetCollection;

  var imul = typeof Math.imul === 'function' && Math.imul(0xffffffff, 2) === -2 ? Math.imul : function imul(a, b) {
    a = a | 0;
    b = b | 0;
    var c = a & 0xffff;
    var d = b & 0xffff;

    return c * d + ((a >>> 16) * d + c * (b >>> 16) << 16 >>> 0) | 0;
  };

  function smi(i32) {
    return i32 >>> 1 & 0x40000000 | i32 & 0xBFFFFFFF;
  }

  function hash(o) {
    if (o === false || o === null || o === undefined) {
      return 0;
    }
    if (typeof o.valueOf === 'function') {
      o = o.valueOf();
      if (o === false || o === null || o === undefined) {
        return 0;
      }
    }
    if (o === true) {
      return 1;
    }
    var type = typeof o;
    if (type === 'number') {
      if (o !== o || o === Infinity) {
        return 0;
      }
      var h = o | 0;
      if (h !== o) {
        h ^= o * 0xFFFFFFFF;
      }
      while (o > 0xFFFFFFFF) {
        o /= 0xFFFFFFFF;
        h ^= o;
      }
      return smi(h);
    }
    if (type === 'string') {
      return o.length > STRING_HASH_CACHE_MIN_STRLEN ? cachedHashString(o) : hashString(o);
    }
    if (typeof o.hashCode === 'function') {
      return o.hashCode();
    }
    if (type === 'object') {
      return hashJSObj(o);
    }
    if (typeof o.toString === 'function') {
      return hashString(o.toString());
    }
    throw new Error('Value type ' + type + ' cannot be hashed.');
  }

  function cachedHashString(string) {
    var hash = stringHashCache[string];
    if (hash === undefined) {
      hash = hashString(string);
      if (STRING_HASH_CACHE_SIZE === STRING_HASH_CACHE_MAX_SIZE) {
        STRING_HASH_CACHE_SIZE = 0;
        stringHashCache = {};
      }
      STRING_HASH_CACHE_SIZE++;
      stringHashCache[string] = hash;
    }
    return hash;
  }

  function hashString(string) {
    var hash = 0;
    for (var ii = 0; ii < string.length; ii++) {
      hash = 31 * hash + string.charCodeAt(ii) | 0;
    }
    return smi(hash);
  }

  function hashJSObj(obj) {
    var hash;
    if (usingWeakMap) {
      hash = weakMap.get(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = obj[UID_HASH_KEY];
    if (hash !== undefined) {
      return hash;
    }

    if (!canDefineProperty) {
      hash = obj.propertyIsEnumerable && obj.propertyIsEnumerable[UID_HASH_KEY];
      if (hash !== undefined) {
        return hash;
      }

      hash = getIENodeHash(obj);
      if (hash !== undefined) {
        return hash;
      }
    }

    hash = ++objHashUID;
    if (objHashUID & 0x40000000) {
      objHashUID = 0;
    }

    if (usingWeakMap) {
      weakMap.set(obj, hash);
    } else if (isExtensible !== undefined && isExtensible(obj) === false) {
      throw new Error('Non-extensible objects are not allowed as keys.');
    } else if (canDefineProperty) {
      Object.defineProperty(obj, UID_HASH_KEY, {
        'enumerable': false,
        'configurable': false,
        'writable': false,
        'value': hash
      });
    } else if (obj.propertyIsEnumerable !== undefined && obj.propertyIsEnumerable === obj.constructor.prototype.propertyIsEnumerable) {
      obj.propertyIsEnumerable = function () {
        return this.constructor.prototype.propertyIsEnumerable.apply(this, arguments);
      };
      obj.propertyIsEnumerable[UID_HASH_KEY] = hash;
    } else if (obj.nodeType !== undefined) {
      obj[UID_HASH_KEY] = hash;
    } else {
      throw new Error('Unable to set a non-enumerable property on object.');
    }

    return hash;
  }

  var isExtensible = Object.isExtensible;

  var canDefineProperty = function () {
    try {
      Object.defineProperty({}, '@', {});
      return true;
    } catch (e) {
      return false;
    }
  }();

  function getIENodeHash(node) {
    if (node && node.nodeType > 0) {
      switch (node.nodeType) {
        case 1:
          return node.uniqueID;
        case 9:
          return node.documentElement && node.documentElement.uniqueID;
      }
    }
  }

  var usingWeakMap = typeof WeakMap === 'function';
  var weakMap;
  if (usingWeakMap) {
    weakMap = new WeakMap();
  }

  var objHashUID = 0;

  var UID_HASH_KEY = '__immutablehash__';
  if (typeof Symbol === 'function') {
    UID_HASH_KEY = Symbol(UID_HASH_KEY);
  }

  var STRING_HASH_CACHE_MIN_STRLEN = 16;
  var STRING_HASH_CACHE_MAX_SIZE = 255;
  var STRING_HASH_CACHE_SIZE = 0;
  var stringHashCache = {};

  function assertNotInfinite(size) {
    invariant(size !== Infinity, 'Cannot perform this action with an infinite size.');
  }

  createClass(Map, KeyedCollection);

  function Map(value) {
    return value === null || value === undefined ? emptyMap() : isMap(value) && !isOrdered(value) ? value : emptyMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  Map.of = function () {
    var keyValues = SLICE$0.call(arguments, 0);
    return emptyMap().withMutations(function (map) {
      for (var i = 0; i < keyValues.length; i += 2) {
        if (i + 1 >= keyValues.length) {
          throw new Error('Missing value for key: ' + keyValues[i]);
        }
        map.set(keyValues[i], keyValues[i + 1]);
      }
    });
  };

  Map.prototype.toString = function () {
    return this.__toString('Map {', '}');
  };

  Map.prototype.get = function (k, notSetValue) {
    return this._root ? this._root.get(0, undefined, k, notSetValue) : notSetValue;
  };

  Map.prototype.set = function (k, v) {
    return updateMap(this, k, v);
  };

  Map.prototype.setIn = function (keyPath, v) {
    return this.updateIn(keyPath, NOT_SET, function () {
      return v;
    });
  };

  Map.prototype.remove = function (k) {
    return updateMap(this, k, NOT_SET);
  };

  Map.prototype.deleteIn = function (keyPath) {
    return this.updateIn(keyPath, function () {
      return NOT_SET;
    });
  };

  Map.prototype.update = function (k, notSetValue, updater) {
    return arguments.length === 1 ? k(this) : this.updateIn([k], notSetValue, updater);
  };

  Map.prototype.updateIn = function (keyPath, notSetValue, updater) {
    if (!updater) {
      updater = notSetValue;
      notSetValue = undefined;
    }
    var updatedValue = updateInDeepMap(this, forceIterator(keyPath), notSetValue, updater);
    return updatedValue === NOT_SET ? undefined : updatedValue;
  };

  Map.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._root = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyMap();
  };

  Map.prototype.merge = function () {
    return mergeIntoMapWith(this, undefined, arguments);
  };

  Map.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, merger, iters);
  };

  Map.prototype.mergeIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.merge === 'function' ? m.merge.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.mergeDeep = function () {
    return mergeIntoMapWith(this, deepMerger, arguments);
  };

  Map.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoMapWith(this, deepMergerWith(merger), iters);
  };

  Map.prototype.mergeDeepIn = function (keyPath) {
    var iters = SLICE$0.call(arguments, 1);
    return this.updateIn(keyPath, emptyMap(), function (m) {
      return typeof m.mergeDeep === 'function' ? m.mergeDeep.apply(m, iters) : iters[iters.length - 1];
    });
  };

  Map.prototype.sort = function (comparator) {
    return OrderedMap(sortFactory(this, comparator));
  };

  Map.prototype.sortBy = function (mapper, comparator) {
    return OrderedMap(sortFactory(this, comparator, mapper));
  };

  Map.prototype.withMutations = function (fn) {
    var mutable = this.asMutable();
    fn(mutable);
    return mutable.wasAltered() ? mutable.__ensureOwner(this.__ownerID) : this;
  };

  Map.prototype.asMutable = function () {
    return this.__ownerID ? this : this.__ensureOwner(new OwnerID());
  };

  Map.prototype.asImmutable = function () {
    return this.__ensureOwner();
  };

  Map.prototype.wasAltered = function () {
    return this.__altered;
  };

  Map.prototype.__iterator = function (type, reverse) {
    return new MapIterator(this, type, reverse);
  };

  Map.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    this._root && this._root.iterate(function (entry) {
      iterations++;
      return fn(entry[1], entry[0], this$0);
    }, reverse);
    return iterations;
  };

  Map.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeMap(this.size, this._root, ownerID, this.__hash);
  };

  function isMap(maybeMap) {
    return !!(maybeMap && maybeMap[IS_MAP_SENTINEL]);
  }

  Map.isMap = isMap;

  var IS_MAP_SENTINEL = '@@__IMMUTABLE_MAP__@@';

  var MapPrototype = Map.prototype;
  MapPrototype[IS_MAP_SENTINEL] = true;
  MapPrototype[DELETE] = MapPrototype.remove;
  MapPrototype.removeIn = MapPrototype.deleteIn;

  function ArrayMapNode(ownerID, entries) {
    this.ownerID = ownerID;
    this.entries = entries;
  }

  ArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  ArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && entries.length === 1) {
      return;
    }

    if (!exists && !removed && entries.length >= MAX_ARRAY_MAP_SIZE) {
      return createNodes(ownerID, entries, key, value);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new ArrayMapNode(ownerID, newEntries);
  };

  function BitmapIndexedNode(ownerID, bitmap, nodes) {
    this.ownerID = ownerID;
    this.bitmap = bitmap;
    this.nodes = nodes;
  }

  BitmapIndexedNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var bit = 1 << ((shift === 0 ? keyHash : keyHash >>> shift) & MASK);
    var bitmap = this.bitmap;
    return (bitmap & bit) === 0 ? notSetValue : this.nodes[popCount(bitmap & bit - 1)].get(shift + SHIFT, keyHash, key, notSetValue);
  };

  BitmapIndexedNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var keyHashFrag = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var bit = 1 << keyHashFrag;
    var bitmap = this.bitmap;
    var exists = (bitmap & bit) !== 0;

    if (!exists && value === NOT_SET) {
      return this;
    }

    var idx = popCount(bitmap & bit - 1);
    var nodes = this.nodes;
    var node = exists ? nodes[idx] : undefined;
    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);

    if (newNode === node) {
      return this;
    }

    if (!exists && newNode && nodes.length >= MAX_BITMAP_INDEXED_SIZE) {
      return expandNodes(ownerID, nodes, bitmap, keyHashFrag, newNode);
    }

    if (exists && !newNode && nodes.length === 2 && isLeafNode(nodes[idx ^ 1])) {
      return nodes[idx ^ 1];
    }

    if (exists && newNode && nodes.length === 1 && isLeafNode(newNode)) {
      return newNode;
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newBitmap = exists ? newNode ? bitmap : bitmap ^ bit : bitmap | bit;
    var newNodes = exists ? newNode ? setIn(nodes, idx, newNode, isEditable) : spliceOut(nodes, idx, isEditable) : spliceIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.bitmap = newBitmap;
      this.nodes = newNodes;
      return this;
    }

    return new BitmapIndexedNode(ownerID, newBitmap, newNodes);
  };

  function HashArrayMapNode(ownerID, count, nodes) {
    this.ownerID = ownerID;
    this.count = count;
    this.nodes = nodes;
  }

  HashArrayMapNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var node = this.nodes[idx];
    return node ? node.get(shift + SHIFT, keyHash, key, notSetValue) : notSetValue;
  };

  HashArrayMapNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }
    var idx = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;
    var removed = value === NOT_SET;
    var nodes = this.nodes;
    var node = nodes[idx];

    if (removed && !node) {
      return this;
    }

    var newNode = updateNode(node, ownerID, shift + SHIFT, keyHash, key, value, didChangeSize, didAlter);
    if (newNode === node) {
      return this;
    }

    var newCount = this.count;
    if (!node) {
      newCount++;
    } else if (!newNode) {
      newCount--;
      if (newCount < MIN_HASH_ARRAY_MAP_SIZE) {
        return packNodes(ownerID, nodes, newCount, idx);
      }
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newNodes = setIn(nodes, idx, newNode, isEditable);

    if (isEditable) {
      this.count = newCount;
      this.nodes = newNodes;
      return this;
    }

    return new HashArrayMapNode(ownerID, newCount, newNodes);
  };

  function HashCollisionNode(ownerID, keyHash, entries) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entries = entries;
  }

  HashCollisionNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    var entries = this.entries;
    for (var ii = 0, len = entries.length; ii < len; ii++) {
      if (is(key, entries[ii][0])) {
        return entries[ii][1];
      }
    }
    return notSetValue;
  };

  HashCollisionNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (keyHash === undefined) {
      keyHash = hash(key);
    }

    var removed = value === NOT_SET;

    if (keyHash !== this.keyHash) {
      if (removed) {
        return this;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return mergeIntoNode(this, ownerID, shift, keyHash, [key, value]);
    }

    var entries = this.entries;
    var idx = 0;
    for (var len = entries.length; idx < len; idx++) {
      if (is(key, entries[idx][0])) {
        break;
      }
    }
    var exists = idx < len;

    if (exists ? entries[idx][1] === value : removed) {
      return this;
    }

    SetRef(didAlter);
    (removed || !exists) && SetRef(didChangeSize);

    if (removed && len === 2) {
      return new ValueNode(ownerID, this.keyHash, entries[idx ^ 1]);
    }

    var isEditable = ownerID && ownerID === this.ownerID;
    var newEntries = isEditable ? entries : arrCopy(entries);

    if (exists) {
      if (removed) {
        idx === len - 1 ? newEntries.pop() : newEntries[idx] = newEntries.pop();
      } else {
        newEntries[idx] = [key, value];
      }
    } else {
      newEntries.push([key, value]);
    }

    if (isEditable) {
      this.entries = newEntries;
      return this;
    }

    return new HashCollisionNode(ownerID, this.keyHash, newEntries);
  };

  function ValueNode(ownerID, keyHash, entry) {
    this.ownerID = ownerID;
    this.keyHash = keyHash;
    this.entry = entry;
  }

  ValueNode.prototype.get = function (shift, keyHash, key, notSetValue) {
    return is(key, this.entry[0]) ? this.entry[1] : notSetValue;
  };

  ValueNode.prototype.update = function (ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    var removed = value === NOT_SET;
    var keyMatch = is(key, this.entry[0]);
    if (keyMatch ? value === this.entry[1] : removed) {
      return this;
    }

    SetRef(didAlter);

    if (removed) {
      SetRef(didChangeSize);
      return;
    }

    if (keyMatch) {
      if (ownerID && ownerID === this.ownerID) {
        this.entry[1] = value;
        return this;
      }
      return new ValueNode(ownerID, this.keyHash, [key, value]);
    }

    SetRef(didChangeSize);
    return mergeIntoNode(this, ownerID, shift, hash(key), [key, value]);
  };

  ArrayMapNode.prototype.iterate = HashCollisionNode.prototype.iterate = function (fn, reverse) {
    var entries = this.entries;
    for (var ii = 0, maxIndex = entries.length - 1; ii <= maxIndex; ii++) {
      if (fn(entries[reverse ? maxIndex - ii : ii]) === false) {
        return false;
      }
    }
  };

  BitmapIndexedNode.prototype.iterate = HashArrayMapNode.prototype.iterate = function (fn, reverse) {
    var nodes = this.nodes;
    for (var ii = 0, maxIndex = nodes.length - 1; ii <= maxIndex; ii++) {
      var node = nodes[reverse ? maxIndex - ii : ii];
      if (node && node.iterate(fn, reverse) === false) {
        return false;
      }
    }
  };

  ValueNode.prototype.iterate = function (fn, reverse) {
    return fn(this.entry);
  };

  createClass(MapIterator, Iterator);

  function MapIterator(map, type, reverse) {
    this._type = type;
    this._reverse = reverse;
    this._stack = map._root && mapIteratorFrame(map._root);
  }

  MapIterator.prototype.next = function () {
    var type = this._type;
    var stack = this._stack;
    while (stack) {
      var node = stack.node;
      var index = stack.index++;
      var maxIndex;
      if (node.entry) {
        if (index === 0) {
          return mapIteratorValue(type, node.entry);
        }
      } else if (node.entries) {
        maxIndex = node.entries.length - 1;
        if (index <= maxIndex) {
          return mapIteratorValue(type, node.entries[this._reverse ? maxIndex - index : index]);
        }
      } else {
        maxIndex = node.nodes.length - 1;
        if (index <= maxIndex) {
          var subNode = node.nodes[this._reverse ? maxIndex - index : index];
          if (subNode) {
            if (subNode.entry) {
              return mapIteratorValue(type, subNode.entry);
            }
            stack = this._stack = mapIteratorFrame(subNode, stack);
          }
          continue;
        }
      }
      stack = this._stack = this._stack.__prev;
    }
    return iteratorDone();
  };

  function mapIteratorValue(type, entry) {
    return iteratorValue(type, entry[0], entry[1]);
  }

  function mapIteratorFrame(node, prev) {
    return {
      node: node,
      index: 0,
      __prev: prev
    };
  }

  function makeMap(size, root, ownerID, hash) {
    var map = Object.create(MapPrototype);
    map.size = size;
    map._root = root;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_MAP;
  function emptyMap() {
    return EMPTY_MAP || (EMPTY_MAP = makeMap(0));
  }

  function updateMap(map, k, v) {
    var newRoot;
    var newSize;
    if (!map._root) {
      if (v === NOT_SET) {
        return map;
      }
      newSize = 1;
      newRoot = new ArrayMapNode(map.__ownerID, [[k, v]]);
    } else {
      var didChangeSize = MakeRef(CHANGE_LENGTH);
      var didAlter = MakeRef(DID_ALTER);
      newRoot = updateNode(map._root, map.__ownerID, 0, undefined, k, v, didChangeSize, didAlter);
      if (!didAlter.value) {
        return map;
      }
      newSize = map.size + (didChangeSize.value ? v === NOT_SET ? -1 : 1 : 0);
    }
    if (map.__ownerID) {
      map.size = newSize;
      map._root = newRoot;
      map.__hash = undefined;
      map.__altered = true;
      return map;
    }
    return newRoot ? makeMap(newSize, newRoot) : emptyMap();
  }

  function updateNode(node, ownerID, shift, keyHash, key, value, didChangeSize, didAlter) {
    if (!node) {
      if (value === NOT_SET) {
        return node;
      }
      SetRef(didAlter);
      SetRef(didChangeSize);
      return new ValueNode(ownerID, keyHash, [key, value]);
    }
    return node.update(ownerID, shift, keyHash, key, value, didChangeSize, didAlter);
  }

  function isLeafNode(node) {
    return node.constructor === ValueNode || node.constructor === HashCollisionNode;
  }

  function mergeIntoNode(node, ownerID, shift, keyHash, entry) {
    if (node.keyHash === keyHash) {
      return new HashCollisionNode(ownerID, keyHash, [node.entry, entry]);
    }

    var idx1 = (shift === 0 ? node.keyHash : node.keyHash >>> shift) & MASK;
    var idx2 = (shift === 0 ? keyHash : keyHash >>> shift) & MASK;

    var newNode;
    var nodes = idx1 === idx2 ? [mergeIntoNode(node, ownerID, shift + SHIFT, keyHash, entry)] : (newNode = new ValueNode(ownerID, keyHash, entry), idx1 < idx2 ? [node, newNode] : [newNode, node]);

    return new BitmapIndexedNode(ownerID, 1 << idx1 | 1 << idx2, nodes);
  }

  function createNodes(ownerID, entries, key, value) {
    if (!ownerID) {
      ownerID = new OwnerID();
    }
    var node = new ValueNode(ownerID, hash(key), [key, value]);
    for (var ii = 0; ii < entries.length; ii++) {
      var entry = entries[ii];
      node = node.update(ownerID, 0, undefined, entry[0], entry[1]);
    }
    return node;
  }

  function packNodes(ownerID, nodes, count, excluding) {
    var bitmap = 0;
    var packedII = 0;
    var packedNodes = new Array(count);
    for (var ii = 0, bit = 1, len = nodes.length; ii < len; ii++, bit <<= 1) {
      var node = nodes[ii];
      if (node !== undefined && ii !== excluding) {
        bitmap |= bit;
        packedNodes[packedII++] = node;
      }
    }
    return new BitmapIndexedNode(ownerID, bitmap, packedNodes);
  }

  function expandNodes(ownerID, nodes, bitmap, including, node) {
    var count = 0;
    var expandedNodes = new Array(SIZE);
    for (var ii = 0; bitmap !== 0; ii++, bitmap >>>= 1) {
      expandedNodes[ii] = bitmap & 1 ? nodes[count++] : undefined;
    }
    expandedNodes[including] = node;
    return new HashArrayMapNode(ownerID, count + 1, expandedNodes);
  }

  function mergeIntoMapWith(map, merger, iterables) {
    var iters = [];
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = KeyedIterable(value);
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    return mergeIntoCollectionWith(map, merger, iters);
  }

  function deepMerger(existing, value, key) {
    return existing && existing.mergeDeep && isIterable(value) ? existing.mergeDeep(value) : is(existing, value) ? existing : value;
  }

  function deepMergerWith(merger) {
    return function (existing, value, key) {
      if (existing && existing.mergeDeepWith && isIterable(value)) {
        return existing.mergeDeepWith(merger, value);
      }
      var nextValue = merger(existing, value, key);
      return is(existing, nextValue) ? existing : nextValue;
    };
  }

  function mergeIntoCollectionWith(collection, merger, iters) {
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return collection;
    }
    if (collection.size === 0 && !collection.__ownerID && iters.length === 1) {
      return collection.constructor(iters[0]);
    }
    return collection.withMutations(function (collection) {
      var mergeIntoMap = merger ? function (value, key) {
        collection.update(key, NOT_SET, function (existing) {
          return existing === NOT_SET ? value : merger(existing, value, key);
        });
      } : function (value, key) {
        collection.set(key, value);
      };
      for (var ii = 0; ii < iters.length; ii++) {
        iters[ii].forEach(mergeIntoMap);
      }
    });
  }

  function updateInDeepMap(existing, keyPathIter, notSetValue, updater) {
    var isNotSet = existing === NOT_SET;
    var step = keyPathIter.next();
    if (step.done) {
      var existingValue = isNotSet ? notSetValue : existing;
      var newValue = updater(existingValue);
      return newValue === existingValue ? existing : newValue;
    }
    invariant(isNotSet || existing && existing.set, 'invalid keyPath');
    var key = step.value;
    var nextExisting = isNotSet ? NOT_SET : existing.get(key, NOT_SET);
    var nextUpdated = updateInDeepMap(nextExisting, keyPathIter, notSetValue, updater);
    return nextUpdated === nextExisting ? existing : nextUpdated === NOT_SET ? existing.remove(key) : (isNotSet ? emptyMap() : existing).set(key, nextUpdated);
  }

  function popCount(x) {
    x = x - (x >> 1 & 0x55555555);
    x = (x & 0x33333333) + (x >> 2 & 0x33333333);
    x = x + (x >> 4) & 0x0f0f0f0f;
    x = x + (x >> 8);
    x = x + (x >> 16);
    return x & 0x7f;
  }

  function setIn(array, idx, val, canEdit) {
    var newArray = canEdit ? array : arrCopy(array);
    newArray[idx] = val;
    return newArray;
  }

  function spliceIn(array, idx, val, canEdit) {
    var newLen = array.length + 1;
    if (canEdit && idx + 1 === newLen) {
      array[idx] = val;
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        newArray[ii] = val;
        after = -1;
      } else {
        newArray[ii] = array[ii + after];
      }
    }
    return newArray;
  }

  function spliceOut(array, idx, canEdit) {
    var newLen = array.length - 1;
    if (canEdit && idx === newLen) {
      array.pop();
      return array;
    }
    var newArray = new Array(newLen);
    var after = 0;
    for (var ii = 0; ii < newLen; ii++) {
      if (ii === idx) {
        after = 1;
      }
      newArray[ii] = array[ii + after];
    }
    return newArray;
  }

  var MAX_ARRAY_MAP_SIZE = SIZE / 4;
  var MAX_BITMAP_INDEXED_SIZE = SIZE / 2;
  var MIN_HASH_ARRAY_MAP_SIZE = SIZE / 4;

  createClass(List, IndexedCollection);

  function List(value) {
    var empty = emptyList();
    if (value === null || value === undefined) {
      return empty;
    }
    if (isList(value)) {
      return value;
    }
    var iter = IndexedIterable(value);
    var size = iter.size;
    if (size === 0) {
      return empty;
    }
    assertNotInfinite(size);
    if (size > 0 && size < SIZE) {
      return makeList(0, size, SHIFT, null, new VNode(iter.toArray()));
    }
    return empty.withMutations(function (list) {
      list.setSize(size);
      iter.forEach(function (v, i) {
        return list.set(i, v);
      });
    });
  }

  List.of = function () {
    return this(arguments);
  };

  List.prototype.toString = function () {
    return this.__toString('List [', ']');
  };

  List.prototype.get = function (index, notSetValue) {
    index = wrapIndex(this, index);
    if (index >= 0 && index < this.size) {
      index += this._origin;
      var node = listNodeFor(this, index);
      return node && node.array[index & MASK];
    }
    return notSetValue;
  };

  List.prototype.set = function (index, value) {
    return updateList(this, index, value);
  };

  List.prototype.remove = function (index) {
    return !this.has(index) ? this : index === 0 ? this.shift() : index === this.size - 1 ? this.pop() : this.splice(index, 1);
  };

  List.prototype.insert = function (index, value) {
    return this.splice(index, 0, value);
  };

  List.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = this._origin = this._capacity = 0;
      this._level = SHIFT;
      this._root = this._tail = null;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyList();
  };

  List.prototype.push = function () {
    var values = arguments;
    var oldSize = this.size;
    return this.withMutations(function (list) {
      setListBounds(list, 0, oldSize + values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(oldSize + ii, values[ii]);
      }
    });
  };

  List.prototype.pop = function () {
    return setListBounds(this, 0, -1);
  };

  List.prototype.unshift = function () {
    var values = arguments;
    return this.withMutations(function (list) {
      setListBounds(list, -values.length);
      for (var ii = 0; ii < values.length; ii++) {
        list.set(ii, values[ii]);
      }
    });
  };

  List.prototype.shift = function () {
    return setListBounds(this, 1);
  };

  List.prototype.merge = function () {
    return mergeIntoListWith(this, undefined, arguments);
  };

  List.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, merger, iters);
  };

  List.prototype.mergeDeep = function () {
    return mergeIntoListWith(this, deepMerger, arguments);
  };

  List.prototype.mergeDeepWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return mergeIntoListWith(this, deepMergerWith(merger), iters);
  };

  List.prototype.setSize = function (size) {
    return setListBounds(this, 0, size);
  };

  List.prototype.slice = function (begin, end) {
    var size = this.size;
    if (wholeSlice(begin, end, size)) {
      return this;
    }
    return setListBounds(this, resolveBegin(begin, size), resolveEnd(end, size));
  };

  List.prototype.__iterator = function (type, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    return new Iterator(function () {
      var value = values();
      return value === DONE ? iteratorDone() : iteratorValue(type, index++, value);
    });
  };

  List.prototype.__iterate = function (fn, reverse) {
    var index = 0;
    var values = iterateList(this, reverse);
    var value;
    while ((value = values()) !== DONE) {
      if (fn(value, index++, this) === false) {
        break;
      }
    }
    return index;
  };

  List.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      return this;
    }
    return makeList(this._origin, this._capacity, this._level, this._root, this._tail, ownerID, this.__hash);
  };

  function isList(maybeList) {
    return !!(maybeList && maybeList[IS_LIST_SENTINEL]);
  }

  List.isList = isList;

  var IS_LIST_SENTINEL = '@@__IMMUTABLE_LIST__@@';

  var ListPrototype = List.prototype;
  ListPrototype[IS_LIST_SENTINEL] = true;
  ListPrototype[DELETE] = ListPrototype.remove;
  ListPrototype.setIn = MapPrototype.setIn;
  ListPrototype.deleteIn = ListPrototype.removeIn = MapPrototype.removeIn;
  ListPrototype.update = MapPrototype.update;
  ListPrototype.updateIn = MapPrototype.updateIn;
  ListPrototype.mergeIn = MapPrototype.mergeIn;
  ListPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  ListPrototype.withMutations = MapPrototype.withMutations;
  ListPrototype.asMutable = MapPrototype.asMutable;
  ListPrototype.asImmutable = MapPrototype.asImmutable;
  ListPrototype.wasAltered = MapPrototype.wasAltered;

  function VNode(array, ownerID) {
    this.array = array;
    this.ownerID = ownerID;
  }

  VNode.prototype.removeBefore = function (ownerID, level, index) {
    if (index === level ? 1 << level : 0 || this.array.length === 0) {
      return this;
    }
    var originIndex = index >>> level & MASK;
    if (originIndex >= this.array.length) {
      return new VNode([], ownerID);
    }
    var removingFirst = originIndex === 0;
    var newChild;
    if (level > 0) {
      var oldChild = this.array[originIndex];
      newChild = oldChild && oldChild.removeBefore(ownerID, level - SHIFT, index);
      if (newChild === oldChild && removingFirst) {
        return this;
      }
    }
    if (removingFirst && !newChild) {
      return this;
    }
    var editable = editableVNode(this, ownerID);
    if (!removingFirst) {
      for (var ii = 0; ii < originIndex; ii++) {
        editable.array[ii] = undefined;
      }
    }
    if (newChild) {
      editable.array[originIndex] = newChild;
    }
    return editable;
  };

  VNode.prototype.removeAfter = function (ownerID, level, index) {
    if (index === (level ? 1 << level : 0) || this.array.length === 0) {
      return this;
    }
    var sizeIndex = index - 1 >>> level & MASK;
    if (sizeIndex >= this.array.length) {
      return this;
    }

    var newChild;
    if (level > 0) {
      var oldChild = this.array[sizeIndex];
      newChild = oldChild && oldChild.removeAfter(ownerID, level - SHIFT, index);
      if (newChild === oldChild && sizeIndex === this.array.length - 1) {
        return this;
      }
    }

    var editable = editableVNode(this, ownerID);
    editable.array.splice(sizeIndex + 1);
    if (newChild) {
      editable.array[sizeIndex] = newChild;
    }
    return editable;
  };

  var DONE = {};

  function iterateList(list, reverse) {
    var left = list._origin;
    var right = list._capacity;
    var tailPos = getTailOffset(right);
    var tail = list._tail;

    return iterateNodeOrLeaf(list._root, list._level, 0);

    function iterateNodeOrLeaf(node, level, offset) {
      return level === 0 ? iterateLeaf(node, offset) : iterateNode(node, level, offset);
    }

    function iterateLeaf(node, offset) {
      var array = offset === tailPos ? tail && tail.array : node && node.array;
      var from = offset > left ? 0 : left - offset;
      var to = right - offset;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        if (from === to) {
          return DONE;
        }
        var idx = reverse ? --to : from++;
        return array && array[idx];
      };
    }

    function iterateNode(node, level, offset) {
      var values;
      var array = node && node.array;
      var from = offset > left ? 0 : left - offset >> level;
      var to = (right - offset >> level) + 1;
      if (to > SIZE) {
        to = SIZE;
      }
      return function () {
        do {
          if (values) {
            var value = values();
            if (value !== DONE) {
              return value;
            }
            values = null;
          }
          if (from === to) {
            return DONE;
          }
          var idx = reverse ? --to : from++;
          values = iterateNodeOrLeaf(array && array[idx], level - SHIFT, offset + (idx << level));
        } while (true);
      };
    }
  }

  function makeList(origin, capacity, level, root, tail, ownerID, hash) {
    var list = Object.create(ListPrototype);
    list.size = capacity - origin;
    list._origin = origin;
    list._capacity = capacity;
    list._level = level;
    list._root = root;
    list._tail = tail;
    list.__ownerID = ownerID;
    list.__hash = hash;
    list.__altered = false;
    return list;
  }

  var EMPTY_LIST;
  function emptyList() {
    return EMPTY_LIST || (EMPTY_LIST = makeList(0, 0, SHIFT));
  }

  function updateList(list, index, value) {
    index = wrapIndex(list, index);

    if (index !== index) {
      return list;
    }

    if (index >= list.size || index < 0) {
      return list.withMutations(function (list) {
        index < 0 ? setListBounds(list, index).set(0, value) : setListBounds(list, 0, index + 1).set(index, value);
      });
    }

    index += list._origin;

    var newTail = list._tail;
    var newRoot = list._root;
    var didAlter = MakeRef(DID_ALTER);
    if (index >= getTailOffset(list._capacity)) {
      newTail = updateVNode(newTail, list.__ownerID, 0, index, value, didAlter);
    } else {
      newRoot = updateVNode(newRoot, list.__ownerID, list._level, index, value, didAlter);
    }

    if (!didAlter.value) {
      return list;
    }

    if (list.__ownerID) {
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(list._origin, list._capacity, list._level, newRoot, newTail);
  }

  function updateVNode(node, ownerID, level, index, value, didAlter) {
    var idx = index >>> level & MASK;
    var nodeHas = node && idx < node.array.length;
    if (!nodeHas && value === undefined) {
      return node;
    }

    var newNode;

    if (level > 0) {
      var lowerNode = node && node.array[idx];
      var newLowerNode = updateVNode(lowerNode, ownerID, level - SHIFT, index, value, didAlter);
      if (newLowerNode === lowerNode) {
        return node;
      }
      newNode = editableVNode(node, ownerID);
      newNode.array[idx] = newLowerNode;
      return newNode;
    }

    if (nodeHas && node.array[idx] === value) {
      return node;
    }

    SetRef(didAlter);

    newNode = editableVNode(node, ownerID);
    if (value === undefined && idx === newNode.array.length - 1) {
      newNode.array.pop();
    } else {
      newNode.array[idx] = value;
    }
    return newNode;
  }

  function editableVNode(node, ownerID) {
    if (ownerID && node && ownerID === node.ownerID) {
      return node;
    }
    return new VNode(node ? node.array.slice() : [], ownerID);
  }

  function listNodeFor(list, rawIndex) {
    if (rawIndex >= getTailOffset(list._capacity)) {
      return list._tail;
    }
    if (rawIndex < 1 << list._level + SHIFT) {
      var node = list._root;
      var level = list._level;
      while (node && level > 0) {
        node = node.array[rawIndex >>> level & MASK];
        level -= SHIFT;
      }
      return node;
    }
  }

  function setListBounds(list, begin, end) {
    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      end = end | 0;
    }
    var owner = list.__ownerID || new OwnerID();
    var oldOrigin = list._origin;
    var oldCapacity = list._capacity;
    var newOrigin = oldOrigin + begin;
    var newCapacity = end === undefined ? oldCapacity : end < 0 ? oldCapacity + end : oldOrigin + end;
    if (newOrigin === oldOrigin && newCapacity === oldCapacity) {
      return list;
    }

    if (newOrigin >= newCapacity) {
      return list.clear();
    }

    var newLevel = list._level;
    var newRoot = list._root;

    var offsetShift = 0;
    while (newOrigin + offsetShift < 0) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [undefined, newRoot] : [], owner);
      newLevel += SHIFT;
      offsetShift += 1 << newLevel;
    }
    if (offsetShift) {
      newOrigin += offsetShift;
      oldOrigin += offsetShift;
      newCapacity += offsetShift;
      oldCapacity += offsetShift;
    }

    var oldTailOffset = getTailOffset(oldCapacity);
    var newTailOffset = getTailOffset(newCapacity);

    while (newTailOffset >= 1 << newLevel + SHIFT) {
      newRoot = new VNode(newRoot && newRoot.array.length ? [newRoot] : [], owner);
      newLevel += SHIFT;
    }

    var oldTail = list._tail;
    var newTail = newTailOffset < oldTailOffset ? listNodeFor(list, newCapacity - 1) : newTailOffset > oldTailOffset ? new VNode([], owner) : oldTail;

    if (oldTail && newTailOffset > oldTailOffset && newOrigin < oldCapacity && oldTail.array.length) {
      newRoot = editableVNode(newRoot, owner);
      var node = newRoot;
      for (var level = newLevel; level > SHIFT; level -= SHIFT) {
        var idx = oldTailOffset >>> level & MASK;
        node = node.array[idx] = editableVNode(node.array[idx], owner);
      }
      node.array[oldTailOffset >>> SHIFT & MASK] = oldTail;
    }

    if (newCapacity < oldCapacity) {
      newTail = newTail && newTail.removeAfter(owner, 0, newCapacity);
    }

    if (newOrigin >= newTailOffset) {
      newOrigin -= newTailOffset;
      newCapacity -= newTailOffset;
      newLevel = SHIFT;
      newRoot = null;
      newTail = newTail && newTail.removeBefore(owner, 0, newOrigin);
    } else if (newOrigin > oldOrigin || newTailOffset < oldTailOffset) {
      offsetShift = 0;

      while (newRoot) {
        var beginIndex = newOrigin >>> newLevel & MASK;
        if (beginIndex !== newTailOffset >>> newLevel & MASK) {
          break;
        }
        if (beginIndex) {
          offsetShift += (1 << newLevel) * beginIndex;
        }
        newLevel -= SHIFT;
        newRoot = newRoot.array[beginIndex];
      }

      if (newRoot && newOrigin > oldOrigin) {
        newRoot = newRoot.removeBefore(owner, newLevel, newOrigin - offsetShift);
      }
      if (newRoot && newTailOffset < oldTailOffset) {
        newRoot = newRoot.removeAfter(owner, newLevel, newTailOffset - offsetShift);
      }
      if (offsetShift) {
        newOrigin -= offsetShift;
        newCapacity -= offsetShift;
      }
    }

    if (list.__ownerID) {
      list.size = newCapacity - newOrigin;
      list._origin = newOrigin;
      list._capacity = newCapacity;
      list._level = newLevel;
      list._root = newRoot;
      list._tail = newTail;
      list.__hash = undefined;
      list.__altered = true;
      return list;
    }
    return makeList(newOrigin, newCapacity, newLevel, newRoot, newTail);
  }

  function mergeIntoListWith(list, merger, iterables) {
    var iters = [];
    var maxSize = 0;
    for (var ii = 0; ii < iterables.length; ii++) {
      var value = iterables[ii];
      var iter = IndexedIterable(value);
      if (iter.size > maxSize) {
        maxSize = iter.size;
      }
      if (!isIterable(value)) {
        iter = iter.map(function (v) {
          return fromJS(v);
        });
      }
      iters.push(iter);
    }
    if (maxSize > list.size) {
      list = list.setSize(maxSize);
    }
    return mergeIntoCollectionWith(list, merger, iters);
  }

  function getTailOffset(size) {
    return size < SIZE ? 0 : size - 1 >>> SHIFT << SHIFT;
  }

  createClass(OrderedMap, Map);

  function OrderedMap(value) {
    return value === null || value === undefined ? emptyOrderedMap() : isOrderedMap(value) ? value : emptyOrderedMap().withMutations(function (map) {
      var iter = KeyedIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v, k) {
        return map.set(k, v);
      });
    });
  }

  OrderedMap.of = function () {
    return this(arguments);
  };

  OrderedMap.prototype.toString = function () {
    return this.__toString('OrderedMap {', '}');
  };

  OrderedMap.prototype.get = function (k, notSetValue) {
    var index = this._map.get(k);
    return index !== undefined ? this._list.get(index)[1] : notSetValue;
  };

  OrderedMap.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._map.clear();
      this._list.clear();
      return this;
    }
    return emptyOrderedMap();
  };

  OrderedMap.prototype.set = function (k, v) {
    return updateOrderedMap(this, k, v);
  };

  OrderedMap.prototype.remove = function (k) {
    return updateOrderedMap(this, k, NOT_SET);
  };

  OrderedMap.prototype.wasAltered = function () {
    return this._map.wasAltered() || this._list.wasAltered();
  };

  OrderedMap.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._list.__iterate(function (entry) {
      return entry && fn(entry[1], entry[0], this$0);
    }, reverse);
  };

  OrderedMap.prototype.__iterator = function (type, reverse) {
    return this._list.fromEntrySeq().__iterator(type, reverse);
  };

  OrderedMap.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    var newList = this._list.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      this._list = newList;
      return this;
    }
    return makeOrderedMap(newMap, newList, ownerID, this.__hash);
  };

  function isOrderedMap(maybeOrderedMap) {
    return isMap(maybeOrderedMap) && isOrdered(maybeOrderedMap);
  }

  OrderedMap.isOrderedMap = isOrderedMap;

  OrderedMap.prototype[IS_ORDERED_SENTINEL] = true;
  OrderedMap.prototype[DELETE] = OrderedMap.prototype.remove;

  function makeOrderedMap(map, list, ownerID, hash) {
    var omap = Object.create(OrderedMap.prototype);
    omap.size = map ? map.size : 0;
    omap._map = map;
    omap._list = list;
    omap.__ownerID = ownerID;
    omap.__hash = hash;
    return omap;
  }

  var EMPTY_ORDERED_MAP;
  function emptyOrderedMap() {
    return EMPTY_ORDERED_MAP || (EMPTY_ORDERED_MAP = makeOrderedMap(emptyMap(), emptyList()));
  }

  function updateOrderedMap(omap, k, v) {
    var map = omap._map;
    var list = omap._list;
    var i = map.get(k);
    var has = i !== undefined;
    var newMap;
    var newList;
    if (v === NOT_SET) {
      if (!has) {
        return omap;
      }
      if (list.size >= SIZE && list.size >= map.size * 2) {
        newList = list.filter(function (entry, idx) {
          return entry !== undefined && i !== idx;
        });
        newMap = newList.toKeyedSeq().map(function (entry) {
          return entry[0];
        }).flip().toMap();
        if (omap.__ownerID) {
          newMap.__ownerID = newList.__ownerID = omap.__ownerID;
        }
      } else {
        newMap = map.remove(k);
        newList = i === list.size - 1 ? list.pop() : list.set(i, undefined);
      }
    } else {
      if (has) {
        if (v === list.get(i)[1]) {
          return omap;
        }
        newMap = map;
        newList = list.set(i, [k, v]);
      } else {
        newMap = map.set(k, list.size);
        newList = list.set(list.size, [k, v]);
      }
    }
    if (omap.__ownerID) {
      omap.size = newMap.size;
      omap._map = newMap;
      omap._list = newList;
      omap.__hash = undefined;
      return omap;
    }
    return makeOrderedMap(newMap, newList);
  }

  createClass(ToKeyedSequence, KeyedSeq);
  function ToKeyedSequence(indexed, useKeys) {
    this._iter = indexed;
    this._useKeys = useKeys;
    this.size = indexed.size;
  }

  ToKeyedSequence.prototype.get = function (key, notSetValue) {
    return this._iter.get(key, notSetValue);
  };

  ToKeyedSequence.prototype.has = function (key) {
    return this._iter.has(key);
  };

  ToKeyedSequence.prototype.valueSeq = function () {
    return this._iter.valueSeq();
  };

  ToKeyedSequence.prototype.reverse = function () {
    var this$0 = this;
    var reversedSequence = reverseFactory(this, true);
    if (!this._useKeys) {
      reversedSequence.valueSeq = function () {
        return this$0._iter.toSeq().reverse();
      };
    }
    return reversedSequence;
  };

  ToKeyedSequence.prototype.map = function (mapper, context) {
    var this$0 = this;
    var mappedSequence = mapFactory(this, mapper, context);
    if (!this._useKeys) {
      mappedSequence.valueSeq = function () {
        return this$0._iter.toSeq().map(mapper, context);
      };
    }
    return mappedSequence;
  };

  ToKeyedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var ii;
    return this._iter.__iterate(this._useKeys ? function (v, k) {
      return fn(v, k, this$0);
    } : (ii = reverse ? resolveSize(this) : 0, function (v) {
      return fn(v, reverse ? --ii : ii++, this$0);
    }), reverse);
  };

  ToKeyedSequence.prototype.__iterator = function (type, reverse) {
    if (this._useKeys) {
      return this._iter.__iterator(type, reverse);
    }
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var ii = reverse ? resolveSize(this) : 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, reverse ? --ii : ii++, step.value, step);
    });
  };

  ToKeyedSequence.prototype[IS_ORDERED_SENTINEL] = true;

  createClass(ToIndexedSequence, IndexedSeq);
  function ToIndexedSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToIndexedSequence.prototype.includes = function (value) {
    return this._iter.includes(value);
  };

  ToIndexedSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    var iterations = 0;
    return this._iter.__iterate(function (v) {
      return fn(v, iterations++, this$0);
    }, reverse);
  };

  ToIndexedSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    var iterations = 0;
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, iterations++, step.value, step);
    });
  };

  createClass(ToSetSequence, SetSeq);
  function ToSetSequence(iter) {
    this._iter = iter;
    this.size = iter.size;
  }

  ToSetSequence.prototype.has = function (key) {
    return this._iter.includes(key);
  };

  ToSetSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (v) {
      return fn(v, v, this$0);
    }, reverse);
  };

  ToSetSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      var step = iterator.next();
      return step.done ? step : iteratorValue(type, step.value, step.value, step);
    });
  };

  createClass(FromEntriesSequence, KeyedSeq);
  function FromEntriesSequence(entries) {
    this._iter = entries;
    this.size = entries.size;
  }

  FromEntriesSequence.prototype.entrySeq = function () {
    return this._iter.toSeq();
  };

  FromEntriesSequence.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._iter.__iterate(function (entry) {
      if (entry) {
        validateEntry(entry);
        var indexedIterable = isIterable(entry);
        return fn(indexedIterable ? entry.get(1) : entry[1], indexedIterable ? entry.get(0) : entry[0], this$0);
      }
    }, reverse);
  };

  FromEntriesSequence.prototype.__iterator = function (type, reverse) {
    var iterator = this._iter.__iterator(ITERATE_VALUES, reverse);
    return new Iterator(function () {
      while (true) {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;

        if (entry) {
          validateEntry(entry);
          var indexedIterable = isIterable(entry);
          return iteratorValue(type, indexedIterable ? entry.get(0) : entry[0], indexedIterable ? entry.get(1) : entry[1], step);
        }
      }
    });
  };

  ToIndexedSequence.prototype.cacheResult = ToKeyedSequence.prototype.cacheResult = ToSetSequence.prototype.cacheResult = FromEntriesSequence.prototype.cacheResult = cacheResultThrough;

  function flipFactory(iterable) {
    var flipSequence = makeSequence(iterable);
    flipSequence._iter = iterable;
    flipSequence.size = iterable.size;
    flipSequence.flip = function () {
      return iterable;
    };
    flipSequence.reverse = function () {
      var reversedSequence = iterable.reverse.apply(this);
      reversedSequence.flip = function () {
        return iterable.reverse();
      };
      return reversedSequence;
    };
    flipSequence.has = function (key) {
      return iterable.includes(key);
    };
    flipSequence.includes = function (key) {
      return iterable.has(key);
    };
    flipSequence.cacheResult = cacheResultThrough;
    flipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(k, v, this$0) !== false;
      }, reverse);
    };
    flipSequence.__iteratorUncached = function (type, reverse) {
      if (type === ITERATE_ENTRIES) {
        var iterator = iterable.__iterator(type, reverse);
        return new Iterator(function () {
          var step = iterator.next();
          if (!step.done) {
            var k = step.value[0];
            step.value[0] = step.value[1];
            step.value[1] = k;
          }
          return step;
        });
      }
      return iterable.__iterator(type === ITERATE_VALUES ? ITERATE_KEYS : ITERATE_VALUES, reverse);
    };
    return flipSequence;
  }

  function mapFactory(iterable, mapper, context) {
    var mappedSequence = makeSequence(iterable);
    mappedSequence.size = iterable.size;
    mappedSequence.has = function (key) {
      return iterable.has(key);
    };
    mappedSequence.get = function (key, notSetValue) {
      var v = iterable.get(key, NOT_SET);
      return v === NOT_SET ? notSetValue : mapper.call(context, v, key, iterable);
    };
    mappedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k, c) {
        return fn(mapper.call(context, v, k, c), k, this$0) !== false;
      }, reverse);
    };
    mappedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      return new Iterator(function () {
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var key = entry[0];
        return iteratorValue(type, key, mapper.call(context, entry[1], key, iterable), step);
      });
    };
    return mappedSequence;
  }

  function reverseFactory(iterable, useKeys) {
    var reversedSequence = makeSequence(iterable);
    reversedSequence._iter = iterable;
    reversedSequence.size = iterable.size;
    reversedSequence.reverse = function () {
      return iterable;
    };
    if (iterable.flip) {
      reversedSequence.flip = function () {
        var flipSequence = flipFactory(iterable);
        flipSequence.reverse = function () {
          return iterable.flip();
        };
        return flipSequence;
      };
    }
    reversedSequence.get = function (key, notSetValue) {
      return iterable.get(useKeys ? key : -1 - key, notSetValue);
    };
    reversedSequence.has = function (key) {
      return iterable.has(useKeys ? key : -1 - key);
    };
    reversedSequence.includes = function (value) {
      return iterable.includes(value);
    };
    reversedSequence.cacheResult = cacheResultThrough;
    reversedSequence.__iterate = function (fn, reverse) {
      var this$0 = this;
      return iterable.__iterate(function (v, k) {
        return fn(v, k, this$0);
      }, !reverse);
    };
    reversedSequence.__iterator = function (type, reverse) {
      return iterable.__iterator(type, !reverse);
    };
    return reversedSequence;
  }

  function filterFactory(iterable, predicate, context, useKeys) {
    var filterSequence = makeSequence(iterable);
    if (useKeys) {
      filterSequence.has = function (key) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && !!predicate.call(context, v, key, iterable);
      };
      filterSequence.get = function (key, notSetValue) {
        var v = iterable.get(key, NOT_SET);
        return v !== NOT_SET && predicate.call(context, v, key, iterable) ? v : notSetValue;
      };
    }
    filterSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      }, reverse);
      return iterations;
    };
    filterSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterations = 0;
      return new Iterator(function () {
        while (true) {
          var step = iterator.next();
          if (step.done) {
            return step;
          }
          var entry = step.value;
          var key = entry[0];
          var value = entry[1];
          if (predicate.call(context, value, key, iterable)) {
            return iteratorValue(type, useKeys ? key : iterations++, value, step);
          }
        }
      });
    };
    return filterSequence;
  }

  function countByFactory(iterable, grouper, context) {
    var groups = Map().asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), 0, function (a) {
        return a + 1;
      });
    });
    return groups.asImmutable();
  }

  function groupByFactory(iterable, grouper, context) {
    var isKeyedIter = isKeyed(iterable);
    var groups = (isOrdered(iterable) ? OrderedMap() : Map()).asMutable();
    iterable.__iterate(function (v, k) {
      groups.update(grouper.call(context, v, k, iterable), function (a) {
        return a = a || [], a.push(isKeyedIter ? [k, v] : v), a;
      });
    });
    var coerce = iterableClass(iterable);
    return groups.map(function (arr) {
      return reify(iterable, coerce(arr));
    });
  }

  function sliceFactory(iterable, begin, end, useKeys) {
    var originalSize = iterable.size;

    if (begin !== undefined) {
      begin = begin | 0;
    }
    if (end !== undefined) {
      if (end === Infinity) {
        end = originalSize;
      } else {
        end = end | 0;
      }
    }

    if (wholeSlice(begin, end, originalSize)) {
      return iterable;
    }

    var resolvedBegin = resolveBegin(begin, originalSize);
    var resolvedEnd = resolveEnd(end, originalSize);

    if (resolvedBegin !== resolvedBegin || resolvedEnd !== resolvedEnd) {
      return sliceFactory(iterable.toSeq().cacheResult(), begin, end, useKeys);
    }

    var resolvedSize = resolvedEnd - resolvedBegin;
    var sliceSize;
    if (resolvedSize === resolvedSize) {
      sliceSize = resolvedSize < 0 ? 0 : resolvedSize;
    }

    var sliceSeq = makeSequence(iterable);

    sliceSeq.size = sliceSize === 0 ? sliceSize : iterable.size && sliceSize || undefined;

    if (!useKeys && isSeq(iterable) && sliceSize >= 0) {
      sliceSeq.get = function (index, notSetValue) {
        index = wrapIndex(this, index);
        return index >= 0 && index < sliceSize ? iterable.get(index + resolvedBegin, notSetValue) : notSetValue;
      };
    }

    sliceSeq.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (sliceSize === 0) {
        return 0;
      }
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var skipped = 0;
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        if (!(isSkipping && (isSkipping = skipped++ < resolvedBegin))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0) !== false && iterations !== sliceSize;
        }
      });
      return iterations;
    };

    sliceSeq.__iteratorUncached = function (type, reverse) {
      if (sliceSize !== 0 && reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }

      var iterator = sliceSize !== 0 && iterable.__iterator(type, reverse);
      var skipped = 0;
      var iterations = 0;
      return new Iterator(function () {
        while (skipped++ < resolvedBegin) {
          iterator.next();
        }
        if (++iterations > sliceSize) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (useKeys || type === ITERATE_VALUES) {
          return step;
        } else if (type === ITERATE_KEYS) {
          return iteratorValue(type, iterations - 1, undefined, step);
        } else {
          return iteratorValue(type, iterations - 1, step.value[1], step);
        }
      });
    };

    return sliceSeq;
  }

  function takeWhileFactory(iterable, predicate, context) {
    var takeSequence = makeSequence(iterable);
    takeSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        return predicate.call(context, v, k, c) && ++iterations && fn(v, k, this$0);
      });
      return iterations;
    };
    takeSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var iterating = true;
      return new Iterator(function () {
        if (!iterating) {
          return iteratorDone();
        }
        var step = iterator.next();
        if (step.done) {
          return step;
        }
        var entry = step.value;
        var k = entry[0];
        var v = entry[1];
        if (!predicate.call(context, v, k, this$0)) {
          iterating = false;
          return iteratorDone();
        }
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return takeSequence;
  }

  function skipWhileFactory(iterable, predicate, context, useKeys) {
    var skipSequence = makeSequence(iterable);
    skipSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterate(fn, reverse);
      }
      var isSkipping = true;
      var iterations = 0;
      iterable.__iterate(function (v, k, c) {
        if (!(isSkipping && (isSkipping = predicate.call(context, v, k, c)))) {
          iterations++;
          return fn(v, useKeys ? k : iterations - 1, this$0);
        }
      });
      return iterations;
    };
    skipSequence.__iteratorUncached = function (type, reverse) {
      var this$0 = this;
      if (reverse) {
        return this.cacheResult().__iterator(type, reverse);
      }
      var iterator = iterable.__iterator(ITERATE_ENTRIES, reverse);
      var skipping = true;
      var iterations = 0;
      return new Iterator(function () {
        var step, k, v;
        do {
          step = iterator.next();
          if (step.done) {
            if (useKeys || type === ITERATE_VALUES) {
              return step;
            } else if (type === ITERATE_KEYS) {
              return iteratorValue(type, iterations++, undefined, step);
            } else {
              return iteratorValue(type, iterations++, step.value[1], step);
            }
          }
          var entry = step.value;
          k = entry[0];
          v = entry[1];
          skipping && (skipping = predicate.call(context, v, k, this$0));
        } while (skipping);
        return type === ITERATE_ENTRIES ? step : iteratorValue(type, k, v, step);
      });
    };
    return skipSequence;
  }

  function concatFactory(iterable, values) {
    var isKeyedIterable = isKeyed(iterable);
    var iters = [iterable].concat(values).map(function (v) {
      if (!isIterable(v)) {
        v = isKeyedIterable ? keyedSeqFromValue(v) : indexedSeqFromValue(Array.isArray(v) ? v : [v]);
      } else if (isKeyedIterable) {
        v = KeyedIterable(v);
      }
      return v;
    }).filter(function (v) {
      return v.size !== 0;
    });

    if (iters.length === 0) {
      return iterable;
    }

    if (iters.length === 1) {
      var singleton = iters[0];
      if (singleton === iterable || isKeyedIterable && isKeyed(singleton) || isIndexed(iterable) && isIndexed(singleton)) {
        return singleton;
      }
    }

    var concatSeq = new ArraySeq(iters);
    if (isKeyedIterable) {
      concatSeq = concatSeq.toKeyedSeq();
    } else if (!isIndexed(iterable)) {
      concatSeq = concatSeq.toSetSeq();
    }
    concatSeq = concatSeq.flatten(true);
    concatSeq.size = iters.reduce(function (sum, seq) {
      if (sum !== undefined) {
        var size = seq.size;
        if (size !== undefined) {
          return sum + size;
        }
      }
    }, 0);
    return concatSeq;
  }

  function flattenFactory(iterable, depth, useKeys) {
    var flatSequence = makeSequence(iterable);
    flatSequence.__iterateUncached = function (fn, reverse) {
      var iterations = 0;
      var stopped = false;
      function flatDeep(iter, currentDepth) {
        var this$0 = this;
        iter.__iterate(function (v, k) {
          if ((!depth || currentDepth < depth) && isIterable(v)) {
            flatDeep(v, currentDepth + 1);
          } else if (fn(v, useKeys ? k : iterations++, this$0) === false) {
            stopped = true;
          }
          return !stopped;
        }, reverse);
      }
      flatDeep(iterable, 0);
      return iterations;
    };
    flatSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(type, reverse);
      var stack = [];
      var iterations = 0;
      return new Iterator(function () {
        while (iterator) {
          var step = iterator.next();
          if (step.done !== false) {
            iterator = stack.pop();
            continue;
          }
          var v = step.value;
          if (type === ITERATE_ENTRIES) {
            v = v[1];
          }
          if ((!depth || stack.length < depth) && isIterable(v)) {
            stack.push(iterator);
            iterator = v.__iterator(type, reverse);
          } else {
            return useKeys ? step : iteratorValue(type, iterations++, v, step);
          }
        }
        return iteratorDone();
      });
    };
    return flatSequence;
  }

  function flatMapFactory(iterable, mapper, context) {
    var coerce = iterableClass(iterable);
    return iterable.toSeq().map(function (v, k) {
      return coerce(mapper.call(context, v, k, iterable));
    }).flatten(true);
  }

  function interposeFactory(iterable, separator) {
    var interposedSequence = makeSequence(iterable);
    interposedSequence.size = iterable.size && iterable.size * 2 - 1;
    interposedSequence.__iterateUncached = function (fn, reverse) {
      var this$0 = this;
      var iterations = 0;
      iterable.__iterate(function (v, k) {
        return (!iterations || fn(separator, iterations++, this$0) !== false) && fn(v, iterations++, this$0) !== false;
      }, reverse);
      return iterations;
    };
    interposedSequence.__iteratorUncached = function (type, reverse) {
      var iterator = iterable.__iterator(ITERATE_VALUES, reverse);
      var iterations = 0;
      var step;
      return new Iterator(function () {
        if (!step || iterations % 2) {
          step = iterator.next();
          if (step.done) {
            return step;
          }
        }
        return iterations % 2 ? iteratorValue(type, iterations++, separator) : iteratorValue(type, iterations++, step.value, step);
      });
    };
    return interposedSequence;
  }

  function sortFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    var isKeyedIterable = isKeyed(iterable);
    var index = 0;
    var entries = iterable.toSeq().map(function (v, k) {
      return [k, v, index++, mapper ? mapper(v, k, iterable) : v];
    }).toArray();
    entries.sort(function (a, b) {
      return comparator(a[3], b[3]) || a[2] - b[2];
    }).forEach(isKeyedIterable ? function (v, i) {
      entries[i].length = 2;
    } : function (v, i) {
      entries[i] = v[1];
    });
    return isKeyedIterable ? KeyedSeq(entries) : isIndexed(iterable) ? IndexedSeq(entries) : SetSeq(entries);
  }

  function maxFactory(iterable, comparator, mapper) {
    if (!comparator) {
      comparator = defaultComparator;
    }
    if (mapper) {
      var entry = iterable.toSeq().map(function (v, k) {
        return [v, mapper(v, k, iterable)];
      }).reduce(function (a, b) {
        return maxCompare(comparator, a[1], b[1]) ? b : a;
      });
      return entry && entry[0];
    } else {
      return iterable.reduce(function (a, b) {
        return maxCompare(comparator, a, b) ? b : a;
      });
    }
  }

  function maxCompare(comparator, a, b) {
    var comp = comparator(b, a);

    return comp === 0 && b !== a && (b === undefined || b === null || b !== b) || comp > 0;
  }

  function zipWithFactory(keyIter, zipper, iters) {
    var zipSequence = makeSequence(keyIter);
    zipSequence.size = new ArraySeq(iters).map(function (i) {
      return i.size;
    }).min();

    zipSequence.__iterate = function (fn, reverse) {
      var iterator = this.__iterator(ITERATE_VALUES, reverse);
      var step;
      var iterations = 0;
      while (!(step = iterator.next()).done) {
        if (fn(step.value, iterations++, this) === false) {
          break;
        }
      }
      return iterations;
    };
    zipSequence.__iteratorUncached = function (type, reverse) {
      var iterators = iters.map(function (i) {
        return i = Iterable(i), getIterator(reverse ? i.reverse() : i);
      });
      var iterations = 0;
      var isDone = false;
      return new Iterator(function () {
        var steps;
        if (!isDone) {
          steps = iterators.map(function (i) {
            return i.next();
          });
          isDone = steps.some(function (s) {
            return s.done;
          });
        }
        if (isDone) {
          return iteratorDone();
        }
        return iteratorValue(type, iterations++, zipper.apply(null, steps.map(function (s) {
          return s.value;
        })));
      });
    };
    return zipSequence;
  }

  function reify(iter, seq) {
    return isSeq(iter) ? seq : iter.constructor(seq);
  }

  function validateEntry(entry) {
    if (entry !== Object(entry)) {
      throw new TypeError('Expected [K, V] tuple: ' + entry);
    }
  }

  function resolveSize(iter) {
    assertNotInfinite(iter.size);
    return ensureSize(iter);
  }

  function iterableClass(iterable) {
    return isKeyed(iterable) ? KeyedIterable : isIndexed(iterable) ? IndexedIterable : SetIterable;
  }

  function makeSequence(iterable) {
    return Object.create((isKeyed(iterable) ? KeyedSeq : isIndexed(iterable) ? IndexedSeq : SetSeq).prototype);
  }

  function cacheResultThrough() {
    if (this._iter.cacheResult) {
      this._iter.cacheResult();
      this.size = this._iter.size;
      return this;
    } else {
      return Seq.prototype.cacheResult.call(this);
    }
  }

  function defaultComparator(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  function forceIterator(keyPath) {
    var iter = getIterator(keyPath);
    if (!iter) {
      if (!isArrayLike(keyPath)) {
        throw new TypeError('Expected iterable or array-like: ' + keyPath);
      }
      iter = getIterator(Iterable(keyPath));
    }
    return iter;
  }

  createClass(Record, KeyedCollection);

  function Record(defaultValues, name) {
    var hasInitialized;

    var RecordType = function Record(values) {
      if (values instanceof RecordType) {
        return values;
      }
      if (!(this instanceof RecordType)) {
        return new RecordType(values);
      }
      if (!hasInitialized) {
        hasInitialized = true;
        var keys = Object.keys(defaultValues);
        setProps(RecordTypePrototype, keys);
        RecordTypePrototype.size = keys.length;
        RecordTypePrototype._name = name;
        RecordTypePrototype._keys = keys;
        RecordTypePrototype._defaultValues = defaultValues;
      }
      this._map = Map(values);
    };

    var RecordTypePrototype = RecordType.prototype = Object.create(RecordPrototype);
    RecordTypePrototype.constructor = RecordType;

    return RecordType;
  }

  Record.prototype.toString = function () {
    return this.__toString(recordName(this) + ' {', '}');
  };

  Record.prototype.has = function (k) {
    return this._defaultValues.hasOwnProperty(k);
  };

  Record.prototype.get = function (k, notSetValue) {
    if (!this.has(k)) {
      return notSetValue;
    }
    var defaultVal = this._defaultValues[k];
    return this._map ? this._map.get(k, defaultVal) : defaultVal;
  };

  Record.prototype.clear = function () {
    if (this.__ownerID) {
      this._map && this._map.clear();
      return this;
    }
    var RecordType = this.constructor;
    return RecordType._empty || (RecordType._empty = makeRecord(this, emptyMap()));
  };

  Record.prototype.set = function (k, v) {
    if (!this.has(k)) {
      throw new Error('Cannot set unknown key "' + k + '" on ' + recordName(this));
    }
    if (this._map && !this._map.has(k)) {
      var defaultVal = this._defaultValues[k];
      if (v === defaultVal) {
        return this;
      }
    }
    var newMap = this._map && this._map.set(k, v);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.remove = function (k) {
    if (!this.has(k)) {
      return this;
    }
    var newMap = this._map && this._map.remove(k);
    if (this.__ownerID || newMap === this._map) {
      return this;
    }
    return makeRecord(this, newMap);
  };

  Record.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Record.prototype.__iterator = function (type, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterator(type, reverse);
  };

  Record.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return KeyedIterable(this._defaultValues).map(function (_, k) {
      return this$0.get(k);
    }).__iterate(fn, reverse);
  };

  Record.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map && this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return makeRecord(this, newMap, ownerID);
  };

  var RecordPrototype = Record.prototype;
  RecordPrototype[DELETE] = RecordPrototype.remove;
  RecordPrototype.deleteIn = RecordPrototype.removeIn = MapPrototype.removeIn;
  RecordPrototype.merge = MapPrototype.merge;
  RecordPrototype.mergeWith = MapPrototype.mergeWith;
  RecordPrototype.mergeIn = MapPrototype.mergeIn;
  RecordPrototype.mergeDeep = MapPrototype.mergeDeep;
  RecordPrototype.mergeDeepWith = MapPrototype.mergeDeepWith;
  RecordPrototype.mergeDeepIn = MapPrototype.mergeDeepIn;
  RecordPrototype.setIn = MapPrototype.setIn;
  RecordPrototype.update = MapPrototype.update;
  RecordPrototype.updateIn = MapPrototype.updateIn;
  RecordPrototype.withMutations = MapPrototype.withMutations;
  RecordPrototype.asMutable = MapPrototype.asMutable;
  RecordPrototype.asImmutable = MapPrototype.asImmutable;

  function makeRecord(likeRecord, map, ownerID) {
    var record = Object.create(Object.getPrototypeOf(likeRecord));
    record._map = map;
    record.__ownerID = ownerID;
    return record;
  }

  function recordName(record) {
    return record._name || record.constructor.name || 'Record';
  }

  function setProps(prototype, names) {
    try {
      names.forEach(setProp.bind(undefined, prototype));
    } catch (error) {}
  }

  function setProp(prototype, name) {
    Object.defineProperty(prototype, name, {
      get: function get() {
        return this.get(name);
      },
      set: function set(value) {
        invariant(this.__ownerID, 'Cannot set on an immutable record.');
        this.set(name, value);
      }
    });
  }

  createClass(Set, SetCollection);

  function Set(value) {
    return value === null || value === undefined ? emptySet() : isSet(value) && !isOrdered(value) ? value : emptySet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  Set.of = function () {
    return this(arguments);
  };

  Set.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  Set.prototype.toString = function () {
    return this.__toString('Set {', '}');
  };

  Set.prototype.has = function (value) {
    return this._map.has(value);
  };

  Set.prototype.add = function (value) {
    return updateSet(this, this._map.set(value, true));
  };

  Set.prototype.remove = function (value) {
    return updateSet(this, this._map.remove(value));
  };

  Set.prototype.clear = function () {
    return updateSet(this, this._map.clear());
  };

  Set.prototype.union = function () {
    var iters = SLICE$0.call(arguments, 0);
    iters = iters.filter(function (x) {
      return x.size !== 0;
    });
    if (iters.length === 0) {
      return this;
    }
    if (this.size === 0 && !this.__ownerID && iters.length === 1) {
      return this.constructor(iters[0]);
    }
    return this.withMutations(function (set) {
      for (var ii = 0; ii < iters.length; ii++) {
        SetIterable(iters[ii]).forEach(function (value) {
          return set.add(value);
        });
      }
    });
  };

  Set.prototype.intersect = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (!iters.every(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.subtract = function () {
    var iters = SLICE$0.call(arguments, 0);
    if (iters.length === 0) {
      return this;
    }
    iters = iters.map(function (iter) {
      return SetIterable(iter);
    });
    var originalSet = this;
    return this.withMutations(function (set) {
      originalSet.forEach(function (value) {
        if (iters.some(function (iter) {
          return iter.includes(value);
        })) {
          set.remove(value);
        }
      });
    });
  };

  Set.prototype.merge = function () {
    return this.union.apply(this, arguments);
  };

  Set.prototype.mergeWith = function (merger) {
    var iters = SLICE$0.call(arguments, 1);
    return this.union.apply(this, iters);
  };

  Set.prototype.sort = function (comparator) {
    return OrderedSet(sortFactory(this, comparator));
  };

  Set.prototype.sortBy = function (mapper, comparator) {
    return OrderedSet(sortFactory(this, comparator, mapper));
  };

  Set.prototype.wasAltered = function () {
    return this._map.wasAltered();
  };

  Set.prototype.__iterate = function (fn, reverse) {
    var this$0 = this;
    return this._map.__iterate(function (_, k) {
      return fn(k, k, this$0);
    }, reverse);
  };

  Set.prototype.__iterator = function (type, reverse) {
    return this._map.map(function (_, k) {
      return k;
    }).__iterator(type, reverse);
  };

  Set.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    var newMap = this._map.__ensureOwner(ownerID);
    if (!ownerID) {
      this.__ownerID = ownerID;
      this._map = newMap;
      return this;
    }
    return this.__make(newMap, ownerID);
  };

  function isSet(maybeSet) {
    return !!(maybeSet && maybeSet[IS_SET_SENTINEL]);
  }

  Set.isSet = isSet;

  var IS_SET_SENTINEL = '@@__IMMUTABLE_SET__@@';

  var SetPrototype = Set.prototype;
  SetPrototype[IS_SET_SENTINEL] = true;
  SetPrototype[DELETE] = SetPrototype.remove;
  SetPrototype.mergeDeep = SetPrototype.merge;
  SetPrototype.mergeDeepWith = SetPrototype.mergeWith;
  SetPrototype.withMutations = MapPrototype.withMutations;
  SetPrototype.asMutable = MapPrototype.asMutable;
  SetPrototype.asImmutable = MapPrototype.asImmutable;

  SetPrototype.__empty = emptySet;
  SetPrototype.__make = makeSet;

  function updateSet(set, newMap) {
    if (set.__ownerID) {
      set.size = newMap.size;
      set._map = newMap;
      return set;
    }
    return newMap === set._map ? set : newMap.size === 0 ? set.__empty() : set.__make(newMap);
  }

  function makeSet(map, ownerID) {
    var set = Object.create(SetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_SET;
  function emptySet() {
    return EMPTY_SET || (EMPTY_SET = makeSet(emptyMap()));
  }

  createClass(OrderedSet, Set);

  function OrderedSet(value) {
    return value === null || value === undefined ? emptyOrderedSet() : isOrderedSet(value) ? value : emptyOrderedSet().withMutations(function (set) {
      var iter = SetIterable(value);
      assertNotInfinite(iter.size);
      iter.forEach(function (v) {
        return set.add(v);
      });
    });
  }

  OrderedSet.of = function () {
    return this(arguments);
  };

  OrderedSet.fromKeys = function (value) {
    return this(KeyedIterable(value).keySeq());
  };

  OrderedSet.prototype.toString = function () {
    return this.__toString('OrderedSet {', '}');
  };

  function isOrderedSet(maybeOrderedSet) {
    return isSet(maybeOrderedSet) && isOrdered(maybeOrderedSet);
  }

  OrderedSet.isOrderedSet = isOrderedSet;

  var OrderedSetPrototype = OrderedSet.prototype;
  OrderedSetPrototype[IS_ORDERED_SENTINEL] = true;

  OrderedSetPrototype.__empty = emptyOrderedSet;
  OrderedSetPrototype.__make = makeOrderedSet;

  function makeOrderedSet(map, ownerID) {
    var set = Object.create(OrderedSetPrototype);
    set.size = map ? map.size : 0;
    set._map = map;
    set.__ownerID = ownerID;
    return set;
  }

  var EMPTY_ORDERED_SET;
  function emptyOrderedSet() {
    return EMPTY_ORDERED_SET || (EMPTY_ORDERED_SET = makeOrderedSet(emptyOrderedMap()));
  }

  createClass(Stack, IndexedCollection);

  function Stack(value) {
    return value === null || value === undefined ? emptyStack() : isStack(value) ? value : emptyStack().unshiftAll(value);
  }

  Stack.of = function () {
    return this(arguments);
  };

  Stack.prototype.toString = function () {
    return this.__toString('Stack [', ']');
  };

  Stack.prototype.get = function (index, notSetValue) {
    var head = this._head;
    index = wrapIndex(this, index);
    while (head && index--) {
      head = head.next;
    }
    return head ? head.value : notSetValue;
  };

  Stack.prototype.peek = function () {
    return this._head && this._head.value;
  };

  Stack.prototype.push = function () {
    if (arguments.length === 0) {
      return this;
    }
    var newSize = this.size + arguments.length;
    var head = this._head;
    for (var ii = arguments.length - 1; ii >= 0; ii--) {
      head = {
        value: arguments[ii],
        next: head
      };
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pushAll = function (iter) {
    iter = IndexedIterable(iter);
    if (iter.size === 0) {
      return this;
    }
    assertNotInfinite(iter.size);
    var newSize = this.size;
    var head = this._head;
    iter.reverse().forEach(function (value) {
      newSize++;
      head = {
        value: value,
        next: head
      };
    });
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.pop = function () {
    return this.slice(1);
  };

  Stack.prototype.unshift = function () {
    return this.push.apply(this, arguments);
  };

  Stack.prototype.unshiftAll = function (iter) {
    return this.pushAll(iter);
  };

  Stack.prototype.shift = function () {
    return this.pop.apply(this, arguments);
  };

  Stack.prototype.clear = function () {
    if (this.size === 0) {
      return this;
    }
    if (this.__ownerID) {
      this.size = 0;
      this._head = undefined;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return emptyStack();
  };

  Stack.prototype.slice = function (begin, end) {
    if (wholeSlice(begin, end, this.size)) {
      return this;
    }
    var resolvedBegin = resolveBegin(begin, this.size);
    var resolvedEnd = resolveEnd(end, this.size);
    if (resolvedEnd !== this.size) {
      return IndexedCollection.prototype.slice.call(this, begin, end);
    }
    var newSize = this.size - resolvedBegin;
    var head = this._head;
    while (resolvedBegin--) {
      head = head.next;
    }
    if (this.__ownerID) {
      this.size = newSize;
      this._head = head;
      this.__hash = undefined;
      this.__altered = true;
      return this;
    }
    return makeStack(newSize, head);
  };

  Stack.prototype.__ensureOwner = function (ownerID) {
    if (ownerID === this.__ownerID) {
      return this;
    }
    if (!ownerID) {
      this.__ownerID = ownerID;
      this.__altered = false;
      return this;
    }
    return makeStack(this.size, this._head, ownerID, this.__hash);
  };

  Stack.prototype.__iterate = function (fn, reverse) {
    if (reverse) {
      return this.reverse().__iterate(fn);
    }
    var iterations = 0;
    var node = this._head;
    while (node) {
      if (fn(node.value, iterations++, this) === false) {
        break;
      }
      node = node.next;
    }
    return iterations;
  };

  Stack.prototype.__iterator = function (type, reverse) {
    if (reverse) {
      return this.reverse().__iterator(type);
    }
    var iterations = 0;
    var node = this._head;
    return new Iterator(function () {
      if (node) {
        var value = node.value;
        node = node.next;
        return iteratorValue(type, iterations++, value);
      }
      return iteratorDone();
    });
  };

  function isStack(maybeStack) {
    return !!(maybeStack && maybeStack[IS_STACK_SENTINEL]);
  }

  Stack.isStack = isStack;

  var IS_STACK_SENTINEL = '@@__IMMUTABLE_STACK__@@';

  var StackPrototype = Stack.prototype;
  StackPrototype[IS_STACK_SENTINEL] = true;
  StackPrototype.withMutations = MapPrototype.withMutations;
  StackPrototype.asMutable = MapPrototype.asMutable;
  StackPrototype.asImmutable = MapPrototype.asImmutable;
  StackPrototype.wasAltered = MapPrototype.wasAltered;

  function makeStack(size, head, ownerID, hash) {
    var map = Object.create(StackPrototype);
    map.size = size;
    map._head = head;
    map.__ownerID = ownerID;
    map.__hash = hash;
    map.__altered = false;
    return map;
  }

  var EMPTY_STACK;
  function emptyStack() {
    return EMPTY_STACK || (EMPTY_STACK = makeStack(0));
  }

  function mixin(ctor, methods) {
    var keyCopier = function keyCopier(key) {
      ctor.prototype[key] = methods[key];
    };
    Object.keys(methods).forEach(keyCopier);
    Object.getOwnPropertySymbols && Object.getOwnPropertySymbols(methods).forEach(keyCopier);
    return ctor;
  }

  Iterable.Iterator = Iterator;

  mixin(Iterable, {

    toArray: function toArray() {
      assertNotInfinite(this.size);
      var array = new Array(this.size || 0);
      this.valueSeq().__iterate(function (v, i) {
        array[i] = v;
      });
      return array;
    },

    toIndexedSeq: function toIndexedSeq() {
      return new ToIndexedSequence(this);
    },

    toJS: function toJS() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJS === 'function' ? value.toJS() : value;
      }).__toJS();
    },

    toJSON: function toJSON() {
      return this.toSeq().map(function (value) {
        return value && typeof value.toJSON === 'function' ? value.toJSON() : value;
      }).__toJS();
    },

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, true);
    },

    toMap: function toMap() {
      return Map(this.toKeyedSeq());
    },

    toObject: function toObject() {
      assertNotInfinite(this.size);
      var object = {};
      this.__iterate(function (v, k) {
        object[k] = v;
      });
      return object;
    },

    toOrderedMap: function toOrderedMap() {
      return OrderedMap(this.toKeyedSeq());
    },

    toOrderedSet: function toOrderedSet() {
      return OrderedSet(isKeyed(this) ? this.valueSeq() : this);
    },

    toSet: function toSet() {
      return Set(isKeyed(this) ? this.valueSeq() : this);
    },

    toSetSeq: function toSetSeq() {
      return new ToSetSequence(this);
    },

    toSeq: function toSeq() {
      return isIndexed(this) ? this.toIndexedSeq() : isKeyed(this) ? this.toKeyedSeq() : this.toSetSeq();
    },

    toStack: function toStack() {
      return Stack(isKeyed(this) ? this.valueSeq() : this);
    },

    toList: function toList() {
      return List(isKeyed(this) ? this.valueSeq() : this);
    },

    toString: function toString() {
      return '[Iterable]';
    },

    __toString: function __toString(head, tail) {
      if (this.size === 0) {
        return head + tail;
      }
      return head + ' ' + this.toSeq().map(this.__toStringMapper).join(', ') + ' ' + tail;
    },

    concat: function concat() {
      var values = SLICE$0.call(arguments, 0);
      return reify(this, concatFactory(this, values));
    },

    includes: function includes(searchValue) {
      return this.some(function (value) {
        return is(value, searchValue);
      });
    },

    entries: function entries() {
      return this.__iterator(ITERATE_ENTRIES);
    },

    every: function every(predicate, context) {
      assertNotInfinite(this.size);
      var returnValue = true;
      this.__iterate(function (v, k, c) {
        if (!predicate.call(context, v, k, c)) {
          returnValue = false;
          return false;
        }
      });
      return returnValue;
    },

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, true));
    },

    find: function find(predicate, context, notSetValue) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[1] : notSetValue;
    },

    forEach: function forEach(sideEffect, context) {
      assertNotInfinite(this.size);
      return this.__iterate(context ? sideEffect.bind(context) : sideEffect);
    },

    join: function join(separator) {
      assertNotInfinite(this.size);
      separator = separator !== undefined ? '' + separator : ',';
      var joined = '';
      var isFirst = true;
      this.__iterate(function (v) {
        isFirst ? isFirst = false : joined += separator;
        joined += v !== null && v !== undefined ? v.toString() : '';
      });
      return joined;
    },

    keys: function keys() {
      return this.__iterator(ITERATE_KEYS);
    },

    map: function map(mapper, context) {
      return reify(this, mapFactory(this, mapper, context));
    },

    reduce: function reduce(reducer, initialReduction, context) {
      assertNotInfinite(this.size);
      var reduction;
      var useFirst;
      if (arguments.length < 2) {
        useFirst = true;
      } else {
        reduction = initialReduction;
      }
      this.__iterate(function (v, k, c) {
        if (useFirst) {
          useFirst = false;
          reduction = v;
        } else {
          reduction = reducer.call(context, reduction, v, k, c);
        }
      });
      return reduction;
    },

    reduceRight: function reduceRight(reducer, initialReduction, context) {
      var reversed = this.toKeyedSeq().reverse();
      return reversed.reduce.apply(reversed, arguments);
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, true));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, true));
    },

    some: function some(predicate, context) {
      return !this.every(not(predicate), context);
    },

    sort: function sort(comparator) {
      return reify(this, sortFactory(this, comparator));
    },

    values: function values() {
      return this.__iterator(ITERATE_VALUES);
    },

    butLast: function butLast() {
      return this.slice(0, -1);
    },

    isEmpty: function isEmpty() {
      return this.size !== undefined ? this.size === 0 : !this.some(function () {
        return true;
      });
    },

    count: function count(predicate, context) {
      return ensureSize(predicate ? this.toSeq().filter(predicate, context) : this);
    },

    countBy: function countBy(grouper, context) {
      return countByFactory(this, grouper, context);
    },

    equals: function equals(other) {
      return deepEqual(this, other);
    },

    entrySeq: function entrySeq() {
      var iterable = this;
      if (iterable._cache) {
        return new ArraySeq(iterable._cache);
      }
      var entriesSequence = iterable.toSeq().map(entryMapper).toIndexedSeq();
      entriesSequence.fromEntrySeq = function () {
        return iterable.toSeq();
      };
      return entriesSequence;
    },

    filterNot: function filterNot(predicate, context) {
      return this.filter(not(predicate), context);
    },

    findEntry: function findEntry(predicate, context, notSetValue) {
      var found = notSetValue;
      this.__iterate(function (v, k, c) {
        if (predicate.call(context, v, k, c)) {
          found = [k, v];
          return false;
        }
      });
      return found;
    },

    findKey: function findKey(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry && entry[0];
    },

    findLast: function findLast(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().find(predicate, context, notSetValue);
    },

    findLastEntry: function findLastEntry(predicate, context, notSetValue) {
      return this.toKeyedSeq().reverse().findEntry(predicate, context, notSetValue);
    },

    findLastKey: function findLastKey(predicate, context) {
      return this.toKeyedSeq().reverse().findKey(predicate, context);
    },

    first: function first() {
      return this.find(returnTrue);
    },

    flatMap: function flatMap(mapper, context) {
      return reify(this, flatMapFactory(this, mapper, context));
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, true));
    },

    fromEntrySeq: function fromEntrySeq() {
      return new FromEntriesSequence(this);
    },

    get: function get(searchKey, notSetValue) {
      return this.find(function (_, key) {
        return is(key, searchKey);
      }, undefined, notSetValue);
    },

    getIn: function getIn(searchKeyPath, notSetValue) {
      var nested = this;

      var iter = forceIterator(searchKeyPath);
      var step;
      while (!(step = iter.next()).done) {
        var key = step.value;
        nested = nested && nested.get ? nested.get(key, NOT_SET) : NOT_SET;
        if (nested === NOT_SET) {
          return notSetValue;
        }
      }
      return nested;
    },

    groupBy: function groupBy(grouper, context) {
      return groupByFactory(this, grouper, context);
    },

    has: function has(searchKey) {
      return this.get(searchKey, NOT_SET) !== NOT_SET;
    },

    hasIn: function hasIn(searchKeyPath) {
      return this.getIn(searchKeyPath, NOT_SET) !== NOT_SET;
    },

    isSubset: function isSubset(iter) {
      iter = typeof iter.includes === 'function' ? iter : Iterable(iter);
      return this.every(function (value) {
        return iter.includes(value);
      });
    },

    isSuperset: function isSuperset(iter) {
      iter = typeof iter.isSubset === 'function' ? iter : Iterable(iter);
      return iter.isSubset(this);
    },

    keyOf: function keyOf(searchValue) {
      return this.findKey(function (value) {
        return is(value, searchValue);
      });
    },

    keySeq: function keySeq() {
      return this.toSeq().map(keyMapper).toIndexedSeq();
    },

    last: function last() {
      return this.toSeq().reverse().first();
    },

    lastKeyOf: function lastKeyOf(searchValue) {
      return this.toKeyedSeq().reverse().keyOf(searchValue);
    },

    max: function max(comparator) {
      return maxFactory(this, comparator);
    },

    maxBy: function maxBy(mapper, comparator) {
      return maxFactory(this, comparator, mapper);
    },

    min: function min(comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator);
    },

    minBy: function minBy(mapper, comparator) {
      return maxFactory(this, comparator ? neg(comparator) : defaultNegComparator, mapper);
    },

    rest: function rest() {
      return this.slice(1);
    },

    skip: function skip(amount) {
      return this.slice(Math.max(0, amount));
    },

    skipLast: function skipLast(amount) {
      return reify(this, this.toSeq().reverse().skip(amount).reverse());
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, true));
    },

    skipUntil: function skipUntil(predicate, context) {
      return this.skipWhile(not(predicate), context);
    },

    sortBy: function sortBy(mapper, comparator) {
      return reify(this, sortFactory(this, comparator, mapper));
    },

    take: function take(amount) {
      return this.slice(0, Math.max(0, amount));
    },

    takeLast: function takeLast(amount) {
      return reify(this, this.toSeq().reverse().take(amount).reverse());
    },

    takeWhile: function takeWhile(predicate, context) {
      return reify(this, takeWhileFactory(this, predicate, context));
    },

    takeUntil: function takeUntil(predicate, context) {
      return this.takeWhile(not(predicate), context);
    },

    valueSeq: function valueSeq() {
      return this.toIndexedSeq();
    },

    hashCode: function hashCode() {
      return this.__hash || (this.__hash = hashIterable(this));
    }

  });

  var IterablePrototype = Iterable.prototype;
  IterablePrototype[IS_ITERABLE_SENTINEL] = true;
  IterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.values;
  IterablePrototype.__toJS = IterablePrototype.toArray;
  IterablePrototype.__toStringMapper = quoteString;
  IterablePrototype.inspect = IterablePrototype.toSource = function () {
    return this.toString();
  };
  IterablePrototype.chain = IterablePrototype.flatMap;
  IterablePrototype.contains = IterablePrototype.includes;

  mixin(KeyedIterable, {

    flip: function flip() {
      return reify(this, flipFactory(this));
    },

    mapEntries: function mapEntries(mapper, context) {
      var this$0 = this;
      var iterations = 0;
      return reify(this, this.toSeq().map(function (v, k) {
        return mapper.call(context, [k, v], iterations++, this$0);
      }).fromEntrySeq());
    },

    mapKeys: function mapKeys(mapper, context) {
      var this$0 = this;
      return reify(this, this.toSeq().flip().map(function (k, v) {
        return mapper.call(context, k, v, this$0);
      }).flip());
    }

  });

  var KeyedIterablePrototype = KeyedIterable.prototype;
  KeyedIterablePrototype[IS_KEYED_SENTINEL] = true;
  KeyedIterablePrototype[ITERATOR_SYMBOL] = IterablePrototype.entries;
  KeyedIterablePrototype.__toJS = IterablePrototype.toObject;
  KeyedIterablePrototype.__toStringMapper = function (v, k) {
    return JSON.stringify(k) + ': ' + quoteString(v);
  };

  mixin(IndexedIterable, {

    toKeyedSeq: function toKeyedSeq() {
      return new ToKeyedSequence(this, false);
    },

    filter: function filter(predicate, context) {
      return reify(this, filterFactory(this, predicate, context, false));
    },

    findIndex: function findIndex(predicate, context) {
      var entry = this.findEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    indexOf: function indexOf(searchValue) {
      var key = this.keyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    lastIndexOf: function lastIndexOf(searchValue) {
      var key = this.lastKeyOf(searchValue);
      return key === undefined ? -1 : key;
    },

    reverse: function reverse() {
      return reify(this, reverseFactory(this, false));
    },

    slice: function slice(begin, end) {
      return reify(this, sliceFactory(this, begin, end, false));
    },

    splice: function splice(index, removeNum) {
      var numArgs = arguments.length;
      removeNum = Math.max(removeNum | 0, 0);
      if (numArgs === 0 || numArgs === 2 && !removeNum) {
        return this;
      }

      index = resolveBegin(index, index < 0 ? this.count() : this.size);
      var spliced = this.slice(0, index);
      return reify(this, numArgs === 1 ? spliced : spliced.concat(arrCopy(arguments, 2), this.slice(index + removeNum)));
    },

    findLastIndex: function findLastIndex(predicate, context) {
      var entry = this.findLastEntry(predicate, context);
      return entry ? entry[0] : -1;
    },

    first: function first() {
      return this.get(0);
    },

    flatten: function flatten(depth) {
      return reify(this, flattenFactory(this, depth, false));
    },

    get: function get(index, notSetValue) {
      index = wrapIndex(this, index);
      return index < 0 || this.size === Infinity || this.size !== undefined && index > this.size ? notSetValue : this.find(function (_, key) {
        return key === index;
      }, undefined, notSetValue);
    },

    has: function has(index) {
      index = wrapIndex(this, index);
      return index >= 0 && (this.size !== undefined ? this.size === Infinity || index < this.size : this.indexOf(index) !== -1);
    },

    interpose: function interpose(separator) {
      return reify(this, interposeFactory(this, separator));
    },

    interleave: function interleave() {
      var iterables = [this].concat(arrCopy(arguments));
      var zipped = zipWithFactory(this.toSeq(), IndexedSeq.of, iterables);
      var interleaved = zipped.flatten(true);
      if (zipped.size) {
        interleaved.size = zipped.size * iterables.length;
      }
      return reify(this, interleaved);
    },

    keySeq: function keySeq() {
      return Range(0, this.size);
    },

    last: function last() {
      return this.get(-1);
    },

    skipWhile: function skipWhile(predicate, context) {
      return reify(this, skipWhileFactory(this, predicate, context, false));
    },

    zip: function zip() {
      var iterables = [this].concat(arrCopy(arguments));
      return reify(this, zipWithFactory(this, defaultZipper, iterables));
    },

    zipWith: function zipWith(zipper) {
      var iterables = arrCopy(arguments);
      iterables[0] = this;
      return reify(this, zipWithFactory(this, zipper, iterables));
    }

  });

  IndexedIterable.prototype[IS_INDEXED_SENTINEL] = true;
  IndexedIterable.prototype[IS_ORDERED_SENTINEL] = true;

  mixin(SetIterable, {

    get: function get(value, notSetValue) {
      return this.has(value) ? value : notSetValue;
    },

    includes: function includes(value) {
      return this.has(value);
    },

    keySeq: function keySeq() {
      return this.valueSeq();
    }

  });

  SetIterable.prototype.has = IterablePrototype.includes;
  SetIterable.prototype.contains = SetIterable.prototype.includes;

  mixin(KeyedSeq, KeyedIterable.prototype);
  mixin(IndexedSeq, IndexedIterable.prototype);
  mixin(SetSeq, SetIterable.prototype);

  mixin(KeyedCollection, KeyedIterable.prototype);
  mixin(IndexedCollection, IndexedIterable.prototype);
  mixin(SetCollection, SetIterable.prototype);

  function keyMapper(v, k) {
    return k;
  }

  function entryMapper(v, k) {
    return [k, v];
  }

  function not(predicate) {
    return function () {
      return !predicate.apply(this, arguments);
    };
  }

  function neg(predicate) {
    return function () {
      return -predicate.apply(this, arguments);
    };
  }

  function quoteString(value) {
    return typeof value === 'string' ? JSON.stringify(value) : String(value);
  }

  function defaultZipper() {
    return arrCopy(arguments);
  }

  function defaultNegComparator(a, b) {
    return a < b ? 1 : a > b ? -1 : 0;
  }

  function hashIterable(iterable) {
    if (iterable.size === Infinity) {
      return 0;
    }
    var ordered = isOrdered(iterable);
    var keyed = isKeyed(iterable);
    var h = ordered ? 1 : 0;
    var size = iterable.__iterate(keyed ? ordered ? function (v, k) {
      h = 31 * h + hashMerge(hash(v), hash(k)) | 0;
    } : function (v, k) {
      h = h + hashMerge(hash(v), hash(k)) | 0;
    } : ordered ? function (v) {
      h = 31 * h + hash(v) | 0;
    } : function (v) {
      h = h + hash(v) | 0;
    });
    return murmurHashOfSize(size, h);
  }

  function murmurHashOfSize(size, h) {
    h = imul(h, 0xCC9E2D51);
    h = imul(h << 15 | h >>> -15, 0x1B873593);
    h = imul(h << 13 | h >>> -13, 5);
    h = (h + 0xE6546B64 | 0) ^ size;
    h = imul(h ^ h >>> 16, 0x85EBCA6B);
    h = imul(h ^ h >>> 13, 0xC2B2AE35);
    h = smi(h ^ h >>> 16);
    return h;
  }

  function hashMerge(a, b) {
    return a ^ b + 0x9E3779B9 + (a << 6) + (a >> 2) | 0;
  }

  var Immutable = {

    Iterable: Iterable,

    Seq: Seq,
    Collection: Collection,
    Map: Map,
    OrderedMap: OrderedMap,
    List: List,
    Stack: Stack,
    Set: Set,
    OrderedSet: OrderedSet,

    Record: Record,
    Range: Range,
    Repeat: Repeat,

    is: is,
    fromJS: fromJS

  };

  return Immutable;
});
}, 494, null, "immutable/dist/immutable.js");
__d(/* react-native-tab-navigator/Badge.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-navigator/Badge.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _Layout = require(496       ); // 496 = ./Layout

var _Layout2 = babelHelpers.interopRequireDefault(_Layout);

var Badge = function (_React$Component) {
  babelHelpers.inherits(Badge, _React$Component);

  function Badge(props, context) {
    babelHelpers.classCallCheck(this, Badge);

    var _this = babelHelpers.possibleConstructorReturn(this, (Badge.__proto__ || Object.getPrototypeOf(Badge)).call(this, props, context));

    _this.state = {
      computedSize: null
    };


    _this._handleLayout = _this._handleLayout.bind(_this);
    return _this;
  }

  babelHelpers.createClass(Badge, [{
    key: 'render',
    value: function render() {
      var computedSize = this.state.computedSize;

      var style = {};
      if (!computedSize) {
        style.opacity = 0;
      } else {
        style.width = Math.max(computedSize.height, computedSize.width);
      }

      return _react2.default.createElement(
        _reactNative.Text,
        babelHelpers.extends({}, this.props, {
          numberOfLines: 1,
          onLayout: this._handleLayout,
          style: [styles.container, this.props.style, style], __source: {
            fileName: _jsxFileName,
            lineNumber: 34
          }
        }),
        this.props.children
      );
    }
  }, {
    key: '_handleLayout',
    value: function _handleLayout(event) {
      var _event$nativeEvent$la = event.nativeEvent.layout,
          width = _event$nativeEvent$la.width,
          height = _event$nativeEvent$la.height;
      var computedSize = this.state.computedSize;

      if (computedSize && computedSize.height === height && computedSize.width === width) {
        return;
      }

      this.setState({
        computedSize: { width: width, height: height }
      });

      if (this.props.onLayout) {
        this.props.onLayout(event);
      }
    }
  }]);
  return Badge;
}(_react2.default.Component);

Badge.propTypes = _reactNative.Text.propTypes;
exports.default = Badge;


var styles = _reactNative.StyleSheet.create({
  container: {
    fontSize: 12,
    color: '#fff',
    backgroundColor: 'rgb(0, 122, 255)',
    lineHeight: 15,
    textAlign: 'center',
    borderWidth: 1 + _Layout2.default.pixel,
    borderColor: '#fefefe',
    borderRadius: 17 / 2,
    overflow: 'hidden'
  }
});
}, 495, null, "react-native-tab-navigator/Badge.js");
__d(/* react-native-tab-navigator/Layout.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _reactNative = require(46            ); // 46 = react-native

exports.default = {
  pixel: 1 / _reactNative.PixelRatio.get(),
  tabBarHeight: 49
};
}, 496, null, "react-native-tab-navigator/Layout.js");
__d(/* react-native-tab-navigator/StaticContainer.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var StaticContainer = function (_React$Component) {
  babelHelpers.inherits(StaticContainer, _React$Component);

  function StaticContainer() {
    babelHelpers.classCallCheck(this, StaticContainer);
    return babelHelpers.possibleConstructorReturn(this, (StaticContainer.__proto__ || Object.getPrototypeOf(StaticContainer)).apply(this, arguments));
  }

  babelHelpers.createClass(StaticContainer, [{
    key: 'shouldComponentUpdate',
    value: function shouldComponentUpdate(nextProps) {
      return !!nextProps.shouldUpdate;
    }
  }, {
    key: 'render',
    value: function render() {
      var children = this.props.children;

      return children ? _react2.default.Children.only(children) : null;
    }
  }]);
  return StaticContainer;
}(_react2.default.Component);

StaticContainer.propTypes = {
  shouldUpdate: _react.PropTypes.bool
};
exports.default = StaticContainer;
}, 497, null, "react-native-tab-navigator/StaticContainer.js");
__d(/* react-native-tab-navigator/Tab.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-navigator/Tab.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _Layout = require(496       ); // 496 = ./Layout

var _Layout2 = babelHelpers.interopRequireDefault(_Layout);

var Tab = function (_React$Component) {
  babelHelpers.inherits(Tab, _React$Component);

  function Tab(props, context) {
    babelHelpers.classCallCheck(this, Tab);

    var _this = babelHelpers.possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this, props, context));

    _this._handlePress = _this._handlePress.bind(_this);
    return _this;
  }

  babelHelpers.createClass(Tab, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          title = _props.title,
          badge = _props.badge;

      var icon = null;
      if (_react2.default.Children.count(this.props.children) > 0) {
        icon = _react2.default.Children.only(this.props.children);
      }

      if (title) {
        title = _react2.default.createElement(
          _reactNative.Text,
          {
            numberOfLines: 1,
            allowFontScaling: !!this.props.allowFontScaling,
            style: [styles.title, this.props.titleStyle], __source: {
              fileName: _jsxFileName,
              lineNumber: 41
            }
          },
          title
        );
      }

      if (badge) {
        badge = _react2.default.cloneElement(badge, {
          style: [styles.badge, badge.props.style]
        });
      }

      var tabStyle = [styles.container, title ? null : styles.untitledContainer, this.props.style];
      return _react2.default.createElement(
        _reactNative.TouchableOpacity,
        {
          testID: this.props.testID,
          activeOpacity: this.props.hidesTabTouch ? 1.0 : 0.8,
          onPress: this._handlePress,
          style: tabStyle, __source: {
            fileName: _jsxFileName,
            lineNumber: 61
          }
        },
        _react2.default.createElement(
          _reactNative.View,
          {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 66
            }
          },
          icon,
          badge
        ),
        title
      );
    }
  }, {
    key: '_handlePress',
    value: function _handlePress(event) {
      if (this.props.onPress) {
        this.props.onPress(event);
      }
    }
  }]);
  return Tab;
}(_react2.default.Component);

Tab.propTypes = {
  testID: _react.PropTypes.string,
  title: _react.PropTypes.string,
  titleStyle: _reactNative.Text.propTypes.style,
  badge: _react.PropTypes.element,
  onPress: _react.PropTypes.func,
  hidesTabTouch: _react.PropTypes.bool,
  allowFontScaling: _react.PropTypes.bool,
  style: _reactNative.View.propTypes.style
};
exports.default = Tab;


var styles = _reactNative.StyleSheet.create({
  badge: {
    position: 'absolute',
    top: -6,
    right: -10
  },
  container: {
    flex: 1,
    flexDirection: 'column',
    justifyContent: 'flex-end',
    alignItems: 'center'
  },
  untitledContainer: {
    paddingBottom: 13
  },
  title: {
    color: '#929292',
    fontSize: 10,
    textAlign: 'center',
    alignSelf: 'stretch',
    marginTop: 4,
    marginBottom: 1 + _Layout2.default.pixel
  }
});
}, 498, null, "react-native-tab-navigator/Tab.js");
__d(/* react-native-tab-navigator/TabBar.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-tab-navigator/TabBar.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _Layout = require(496       ); // 496 = ./Layout

var _Layout2 = babelHelpers.interopRequireDefault(_Layout);

var TabBar = function (_React$Component) {
  babelHelpers.inherits(TabBar, _React$Component);

  function TabBar() {
    babelHelpers.classCallCheck(this, TabBar);
    return babelHelpers.possibleConstructorReturn(this, (TabBar.__proto__ || Object.getPrototypeOf(TabBar)).apply(this, arguments));
  }

  babelHelpers.createClass(TabBar, [{
    key: 'render',
    value: function render() {
      return _react2.default.createElement(
        _reactNative.Animated.View,
        babelHelpers.extends({}, this.props, { style: [styles.container, this.props.style], __source: {
            fileName: _jsxFileName,
            lineNumber: 21
          }
        }),
        this.props.children,
        _react2.default.createElement(_reactNative.View, { style: [styles.shadow, this.props.shadowStyle], __source: {
            fileName: _jsxFileName,
            lineNumber: 23
          }
        })
      );
    }
  }]);
  return TabBar;
}(_react2.default.Component);

TabBar.propTypes = babelHelpers.extends({}, _reactNative.Animated.View.propTypes, {
  shadowStyle: _reactNative.View.propTypes.style
});
exports.default = TabBar;


var styles = _reactNative.StyleSheet.create({
  container: {
    backgroundColor: '#f8f8f8',
    flexDirection: 'row',
    justifyContent: 'space-around',
    height: _Layout2.default.tabBarHeight,
    position: 'absolute',
    bottom: 0,
    left: 0,
    right: 0
  },
  shadow: {
    backgroundColor: 'rgba(0, 0, 0, 0.25)',
    height: _Layout2.default.pixel,
    position: 'absolute',
    left: 0,
    right: 0,
    top: _reactNative.Platform.OS === 'android' ? 0 : -_Layout2.default.pixel
  }
});
}, 499, null, "react-native-tab-navigator/TabBar.js");
__d(/* react-native-tab-navigator/TabNavigatorItem.js */function(global, require, module, exports) {'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TabNavigatorItem = function (_React$Component) {
  babelHelpers.inherits(TabNavigatorItem, _React$Component);

  function TabNavigatorItem() {
    babelHelpers.classCallCheck(this, TabNavigatorItem);
    return babelHelpers.possibleConstructorReturn(this, (TabNavigatorItem.__proto__ || Object.getPrototypeOf(TabNavigatorItem)).apply(this, arguments));
  }

  babelHelpers.createClass(TabNavigatorItem, [{
    key: 'render',
    value: function render() {
      var child = _react2.default.Children.only(this.props.children);
      return _react2.default.cloneElement(child, {
        style: [child.props.style, this.props.style]
      });
    }
  }]);
  return TabNavigatorItem;
}(_react2.default.Component);

TabNavigatorItem.propTypes = {
  renderIcon: _react.PropTypes.func,
  renderSelectedIcon: _react.PropTypes.func,
  badgeText: _react.PropTypes.oneOfType([_react.PropTypes.string, _react.PropTypes.number]),
  renderBadge: _react.PropTypes.func,
  title: _react.PropTypes.string,
  titleStyle: _reactNative.Text.propTypes.style,
  selectedTitleStyle: _reactNative.Text.propTypes.style,
  tabStyle: _reactNative.View.propTypes.style,
  selected: _react.PropTypes.bool,
  onPress: _react.PropTypes.func,
  allowFontScaling: _react.PropTypes.bool
};
TabNavigatorItem.defaultProps = {};
exports.default = TabNavigatorItem;
}, 500, null, "react-native-tab-navigator/TabNavigatorItem.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewToday.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewToday.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNavigation = require(406               ); // 406 = react-navigation

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var FloatButtonsBox = require(510                              ); // 510 = ../component/FloatButtonsBox.js


var ScrollViewToday = _react2.default.createClass({
    displayName: 'ScrollViewToday',

    _vars: {},
    getInitialState: function getInitialState() {
        var _this = this;

        this._vars.contentDay = global.YrcnApp.utils.nowDate();
        this._vars.backgroundColor = "#fefefe";

        var now = moment(_this._vars.contentDay);
        _this._vars.title = now.format("YYYY年MM月DD日 dddd 第wo 第DDDo");
        var lunarCalendar = RNLunarCalendar.solarToLunar(now.year(), now.month() + 1, now.date());
        _this._vars.introduce = "生肖【" + lunarCalendar.zodiac + "】";
        _this._vars.introduce += "农历【" + lunarCalendar.lunarMonthName + lunarCalendar.lunarDayName + "】";
        if (lunarCalendar.lunarFestival) {
            _this._vars.introduce += lunarCalendar.lunarFestival;
        }
        if (lunarCalendar.term) {
            _this._vars.introduce += lunarCalendar.term;
        }

        return {
            isShowLoadingView: true,
            typeArray: [],
            typeRightColorArray: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            _this.setState({
                typeArray: todayContentTypesObj.list
            });
        });
        RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
            _this._vars.contentObj = contentObj;
            var typeArray = _this.state.typeArray;
            for (var key in contentObj) {
                for (var _iterator = typeArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                    var _ref;

                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref = _i.value;
                    }

                    var typeObj = _ref;

                    if (typeObj.typeCode == key && (contentObj[key].content || contentObj[key].oneImages && contentObj[key].oneImages.length > 0)) {
                        typeObj.rightColor = '#01bbfc';
                        break;
                    }
                }
            }
            _this.setState({
                typeArray: typeArray
            });
        });

        YrcnApp.services.getJson_today_getContentInfo({ day: _this._vars.contentDay }, function (getJson_today_getContentInfoObj) {});
    },
    render: function render() {
        var _this = this;
        global.YrcnApp.now[_this._vars.scrollView] = this;
        return _react2.default.createElement(
            _reactNative.ScrollView,
            {
                style: [styles.scrollViewContainer, { backgroundColor: _this._vars.backgroundColor }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 98
                }
            },
            _react2.default.createElement(TitleIntroduceBox, { title: _this._vars.title, introduce: _this._vars.introduce, noNumberOfLines: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 100
                }
            }),
            function () {
                return _this.state.typeArray.map(function (d, i) {
                    return _react2.default.createElement(ListViewLi, { title: d.typeContent, onPress: function onPress() {
                            _this._onPressLi(i);
                        }, key: i, color: '#000000', rightColor: d.rightColor || '#aaaaaa', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 105
                        }
                    });
                });
            }(),
            _react2.default.createElement(
                FloatButtonsBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 110
                    }
                },
                _react2.default.createElement(FloatButtonsBox.Button, { btnText: "工作", onPress: this._onPressWorking, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 111
                    }
                }),
                _react2.default.createElement(FloatButtonsBox.Button, { btnText: "学习", onPress: this._onPressStudy, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 112
                    }
                }),
                _react2.default.createElement(FloatButtonsBox.Button, { btnText: "运动", onPress: this._onPressSport, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 113
                    }
                })
            )
        );
    },
    _onPressLi: function _onPressLi(liIndex) {
        var _this = this;

        var indexTitle = this.state.typeArray[liIndex].typeContent;

        var coreObj = _this._vars.contentObj[this.state.typeArray[liIndex].typeCode];
        if (coreObj && coreObj.oneImages && coreObj.oneImages.length > 0) {
            for (var _iterator2 = coreObj.oneImages, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var oneImage = _ref2;

                oneImage.uri = RNUtils.getSandboxFileLongPath(oneImage.uri);
            }
        }
        global.YrcnApp.now[_this._vars.scrollView] = this;

        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewEditTodayContent', viewTitle: indexTitle, type: this.state.typeArray[liIndex], coreObj: coreObj });
    },
    refreshView: function refreshView() {
        var _this = this;
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            _this.setState({
                typeArray: todayContentTypesObj.list
            });
        });
        RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
            _this._vars.contentObj = contentObj;

            for (var key in contentObj) {
                if (contentObj[key] && contentObj[key].content) {
                    RNAllService.getJson_today_synchronizeContentInfo(contentObj[key], function (getJson_today_synchronizeContentInfoObj) {});
                }
            }

            var typeArray = _this.state.typeArray;
            for (var key in contentObj) {
                for (var _iterator3 = typeArray, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var typeObj = _ref3;

                    if (typeObj.typeCode == key && (contentObj[key].content || contentObj[key].oneImages && contentObj[key].oneImages.length > 0)) {
                        typeObj.rightColor = '#01bbfc';
                        break;
                    }
                }
            }
            _this.setState({
                typeArray: typeArray
            });
        });
    },
    _onPressWorking: function _onPressWorking() {
        var _this = this;
        var coreObj = _this._vars.contentObj[YrcnApp.configs.AS_KEY_WORKING_LOG] || { content: '', overtime: false, qingjia: false };
        coreObj.$key = YrcnApp.configs.AS_KEY_WORKING_LOG;
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewEditWorkingLog', viewTitle: "工作日志", coreObj: coreObj });
    },
    _onPressStudy: function _onPressStudy() {
        var _this = this;
        var coreObj = _this._vars.contentObj[YrcnApp.configs.AS_KEY_STUDY] || { content: '' };
        coreObj.$key = YrcnApp.configs.AS_KEY_STUDY;
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewEditStudy', viewTitle: "学习", coreObj: coreObj });
    },
    _onPressSport: function _onPressSport() {
        var _this = this;
        var coreObj = _this._vars.contentObj[YrcnApp.configs.AS_KEY_SPORT] || { content: '' };
        coreObj.$key = YrcnApp.configs.AS_KEY_SPORT;
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewEditSport', viewTitle: "运动", coreObj: coreObj });
    }
});

var styles = _reactNative.StyleSheet.create({
    scrollViewContainer: {
        marginTop: YrcnApp.Platform.isIOS ? 0 : 25
    }
});

module.exports = ScrollViewToday;
}, 501, null, "YrcnAppProject/src/scrollview/ScrollViewToday.js");
__d(/* moment/min/moment-with-locales.min.js */function(global, require, module, exports) {
!function (a, b) {
     "object" == typeof exports && "undefined" != typeof module ? module.exports = b() : "function" == typeof define && define.amd ? define(b) : a.moment = b();
}(this, function () {
     "use strict";
     function a() {
          return je.apply(null, arguments);
     }

     function b(a) {
          je = a;
     }function c(a) {
          return a instanceof Array || "[object Array]" === Object.prototype.toString.call(a);
     }function d(a) {
          return null != a && "[object Object]" === Object.prototype.toString.call(a);
     }function e(a) {
          var b;for (b in a) {
               return !1;
          }return !0;
     }function f(a) {
          return a instanceof Date || "[object Date]" === Object.prototype.toString.call(a);
     }function g(a, b) {
          var c,
              d = [];for (c = 0; c < a.length; ++c) {
               d.push(b(a[c], c));
          }return d;
     }function h(a, b) {
          return Object.prototype.hasOwnProperty.call(a, b);
     }function i(a, b) {
          for (var c in b) {
               h(b, c) && (a[c] = b[c]);
          }return h(b, "toString") && (a.toString = b.toString), h(b, "valueOf") && (a.valueOf = b.valueOf), a;
     }function j(a, b, c, d) {
          return qb(a, b, c, d, !0).utc();
     }function k() {
          return { empty: !1, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: !1, invalidMonth: null, invalidFormat: !1, userInvalidated: !1, iso: !1, parsedDateParts: [], meridiem: null };
     }function l(a) {
          return null == a._pf && (a._pf = k()), a._pf;
     }function m(a) {
          if (null == a._isValid) {
               var b = l(a),
                   c = ke.call(b.parsedDateParts, function (a) {
                    return null != a;
               }),
                   d = !isNaN(a._d.getTime()) && b.overflow < 0 && !b.empty && !b.invalidMonth && !b.invalidWeekday && !b.nullInput && !b.invalidFormat && !b.userInvalidated && (!b.meridiem || b.meridiem && c);if (a._strict && (d = d && 0 === b.charsLeftOver && 0 === b.unusedTokens.length && void 0 === b.bigHour), null != Object.isFrozen && Object.isFrozen(a)) return d;a._isValid = d;
          }return a._isValid;
     }function n(a) {
          var b = j(NaN);return null != a ? i(l(b), a) : l(b).userInvalidated = !0, b;
     }function o(a) {
          return void 0 === a;
     }function p(a, b) {
          var c, d, e;if (o(b._isAMomentObject) || (a._isAMomentObject = b._isAMomentObject), o(b._i) || (a._i = b._i), o(b._f) || (a._f = b._f), o(b._l) || (a._l = b._l), o(b._strict) || (a._strict = b._strict), o(b._tzm) || (a._tzm = b._tzm), o(b._isUTC) || (a._isUTC = b._isUTC), o(b._offset) || (a._offset = b._offset), o(b._pf) || (a._pf = l(b)), o(b._locale) || (a._locale = b._locale), le.length > 0) for (c in le) {
               d = le[c], e = b[d], o(e) || (a[d] = e);
          }return a;
     }

     function q(b) {
          p(this, b), this._d = new Date(null != b._d ? b._d.getTime() : NaN), me === !1 && (me = !0, a.updateOffset(this), me = !1);
     }function r(a) {
          return a instanceof q || null != a && null != a._isAMomentObject;
     }function s(a) {
          return a < 0 ? Math.ceil(a) || 0 : Math.floor(a);
     }function t(a) {
          var b = +a,
              c = 0;return 0 !== b && isFinite(b) && (c = s(b)), c;
     }

     function u(a, b, c) {
          var d,
              e = Math.min(a.length, b.length),
              f = Math.abs(a.length - b.length),
              g = 0;for (d = 0; d < e; d++) {
               (c && a[d] !== b[d] || !c && t(a[d]) !== t(b[d])) && g++;
          }return g + f;
     }function v(b) {
          a.suppressDeprecationWarnings === !1 && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + b);
     }function w(b, c) {
          var d = !0;return i(function () {
               if (null != a.deprecationHandler && a.deprecationHandler(null, b), d) {
                    for (var e, f = [], g = 0; g < arguments.length; g++) {
                         if (e = "", "object" == typeof arguments[g]) {
                              e += "\n[" + g + "] ";for (var h in arguments[0]) {
                                   e += h + ": " + arguments[0][h] + ", ";
                              }e = e.slice(0, -2);
                         } else e = arguments[g];f.push(e);
                    }v(b + "\nArguments: " + Array.prototype.slice.call(f).join("") + "\n" + new Error().stack), d = !1;
               }return c.apply(this, arguments);
          }, c);
     }function x(b, c) {
          null != a.deprecationHandler && a.deprecationHandler(b, c), ne[b] || (v(c), ne[b] = !0);
     }function y(a) {
          return a instanceof Function || "[object Function]" === Object.prototype.toString.call(a);
     }function z(a) {
          var b, c;for (c in a) {
               b = a[c], y(b) ? this[c] = b : this["_" + c] = b;
          }this._config = a, this._ordinalParseLenient = new RegExp(this._ordinalParse.source + "|" + /\d{1,2}/.source);
     }function A(a, b) {
          var c,
              e = i({}, a);for (c in b) {
               h(b, c) && (d(a[c]) && d(b[c]) ? (e[c] = {}, i(e[c], a[c]), i(e[c], b[c])) : null != b[c] ? e[c] = b[c] : delete e[c]);
          }for (c in a) {
               h(a, c) && !h(b, c) && d(a[c]) && (e[c] = i({}, e[c]));
          }return e;
     }function B(a) {
          null != a && this.set(a);
     }function C(a, b, c) {
          var d = this._calendar[a] || this._calendar.sameElse;return y(d) ? d.call(b, c) : d;
     }function D(a) {
          var b = this._longDateFormat[a],
              c = this._longDateFormat[a.toUpperCase()];return b || !c ? b : (this._longDateFormat[a] = c.replace(/MMMM|MM|DD|dddd/g, function (a) {
               return a.slice(1);
          }), this._longDateFormat[a]);
     }function E() {
          return this._invalidDate;
     }function F(a) {
          return this._ordinal.replace("%d", a);
     }function G(a, b, c, d) {
          var e = this._relativeTime[c];return y(e) ? e(a, b, c, d) : e.replace(/%d/i, a);
     }function H(a, b) {
          var c = this._relativeTime[a > 0 ? "future" : "past"];return y(c) ? c(b) : c.replace(/%s/i, b);
     }function I(a, b) {
          var c = a.toLowerCase();we[c] = we[c + "s"] = we[b] = a;
     }function J(a) {
          return "string" == typeof a ? we[a] || we[a.toLowerCase()] : void 0;
     }function K(a) {
          var b,
              c,
              d = {};for (c in a) {
               h(a, c) && (b = J(c), b && (d[b] = a[c]));
          }return d;
     }function L(a, b) {
          xe[a] = b;
     }function M(a) {
          var b = [];for (var c in a) {
               b.push({ unit: c, priority: xe[c] });
          }return b.sort(function (a, b) {
               return a.priority - b.priority;
          }), b;
     }function N(b, c) {
          return function (d) {
               return null != d ? (P(this, b, d), a.updateOffset(this, c), this) : O(this, b);
          };
     }function O(a, b) {
          return a.isValid() ? a._d["get" + (a._isUTC ? "UTC" : "") + b]() : NaN;
     }function P(a, b, c) {
          a.isValid() && a._d["set" + (a._isUTC ? "UTC" : "") + b](c);
     }

     function Q(a) {
          return a = J(a), y(this[a]) ? this[a]() : this;
     }function R(a, b) {
          if ("object" == typeof a) {
               a = K(a);for (var c = M(a), d = 0; d < c.length; d++) {
                    this[c[d].unit](a[c[d].unit]);
               }
          } else if (a = J(a), y(this[a])) return this[a](b);return this;
     }function S(a, b, c) {
          var d = "" + Math.abs(a),
              e = b - d.length,
              f = a >= 0;return (f ? c ? "+" : "" : "-") + Math.pow(10, Math.max(0, e)).toString().substr(1) + d;
     }

     function T(a, b, c, d) {
          var e = d;"string" == typeof d && (e = function e() {
               return this[d]();
          }), a && (Be[a] = e), b && (Be[b[0]] = function () {
               return S(e.apply(this, arguments), b[1], b[2]);
          }), c && (Be[c] = function () {
               return this.localeData().ordinal(e.apply(this, arguments), a);
          });
     }function U(a) {
          return a.match(/\[[\s\S]/) ? a.replace(/^\[|\]$/g, "") : a.replace(/\\/g, "");
     }function V(a) {
          var b,
              c,
              d = a.match(ye);for (b = 0, c = d.length; b < c; b++) {
               Be[d[b]] ? d[b] = Be[d[b]] : d[b] = U(d[b]);
          }return function (b) {
               var e,
                   f = "";for (e = 0; e < c; e++) {
                    f += d[e] instanceof Function ? d[e].call(b, a) : d[e];
               }return f;
          };
     }

     function W(a, b) {
          return a.isValid() ? (b = X(b, a.localeData()), Ae[b] = Ae[b] || V(b), Ae[b](a)) : a.localeData().invalidDate();
     }function X(a, b) {
          function c(a) {
               return b.longDateFormat(a) || a;
          }var d = 5;for (ze.lastIndex = 0; d >= 0 && ze.test(a);) {
               a = a.replace(ze, c), ze.lastIndex = 0, d -= 1;
          }return a;
     }function Y(a, b, c) {
          Te[a] = y(b) ? b : function (a, d) {
               return a && c ? c : b;
          };
     }function Z(a, b) {
          return h(Te, a) ? Te[a](b._strict, b._locale) : new RegExp($(a));
     }

     function $(a) {
          return _(a.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (a, b, c, d, e) {
               return b || c || d || e;
          }));
     }function _(a) {
          return a.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
     }function aa(a, b) {
          var c,
              d = b;for ("string" == typeof a && (a = [a]), "number" == typeof b && (d = function d(a, c) {
               c[b] = t(a);
          }), c = 0; c < a.length; c++) {
               Ue[a[c]] = d;
          }
     }function ba(a, b) {
          aa(a, function (a, c, d, e) {
               d._w = d._w || {}, b(a, d._w, d, e);
          });
     }function ca(a, b, c) {
          null != b && h(Ue, a) && Ue[a](b, c._a, c, a);
     }function da(a, b) {
          return new Date(Date.UTC(a, b + 1, 0)).getUTCDate();
     }function ea(a, b) {
          return a ? c(this._months) ? this._months[a.month()] : this._months[(this._months.isFormat || cf).test(b) ? "format" : "standalone"][a.month()] : this._months;
     }function fa(a, b) {
          return a ? c(this._monthsShort) ? this._monthsShort[a.month()] : this._monthsShort[cf.test(b) ? "format" : "standalone"][a.month()] : this._monthsShort;
     }function ga(a, b, c) {
          var d,
              e,
              f,
              g = a.toLocaleLowerCase();if (!this._monthsParse) for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], d = 0; d < 12; ++d) {
               f = j([2e3, d]), this._shortMonthsParse[d] = this.monthsShort(f, "").toLocaleLowerCase(), this._longMonthsParse[d] = this.months(f, "").toLocaleLowerCase();
          }return c ? "MMM" === b ? (e = pe.call(this._shortMonthsParse, g), e !== -1 ? e : null) : (e = pe.call(this._longMonthsParse, g), e !== -1 ? e : null) : "MMM" === b ? (e = pe.call(this._shortMonthsParse, g), e !== -1 ? e : (e = pe.call(this._longMonthsParse, g), e !== -1 ? e : null)) : (e = pe.call(this._longMonthsParse, g), e !== -1 ? e : (e = pe.call(this._shortMonthsParse, g), e !== -1 ? e : null));
     }function ha(a, b, c) {
          var d, e, f;if (this._monthsParseExact) return ga.call(this, a, b, c);

          for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), d = 0; d < 12; d++) {
               if (e = j([2e3, d]), c && !this._longMonthsParse[d] && (this._longMonthsParse[d] = new RegExp("^" + this.months(e, "").replace(".", "") + "$", "i"), this._shortMonthsParse[d] = new RegExp("^" + this.monthsShort(e, "").replace(".", "") + "$", "i")), c || this._monthsParse[d] || (f = "^" + this.months(e, "") + "|^" + this.monthsShort(e, ""), this._monthsParse[d] = new RegExp(f.replace(".", ""), "i")), c && "MMMM" === b && this._longMonthsParse[d].test(a)) return d;if (c && "MMM" === b && this._shortMonthsParse[d].test(a)) return d;if (!c && this._monthsParse[d].test(a)) return d;
          }
     }

     function ia(a, b) {
          var c;if (!a.isValid()) return a;if ("string" == typeof b) if (/^\d+$/.test(b)) b = t(b);else if (b = a.localeData().monthsParse(b), "number" != typeof b) return a;return c = Math.min(a.date(), da(a.year(), b)), a._d["set" + (a._isUTC ? "UTC" : "") + "Month"](b, c), a;
     }function ja(b) {
          return null != b ? (ia(this, b), a.updateOffset(this, !0), this) : O(this, "Month");
     }function ka() {
          return da(this.year(), this.month());
     }function la(a) {
          return this._monthsParseExact ? (h(this, "_monthsRegex") || na.call(this), a ? this._monthsShortStrictRegex : this._monthsShortRegex) : (h(this, "_monthsShortRegex") || (this._monthsShortRegex = ff), this._monthsShortStrictRegex && a ? this._monthsShortStrictRegex : this._monthsShortRegex);
     }function ma(a) {
          return this._monthsParseExact ? (h(this, "_monthsRegex") || na.call(this), a ? this._monthsStrictRegex : this._monthsRegex) : (h(this, "_monthsRegex") || (this._monthsRegex = gf), this._monthsStrictRegex && a ? this._monthsStrictRegex : this._monthsRegex);
     }function na() {
          function a(a, b) {
               return b.length - a.length;
          }var b,
              c,
              d = [],
              e = [],
              f = [];for (b = 0; b < 12; b++) {
               c = j([2e3, b]), d.push(this.monthsShort(c, "")), e.push(this.months(c, "")), f.push(this.months(c, "")), f.push(this.monthsShort(c, ""));
          }for (d.sort(a), e.sort(a), f.sort(a), b = 0; b < 12; b++) {
               d[b] = _(d[b]), e[b] = _(e[b]);
          }for (b = 0; b < 24; b++) {
               f[b] = _(f[b]);
          }this._monthsRegex = new RegExp("^(" + f.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + e.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + d.join("|") + ")", "i");
     }

     function oa(a) {
          return pa(a) ? 366 : 365;
     }function pa(a) {
          return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0;
     }function qa() {
          return pa(this.year());
     }function ra(a, b, c, d, e, f, g) {
          var h = new Date(a, b, c, d, e, f, g);

          return a < 100 && a >= 0 && isFinite(h.getFullYear()) && h.setFullYear(a), h;
     }function sa(a) {
          var b = new Date(Date.UTC.apply(null, arguments));

          return a < 100 && a >= 0 && isFinite(b.getUTCFullYear()) && b.setUTCFullYear(a), b;
     }

     function ta(a, b, c) {
          var d = 7 + b - c,
              e = (7 + sa(a, 0, d).getUTCDay() - b) % 7;return -e + d - 1;
     }

     function ua(a, b, c, d, e) {
          var f,
              g,
              h = (7 + c - d) % 7,
              i = ta(a, d, e),
              j = 1 + 7 * (b - 1) + h + i;return j <= 0 ? (f = a - 1, g = oa(f) + j) : j > oa(a) ? (f = a + 1, g = j - oa(a)) : (f = a, g = j), { year: f, dayOfYear: g };
     }function va(a, b, c) {
          var d,
              e,
              f = ta(a.year(), b, c),
              g = Math.floor((a.dayOfYear() - f - 1) / 7) + 1;return g < 1 ? (e = a.year() - 1, d = g + wa(e, b, c)) : g > wa(a.year(), b, c) ? (d = g - wa(a.year(), b, c), e = a.year() + 1) : (e = a.year(), d = g), { week: d, year: e };
     }function wa(a, b, c) {
          var d = ta(a, b, c),
              e = ta(a + 1, b, c);return (oa(a) - d + e) / 7;
     }

     function xa(a) {
          return va(a, this._week.dow, this._week.doy).week;
     }function ya() {
          return this._week.dow;
     }function za() {
          return this._week.doy;
     }

     function Aa(a) {
          var b = this.localeData().week(this);return null == a ? b : this.add(7 * (a - b), "d");
     }function Ba(a) {
          var b = va(this, 1, 4).week;return null == a ? b : this.add(7 * (a - b), "d");
     }

     function Ca(a, b) {
          return "string" != typeof a ? a : isNaN(a) ? (a = b.weekdaysParse(a), "number" == typeof a ? a : null) : parseInt(a, 10);
     }function Da(a, b) {
          return "string" == typeof a ? b.weekdaysParse(a) % 7 || 7 : isNaN(a) ? null : a;
     }function Ea(a, b) {
          return a ? c(this._weekdays) ? this._weekdays[a.day()] : this._weekdays[this._weekdays.isFormat.test(b) ? "format" : "standalone"][a.day()] : this._weekdays;
     }function Fa(a) {
          return a ? this._weekdaysShort[a.day()] : this._weekdaysShort;
     }function Ga(a) {
          return a ? this._weekdaysMin[a.day()] : this._weekdaysMin;
     }function Ha(a, b, c) {
          var d,
              e,
              f,
              g = a.toLocaleLowerCase();if (!this._weekdaysParse) for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], d = 0; d < 7; ++d) {
               f = j([2e3, 1]).day(d), this._minWeekdaysParse[d] = this.weekdaysMin(f, "").toLocaleLowerCase(), this._shortWeekdaysParse[d] = this.weekdaysShort(f, "").toLocaleLowerCase(), this._weekdaysParse[d] = this.weekdays(f, "").toLocaleLowerCase();
          }return c ? "dddd" === b ? (e = pe.call(this._weekdaysParse, g), e !== -1 ? e : null) : "ddd" === b ? (e = pe.call(this._shortWeekdaysParse, g), e !== -1 ? e : null) : (e = pe.call(this._minWeekdaysParse, g), e !== -1 ? e : null) : "dddd" === b ? (e = pe.call(this._weekdaysParse, g), e !== -1 ? e : (e = pe.call(this._shortWeekdaysParse, g), e !== -1 ? e : (e = pe.call(this._minWeekdaysParse, g), e !== -1 ? e : null))) : "ddd" === b ? (e = pe.call(this._shortWeekdaysParse, g), e !== -1 ? e : (e = pe.call(this._weekdaysParse, g), e !== -1 ? e : (e = pe.call(this._minWeekdaysParse, g), e !== -1 ? e : null))) : (e = pe.call(this._minWeekdaysParse, g), e !== -1 ? e : (e = pe.call(this._weekdaysParse, g), e !== -1 ? e : (e = pe.call(this._shortWeekdaysParse, g), e !== -1 ? e : null)));
     }function Ia(a, b, c) {
          var d, e, f;if (this._weekdaysParseExact) return Ha.call(this, a, b, c);for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), d = 0; d < 7; d++) {
               if (e = j([2e3, 1]).day(d), c && !this._fullWeekdaysParse[d] && (this._fullWeekdaysParse[d] = new RegExp("^" + this.weekdays(e, "").replace(".", ".?") + "$", "i"), this._shortWeekdaysParse[d] = new RegExp("^" + this.weekdaysShort(e, "").replace(".", ".?") + "$", "i"), this._minWeekdaysParse[d] = new RegExp("^" + this.weekdaysMin(e, "").replace(".", ".?") + "$", "i")), this._weekdaysParse[d] || (f = "^" + this.weekdays(e, "") + "|^" + this.weekdaysShort(e, "") + "|^" + this.weekdaysMin(e, ""), this._weekdaysParse[d] = new RegExp(f.replace(".", ""), "i")), c && "dddd" === b && this._fullWeekdaysParse[d].test(a)) return d;if (c && "ddd" === b && this._shortWeekdaysParse[d].test(a)) return d;if (c && "dd" === b && this._minWeekdaysParse[d].test(a)) return d;if (!c && this._weekdaysParse[d].test(a)) return d;
          }
     }

     function Ja(a) {
          if (!this.isValid()) return null != a ? this : NaN;var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay();return null != a ? (a = Ca(a, this.localeData()), this.add(a - b, "d")) : b;
     }function Ka(a) {
          if (!this.isValid()) return null != a ? this : NaN;var b = (this.day() + 7 - this.localeData()._week.dow) % 7;return null == a ? b : this.add(a - b, "d");
     }function La(a) {
          if (!this.isValid()) return null != a ? this : NaN;

          if (null != a) {
               var b = Da(a, this.localeData());return this.day(this.day() % 7 ? b : b - 7);
          }return this.day() || 7;
     }function Ma(a) {
          return this._weekdaysParseExact ? (h(this, "_weekdaysRegex") || Pa.call(this), a ? this._weekdaysStrictRegex : this._weekdaysRegex) : (h(this, "_weekdaysRegex") || (this._weekdaysRegex = nf), this._weekdaysStrictRegex && a ? this._weekdaysStrictRegex : this._weekdaysRegex);
     }function Na(a) {
          return this._weekdaysParseExact ? (h(this, "_weekdaysRegex") || Pa.call(this), a ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (h(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = of), this._weekdaysShortStrictRegex && a ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex);
     }function Oa(a) {
          return this._weekdaysParseExact ? (h(this, "_weekdaysRegex") || Pa.call(this), a ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (h(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = pf), this._weekdaysMinStrictRegex && a ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex);
     }function Pa() {
          function a(a, b) {
               return b.length - a.length;
          }var b,
              c,
              d,
              e,
              f,
              g = [],
              h = [],
              i = [],
              k = [];for (b = 0; b < 7; b++) {
               c = j([2e3, 1]).day(b), d = this.weekdaysMin(c, ""), e = this.weekdaysShort(c, ""), f = this.weekdays(c, ""), g.push(d), h.push(e), i.push(f), k.push(d), k.push(e), k.push(f);
          }for (g.sort(a), h.sort(a), i.sort(a), k.sort(a), b = 0; b < 7; b++) {
               h[b] = _(h[b]), i[b] = _(i[b]), k[b] = _(k[b]);
          }this._weekdaysRegex = new RegExp("^(" + k.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + h.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + g.join("|") + ")", "i");
     }

     function Qa() {
          return this.hours() % 12 || 12;
     }function Ra() {
          return this.hours() || 24;
     }function Sa(a, b) {
          T(a, 0, 0, function () {
               return this.localeData().meridiem(this.hours(), this.minutes(), b);
          });
     }

     function Ta(a, b) {
          return b._meridiemParse;
     }

     function Ua(a) {
          return "p" === (a + "").toLowerCase().charAt(0);
     }function Va(a, b, c) {
          return a > 11 ? c ? "pm" : "PM" : c ? "am" : "AM";
     }function Wa(a) {
          return a ? a.toLowerCase().replace("_", "-") : a;
     }

     function Xa(a) {
          for (var b, c, d, e, f = 0; f < a.length;) {
               for (e = Wa(a[f]).split("-"), b = e.length, c = Wa(a[f + 1]), c = c ? c.split("-") : null; b > 0;) {
                    if (d = Ya(e.slice(0, b).join("-"))) return d;if (c && c.length >= b && u(e, c, !0) >= b - 1) break;b--;
               }f++;
          }return null;
     }function Ya(a) {
          var b = null;

          if (!uf[a] && "undefined" != typeof module && module && module.exports) try {
               b = qf._abbr, require("./locale/" + a), Za(b);
          } catch (a) {}return uf[a];
     }

     function Za(a, b) {
          var c;

          return a && (c = o(b) ? ab(a) : $a(a, b), c && (qf = c)), qf._abbr;
     }function $a(a, b) {
          if (null !== b) {
               var c = tf;

               return b.abbr = a, null != uf[a] ? (x("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), c = uf[a]._config) : null != b.parentLocale && (null != uf[b.parentLocale] ? c = uf[b.parentLocale]._config : x("parentLocaleUndefined", "specified parentLocale is not defined yet. See http://momentjs.com/guides/#/warnings/parent-locale/")), uf[a] = new B(A(c, b)), Za(a), uf[a];
          }

          return delete uf[a], null;
     }function _a(a, b) {
          if (null != b) {
               var c,
                   d = tf;

               null != uf[a] && (d = uf[a]._config), b = A(d, b), c = new B(b), c.parentLocale = uf[a], uf[a] = c, Za(a);
          } else null != uf[a] && (null != uf[a].parentLocale ? uf[a] = uf[a].parentLocale : null != uf[a] && delete uf[a]);return uf[a];
     }

     function ab(a) {
          var b;if (a && a._locale && a._locale._abbr && (a = a._locale._abbr), !a) return qf;if (!c(a)) {
               if (b = Ya(a)) return b;a = [a];
          }return Xa(a);
     }function bb() {
          return oe(uf);
     }function cb(a) {
          var b,
              c = a._a;return c && l(a).overflow === -2 && (b = c[We] < 0 || c[We] > 11 ? We : c[Xe] < 1 || c[Xe] > da(c[Ve], c[We]) ? Xe : c[Ye] < 0 || c[Ye] > 24 || 24 === c[Ye] && (0 !== c[Ze] || 0 !== c[$e] || 0 !== c[_e]) ? Ye : c[Ze] < 0 || c[Ze] > 59 ? Ze : c[$e] < 0 || c[$e] > 59 ? $e : c[_e] < 0 || c[_e] > 999 ? _e : -1, l(a)._overflowDayOfYear && (b < Ve || b > Xe) && (b = Xe), l(a)._overflowWeeks && b === -1 && (b = af), l(a)._overflowWeekday && b === -1 && (b = bf), l(a).overflow = b), a;
     }

     function db(a) {
          var b,
              c,
              d,
              e,
              f,
              g,
              h = a._i,
              i = vf.exec(h) || wf.exec(h);if (i) {
               for (l(a).iso = !0, b = 0, c = yf.length; b < c; b++) {
                    if (yf[b][1].exec(i[1])) {
                         e = yf[b][0], d = yf[b][2] !== !1;break;
                    }
               }if (null == e) return void (a._isValid = !1);if (i[3]) {
                    for (b = 0, c = zf.length; b < c; b++) {
                         if (zf[b][1].exec(i[3])) {
                              f = (i[2] || " ") + zf[b][0];break;
                         }
                    }if (null == f) return void (a._isValid = !1);
               }if (!d && null != f) return void (a._isValid = !1);if (i[4]) {
                    if (!xf.exec(i[4])) return void (a._isValid = !1);g = "Z";
               }a._f = e + (f || "") + (g || ""), jb(a);
          } else a._isValid = !1;
     }

     function eb(b) {
          var c = Af.exec(b._i);return null !== c ? void (b._d = new Date(+c[1])) : (db(b), void (b._isValid === !1 && (delete b._isValid, a.createFromInputFallback(b))));
     }

     function fb(a, b, c) {
          return null != a ? a : null != b ? b : c;
     }function gb(b) {
          var c = new Date(a.now());return b._useUTC ? [c.getUTCFullYear(), c.getUTCMonth(), c.getUTCDate()] : [c.getFullYear(), c.getMonth(), c.getDate()];
     }

     function hb(a) {
          var b,
              c,
              d,
              e,
              f = [];if (!a._d) {
               for (d = gb(a), a._w && null == a._a[Xe] && null == a._a[We] && ib(a), a._dayOfYear && (e = fb(a._a[Ve], d[Ve]), a._dayOfYear > oa(e) && (l(a)._overflowDayOfYear = !0), c = sa(e, 0, a._dayOfYear), a._a[We] = c.getUTCMonth(), a._a[Xe] = c.getUTCDate()), b = 0; b < 3 && null == a._a[b]; ++b) {
                    a._a[b] = f[b] = d[b];
               }
               for (; b < 7; b++) {
                    a._a[b] = f[b] = null == a._a[b] ? 2 === b ? 1 : 0 : a._a[b];
               }
               24 === a._a[Ye] && 0 === a._a[Ze] && 0 === a._a[$e] && 0 === a._a[_e] && (a._nextDay = !0, a._a[Ye] = 0), a._d = (a._useUTC ? sa : ra).apply(null, f), null != a._tzm && a._d.setUTCMinutes(a._d.getUTCMinutes() - a._tzm), a._nextDay && (a._a[Ye] = 24);
          }
     }function ib(a) {
          var b, c, d, e, f, g, h, i;b = a._w, null != b.GG || null != b.W || null != b.E ? (f = 1, g = 4, c = fb(b.GG, a._a[Ve], va(rb(), 1, 4).year), d = fb(b.W, 1), e = fb(b.E, 1), (e < 1 || e > 7) && (i = !0)) : (f = a._locale._week.dow, g = a._locale._week.doy, c = fb(b.gg, a._a[Ve], va(rb(), f, g).year), d = fb(b.w, 1), null != b.d ? (e = b.d, (e < 0 || e > 6) && (i = !0)) : null != b.e ? (e = b.e + f, (b.e < 0 || b.e > 6) && (i = !0)) : e = f), d < 1 || d > wa(c, f, g) ? l(a)._overflowWeeks = !0 : null != i ? l(a)._overflowWeekday = !0 : (h = ua(c, d, e, f, g), a._a[Ve] = h.year, a._dayOfYear = h.dayOfYear);
     }

     function jb(b) {
          if (b._f === a.ISO_8601) return void db(b);b._a = [], l(b).empty = !0;

          var c,
              d,
              e,
              f,
              g,
              h = "" + b._i,
              i = h.length,
              j = 0;for (e = X(b._f, b._locale).match(ye) || [], c = 0; c < e.length; c++) {
               f = e[c], d = (h.match(Z(f, b)) || [])[0], d && (g = h.substr(0, h.indexOf(d)), g.length > 0 && l(b).unusedInput.push(g), h = h.slice(h.indexOf(d) + d.length), j += d.length), Be[f] ? (d ? l(b).empty = !1 : l(b).unusedTokens.push(f), ca(f, d, b)) : b._strict && !d && l(b).unusedTokens.push(f);
          }
          l(b).charsLeftOver = i - j, h.length > 0 && l(b).unusedInput.push(h), b._a[Ye] <= 12 && l(b).bigHour === !0 && b._a[Ye] > 0 && (l(b).bigHour = void 0), l(b).parsedDateParts = b._a.slice(0), l(b).meridiem = b._meridiem, b._a[Ye] = kb(b._locale, b._a[Ye], b._meridiem), hb(b), cb(b);
     }function kb(a, b, c) {
          var d;

          return null == c ? b : null != a.meridiemHour ? a.meridiemHour(b, c) : null != a.isPM ? (d = a.isPM(c), d && b < 12 && (b += 12), d || 12 !== b || (b = 0), b) : b;
     }

     function lb(a) {
          var b, c, d, e, f;if (0 === a._f.length) return l(a).invalidFormat = !0, void (a._d = new Date(NaN));for (e = 0; e < a._f.length; e++) {
               f = 0, b = p({}, a), null != a._useUTC && (b._useUTC = a._useUTC), b._f = a._f[e], jb(b), m(b) && (f += l(b).charsLeftOver, f += 10 * l(b).unusedTokens.length, l(b).score = f, (null == d || f < d) && (d = f, c = b));
          }i(a, c || b);
     }function mb(a) {
          if (!a._d) {
               var b = K(a._i);a._a = g([b.year, b.month, b.day || b.date, b.hour, b.minute, b.second, b.millisecond], function (a) {
                    return a && parseInt(a, 10);
               }), hb(a);
          }
     }function nb(a) {
          var b = new q(cb(ob(a)));

          return b._nextDay && (b.add(1, "d"), b._nextDay = void 0), b;
     }function ob(a) {
          var b = a._i,
              d = a._f;return a._locale = a._locale || ab(a._l), null === b || void 0 === d && "" === b ? n({ nullInput: !0 }) : ("string" == typeof b && (a._i = b = a._locale.preparse(b)), r(b) ? new q(cb(b)) : (c(d) ? lb(a) : f(b) ? a._d = b : d ? jb(a) : pb(a), m(a) || (a._d = null), a));
     }function pb(b) {
          var d = b._i;void 0 === d ? b._d = new Date(a.now()) : f(d) ? b._d = new Date(d.valueOf()) : "string" == typeof d ? eb(b) : c(d) ? (b._a = g(d.slice(0), function (a) {
               return parseInt(a, 10);
          }), hb(b)) : "object" == typeof d ? mb(b) : "number" == typeof d ? b._d = new Date(d) : a.createFromInputFallback(b);
     }function qb(a, b, f, g, h) {
          var i = {};

          return "boolean" == typeof f && (g = f, f = void 0), (d(a) && e(a) || c(a) && 0 === a.length) && (a = void 0), i._isAMomentObject = !0, i._useUTC = i._isUTC = h, i._l = f, i._i = a, i._f = b, i._strict = g, nb(i);
     }function rb(a, b, c, d) {
          return qb(a, b, c, d, !1);
     }

     function sb(a, b) {
          var d, e;if (1 === b.length && c(b[0]) && (b = b[0]), !b.length) return rb();for (d = b[0], e = 1; e < b.length; ++e) {
               b[e].isValid() && !b[e][a](d) || (d = b[e]);
          }return d;
     }

     function tb() {
          var a = [].slice.call(arguments, 0);return sb("isBefore", a);
     }function ub() {
          var a = [].slice.call(arguments, 0);return sb("isAfter", a);
     }function vb(a) {
          var b = K(a),
              c = b.year || 0,
              d = b.quarter || 0,
              e = b.month || 0,
              f = b.week || 0,
              g = b.day || 0,
              h = b.hour || 0,
              i = b.minute || 0,
              j = b.second || 0,
              k = b.millisecond || 0;

          this._milliseconds = +k + 1e3 * j + 6e4 * i + 1e3 * h * 60 * 60, this._days = +g + 7 * f, this._months = +e + 3 * d + 12 * c, this._data = {}, this._locale = ab(), this._bubble();
     }function wb(a) {
          return a instanceof vb;
     }function xb(a) {
          return a < 0 ? Math.round(-1 * a) * -1 : Math.round(a);
     }

     function yb(a, b) {
          T(a, 0, 0, function () {
               var a = this.utcOffset(),
                   c = "+";return a < 0 && (a = -a, c = "-"), c + S(~~(a / 60), 2) + b + S(~~a % 60, 2);
          });
     }function zb(a, b) {
          var c = (b || "").match(a) || [],
              d = c[c.length - 1] || [],
              e = (d + "").match(Ef) || ["-", 0, 0],
              f = +(60 * e[1]) + t(e[2]);return "+" === e[0] ? f : -f;
     }

     function Ab(b, c) {
          var d, e;

          return c._isUTC ? (d = c.clone(), e = (r(b) || f(b) ? b.valueOf() : rb(b).valueOf()) - d.valueOf(), d._d.setTime(d._d.valueOf() + e), a.updateOffset(d, !1), d) : rb(b).local();
     }function Bb(a) {
          return 15 * -Math.round(a._d.getTimezoneOffset() / 15);
     }

     function Cb(b, c) {
          var d,
              e = this._offset || 0;return this.isValid() ? null != b ? ("string" == typeof b ? b = zb(Qe, b) : Math.abs(b) < 16 && (b = 60 * b), !this._isUTC && c && (d = Bb(this)), this._offset = b, this._isUTC = !0, null != d && this.add(d, "m"), e !== b && (!c || this._changeInProgress ? Sb(this, Nb(b - e, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, a.updateOffset(this, !0), this._changeInProgress = null)), this) : this._isUTC ? e : Bb(this) : null != b ? this : NaN;
     }function Db(a, b) {
          return null != a ? ("string" != typeof a && (a = -a), this.utcOffset(a, b), this) : -this.utcOffset();
     }function Eb(a) {
          return this.utcOffset(0, a);
     }function Fb(a) {
          return this._isUTC && (this.utcOffset(0, a), this._isUTC = !1, a && this.subtract(Bb(this), "m")), this;
     }function Gb() {
          if (this._tzm) this.utcOffset(this._tzm);else if ("string" == typeof this._i) {
               var a = zb(Pe, this._i);0 === a ? this.utcOffset(0, !0) : this.utcOffset(zb(Pe, this._i));
          }return this;
     }function Hb(a) {
          return !!this.isValid() && (a = a ? rb(a).utcOffset() : 0, (this.utcOffset() - a) % 60 === 0);
     }function Ib() {
          return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
     }function Jb() {
          if (!o(this._isDSTShifted)) return this._isDSTShifted;var a = {};if (p(a, this), a = ob(a), a._a) {
               var b = a._isUTC ? j(a._a) : rb(a._a);this._isDSTShifted = this.isValid() && u(a._a, b.toArray()) > 0;
          } else this._isDSTShifted = !1;return this._isDSTShifted;
     }function Kb() {
          return !!this.isValid() && !this._isUTC;
     }function Lb() {
          return !!this.isValid() && this._isUTC;
     }function Mb() {
          return !!this.isValid() && this._isUTC && 0 === this._offset;
     }function Nb(a, b) {
          var c,
              d,
              e,
              f = a,
              g = null;
          return wb(a) ? f = { ms: a._milliseconds, d: a._days, M: a._months } : "number" == typeof a ? (f = {}, b ? f[b] = a : f.milliseconds = a) : (g = Ff.exec(a)) ? (c = "-" === g[1] ? -1 : 1, f = { y: 0, d: t(g[Xe]) * c, h: t(g[Ye]) * c, m: t(g[Ze]) * c, s: t(g[$e]) * c, ms: t(xb(1e3 * g[_e])) * c }) : (g = Gf.exec(a)) ? (c = "-" === g[1] ? -1 : 1, f = { y: Ob(g[2], c), M: Ob(g[3], c), w: Ob(g[4], c), d: Ob(g[5], c), h: Ob(g[6], c), m: Ob(g[7], c), s: Ob(g[8], c) }) : null == f ? f = {} : "object" == typeof f && ("from" in f || "to" in f) && (e = Qb(rb(f.from), rb(f.to)), f = {}, f.ms = e.milliseconds, f.M = e.months), d = new vb(f), wb(a) && h(a, "_locale") && (d._locale = a._locale), d;
     }function Ob(a, b) {
          var c = a && parseFloat(a.replace(",", "."));

          return (isNaN(c) ? 0 : c) * b;
     }function Pb(a, b) {
          var c = { milliseconds: 0, months: 0 };return c.months = b.month() - a.month() + 12 * (b.year() - a.year()), a.clone().add(c.months, "M").isAfter(b) && --c.months, c.milliseconds = +b - +a.clone().add(c.months, "M"), c;
     }function Qb(a, b) {
          var c;return a.isValid() && b.isValid() ? (b = Ab(b, a), a.isBefore(b) ? c = Pb(a, b) : (c = Pb(b, a), c.milliseconds = -c.milliseconds, c.months = -c.months), c) : { milliseconds: 0, months: 0 };
     }

     function Rb(a, b) {
          return function (c, d) {
               var e, f;

               return null === d || isNaN(+d) || (x(b, "moment()." + b + "(period, number) is deprecated. Please use moment()." + b + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), f = c, c = d, d = f), c = "string" == typeof c ? +c : c, e = Nb(c, d), Sb(this, e, a), this;
          };
     }function Sb(b, c, d, e) {
          var f = c._milliseconds,
              g = xb(c._days),
              h = xb(c._months);b.isValid() && (e = null == e || e, f && b._d.setTime(b._d.valueOf() + f * d), g && P(b, "Date", O(b, "Date") + g * d), h && ia(b, O(b, "Month") + h * d), e && a.updateOffset(b, g || h));
     }function Tb(a, b) {
          var c = a.diff(b, "days", !0);return c < -6 ? "sameElse" : c < -1 ? "lastWeek" : c < 0 ? "lastDay" : c < 1 ? "sameDay" : c < 2 ? "nextDay" : c < 7 ? "nextWeek" : "sameElse";
     }function Ub(b, c) {
          var d = b || rb(),
              e = Ab(d, this).startOf("day"),
              f = a.calendarFormat(this, e) || "sameElse",
              g = c && (y(c[f]) ? c[f].call(this, d) : c[f]);return this.format(g || this.localeData().calendar(f, this, rb(d)));
     }function Vb() {
          return new q(this);
     }function Wb(a, b) {
          var c = r(a) ? a : rb(a);return !(!this.isValid() || !c.isValid()) && (b = J(o(b) ? "millisecond" : b), "millisecond" === b ? this.valueOf() > c.valueOf() : c.valueOf() < this.clone().startOf(b).valueOf());
     }function Xb(a, b) {
          var c = r(a) ? a : rb(a);return !(!this.isValid() || !c.isValid()) && (b = J(o(b) ? "millisecond" : b), "millisecond" === b ? this.valueOf() < c.valueOf() : this.clone().endOf(b).valueOf() < c.valueOf());
     }function Yb(a, b, c, d) {
          return d = d || "()", ("(" === d[0] ? this.isAfter(a, c) : !this.isBefore(a, c)) && (")" === d[1] ? this.isBefore(b, c) : !this.isAfter(b, c));
     }function Zb(a, b) {
          var c,
              d = r(a) ? a : rb(a);return !(!this.isValid() || !d.isValid()) && (b = J(b || "millisecond"), "millisecond" === b ? this.valueOf() === d.valueOf() : (c = d.valueOf(), this.clone().startOf(b).valueOf() <= c && c <= this.clone().endOf(b).valueOf()));
     }function $b(a, b) {
          return this.isSame(a, b) || this.isAfter(a, b);
     }function _b(a, b) {
          return this.isSame(a, b) || this.isBefore(a, b);
     }function ac(a, b, c) {
          var d, e, f, g;
          return this.isValid() ? (d = Ab(a, this), d.isValid() ? (e = 6e4 * (d.utcOffset() - this.utcOffset()), b = J(b), "year" === b || "month" === b || "quarter" === b ? (g = bc(this, d), "quarter" === b ? g /= 3 : "year" === b && (g /= 12)) : (f = this - d, g = "second" === b ? f / 1e3 : "minute" === b ? f / 6e4 : "hour" === b ? f / 36e5 : "day" === b ? (f - e) / 864e5 : "week" === b ? (f - e) / 6048e5 : f), c ? g : s(g)) : NaN) : NaN;
     }function bc(a, b) {
          var c,
              d,
              e = 12 * (b.year() - a.year()) + (b.month() - a.month()),
              f = a.clone().add(e, "months");

          return b - f < 0 ? (c = a.clone().add(e - 1, "months"), d = (b - f) / (f - c)) : (c = a.clone().add(e + 1, "months"), d = (b - f) / (c - f)), -(e + d) || 0;
     }function cc() {
          return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
     }function dc() {
          var a = this.clone().utc();return 0 < a.year() && a.year() <= 9999 ? y(Date.prototype.toISOString) ? this.toDate().toISOString() : W(a, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : W(a, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]");
     }function ec(b) {
          b || (b = this.isUtc() ? a.defaultFormatUtc : a.defaultFormat);var c = W(this, b);return this.localeData().postformat(c);
     }function fc(a, b) {
          return this.isValid() && (r(a) && a.isValid() || rb(a).isValid()) ? Nb({ to: this, from: a }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();
     }function gc(a) {
          return this.from(rb(), a);
     }function hc(a, b) {
          return this.isValid() && (r(a) && a.isValid() || rb(a).isValid()) ? Nb({ from: this, to: a }).locale(this.locale()).humanize(!b) : this.localeData().invalidDate();
     }function ic(a) {
          return this.to(rb(), a);
     }

     function jc(a) {
          var b;return void 0 === a ? this._locale._abbr : (b = ab(a), null != b && (this._locale = b), this);
     }function kc() {
          return this._locale;
     }function lc(a) {
          switch (a = J(a)) {case "year":
                    this.month(0);
               case "quarter":case "month":
                    this.date(1);
               case "week":case "isoWeek":case "day":case "date":
                    this.hours(0);
               case "hour":
                    this.minutes(0);
               case "minute":
                    this.seconds(0);
               case "second":
                    this.milliseconds(0);}

          return "week" === a && this.weekday(0), "isoWeek" === a && this.isoWeekday(1), "quarter" === a && this.month(3 * Math.floor(this.month() / 3)), this;
     }function mc(a) {
          return a = J(a), void 0 === a || "millisecond" === a ? this : ("date" === a && (a = "day"), this.startOf(a).add(1, "isoWeek" === a ? "week" : a).subtract(1, "ms"));
     }function nc() {
          return this._d.valueOf() - 6e4 * (this._offset || 0);
     }function oc() {
          return Math.floor(this.valueOf() / 1e3);
     }function pc() {
          return new Date(this.valueOf());
     }function qc() {
          var a = this;return [a.year(), a.month(), a.date(), a.hour(), a.minute(), a.second(), a.millisecond()];
     }function rc() {
          var a = this;return { years: a.year(), months: a.month(), date: a.date(), hours: a.hours(), minutes: a.minutes(), seconds: a.seconds(), milliseconds: a.milliseconds() };
     }function sc() {
          return this.isValid() ? this.toISOString() : null;
     }function tc() {
          return m(this);
     }function uc() {
          return i({}, l(this));
     }function vc() {
          return l(this).overflow;
     }function wc() {
          return { input: this._i, format: this._f, locale: this._locale, isUTC: this._isUTC, strict: this._strict };
     }function xc(a, b) {
          T(0, [a, a.length], 0, b);
     }

     function yc(a) {
          return Cc.call(this, a, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
     }function zc(a) {
          return Cc.call(this, a, this.isoWeek(), this.isoWeekday(), 1, 4);
     }function Ac() {
          return wa(this.year(), 1, 4);
     }function Bc() {
          var a = this.localeData()._week;return wa(this.year(), a.dow, a.doy);
     }function Cc(a, b, c, d, e) {
          var f;return null == a ? va(this, d, e).year : (f = wa(a, d, e), b > f && (b = f), Dc.call(this, a, b, c, d, e));
     }function Dc(a, b, c, d, e) {
          var f = ua(a, b, c, d, e),
              g = sa(f.year, 0, f.dayOfYear);return this.year(g.getUTCFullYear()), this.month(g.getUTCMonth()), this.date(g.getUTCDate()), this;
     }

     function Ec(a) {
          return null == a ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a - 1) + this.month() % 3);
     }

     function Fc(a) {
          var b = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;return null == a ? b : this.add(a - b, "d");
     }function Gc(a, b) {
          b[_e] = t(1e3 * ("0." + a));
     }

     function Hc() {
          return this._isUTC ? "UTC" : "";
     }function Ic() {
          return this._isUTC ? "Coordinated Universal Time" : "";
     }function Jc(a) {
          return rb(1e3 * a);
     }function Kc() {
          return rb.apply(null, arguments).parseZone();
     }function Lc(a) {
          return a;
     }function Mc(a, b, c, d) {
          var e = ab(),
              f = j().set(d, b);return e[c](f, a);
     }function Nc(a, b, c) {
          if ("number" == typeof a && (b = a, a = void 0), a = a || "", null != b) return Mc(a, b, c, "month");var d,
              e = [];for (d = 0; d < 12; d++) {
               e[d] = Mc(a, d, c, "month");
          }return e;
     }

     function Oc(a, b, c, d) {
          "boolean" == typeof a ? ("number" == typeof b && (c = b, b = void 0), b = b || "") : (b = a, c = b, a = !1, "number" == typeof b && (c = b, b = void 0), b = b || "");var e = ab(),
              f = a ? e._week.dow : 0;if (null != c) return Mc(b, (c + f) % 7, d, "day");var g,
              h = [];for (g = 0; g < 7; g++) {
               h[g] = Mc(b, (g + f) % 7, d, "day");
          }return h;
     }function Pc(a, b) {
          return Nc(a, b, "months");
     }function Qc(a, b) {
          return Nc(a, b, "monthsShort");
     }function Rc(a, b, c) {
          return Oc(a, b, c, "weekdays");
     }function Sc(a, b, c) {
          return Oc(a, b, c, "weekdaysShort");
     }function Tc(a, b, c) {
          return Oc(a, b, c, "weekdaysMin");
     }function Uc() {
          var a = this._data;return this._milliseconds = Sf(this._milliseconds), this._days = Sf(this._days), this._months = Sf(this._months), a.milliseconds = Sf(a.milliseconds), a.seconds = Sf(a.seconds), a.minutes = Sf(a.minutes), a.hours = Sf(a.hours), a.months = Sf(a.months), a.years = Sf(a.years), this;
     }function Vc(a, b, c, d) {
          var e = Nb(b, c);return a._milliseconds += d * e._milliseconds, a._days += d * e._days, a._months += d * e._months, a._bubble();
     }

     function Wc(a, b) {
          return Vc(this, a, b, 1);
     }

     function Xc(a, b) {
          return Vc(this, a, b, -1);
     }function Yc(a) {
          return a < 0 ? Math.floor(a) : Math.ceil(a);
     }function Zc() {
          var a,
              b,
              c,
              d,
              e,
              f = this._milliseconds,
              g = this._days,
              h = this._months,
              i = this._data;

          return f >= 0 && g >= 0 && h >= 0 || f <= 0 && g <= 0 && h <= 0 || (f += 864e5 * Yc(_c(h) + g), g = 0, h = 0), i.milliseconds = f % 1e3, a = s(f / 1e3), i.seconds = a % 60, b = s(a / 60), i.minutes = b % 60, c = s(b / 60), i.hours = c % 24, g += s(c / 24), e = s($c(g)), h += e, g -= Yc(_c(e)), d = s(h / 12), h %= 12, i.days = g, i.months = h, i.years = d, this;
     }function $c(a) {
          return 4800 * a / 146097;
     }function _c(a) {
          return 146097 * a / 4800;
     }function ad(a) {
          var b,
              c,
              d = this._milliseconds;if (a = J(a), "month" === a || "year" === a) return b = this._days + d / 864e5, c = this._months + $c(b), "month" === a ? c : c / 12;switch (b = this._days + Math.round(_c(this._months)), a) {case "week":
                    return b / 7 + d / 6048e5;case "day":
                    return b + d / 864e5;case "hour":
                    return 24 * b + d / 36e5;case "minute":
                    return 1440 * b + d / 6e4;case "second":
                    return 86400 * b + d / 1e3;

               case "millisecond":
                    return Math.floor(864e5 * b) + d;default:
                    throw new Error("Unknown unit " + a);}
     }

     function bd() {
          return this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * t(this._months / 12);
     }function cd(a) {
          return function () {
               return this.as(a);
          };
     }function dd(a) {
          return a = J(a), this[a + "s"]();
     }function ed(a) {
          return function () {
               return this._data[a];
          };
     }function fd() {
          return s(this.days() / 7);
     }

     function gd(a, b, c, d, e) {
          return e.relativeTime(b || 1, !!c, a, d);
     }function hd(a, b, c) {
          var d = Nb(a).abs(),
              e = gg(d.as("s")),
              f = gg(d.as("m")),
              g = gg(d.as("h")),
              h = gg(d.as("d")),
              i = gg(d.as("M")),
              j = gg(d.as("y")),
              k = e < hg.s && ["s", e] || f <= 1 && ["m"] || f < hg.m && ["mm", f] || g <= 1 && ["h"] || g < hg.h && ["hh", g] || h <= 1 && ["d"] || h < hg.d && ["dd", h] || i <= 1 && ["M"] || i < hg.M && ["MM", i] || j <= 1 && ["y"] || ["yy", j];return k[2] = b, k[3] = +a > 0, k[4] = c, gd.apply(null, k);
     }

     function id(a) {
          return void 0 === a ? gg : "function" == typeof a && (gg = a, !0);
     }

     function jd(a, b) {
          return void 0 !== hg[a] && (void 0 === b ? hg[a] : (hg[a] = b, !0));
     }function kd(a) {
          var b = this.localeData(),
              c = hd(this, !a, b);return a && (c = b.pastFuture(+this, c)), b.postformat(c);
     }function ld() {
          var a,
              b,
              c,
              d = ig(this._milliseconds) / 1e3,
              e = ig(this._days),
              f = ig(this._months);

          a = s(d / 60), b = s(a / 60), d %= 60, a %= 60, c = s(f / 12), f %= 12;

          var g = c,
              h = f,
              i = e,
              j = b,
              k = a,
              l = d,
              m = this.asSeconds();return m ? (m < 0 ? "-" : "") + "P" + (g ? g + "Y" : "") + (h ? h + "M" : "") + (i ? i + "D" : "") + (j || k || l ? "T" : "") + (j ? j + "H" : "") + (k ? k + "M" : "") + (l ? l + "S" : "") : "P0D";
     }function md(a, b) {
          var c = a.split("_");return b % 10 === 1 && b % 100 !== 11 ? c[0] : b % 10 >= 2 && b % 10 <= 4 && (b % 100 < 10 || b % 100 >= 20) ? c[1] : c[2];
     }function nd(a, b, c) {
          var d = { mm: b ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін", hh: b ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін", dd: "дзень_дні_дзён", MM: "месяц_месяцы_месяцаў", yy: "год_гады_гадоў" };return "m" === c ? b ? "хвіліна" : "хвіліну" : "h" === c ? b ? "гадзіна" : "гадзіну" : a + " " + md(d[c], +a);
     }function od(a, b, c) {
          var d = { mm: "munutenn", MM: "miz", dd: "devezh" };return a + " " + rd(d[c], a);
     }function pd(a) {
          switch (qd(a)) {case 1:case 3:case 4:case 5:case 9:
                    return a + " bloaz";default:
                    return a + " vloaz";}
     }function qd(a) {
          return a > 9 ? qd(a % 10) : a;
     }function rd(a, b) {
          return 2 === b ? sd(a) : a;
     }function sd(a) {
          var b = { m: "v", b: "v", d: "z" };return void 0 === b[a.charAt(0)] ? a : b[a.charAt(0)] + a.substring(1);
     }function td(a, b, c) {
          var d = a + " ";switch (c) {case "m":
                    return b ? "jedna minuta" : "jedne minute";case "mm":
                    return d += 1 === a ? "minuta" : 2 === a || 3 === a || 4 === a ? "minute" : "minuta";case "h":
                    return b ? "jedan sat" : "jednog sata";case "hh":
                    return d += 1 === a ? "sat" : 2 === a || 3 === a || 4 === a ? "sata" : "sati";case "dd":
                    return d += 1 === a ? "dan" : "dana";case "MM":
                    return d += 1 === a ? "mjesec" : 2 === a || 3 === a || 4 === a ? "mjeseca" : "mjeseci";case "yy":
                    return d += 1 === a ? "godina" : 2 === a || 3 === a || 4 === a ? "godine" : "godina";}
     }function ud(a) {
          return a > 1 && a < 5 && 1 !== ~~(a / 10);
     }function vd(a, b, c, d) {
          var e = a + " ";switch (c) {case "s":
                    return b || d ? "pár sekund" : "pár sekundami";case "m":
                    return b ? "minuta" : d ? "minutu" : "minutou";case "mm":
                    return b || d ? e + (ud(a) ? "minuty" : "minut") : e + "minutami";break;case "h":
                    return b ? "hodina" : d ? "hodinu" : "hodinou";case "hh":
                    return b || d ? e + (ud(a) ? "hodiny" : "hodin") : e + "hodinami";break;case "d":
                    return b || d ? "den" : "dnem";case "dd":
                    return b || d ? e + (ud(a) ? "dny" : "dní") : e + "dny";break;case "M":
                    return b || d ? "měsíc" : "měsícem";case "MM":
                    return b || d ? e + (ud(a) ? "měsíce" : "měsíců") : e + "měsíci";break;case "y":
                    return b || d ? "rok" : "rokem";case "yy":
                    return b || d ? e + (ud(a) ? "roky" : "let") : e + "lety";}
     }function wd(a, b, c, d) {
          var e = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [a + " Tage", a + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [a + " Monate", a + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [a + " Jahre", a + " Jahren"] };return b ? e[c][0] : e[c][1];
     }function xd(a, b, c, d) {
          var e = { m: ["eine Minute", "einer Minute"], h: ["eine Stunde", "einer Stunde"], d: ["ein Tag", "einem Tag"], dd: [a + " Tage", a + " Tagen"], M: ["ein Monat", "einem Monat"], MM: [a + " Monate", a + " Monaten"], y: ["ein Jahr", "einem Jahr"], yy: [a + " Jahre", a + " Jahren"] };return b ? e[c][0] : e[c][1];
     }function yd(a, b, c, d) {
          var e = { s: ["mõne sekundi", "mõni sekund", "paar sekundit"], m: ["ühe minuti", "üks minut"], mm: [a + " minuti", a + " minutit"], h: ["ühe tunni", "tund aega", "üks tund"], hh: [a + " tunni", a + " tundi"], d: ["ühe päeva", "üks päev"], M: ["kuu aja", "kuu aega", "üks kuu"], MM: [a + " kuu", a + " kuud"], y: ["ühe aasta", "aasta", "üks aasta"], yy: [a + " aasta", a + " aastat"] };return b ? e[c][2] ? e[c][2] : e[c][1] : d ? e[c][0] : e[c][1];
     }function zd(a, b, c, d) {
          var e = "";switch (c) {case "s":
                    return d ? "muutaman sekunnin" : "muutama sekunti";case "m":
                    return d ? "minuutin" : "minuutti";case "mm":
                    e = d ? "minuutin" : "minuuttia";break;case "h":
                    return d ? "tunnin" : "tunti";case "hh":
                    e = d ? "tunnin" : "tuntia";break;case "d":
                    return d ? "päivän" : "päivä";case "dd":
                    e = d ? "päivän" : "päivää";break;case "M":
                    return d ? "kuukauden" : "kuukausi";case "MM":
                    e = d ? "kuukauden" : "kuukautta";break;case "y":
                    return d ? "vuoden" : "vuosi";case "yy":
                    e = d ? "vuoden" : "vuotta";}return e = Ad(a, d) + " " + e;
     }function Ad(a, b) {
          return a < 10 ? b ? Og[a] : Ng[a] : a;
     }function Bd(a, b, c) {
          var d = a + " ";switch (c) {case "m":
                    return b ? "jedna minuta" : "jedne minute";case "mm":
                    return d += 1 === a ? "minuta" : 2 === a || 3 === a || 4 === a ? "minute" : "minuta";case "h":
                    return b ? "jedan sat" : "jednog sata";case "hh":
                    return d += 1 === a ? "sat" : 2 === a || 3 === a || 4 === a ? "sata" : "sati";case "dd":
                    return d += 1 === a ? "dan" : "dana";case "MM":
                    return d += 1 === a ? "mjesec" : 2 === a || 3 === a || 4 === a ? "mjeseca" : "mjeseci";case "yy":
                    return d += 1 === a ? "godina" : 2 === a || 3 === a || 4 === a ? "godine" : "godina";}
     }function Cd(a, b, c, d) {
          var e = a;switch (c) {case "s":
                    return d || b ? "néhány másodperc" : "néhány másodperce";case "m":
                    return "egy" + (d || b ? " perc" : " perce");case "mm":
                    return e + (d || b ? " perc" : " perce");case "h":
                    return "egy" + (d || b ? " óra" : " órája");case "hh":
                    return e + (d || b ? " óra" : " órája");case "d":
                    return "egy" + (d || b ? " nap" : " napja");case "dd":
                    return e + (d || b ? " nap" : " napja");case "M":
                    return "egy" + (d || b ? " hónap" : " hónapja");case "MM":
                    return e + (d || b ? " hónap" : " hónapja");case "y":
                    return "egy" + (d || b ? " év" : " éve");case "yy":
                    return e + (d || b ? " év" : " éve");}return "";
     }function Dd(a) {
          return (a ? "" : "[múlt] ") + "[" + Yg[this.day()] + "] LT[-kor]";
     }function Ed(a) {
          return a % 100 === 11 || a % 10 !== 1;
     }function Fd(a, b, c, d) {
          var e = a + " ";switch (c) {case "s":
                    return b || d ? "nokkrar sekúndur" : "nokkrum sekúndum";case "m":
                    return b ? "mínúta" : "mínútu";case "mm":
                    return Ed(a) ? e + (b || d ? "mínútur" : "mínútum") : b ? e + "mínúta" : e + "mínútu";case "hh":
                    return Ed(a) ? e + (b || d ? "klukkustundir" : "klukkustundum") : e + "klukkustund";case "d":
                    return b ? "dagur" : d ? "dag" : "degi";case "dd":
                    return Ed(a) ? b ? e + "dagar" : e + (d ? "daga" : "dögum") : b ? e + "dagur" : e + (d ? "dag" : "degi");case "M":
                    return b ? "mánuður" : d ? "mánuð" : "mánuði";case "MM":
                    return Ed(a) ? b ? e + "mánuðir" : e + (d ? "mánuði" : "mánuðum") : b ? e + "mánuður" : e + (d ? "mánuð" : "mánuði");case "y":
                    return b || d ? "ár" : "ári";case "yy":
                    return Ed(a) ? e + (b || d ? "ár" : "árum") : e + (b || d ? "ár" : "ári");}
     }function Gd(a, b, c, d) {
          var e = { m: ["eng Minutt", "enger Minutt"], h: ["eng Stonn", "enger Stonn"], d: ["een Dag", "engem Dag"], M: ["ee Mount", "engem Mount"], y: ["ee Joer", "engem Joer"] };return b ? e[c][0] : e[c][1];
     }function Hd(a) {
          var b = a.substr(0, a.indexOf(" "));return Jd(b) ? "a " + a : "an " + a;
     }function Id(a) {
          var b = a.substr(0, a.indexOf(" "));return Jd(b) ? "viru " + a : "virun " + a;
     }
     function Jd(a) {
          if (a = parseInt(a, 10), isNaN(a)) return !1;if (a < 0) return !0;if (a < 10) return 4 <= a && a <= 7;if (a < 100) {
               var b = a % 10,
                   c = a / 10;return Jd(0 === b ? c : b);
          }if (a < 1e4) {
               for (; a >= 10;) {
                    a /= 10;
               }return Jd(a);
          }

          return a /= 1e3, Jd(a);
     }function Kd(a, b, c, d) {
          return b ? "kelios sekundės" : d ? "kelių sekundžių" : "kelias sekundes";
     }function Ld(a, b, c, d) {
          return b ? Nd(c)[0] : d ? Nd(c)[1] : Nd(c)[2];
     }function Md(a) {
          return a % 10 === 0 || a > 10 && a < 20;
     }function Nd(a) {
          return _g[a].split("_");
     }function Od(a, b, c, d) {
          var e = a + " ";return 1 === a ? e + Ld(a, b, c[0], d) : b ? e + (Md(a) ? Nd(c)[1] : Nd(c)[0]) : d ? e + Nd(c)[1] : e + (Md(a) ? Nd(c)[1] : Nd(c)[2]);
     }
     function Pd(a, b, c) {
          return c ? b % 10 === 1 && b % 100 !== 11 ? a[2] : a[3] : b % 10 === 1 && b % 100 !== 11 ? a[0] : a[1];
     }function Qd(a, b, c) {
          return a + " " + Pd(ah[c], a, b);
     }function Rd(a, b, c) {
          return Pd(ah[c], a, b);
     }function Sd(a, b) {
          return b ? "dažas sekundes" : "dažām sekundēm";
     }function Td(a, b, c, d) {
          var e = "";if (b) switch (c) {case "s":
                    e = "काही सेकंद";break;case "m":
                    e = "एक मिनिट";break;case "mm":
                    e = "%d मिनिटे";break;case "h":
                    e = "एक तास";break;case "hh":
                    e = "%d तास";break;case "d":
                    e = "एक दिवस";break;case "dd":
                    e = "%d दिवस";break;case "M":
                    e = "एक महिना";break;case "MM":
                    e = "%d महिने";break;case "y":
                    e = "एक वर्ष";break;case "yy":
                    e = "%d वर्षे";} else switch (c) {case "s":
                    e = "काही सेकंदां";break;case "m":
                    e = "एका मिनिटा";break;case "mm":
                    e = "%d मिनिटां";break;case "h":
                    e = "एका तासा";break;case "hh":
                    e = "%d तासां";break;case "d":
                    e = "एका दिवसा";break;case "dd":
                    e = "%d दिवसां";break;case "M":
                    e = "एका महिन्या";break;case "MM":
                    e = "%d महिन्यां";break;case "y":
                    e = "एका वर्षा";break;case "yy":
                    e = "%d वर्षां";}return e.replace(/%d/i, a);
     }function Ud(a) {
          return a % 10 < 5 && a % 10 > 1 && ~~(a / 10) % 10 !== 1;
     }function Vd(a, b, c) {
          var d = a + " ";switch (c) {case "m":
                    return b ? "minuta" : "minutę";case "mm":
                    return d + (Ud(a) ? "minuty" : "minut");case "h":
                    return b ? "godzina" : "godzinę";case "hh":
                    return d + (Ud(a) ? "godziny" : "godzin");case "MM":
                    return d + (Ud(a) ? "miesiące" : "miesięcy");case "yy":
                    return d + (Ud(a) ? "lata" : "lat");}
     }function Wd(a, b, c) {
          var d = { mm: "minute", hh: "ore", dd: "zile", MM: "luni", yy: "ani" },
              e = " ";return (a % 100 >= 20 || a >= 100 && a % 100 === 0) && (e = " de "), a + e + d[c];
     }function Xd(a, b) {
          var c = a.split("_");return b % 10 === 1 && b % 100 !== 11 ? c[0] : b % 10 >= 2 && b % 10 <= 4 && (b % 100 < 10 || b % 100 >= 20) ? c[1] : c[2];
     }function Yd(a, b, c) {
          var d = { mm: b ? "минута_минуты_минут" : "минуту_минуты_минут", hh: "час_часа_часов", dd: "день_дня_дней", MM: "месяц_месяца_месяцев", yy: "год_года_лет" };return "m" === c ? b ? "минута" : "минуту" : a + " " + Xd(d[c], +a);
     }function Zd(a) {
          return a > 1 && a < 5;
     }function $d(a, b, c, d) {
          var e = a + " ";switch (c) {case "s":
                    return b || d ? "pár sekúnd" : "pár sekundami";case "m":
                    return b ? "minúta" : d ? "minútu" : "minútou";case "mm":
                    return b || d ? e + (Zd(a) ? "minúty" : "minút") : e + "minútami";break;case "h":
                    return b ? "hodina" : d ? "hodinu" : "hodinou";case "hh":
                    return b || d ? e + (Zd(a) ? "hodiny" : "hodín") : e + "hodinami";break;case "d":
                    return b || d ? "deň" : "dňom";case "dd":
                    return b || d ? e + (Zd(a) ? "dni" : "dní") : e + "dňami";break;case "M":
                    return b || d ? "mesiac" : "mesiacom";case "MM":
                    return b || d ? e + (Zd(a) ? "mesiace" : "mesiacov") : e + "mesiacmi";break;case "y":
                    return b || d ? "rok" : "rokom";case "yy":
                    return b || d ? e + (Zd(a) ? "roky" : "rokov") : e + "rokmi";}
     }function _d(a, b, c, d) {
          var e = a + " ";switch (c) {case "s":
                    return b || d ? "nekaj sekund" : "nekaj sekundami";case "m":
                    return b ? "ena minuta" : "eno minuto";case "mm":
                    return e += 1 === a ? b ? "minuta" : "minuto" : 2 === a ? b || d ? "minuti" : "minutama" : a < 5 ? b || d ? "minute" : "minutami" : b || d ? "minut" : "minutami";case "h":
                    return b ? "ena ura" : "eno uro";case "hh":
                    return e += 1 === a ? b ? "ura" : "uro" : 2 === a ? b || d ? "uri" : "urama" : a < 5 ? b || d ? "ure" : "urami" : b || d ? "ur" : "urami";case "d":
                    return b || d ? "en dan" : "enim dnem";case "dd":
                    return e += 1 === a ? b || d ? "dan" : "dnem" : 2 === a ? b || d ? "dni" : "dnevoma" : b || d ? "dni" : "dnevi";case "M":
                    return b || d ? "en mesec" : "enim mesecem";case "MM":
                    return e += 1 === a ? b || d ? "mesec" : "mesecem" : 2 === a ? b || d ? "meseca" : "mesecema" : a < 5 ? b || d ? "mesece" : "meseci" : b || d ? "mesecev" : "meseci";case "y":
                    return b || d ? "eno leto" : "enim letom";case "yy":
                    return e += 1 === a ? b || d ? "leto" : "letom" : 2 === a ? b || d ? "leti" : "letoma" : a < 5 ? b || d ? "leta" : "leti" : b || d ? "let" : "leti";}
     }function ae(a) {
          var b = a;return b = a.indexOf("jaj") !== -1 ? b.slice(0, -3) + "leS" : a.indexOf("jar") !== -1 ? b.slice(0, -3) + "waQ" : a.indexOf("DIS") !== -1 ? b.slice(0, -3) + "nem" : b + " pIq";
     }function be(a) {
          var b = a;return b = a.indexOf("jaj") !== -1 ? b.slice(0, -3) + "Hu’" : a.indexOf("jar") !== -1 ? b.slice(0, -3) + "wen" : a.indexOf("DIS") !== -1 ? b.slice(0, -3) + "ben" : b + " ret";
     }function ce(a, b, c, d) {
          var e = de(a);switch (c) {case "mm":
                    return e + " tup";case "hh":
                    return e + " rep";case "dd":
                    return e + " jaj";case "MM":
                    return e + " jar";case "yy":
                    return e + " DIS";}
     }function de(a) {
          var b = Math.floor(a % 1e3 / 100),
              c = Math.floor(a % 100 / 10),
              d = a % 10,
              e = "";return b > 0 && (e += xh[b] + "vatlh"), c > 0 && (e += ("" !== e ? " " : "") + xh[c] + "maH"), d > 0 && (e += ("" !== e ? " " : "") + xh[d]), "" === e ? "pagh" : e;
     }function ee(a, b, c, d) {
          var e = { s: ["viensas secunds", "'iensas secunds"], m: ["'n míut", "'iens míut"], mm: [a + " míuts", "" + a + " míuts"], h: ["'n þora", "'iensa þora"], hh: [a + " þoras", "" + a + " þoras"], d: ["'n ziua", "'iensa ziua"], dd: [a + " ziuas", "" + a + " ziuas"], M: ["'n mes", "'iens mes"], MM: [a + " mesen", "" + a + " mesen"], y: ["'n ar", "'iens ar"], yy: [a + " ars", "" + a + " ars"] };return d ? e[c][0] : b ? e[c][0] : e[c][1];
     }function fe(a, b) {
          var c = a.split("_");return b % 10 === 1 && b % 100 !== 11 ? c[0] : b % 10 >= 2 && b % 10 <= 4 && (b % 100 < 10 || b % 100 >= 20) ? c[1] : c[2];
     }function ge(a, b, c) {
          var d = { mm: b ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин", hh: b ? "година_години_годин" : "годину_години_годин", dd: "день_дні_днів", MM: "місяць_місяці_місяців", yy: "рік_роки_років" };return "m" === c ? b ? "хвилина" : "хвилину" : "h" === c ? b ? "година" : "годину" : a + " " + fe(d[c], +a);
     }function he(a, b) {
          var c = { nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"), accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"), genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_") },
              d = /(\[[ВвУу]\]) ?dddd/.test(b) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(b) ? "genitive" : "nominative";return c[d][a.day()];
     }function ie(a) {
          return function () {
               return a + "о" + (11 === this.hours() ? "б" : "") + "] LT";
          };
     }var je, ke;ke = Array.prototype.some ? Array.prototype.some : function (a) {
          for (var b = Object(this), c = b.length >>> 0, d = 0; d < c; d++) {
               if (d in b && a.call(this, b[d], d, b)) return !0;
          }return !1;
     };

     var le = a.momentProperties = [],
         me = !1,
         ne = {};a.suppressDeprecationWarnings = !1, a.deprecationHandler = null;var oe;oe = Object.keys ? Object.keys : function (a) {
          var b,
              c = [];for (b in a) {
               h(a, b) && c.push(b);
          }return c;
     };var pe,
         qe = { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" },
         re = { LTS: "h:mm:ss A", LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" },
         se = "Invalid date",
         te = "%d",
         ue = /\d{1,2}/,
         ve = { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" },
         we = {},
         xe = {},
         ye = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
         ze = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
         Ae = {},
         Be = {},
         Ce = /\d/,
         De = /\d\d/,
         Ee = /\d{3}/,
         Fe = /\d{4}/,
         Ge = /[+-]?\d{6}/,
         He = /\d\d?/,
         Ie = /\d\d\d\d?/,
         Je = /\d\d\d\d\d\d?/,
         Ke = /\d{1,3}/,
         Le = /\d{1,4}/,
         Me = /[+-]?\d{1,6}/,
         Ne = /\d+/,
         Oe = /[+-]?\d+/,
         Pe = /Z|[+-]\d\d:?\d\d/gi,
         Qe = /Z|[+-]\d\d(?::?\d\d)?/gi,
         Re = /[+-]?\d+(\.\d{1,3})?/,
         Se = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i,
         Te = {},
         Ue = {},
         Ve = 0,
         We = 1,
         Xe = 2,
         Ye = 3,
         Ze = 4,
         $e = 5,
         _e = 6,
         af = 7,
         bf = 8;pe = Array.prototype.indexOf ? Array.prototype.indexOf : function (a) {
          var b;for (b = 0; b < this.length; ++b) {
               if (this[b] === a) return b;
          }return -1;
     }, T("M", ["MM", 2], "Mo", function () {
          return this.month() + 1;
     }), T("MMM", 0, 0, function (a) {
          return this.localeData().monthsShort(this, a);
     }), T("MMMM", 0, 0, function (a) {
          return this.localeData().months(this, a);
     }), I("month", "M"), L("month", 8), Y("M", He), Y("MM", He, De), Y("MMM", function (a, b) {
          return b.monthsShortRegex(a);
     }), Y("MMMM", function (a, b) {
          return b.monthsRegex(a);
     }), aa(["M", "MM"], function (a, b) {
          b[We] = t(a) - 1;
     }), aa(["MMM", "MMMM"], function (a, b, c, d) {
          var e = c._locale.monthsParse(a, d, c._strict);

          null != e ? b[We] = e : l(c).invalidMonth = a;
     });

     var cf = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
         df = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
         ef = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
         ff = Se,
         gf = Se;

     T("Y", 0, 0, function () {
          var a = this.year();return a <= 9999 ? "" + a : "+" + a;
     }), T(0, ["YY", 2], 0, function () {
          return this.year() % 100;
     }), T(0, ["YYYY", 4], 0, "year"), T(0, ["YYYYY", 5], 0, "year"), T(0, ["YYYYYY", 6, !0], 0, "year"), I("year", "y"), L("year", 1), Y("Y", Oe), Y("YY", He, De), Y("YYYY", Le, Fe), Y("YYYYY", Me, Ge), Y("YYYYYY", Me, Ge), aa(["YYYYY", "YYYYYY"], Ve), aa("YYYY", function (b, c) {
          c[Ve] = 2 === b.length ? a.parseTwoDigitYear(b) : t(b);
     }), aa("YY", function (b, c) {
          c[Ve] = a.parseTwoDigitYear(b);
     }), aa("Y", function (a, b) {
          b[Ve] = parseInt(a, 10);
     }), a.parseTwoDigitYear = function (a) {
          return t(a) + (t(a) > 68 ? 1900 : 2e3);
     };

     var hf = N("FullYear", !0);

     T("w", ["ww", 2], "wo", "week"), T("W", ["WW", 2], "Wo", "isoWeek"), I("week", "w"), I("isoWeek", "W"), L("week", 5), L("isoWeek", 5), Y("w", He), Y("ww", He, De), Y("W", He), Y("WW", He, De), ba(["w", "ww", "W", "WW"], function (a, b, c, d) {
          b[d.substr(0, 1)] = t(a);
     });var jf = { dow: 0,
          doy: 6 };

     T("d", 0, "do", "day"), T("dd", 0, 0, function (a) {
          return this.localeData().weekdaysMin(this, a);
     }), T("ddd", 0, 0, function (a) {
          return this.localeData().weekdaysShort(this, a);
     }), T("dddd", 0, 0, function (a) {
          return this.localeData().weekdays(this, a);
     }), T("e", 0, 0, "weekday"), T("E", 0, 0, "isoWeekday"), I("day", "d"), I("weekday", "e"), I("isoWeekday", "E"), L("day", 11), L("weekday", 11), L("isoWeekday", 11), Y("d", He), Y("e", He), Y("E", He), Y("dd", function (a, b) {
          return b.weekdaysMinRegex(a);
     }), Y("ddd", function (a, b) {
          return b.weekdaysShortRegex(a);
     }), Y("dddd", function (a, b) {
          return b.weekdaysRegex(a);
     }), ba(["dd", "ddd", "dddd"], function (a, b, c, d) {
          var e = c._locale.weekdaysParse(a, d, c._strict);

          null != e ? b.d = e : l(c).invalidWeekday = a;
     }), ba(["d", "e", "E"], function (a, b, c, d) {
          b[d] = t(a);
     });

     var kf = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
         lf = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
         mf = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
         nf = Se,
         of = Se,
         pf = Se;T("H", ["HH", 2], 0, "hour"), T("h", ["hh", 2], 0, Qa), T("k", ["kk", 2], 0, Ra), T("hmm", 0, 0, function () {
          return "" + Qa.apply(this) + S(this.minutes(), 2);
     }), T("hmmss", 0, 0, function () {
          return "" + Qa.apply(this) + S(this.minutes(), 2) + S(this.seconds(), 2);
     }), T("Hmm", 0, 0, function () {
          return "" + this.hours() + S(this.minutes(), 2);
     }), T("Hmmss", 0, 0, function () {
          return "" + this.hours() + S(this.minutes(), 2) + S(this.seconds(), 2);
     }), Sa("a", !0), Sa("A", !1), I("hour", "h"), L("hour", 13), Y("a", Ta), Y("A", Ta), Y("H", He), Y("h", He), Y("HH", He, De), Y("hh", He, De), Y("hmm", Ie), Y("hmmss", Je), Y("Hmm", Ie), Y("Hmmss", Je), aa(["H", "HH"], Ye), aa(["a", "A"], function (a, b, c) {
          c._isPm = c._locale.isPM(a), c._meridiem = a;
     }), aa(["h", "hh"], function (a, b, c) {
          b[Ye] = t(a), l(c).bigHour = !0;
     }), aa("hmm", function (a, b, c) {
          var d = a.length - 2;b[Ye] = t(a.substr(0, d)), b[Ze] = t(a.substr(d)), l(c).bigHour = !0;
     }), aa("hmmss", function (a, b, c) {
          var d = a.length - 4,
              e = a.length - 2;b[Ye] = t(a.substr(0, d)), b[Ze] = t(a.substr(d, 2)), b[$e] = t(a.substr(e)), l(c).bigHour = !0;
     }), aa("Hmm", function (a, b, c) {
          var d = a.length - 2;b[Ye] = t(a.substr(0, d)), b[Ze] = t(a.substr(d));
     }), aa("Hmmss", function (a, b, c) {
          var d = a.length - 4,
              e = a.length - 2;b[Ye] = t(a.substr(0, d)), b[Ze] = t(a.substr(d, 2)), b[$e] = t(a.substr(e));
     });var qf,
         rf = /[ap]\.?m?\.?/i,
         sf = N("Hours", !0),
         tf = { calendar: qe, longDateFormat: re, invalidDate: se, ordinal: te, ordinalParse: ue, relativeTime: ve, months: df, monthsShort: ef, week: jf, weekdays: kf, weekdaysMin: mf, weekdaysShort: lf, meridiemParse: rf },
         uf = {},
         vf = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
         wf = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
         xf = /Z|[+-]\d\d(?::?\d\d)?/,
         yf = [["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/], ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/], ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/], ["GGGG-[W]WW", /\d{4}-W\d\d/, !1], ["YYYY-DDD", /\d{4}-\d{3}/], ["YYYY-MM", /\d{4}-\d\d/, !1], ["YYYYYYMMDD", /[+-]\d{10}/], ["YYYYMMDD", /\d{8}/], ["GGGG[W]WWE", /\d{4}W\d{3}/], ["GGGG[W]WW", /\d{4}W\d{2}/, !1], ["YYYYDDD", /\d{7}/]],
         zf = [["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/], ["HH:mm:ss", /\d\d:\d\d:\d\d/], ["HH:mm", /\d\d:\d\d/], ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/], ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/], ["HHmmss", /\d\d\d\d\d\d/], ["HHmm", /\d\d\d\d/], ["HH", /\d\d/]],
         Af = /^\/?Date\((\-?\d+)/i;a.createFromInputFallback = w("value provided is not in a recognized ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", function (a) {
          a._d = new Date(a._i + (a._useUTC ? " UTC" : ""));
     }), a.ISO_8601 = function () {};var Bf = w("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
          var a = rb.apply(null, arguments);return this.isValid() && a.isValid() ? a < this ? this : a : n();
     }),
         Cf = w("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", function () {
          var a = rb.apply(null, arguments);return this.isValid() && a.isValid() ? a > this ? this : a : n();
     }),
         Df = function Df() {
          return Date.now ? Date.now() : +new Date();
     };yb("Z", ":"), yb("ZZ", ""), Y("Z", Qe), Y("ZZ", Qe), aa(["Z", "ZZ"], function (a, b, c) {
          c._useUTC = !0, c._tzm = zb(Qe, a);
     });

     var Ef = /([\+\-]|\d\d)/gi;

     a.updateOffset = function () {};

     var Ff = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,
         Gf = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;Nb.fn = vb.prototype;var Hf = Rb(1, "add"),
         If = Rb(-1, "subtract");a.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", a.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";var Jf = w("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", function (a) {
          return void 0 === a ? this.localeData() : this.locale(a);
     });

     T(0, ["gg", 2], 0, function () {
          return this.weekYear() % 100;
     }), T(0, ["GG", 2], 0, function () {
          return this.isoWeekYear() % 100;
     }), xc("gggg", "weekYear"), xc("ggggg", "weekYear"), xc("GGGG", "isoWeekYear"), xc("GGGGG", "isoWeekYear"), I("weekYear", "gg"), I("isoWeekYear", "GG"), L("weekYear", 1), L("isoWeekYear", 1), Y("G", Oe), Y("g", Oe), Y("GG", He, De), Y("gg", He, De), Y("GGGG", Le, Fe), Y("gggg", Le, Fe), Y("GGGGG", Me, Ge), Y("ggggg", Me, Ge), ba(["gggg", "ggggg", "GGGG", "GGGGG"], function (a, b, c, d) {
          b[d.substr(0, 2)] = t(a);
     }), ba(["gg", "GG"], function (b, c, d, e) {
          c[e] = a.parseTwoDigitYear(b);
     }), T("Q", 0, "Qo", "quarter"), I("quarter", "Q"), L("quarter", 7), Y("Q", Ce), aa("Q", function (a, b) {
          b[We] = 3 * (t(a) - 1);
     }), T("D", ["DD", 2], "Do", "date"), I("date", "D"), L("date", 9), Y("D", He), Y("DD", He, De), Y("Do", function (a, b) {
          return a ? b._ordinalParse : b._ordinalParseLenient;
     }), aa(["D", "DD"], Xe), aa("Do", function (a, b) {
          b[Xe] = t(a.match(He)[0], 10);
     });

     var Kf = N("Date", !0);

     T("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), I("dayOfYear", "DDD"), L("dayOfYear", 4), Y("DDD", Ke), Y("DDDD", Ee), aa(["DDD", "DDDD"], function (a, b, c) {
          c._dayOfYear = t(a);
     }), T("m", ["mm", 2], 0, "minute"), I("minute", "m"), L("minute", 14), Y("m", He), Y("mm", He, De), aa(["m", "mm"], Ze);

     var Lf = N("Minutes", !1);

     T("s", ["ss", 2], 0, "second"), I("second", "s"), L("second", 15), Y("s", He), Y("ss", He, De), aa(["s", "ss"], $e);

     var Mf = N("Seconds", !1);

     T("S", 0, 0, function () {
          return ~~(this.millisecond() / 100);
     }), T(0, ["SS", 2], 0, function () {
          return ~~(this.millisecond() / 10);
     }), T(0, ["SSS", 3], 0, "millisecond"), T(0, ["SSSS", 4], 0, function () {
          return 10 * this.millisecond();
     }), T(0, ["SSSSS", 5], 0, function () {
          return 100 * this.millisecond();
     }), T(0, ["SSSSSS", 6], 0, function () {
          return 1e3 * this.millisecond();
     }), T(0, ["SSSSSSS", 7], 0, function () {
          return 1e4 * this.millisecond();
     }), T(0, ["SSSSSSSS", 8], 0, function () {
          return 1e5 * this.millisecond();
     }), T(0, ["SSSSSSSSS", 9], 0, function () {
          return 1e6 * this.millisecond();
     }), I("millisecond", "ms"), L("millisecond", 16), Y("S", Ke, Ce), Y("SS", Ke, De), Y("SSS", Ke, Ee);var Nf;for (Nf = "SSSS"; Nf.length <= 9; Nf += "S") {
          Y(Nf, Ne);
     }for (Nf = "S"; Nf.length <= 9; Nf += "S") {
          aa(Nf, Gc);
     }
     var Of = N("Milliseconds", !1);

     T("z", 0, 0, "zoneAbbr"), T("zz", 0, 0, "zoneName");var Pf = q.prototype;Pf.add = Hf, Pf.calendar = Ub, Pf.clone = Vb, Pf.diff = ac, Pf.endOf = mc, Pf.format = ec, Pf.from = fc, Pf.fromNow = gc, Pf.to = hc, Pf.toNow = ic, Pf.get = Q, Pf.invalidAt = vc, Pf.isAfter = Wb, Pf.isBefore = Xb, Pf.isBetween = Yb, Pf.isSame = Zb, Pf.isSameOrAfter = $b, Pf.isSameOrBefore = _b, Pf.isValid = tc, Pf.lang = Jf, Pf.locale = jc, Pf.localeData = kc, Pf.max = Cf, Pf.min = Bf, Pf.parsingFlags = uc, Pf.set = R, Pf.startOf = lc, Pf.subtract = If, Pf.toArray = qc, Pf.toObject = rc, Pf.toDate = pc, Pf.toISOString = dc, Pf.toJSON = sc, Pf.toString = cc, Pf.unix = oc, Pf.valueOf = nc, Pf.creationData = wc, Pf.year = hf, Pf.isLeapYear = qa, Pf.weekYear = yc, Pf.isoWeekYear = zc, Pf.quarter = Pf.quarters = Ec, Pf.month = ja, Pf.daysInMonth = ka, Pf.week = Pf.weeks = Aa, Pf.isoWeek = Pf.isoWeeks = Ba, Pf.weeksInYear = Bc, Pf.isoWeeksInYear = Ac, Pf.date = Kf, Pf.day = Pf.days = Ja, Pf.weekday = Ka, Pf.isoWeekday = La, Pf.dayOfYear = Fc, Pf.hour = Pf.hours = sf, Pf.minute = Pf.minutes = Lf, Pf.second = Pf.seconds = Mf, Pf.millisecond = Pf.milliseconds = Of, Pf.utcOffset = Cb, Pf.utc = Eb, Pf.local = Fb, Pf.parseZone = Gb, Pf.hasAlignedHourOffset = Hb, Pf.isDST = Ib, Pf.isLocal = Kb, Pf.isUtcOffset = Lb, Pf.isUtc = Mb, Pf.isUTC = Mb, Pf.zoneAbbr = Hc, Pf.zoneName = Ic, Pf.dates = w("dates accessor is deprecated. Use date instead.", Kf), Pf.months = w("months accessor is deprecated. Use month instead", ja), Pf.years = w("years accessor is deprecated. Use year instead", hf), Pf.zone = w("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", Db), Pf.isDSTShifted = w("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", Jb);var Qf = Pf,
         Rf = B.prototype;Rf.calendar = C, Rf.longDateFormat = D, Rf.invalidDate = E, Rf.ordinal = F, Rf.preparse = Lc, Rf.postformat = Lc, Rf.relativeTime = G, Rf.pastFuture = H, Rf.set = z, Rf.months = ea, Rf.monthsShort = fa, Rf.monthsParse = ha, Rf.monthsRegex = ma, Rf.monthsShortRegex = la, Rf.week = xa, Rf.firstDayOfYear = za, Rf.firstDayOfWeek = ya, Rf.weekdays = Ea, Rf.weekdaysMin = Ga, Rf.weekdaysShort = Fa, Rf.weekdaysParse = Ia, Rf.weekdaysRegex = Ma, Rf.weekdaysShortRegex = Na, Rf.weekdaysMinRegex = Oa, Rf.isPM = Ua, Rf.meridiem = Va, Za("en", { ordinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === t(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
          } }), a.lang = w("moment.lang is deprecated. Use moment.locale instead.", Za), a.langData = w("moment.langData is deprecated. Use moment.localeData instead.", ab);var Sf = Math.abs,
         Tf = cd("ms"),
         Uf = cd("s"),
         Vf = cd("m"),
         Wf = cd("h"),
         Xf = cd("d"),
         Yf = cd("w"),
         Zf = cd("M"),
         $f = cd("y"),
         _f = ed("milliseconds"),
         ag = ed("seconds"),
         bg = ed("minutes"),
         cg = ed("hours"),
         dg = ed("days"),
         eg = ed("months"),
         fg = ed("years"),
         gg = Math.round,
         hg = { s: 45,
          m: 45,
          h: 22,
          d: 26,
          M: 11 },
         ig = Math.abs,
         jg = vb.prototype;jg.abs = Uc, jg.add = Wc, jg.subtract = Xc, jg.as = ad, jg.asMilliseconds = Tf, jg.asSeconds = Uf, jg.asMinutes = Vf, jg.asHours = Wf, jg.asDays = Xf, jg.asWeeks = Yf, jg.asMonths = Zf, jg.asYears = $f, jg.valueOf = bd, jg._bubble = Zc, jg.get = dd, jg.milliseconds = _f, jg.seconds = ag, jg.minutes = bg, jg.hours = cg, jg.days = dg, jg.weeks = fd, jg.months = eg, jg.years = fg, jg.humanize = kd, jg.toISOString = ld, jg.toString = ld, jg.toJSON = ld, jg.locale = jc, jg.localeData = kc, jg.toIsoString = w("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", ld), jg.lang = Jf, T("X", 0, 0, "unix"), T("x", 0, 0, "valueOf"), Y("x", Oe), Y("X", Re), aa("X", function (a, b, c) {
          c._d = new Date(1e3 * parseFloat(a, 10));
     }), aa("x", function (a, b, c) {
          c._d = new Date(t(a));
     }), a.version = "2.15.2", b(rb), a.fn = Qf, a.min = tb, a.max = ub, a.now = Df, a.utc = j, a.unix = Jc, a.months = Pc, a.isDate = f, a.locale = Za, a.invalid = n, a.duration = Nb, a.isMoment = r, a.weekdays = Rc, a.parseZone = Kc, a.localeData = ab, a.isDuration = wb, a.monthsShort = Qc, a.weekdaysMin = Tc, a.defineLocale = $a, a.updateLocale = _a, a.locales = bb, a.weekdaysShort = Sc, a.normalizeUnits = J, a.relativeTimeRounding = id, a.relativeTimeThreshold = jd, a.calendarFormat = Tb, a.prototype = Qf;var kg = a,
         lg = (kg.defineLocale("af", { months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"), weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"), weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"), weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"), meridiemParse: /vm|nm/i, isPM: function isPM(a) {
               return (/^nm$/i.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? c ? "vm" : "VM" : c ? "nm" : "NM";
          }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Vandag om] LT", nextDay: "[Môre om] LT", nextWeek: "dddd [om] LT", lastDay: "[Gister om] LT", lastWeek: "[Laas] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oor %s", past: "%s gelede", s: "'n paar sekondes", m: "'n minuut", mm: "%d minute", h: "'n uur", hh: "%d ure", d: "'n dag", dd: "%d dae", M: "'n maand", MM: "%d maande", y: "'n jaar", yy: "%d jaar" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function ordinal(a) {
               return a + (1 === a || 8 === a || a >= 20 ? "ste" : "de");
          }, week: { dow: 1,
               doy: 4 } }), { 1: "1", 2: "2", 3: "3", 4: "4", 5: "5", 6: "6", 7: "7", 8: "8", 9: "9", 0: "0" }),
         mg = function mg(a) {
          return 0 === a ? 0 : 1 === a ? 1 : 2 === a ? 2 : a % 100 >= 3 && a % 100 <= 10 ? 3 : a % 100 >= 11 ? 4 : 5;
     },
         ng = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] },
         og = function og(a) {
          return function (b, c, d, e) {
               var f = mg(b),
                   g = ng[a][mg(b)];return 2 === f && (g = g[c ? 0 : 1]), g.replace(/%d/i, b);
          };
     },
         pg = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"],
         qg = (kg.defineLocale("ar-ly", { months: pg, monthsShort: pg, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function isPM(a) {
               return "م" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "ص" : "م";
          }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: og("s"), m: og("m"), mm: og("m"), h: og("h"), hh: og("h"), d: og("d"), dd: og("d"), M: og("M"), MM: og("M"), y: og("y"), yy: og("y") }, preparse: function preparse(a) {
               return a.replace(/\u200f/g, "").replace(/،/g, ",");
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return lg[a];
               }).replace(/,/g, "،");
          }, week: { dow: 6,
               doy: 12 } }), kg.defineLocale("ar-ma", { months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"), weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 6,
               doy: 12 } }), { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }),
         rg = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" },
         sg = (kg.defineLocale("ar-sa", { months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function isPM(a) {
               return "م" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "ص" : "م";
          }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, preparse: function preparse(a) {
               return a.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (a) {
                    return rg[a];
               }).replace(/،/g, ",");
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return qg[a];
               }).replace(/,/g, "،");
          }, week: { dow: 6,
               doy: 12 } }), kg.defineLocale("ar-tn", { months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"), weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[اليوم على الساعة] LT", nextDay: "[غدا على الساعة] LT", nextWeek: "dddd [على الساعة] LT", lastDay: "[أمس على الساعة] LT", lastWeek: "dddd [على الساعة] LT", sameElse: "L" }, relativeTime: { future: "في %s", past: "منذ %s", s: "ثوان", m: "دقيقة", mm: "%d دقائق", h: "ساعة", hh: "%d ساعات", d: "يوم", dd: "%d أيام", M: "شهر", MM: "%d أشهر", y: "سنة", yy: "%d سنوات" }, week: { dow: 1,
               doy: 4 } }), { 1: "١", 2: "٢", 3: "٣", 4: "٤", 5: "٥", 6: "٦", 7: "٧", 8: "٨", 9: "٩", 0: "٠" }),
         tg = { "١": "1", "٢": "2", "٣": "3", "٤": "4", "٥": "5", "٦": "6", "٧": "7", "٨": "8", "٩": "9", "٠": "0" },
         ug = function ug(a) {
          return 0 === a ? 0 : 1 === a ? 1 : 2 === a ? 2 : a % 100 >= 3 && a % 100 <= 10 ? 3 : a % 100 >= 11 ? 4 : 5;
     },
         vg = { s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"], m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"], h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"], d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"], M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"], y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"] },
         wg = function wg(a) {
          return function (b, c, d, e) {
               var f = ug(b),
                   g = vg[a][ug(b)];return 2 === f && (g = g[c ? 0 : 1]), g.replace(/%d/i, b);
          };
     },
         xg = ["كانون الثاني يناير", "شباط فبراير", "آذار مارس", "نيسان أبريل", "أيار مايو", "حزيران يونيو", "تموز يوليو", "آب أغسطس", "أيلول سبتمبر", "تشرين الأول أكتوبر", "تشرين الثاني نوفمبر", "كانون الأول ديسمبر"],
         yg = (kg.defineLocale("ar", { months: xg, monthsShort: xg, weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"), weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"), weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/‏M/‏YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /ص|م/, isPM: function isPM(a) {
               return "م" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "ص" : "م";
          }, calendar: { sameDay: "[اليوم عند الساعة] LT", nextDay: "[غدًا عند الساعة] LT", nextWeek: "dddd [عند الساعة] LT", lastDay: "[أمس عند الساعة] LT", lastWeek: "dddd [عند الساعة] LT", sameElse: "L" }, relativeTime: { future: "بعد %s", past: "منذ %s", s: wg("s"), m: wg("m"), mm: wg("m"), h: wg("h"), hh: wg("h"), d: wg("d"), dd: wg("d"), M: wg("M"), MM: wg("M"), y: wg("y"), yy: wg("y") }, preparse: function preparse(a) {
               return a.replace(/\u200f/g, "").replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (a) {
                    return tg[a];
               }).replace(/،/g, ",");
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return sg[a];
               }).replace(/,/g, "،");
          }, week: { dow: 6,
               doy: 12 } }), { 1: "-inci", 5: "-inci", 8: "-inci", 70: "-inci", 80: "-inci", 2: "-nci", 7: "-nci", 20: "-nci", 50: "-nci", 3: "-üncü", 4: "-üncü", 100: "-üncü", 6: "-ncı", 9: "-uncu", 10: "-uncu", 30: "-uncu", 60: "-ıncı", 90: "-ıncı" }),
         zg = (kg.defineLocale("az", { months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"), monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"), weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"), weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"), weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[sabah saat] LT", nextWeek: "[gələn həftə] dddd [saat] LT", lastDay: "[dünən] LT", lastWeek: "[keçən həftə] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s əvvəl", s: "birneçə saniyyə", m: "bir dəqiqə", mm: "%d dəqiqə", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir il", yy: "%d il" }, meridiemParse: /gecə|səhər|gündüz|axşam/, isPM: function isPM(a) {
               return (/^(gündüz|axşam)$/.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "gecə" : a < 12 ? "səhər" : a < 17 ? "gündüz" : "axşam";
          }, ordinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/, ordinal: function ordinal(a) {
               if (0 === a) return a + "-ıncı";var b = a % 10,
                   c = a % 100 - b,
                   d = a >= 100 ? 100 : null;return a + (yg[b] || yg[c] || yg[d]);
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("be", { months: { format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"), standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_") }, monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"), weekdays: { format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"), standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"), isFormat: /\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/ }, weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"), weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., HH:mm", LLLL: "dddd, D MMMM YYYY г., HH:mm" }, calendar: { sameDay: "[Сёння ў] LT", nextDay: "[Заўтра ў] LT", lastDay: "[Учора ў] LT", nextWeek: function nextWeek() {
                    return "[У] dddd [ў] LT";
               }, lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:case 3:case 5:case 6:
                              return "[У мінулую] dddd [ў] LT";case 1:case 2:case 4:
                              return "[У мінулы] dddd [ў] LT";}
               }, sameElse: "L" }, relativeTime: { future: "праз %s", past: "%s таму", s: "некалькі секунд", m: nd, mm: nd, h: nd, hh: nd, d: "дзень", dd: nd, M: "месяц", MM: nd, y: "год", yy: nd }, meridiemParse: /ночы|раніцы|дня|вечара/, isPM: function isPM(a) {
               return (/^(дня|вечара)$/.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "ночы" : a < 12 ? "раніцы" : a < 17 ? "дня" : "вечара";
          }, ordinalParse: /\d{1,2}-(і|ы|га)/, ordinal: function ordinal(a, b) {
               switch (b) {case "M":case "d":case "DDD":case "w":case "W":
                         return a % 10 !== 2 && a % 10 !== 3 || a % 100 === 12 || a % 100 === 13 ? a + "-ы" : a + "-і";case "D":
                         return a + "-га";default:
                         return a;}
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("bg", { months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"), monthsShort: "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"), weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"), weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Днес в] LT", nextDay: "[Утре в] LT", nextWeek: "dddd [в] LT", lastDay: "[Вчера в] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:case 3:case 6:
                              return "[В изминалата] dddd [в] LT";case 1:case 2:case 4:case 5:
                              return "[В изминалия] dddd [в] LT";}
               }, sameElse: "L" }, relativeTime: { future: "след %s", past: "преди %s", s: "няколко секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дни", M: "месец", MM: "%d месеца", y: "година", yy: "%d години" }, ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = a % 100;return 0 === a ? a + "-ев" : 0 === c ? a + "-ен" : c > 10 && c < 20 ? a + "-ти" : 1 === b ? a + "-ви" : 2 === b ? a + "-ри" : 7 === b || 8 === b ? a + "-ми" : a + "-ти";
          }, week: { dow: 1,
               doy: 7 } }), { 1: "১", 2: "২", 3: "৩", 4: "৪", 5: "৫", 6: "৬", 7: "৭", 8: "৮", 9: "৯", 0: "০" }),
         Ag = { "১": "1", "২": "2", "৩": "3", "৪": "4", "৫": "5", "৬": "6", "৭": "7", "৮": "8", "৯": "9", "০": "0" },
         Bg = (kg.defineLocale("bn", { months: "জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"), monthsShort: "জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে".split("_"), weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"), weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"), weekdaysMin: "রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি".split("_"), longDateFormat: { LT: "A h:mm সময়", LTS: "A h:mm:ss সময়", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm সময়", LLLL: "dddd, D MMMM YYYY, A h:mm সময়" }, calendar: { sameDay: "[আজ] LT", nextDay: "[আগামীকাল] LT", nextWeek: "dddd, LT", lastDay: "[গতকাল] LT", lastWeek: "[গত] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s পরে", past: "%s আগে", s: "কয়েক সেকেন্ড", m: "এক মিনিট", mm: "%d মিনিট", h: "এক ঘন্টা", hh: "%d ঘন্টা", d: "এক দিন", dd: "%d দিন", M: "এক মাস", MM: "%d মাস", y: "এক বছর", yy: "%d বছর" }, preparse: function preparse(a) {
               return a.replace(/[১২৩৪৫৬৭৮৯০]/g, function (a) {
                    return Ag[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return zg[a];
               });
          }, meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "রাত" === b && a >= 4 || "দুপুর" === b && a < 5 || "বিকাল" === b ? a + 12 : a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "রাত" : a < 10 ? "সকাল" : a < 17 ? "দুপুর" : a < 20 ? "বিকাল" : "রাত";
          }, week: { dow: 0,
               doy: 6 } }), { 1: "༡", 2: "༢", 3: "༣", 4: "༤", 5: "༥", 6: "༦", 7: "༧", 8: "༨", 9: "༩", 0: "༠" }),
         Cg = { "༡": "1", "༢": "2", "༣": "3", "༤": "4", "༥": "5", "༦": "6", "༧": "7", "༨": "8", "༩": "9", "༠": "0" },
         Dg = (kg.defineLocale("bo", { months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"), monthsShort: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"), weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"), weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"), weekdaysMin: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[དི་རིང] LT", nextDay: "[སང་ཉིན] LT", nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT", lastDay: "[ཁ་སང] LT", lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ལ་", past: "%s སྔན་ལ", s: "ལམ་སང", m: "སྐར་མ་གཅིག", mm: "%d སྐར་མ", h: "ཆུ་ཚོད་གཅིག", hh: "%d ཆུ་ཚོད", d: "ཉིན་གཅིག", dd: "%d ཉིན་", M: "ཟླ་བ་གཅིག", MM: "%d ཟླ་བ", y: "ལོ་གཅིག", yy: "%d ལོ" }, preparse: function preparse(a) {
               return a.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (a) {
                    return Cg[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return Bg[a];
               });
          }, meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "མཚན་མོ" === b && a >= 4 || "ཉིན་གུང" === b && a < 5 || "དགོང་དག" === b ? a + 12 : a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "མཚན་མོ" : a < 10 ? "ཞོགས་ཀས" : a < 17 ? "ཉིན་གུང" : a < 20 ? "དགོང་དག" : "མཚན་མོ";
          }, week: { dow: 0,
               doy: 6 } }), kg.defineLocale("br", { months: "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"), monthsShort: "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"), weekdays: "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"), weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"), weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h[e]mm A", LTS: "h[e]mm:ss A", L: "DD/MM/YYYY", LL: "D [a viz] MMMM YYYY", LLL: "D [a viz] MMMM YYYY h[e]mm A", LLLL: "dddd, D [a viz] MMMM YYYY h[e]mm A" }, calendar: { sameDay: "[Hiziv da] LT", nextDay: "[Warc'hoazh da] LT", nextWeek: "dddd [da] LT", lastDay: "[Dec'h da] LT", lastWeek: "dddd [paset da] LT", sameElse: "L" }, relativeTime: { future: "a-benn %s", past: "%s 'zo", s: "un nebeud segondennoù", m: "ur vunutenn", mm: od, h: "un eur", hh: "%d eur", d: "un devezh", dd: od, M: "ur miz", MM: od, y: "ur bloaz", yy: pd }, ordinalParse: /\d{1,2}(añ|vet)/, ordinal: function ordinal(a) {
               var b = 1 === a ? "añ" : "vet";return a + b;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("bs", { months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[u] [nedjelju] [u] LT";case 3:
                              return "[u] [srijedu] [u] LT";case 6:
                              return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
                              return "[u] dddd [u] LT";}
               }, lastDay: "[jučer u] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:case 3:
                              return "[prošlu] dddd [u] LT";case 6:
                              return "[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:
                              return "[prošli] dddd [u] LT";}
               }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", m: td, mm: td, h: td, hh: td, d: "dan", dd: td, M: "mjesec", MM: td, y: "godinu", yy: td }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), kg.defineLocale("ca", { months: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"), monthsShort: "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"), monthsParseExact: !0, weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"), weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"), weekdaysMin: "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd D MMMM YYYY H:mm" }, calendar: { sameDay: function sameDay() {
                    return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT";
               }, nextDay: function nextDay() {
                    return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT";
               }, nextWeek: function nextWeek() {
                    return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT";
               }, lastDay: function lastDay() {
                    return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT";
               }, lastWeek: function lastWeek() {
                    return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT";
               }, sameElse: "L" }, relativeTime: { future: "en %s", past: "fa %s", s: "uns segons", m: "un minut", mm: "%d minuts", h: "una hora", hh: "%d hores", d: "un dia", dd: "%d dies", M: "un mes", MM: "%d mesos", y: "un any", yy: "%d anys" }, ordinalParse: /\d{1,2}(r|n|t|è|a)/, ordinal: function ordinal(a, b) {
               var c = 1 === a ? "r" : 2 === a ? "n" : 3 === a ? "r" : 4 === a ? "t" : "è";return "w" !== b && "W" !== b || (c = "a"), a + c;
          }, week: { dow: 1,
               doy: 4 } }), "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_")),
         Eg = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),
         Fg = (kg.defineLocale("cs", { months: Dg, monthsShort: Eg, monthsParse: function (a, b) {
               var c,
                   d = [];for (c = 0; c < 12; c++) {
                    d[c] = new RegExp("^" + a[c] + "$|^" + b[c] + "$", "i");
               }return d;
          }(Dg, Eg), shortMonthsParse: function (a) {
               var b,
                   c = [];for (b = 0; b < 12; b++) {
                    c[b] = new RegExp("^" + a[b] + "$", "i");
               }return c;
          }(Eg), longMonthsParse: function (a) {
               var b,
                   c = [];for (b = 0; b < 12; b++) {
                    c[b] = new RegExp("^" + a[b] + "$", "i");
               }return c;
          }(Dg), weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"), weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"), weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm", l: "D. M. YYYY" }, calendar: { sameDay: "[dnes v] LT", nextDay: "[zítra v] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[v neděli v] LT";case 1:case 2:
                              return "[v] dddd [v] LT";case 3:
                              return "[ve středu v] LT";case 4:
                              return "[ve čtvrtek v] LT";case 5:
                              return "[v pátek v] LT";case 6:
                              return "[v sobotu v] LT";}
               }, lastDay: "[včera v] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:
                              return "[minulou neděli v] LT";case 1:case 2:
                              return "[minulé] dddd [v] LT";case 3:
                              return "[minulou středu v] LT";case 4:case 5:
                              return "[minulý] dddd [v] LT";case 6:
                              return "[minulou sobotu v] LT";}
               }, sameElse: "L" }, relativeTime: { future: "za %s", past: "před %s", s: vd, m: vd, mm: vd, h: vd, hh: vd, d: vd, dd: vd, M: vd, MM: vd, y: vd, yy: vd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("cv", { months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"), monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"), weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"), weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"), weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]", LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm", LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm" }, calendar: { sameDay: "[Паян] LT [сехетре]", nextDay: "[Ыран] LT [сехетре]", lastDay: "[Ӗнер] LT [сехетре]", nextWeek: "[Ҫитес] dddd LT [сехетре]", lastWeek: "[Иртнӗ] dddd LT [сехетре]", sameElse: "L" }, relativeTime: { future: function future(a) {
                    var b = /сехет$/i.exec(a) ? "рен" : /ҫул$/i.exec(a) ? "тан" : "ран";return a + b;
               }, past: "%s каялла", s: "пӗр-ик ҫеккунт", m: "пӗр минут", mm: "%d минут", h: "пӗр сехет", hh: "%d сехет", d: "пӗр кун", dd: "%d кун", M: "пӗр уйӑх", MM: "%d уйӑх", y: "пӗр ҫул", yy: "%d ҫул" }, ordinalParse: /\d{1,2}-мӗш/, ordinal: "%d-мӗш", week: { dow: 1,
               doy: 7 } }), kg.defineLocale("cy", { months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"), monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"), weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"), weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"), weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"), weekdaysParseExact: !0,

          longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Heddiw am] LT", nextDay: "[Yfory am] LT", nextWeek: "dddd [am] LT", lastDay: "[Ddoe am] LT", lastWeek: "dddd [diwethaf am] LT", sameElse: "L" }, relativeTime: { future: "mewn %s", past: "%s yn ôl", s: "ychydig eiliadau", m: "munud", mm: "%d munud", h: "awr", hh: "%d awr", d: "diwrnod", dd: "%d diwrnod", M: "mis", MM: "%d mis", y: "blwyddyn", yy: "%d flynedd" }, ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,

          ordinal: function ordinal(a) {
               var b = a,
                   c = "",
                   d = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"];return b > 20 ? c = 40 === b || 50 === b || 60 === b || 80 === b || 100 === b ? "fed" : "ain" : b > 0 && (c = d[b]), a + c;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("da", { months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd [d.] D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[I dag kl.] LT", nextDay: "[I morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[I går kl.] LT", lastWeek: "[sidste] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "få sekunder", m: "et minut", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dage", M: "en måned", MM: "%d måneder", y: "et år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("de-at", { months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", m: wd, mm: "%d Minuten", h: wd, hh: "%d Stunden", d: wd, dd: wd, M: wd, MM: wd, y: wd, yy: wd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("de", { months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"), weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY HH:mm", LLLL: "dddd, D. MMMM YYYY HH:mm" }, calendar: { sameDay: "[heute um] LT [Uhr]", sameElse: "L", nextDay: "[morgen um] LT [Uhr]", nextWeek: "dddd [um] LT [Uhr]", lastDay: "[gestern um] LT [Uhr]", lastWeek: "[letzten] dddd [um] LT [Uhr]" }, relativeTime: { future: "in %s", past: "vor %s", s: "ein paar Sekunden", m: xd, mm: "%d Minuten", h: xd, hh: "%d Stunden", d: xd, dd: xd, M: xd, MM: xd, y: xd, yy: xd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), ["ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު"]),
         Gg = ["އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"],
         Hg = (kg.defineLocale("dv", { months: Fg, monthsShort: Fg, weekdays: Gg, weekdaysShort: Gg, weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "D/M/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, meridiemParse: /މކ|މފ/, isPM: function isPM(a) {
               return "މފ" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "މކ" : "މފ";
          }, calendar: { sameDay: "[މިއަދު] LT", nextDay: "[މާދަމާ] LT", nextWeek: "dddd LT", lastDay: "[އިއްޔެ] LT", lastWeek: "[ފާއިތުވި] dddd LT", sameElse: "L" }, relativeTime: { future: "ތެރޭގައި %s", past: "ކުރިން %s", s: "ސިކުންތުކޮޅެއް", m: "މިނިޓެއް", mm: "މިނިޓު %d", h: "ގަޑިއިރެއް", hh: "ގަޑިއިރު %d", d: "ދުވަހެއް", dd: "ދުވަސް %d", M: "މަހެއް", MM: "މަސް %d", y: "އަހަރެއް", yy: "އަހަރު %d" }, preparse: function preparse(a) {
               return a.replace(/،/g, ",");
          }, postformat: function postformat(a) {
               return a.replace(/,/g, "،");
          }, week: { dow: 7,
               doy: 12 } }), kg.defineLocale("el", { monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"), monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"), months: function months(a, b) {
               return (/D/.test(b.substring(0, b.indexOf("MMMM"))) ? this._monthsGenitiveEl[a.month()] : this._monthsNominativeEl[a.month()]
               );
          }, monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"), weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"), weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"), weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"), meridiem: function meridiem(a, b, c) {
               return a > 11 ? c ? "μμ" : "ΜΜ" : c ? "πμ" : "ΠΜ";
          }, isPM: function isPM(a) {
               return "μ" === (a + "").toLowerCase()[0];
          }, meridiemParse: /[ΠΜ]\.?Μ?\.?/i, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendarEl: { sameDay: "[Σήμερα {}] LT", nextDay: "[Αύριο {}] LT", nextWeek: "dddd [{}] LT", lastDay: "[Χθες {}] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 6:
                              return "[το προηγούμενο] dddd [{}] LT";default:
                              return "[την προηγούμενη] dddd [{}] LT";}
               }, sameElse: "L" }, calendar: function calendar(a, b) {
               var c = this._calendarEl[a],
                   d = b && b.hours();return y(c) && (c = c.apply(b)), c.replace("{}", d % 12 === 1 ? "στη" : "στις");
          }, relativeTime: { future: "σε %s", past: "%s πριν", s: "λίγα δευτερόλεπτα", m: "ένα λεπτό", mm: "%d λεπτά", h: "μία ώρα", hh: "%d ώρες", d: "μία μέρα", dd: "%d μέρες", M: "ένας μήνας", MM: "%d μήνες", y: "ένας χρόνος", yy: "%d χρόνια" }, ordinalParse: /\d{1,2}η/, ordinal: "%dη", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("en-au", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("en-ca", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "YYYY-MM-DD", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY h:mm A", LLLL: "dddd, MMMM D, YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
          } }), kg.defineLocale("en-gb", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("en-ie", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("en-nz", { months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, ordinalParse: /\d{1,2}(st|nd|rd|th)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("eo", { months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"), weekdays: "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"), weekdaysShort: "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D[-an de] MMMM, YYYY", LLL: "D[-an de] MMMM, YYYY HH:mm", LLLL: "dddd, [la] D[-an de] MMMM, YYYY HH:mm" }, meridiemParse: /[ap]\.t\.m/i, isPM: function isPM(a) {
               return "p" === a.charAt(0).toLowerCase();
          }, meridiem: function meridiem(a, b, c) {
               return a > 11 ? c ? "p.t.m." : "P.T.M." : c ? "a.t.m." : "A.T.M.";
          }, calendar: { sameDay: "[Hodiaŭ je] LT", nextDay: "[Morgaŭ je] LT", nextWeek: "dddd [je] LT", lastDay: "[Hieraŭ je] LT", lastWeek: "[pasinta] dddd [je] LT", sameElse: "L" }, relativeTime: { future: "je %s", past: "antaŭ %s", s: "sekundoj", m: "minuto", mm: "%d minutoj", h: "horo", hh: "%d horoj", d: "tago",
               dd: "%d tagoj", M: "monato", MM: "%d monatoj", y: "jaro", yy: "%d jaroj" }, ordinalParse: /\d{1,2}a/, ordinal: "%da", week: { dow: 1,
               doy: 7 } }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),
         Ig = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
         Jg = (kg.defineLocale("es-do", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function monthsShort(a, b) {
               return (/-MMM-/.test(b) ? Ig[a.month()] : Hg[a.month()]
               );
          }, monthsParseExact: !0, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY h:mm A", LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A" }, calendar: { sameDay: function sameDay() {
                    return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, nextDay: function nextDay() {
                    return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, nextWeek: function nextWeek() {
                    return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, lastDay: function lastDay() {
                    return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, lastWeek: function lastWeek() {
                    return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1,
               doy: 4 } }), "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_")),
         Kg = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
         Lg = (kg.defineLocale("es", { months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"), monthsShort: function monthsShort(a, b) {
               return (/-MMM-/.test(b) ? Kg[a.month()] : Jg[a.month()]
               );
          }, monthsParseExact: !0, weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"), weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"), weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function sameDay() {
                    return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, nextDay: function nextDay() {
                    return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, nextWeek: function nextWeek() {
                    return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, lastDay: function lastDay() {
                    return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, lastWeek: function lastWeek() {
                    return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT";
               }, sameElse: "L" }, relativeTime: { future: "en %s", past: "hace %s", s: "unos segundos", m: "un minuto", mm: "%d minutos", h: "una hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un año", yy: "%d años" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("et", { months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"), monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"), weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"), weekdaysShort: "P_E_T_K_N_R_L".split("_"), weekdaysMin: "P_E_T_K_N_R_L".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[Täna,] LT", nextDay: "[Homme,] LT", nextWeek: "[Järgmine] dddd LT", lastDay: "[Eile,] LT", lastWeek: "[Eelmine] dddd LT", sameElse: "L" }, relativeTime: { future: "%s pärast", past: "%s tagasi", s: yd, m: yd, mm: yd, h: yd, hh: yd, d: yd, dd: "%d päeva", M: yd, MM: yd, y: yd, yy: yd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("eu", { months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"), monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"), monthsParseExact: !0, weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"), weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"), weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY[ko] MMMM[ren] D[a]", LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm", LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm", l: "YYYY-M-D", ll: "YYYY[ko] MMM D[a]", lll: "YYYY[ko] MMM D[a] HH:mm", llll: "ddd, YYYY[ko] MMM D[a] HH:mm" }, calendar: { sameDay: "[gaur] LT[etan]", nextDay: "[bihar] LT[etan]", nextWeek: "dddd LT[etan]", lastDay: "[atzo] LT[etan]", lastWeek: "[aurreko] dddd LT[etan]", sameElse: "L" }, relativeTime: { future: "%s barru", past: "duela %s", s: "segundo batzuk", m: "minutu bat", mm: "%d minutu", h: "ordu bat", hh: "%d ordu", d: "egun bat", dd: "%d egun", M: "hilabete bat", MM: "%d hilabete", y: "urte bat", yy: "%d urte" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), { 1: "۱", 2: "۲", 3: "۳", 4: "۴", 5: "۵", 6: "۶", 7: "۷", 8: "۸", 9: "۹", 0: "۰" }),
         Mg = { "۱": "1", "۲": "2", "۳": "3", "۴": "4", "۵": "5", "۶": "6", "۷": "7", "۸": "8", "۹": "9", "۰": "0" },
         Ng = (kg.defineLocale("fa", { months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"), weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"), weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, meridiemParse: /قبل از ظهر|بعد از ظهر/, isPM: function isPM(a) {
               return (/بعد از ظهر/.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "قبل از ظهر" : "بعد از ظهر";
          }, calendar: { sameDay: "[امروز ساعت] LT", nextDay: "[فردا ساعت] LT", nextWeek: "dddd [ساعت] LT", lastDay: "[دیروز ساعت] LT", lastWeek: "dddd [پیش] [ساعت] LT", sameElse: "L" }, relativeTime: { future: "در %s", past: "%s پیش", s: "چندین ثانیه", m: "یک دقیقه", mm: "%d دقیقه", h: "یک ساعت", hh: "%d ساعت", d: "یک روز", dd: "%d روز", M: "یک ماه", MM: "%d ماه", y: "یک سال", yy: "%d سال" }, preparse: function preparse(a) {
               return a.replace(/[۰-۹]/g, function (a) {
                    return Mg[a];
               }).replace(/،/g, ",");
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return Lg[a];
               }).replace(/,/g, "،");
          }, ordinalParse: /\d{1,2}م/, ordinal: "%dم", week: { dow: 6,
               doy: 12 } }), "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" ")),
         Og = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", Ng[7], Ng[8], Ng[9]],
         Pg = (kg.defineLocale("fi", { months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"), monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"), weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"), weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"), weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "Do MMMM[ta] YYYY", LLL: "Do MMMM[ta] YYYY, [klo] HH.mm", LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm", l: "D.M.YYYY", ll: "Do MMM YYYY", lll: "Do MMM YYYY, [klo] HH.mm", llll: "ddd, Do MMM YYYY, [klo] HH.mm" }, calendar: { sameDay: "[tänään] [klo] LT", nextDay: "[huomenna] [klo] LT", nextWeek: "dddd [klo] LT", lastDay: "[eilen] [klo] LT", lastWeek: "[viime] dddd[na] [klo] LT", sameElse: "L" }, relativeTime: { future: "%s päästä", past: "%s sitten", s: zd, m: zd, mm: zd, h: zd, hh: zd, d: zd, dd: zd, M: zd, MM: zd, y: zd, yy: zd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("fo", { months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"), weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"), weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D. MMMM, YYYY HH:mm" }, calendar: { sameDay: "[Í dag kl.] LT", nextDay: "[Í morgin kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[Í gjár kl.] LT", lastWeek: "[síðstu] dddd [kl] LT", sameElse: "L" }, relativeTime: { future: "um %s", past: "%s síðani", s: "fá sekund", m: "ein minutt", mm: "%d minuttir", h: "ein tími", hh: "%d tímar", d: "ein dagur", dd: "%d dagar", M: "ein mánaði", MM: "%d mánaðir", y: "eitt ár", yy: "%d ár" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("fr-ca", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|e)/, ordinal: function ordinal(a) {
               return a + (1 === a ? "er" : "e");
          } }), kg.defineLocale("fr-ch", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|e)/, ordinal: function ordinal(a) {
               return a + (1 === a ? "er" : "e");
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("fr", { months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"), monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"), monthsParseExact: !0, weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"), weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"), weekdaysMin: "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Aujourd'hui à] LT", nextDay: "[Demain à] LT", nextWeek: "dddd [à] LT", lastDay: "[Hier à] LT", lastWeek: "dddd [dernier à] LT", sameElse: "L" }, relativeTime: { future: "dans %s", past: "il y a %s", s: "quelques secondes", m: "une minute", mm: "%d minutes", h: "une heure", hh: "%d heures", d: "un jour", dd: "%d jours", M: "un mois", MM: "%d mois", y: "un an", yy: "%d ans" }, ordinalParse: /\d{1,2}(er|)/, ordinal: function ordinal(a) {
               return a + (1 === a ? "er" : "");
          }, week: { dow: 1,
               doy: 4 } }), "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_")),
         Qg = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
         Rg = (kg.defineLocale("fy", { months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"), monthsShort: function monthsShort(a, b) {
               return (/-MMM-/.test(b) ? Qg[a.month()] : Pg[a.month()]
               );
          }, monthsParseExact: !0, weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"), weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"), weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[hjoed om] LT", nextDay: "[moarn om] LT", nextWeek: "dddd [om] LT", lastDay: "[juster om] LT", lastWeek: "[ôfrûne] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "oer %s", past: "%s lyn", s: "in pear sekonden", m: "ien minút", mm: "%d minuten", h: "ien oere", hh: "%d oeren", d: "ien dei", dd: "%d dagen", M: "ien moanne", MM: "%d moannen", y: "ien jier", yy: "%d jierren" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function ordinal(a) {
               return a + (1 === a || 8 === a || a >= 20 ? "ste" : "de");
          }, week: { dow: 1,
               doy: 4 } }), ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd"]),
         Sg = ["Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh"],
         Tg = ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
         Ug = ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
         Vg = ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"],
         Wg = (kg.defineLocale("gd", { months: Rg, monthsShort: Sg, monthsParseExact: !0, weekdays: Tg, weekdaysShort: Ug, weekdaysMin: Vg, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[An-diugh aig] LT", nextDay: "[A-màireach aig] LT", nextWeek: "dddd [aig] LT", lastDay: "[An-dè aig] LT", lastWeek: "dddd [seo chaidh] [aig] LT", sameElse: "L" }, relativeTime: { future: "ann an %s", past: "bho chionn %s", s: "beagan diogan", m: "mionaid", mm: "%d mionaidean", h: "uair", hh: "%d uairean", d: "latha", dd: "%d latha", M: "mìos", MM: "%d mìosan", y: "bliadhna", yy: "%d bliadhna" }, ordinalParse: /\d{1,2}(d|na|mh)/, ordinal: function ordinal(a) {
               var b = 1 === a ? "d" : a % 10 === 2 ? "na" : "mh";return a + b;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("gl", { months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"), monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"), weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"), weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY H:mm", LLLL: "dddd, D [de] MMMM [de] YYYY H:mm" }, calendar: { sameDay: function sameDay() {
                    return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT";
               }, nextDay: function nextDay() {
                    return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT";
               }, nextWeek: function nextWeek() {
                    return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT";
               }, lastDay: function lastDay() {
                    return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT";
               }, lastWeek: function lastWeek() {
                    return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT";
               }, sameElse: "L" }, relativeTime: { future: function future(a) {
                    return 0 === a.indexOf("un") ? "n" + a : "en " + a;
               }, past: "hai %s", s: "uns segundos", m: "un minuto", mm: "%d minutos", h: "unha hora", hh: "%d horas", d: "un día", dd: "%d días", M: "un mes", MM: "%d meses", y: "un ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("he", { months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"), monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"), weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"), weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"), weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [ב]MMMM YYYY", LLL: "D [ב]MMMM YYYY HH:mm", LLLL: "dddd, D [ב]MMMM YYYY HH:mm", l: "D/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[היום ב־]LT", nextDay: "[מחר ב־]LT", nextWeek: "dddd [בשעה] LT", lastDay: "[אתמול ב־]LT", lastWeek: "[ביום] dddd [האחרון בשעה] LT", sameElse: "L" }, relativeTime: { future: "בעוד %s", past: "לפני %s", s: "מספר שניות", m: "דקה", mm: "%d דקות", h: "שעה", hh: function hh(a) {
                    return 2 === a ? "שעתיים" : a + " שעות";
               }, d: "יום", dd: function dd(a) {
                    return 2 === a ? "יומיים" : a + " ימים";
               }, M: "חודש", MM: function MM(a) {
                    return 2 === a ? "חודשיים" : a + " חודשים";
               }, y: "שנה", yy: function yy(a) {
                    return 2 === a ? "שנתיים" : a % 10 === 0 && 10 !== a ? a + " שנה" : a + " שנים";
               } }, meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i, isPM: function isPM(a) {
               return (/^(אחה"צ|אחרי הצהריים|בערב)$/.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 5 ? "לפנות בוקר" : a < 10 ? "בבוקר" : a < 12 ? c ? 'לפנה"צ' : "לפני הצהריים" : a < 18 ? c ? 'אחה"צ' : "אחרי הצהריים" : "בערב";
          } }), { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }),
         Xg = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" },
         Yg = (kg.defineLocale("hi", { months: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"), monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"), monthsParseExact: !0, weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm बजे", LTS: "A h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm बजे", LLLL: "dddd, D MMMM YYYY, A h:mm बजे" }, calendar: { sameDay: "[आज] LT", nextDay: "[कल] LT", nextWeek: "dddd, LT", lastDay: "[कल] LT", lastWeek: "[पिछले] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s में", past: "%s पहले", s: "कुछ ही क्षण", m: "एक मिनट", mm: "%d मिनट", h: "एक घंटा", hh: "%d घंटे", d: "एक दिन", dd: "%d दिन", M: "एक महीने", MM: "%d महीने", y: "एक वर्ष", yy: "%d वर्ष" }, preparse: function preparse(a) {
               return a.replace(/[१२३४५६७८९०]/g, function (a) {
                    return Xg[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return Wg[a];
               });
          },

          meridiemParse: /रात|सुबह|दोपहर|शाम/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "रात" === b ? a < 4 ? a : a + 12 : "सुबह" === b ? a : "दोपहर" === b ? a >= 10 ? a : a + 12 : "शाम" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "रात" : a < 10 ? "सुबह" : a < 17 ? "दोपहर" : a < 20 ? "शाम" : "रात";
          }, week: { dow: 0,
               doy: 6 } }), kg.defineLocale("hr", { months: { format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"), standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_") }, monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[u] [nedjelju] [u] LT";case 3:
                              return "[u] [srijedu] [u] LT";case 6:
                              return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
                              return "[u] dddd [u] LT";}
               }, lastDay: "[jučer u] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:case 3:
                              return "[prošlu] dddd [u] LT";case 6:
                              return "[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:
                              return "[prošli] dddd [u] LT";}
               }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "par sekundi", m: Bd, mm: Bd, h: Bd, hh: Bd, d: "dan", dd: Bd, M: "mjesec", MM: Bd, y: "godinu", yy: Bd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ")),
         Zg = (kg.defineLocale("hu", { months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"), monthsShort: "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"), weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"), weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"), weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "YYYY.MM.DD.", LL: "YYYY. MMMM D.", LLL: "YYYY. MMMM D. H:mm", LLLL: "YYYY. MMMM D., dddd H:mm" }, meridiemParse: /de|du/i, isPM: function isPM(a) {
               return "u" === a.charAt(1).toLowerCase();
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? c === !0 ? "de" : "DE" : c === !0 ? "du" : "DU";
          }, calendar: { sameDay: "[ma] LT[-kor]", nextDay: "[holnap] LT[-kor]", nextWeek: function nextWeek() {
                    return Dd.call(this, !0);
               }, lastDay: "[tegnap] LT[-kor]", lastWeek: function lastWeek() {
                    return Dd.call(this, !1);
               }, sameElse: "L" }, relativeTime: { future: "%s múlva", past: "%s", s: Cd, m: Cd, mm: Cd, h: Cd, hh: Cd, d: Cd, dd: Cd, M: Cd, MM: Cd, y: Cd, yy: Cd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), kg.defineLocale("hy-am", { months: { format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"), standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_") }, monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"), weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"), weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY թ.", LLL: "D MMMM YYYY թ., HH:mm", LLLL: "dddd, D MMMM YYYY թ., HH:mm" }, calendar: { sameDay: "[այսօր] LT", nextDay: "[վաղը] LT", lastDay: "[երեկ] LT", nextWeek: function nextWeek() {
                    return "dddd [օրը ժամը] LT";
               }, lastWeek: function lastWeek() {
                    return "[անցած] dddd [օրը ժամը] LT";
               }, sameElse: "L" }, relativeTime: { future: "%s հետո", past: "%s առաջ", s: "մի քանի վայրկյան", m: "րոպե", mm: "%d րոպե", h: "ժամ", hh: "%d ժամ", d: "օր", dd: "%d օր", M: "ամիս", MM: "%d ամիս", y: "տարի", yy: "%d տարի" }, meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/, isPM: function isPM(a) {
               return (/^(ցերեկվա|երեկոյան)$/.test(a)
               );
          }, meridiem: function meridiem(a) {
               return a < 4 ? "գիշերվա" : a < 12 ? "առավոտվա" : a < 17 ? "ցերեկվա" : "երեկոյան";
          }, ordinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/, ordinal: function ordinal(a, b) {
               switch (b) {case "DDD":case "w":case "W":case "DDDo":
                         return 1 === a ? a + "-ին" : a + "-րդ";default:
                         return a;}
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("id", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"), weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"), weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|siang|sore|malam/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "pagi" === b ? a : "siang" === b ? a >= 11 ? a : a + 12 : "sore" === b || "malam" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 11 ? "pagi" : a < 15 ? "siang" : a < 19 ? "sore" : "malam";
          }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Besok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kemarin pukul] LT", lastWeek: "dddd [lalu pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lalu", s: "beberapa detik", m: "semenit", mm: "%d menit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("is", { months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"), monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"), weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"), weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"), weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd, D. MMMM YYYY [kl.] H:mm" }, calendar: { sameDay: "[í dag kl.] LT", nextDay: "[á morgun kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[í gær kl.] LT", lastWeek: "[síðasta] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "eftir %s", past: "fyrir %s síðan", s: Fd, m: Fd, mm: Fd, h: "klukkustund", hh: Fd, d: Fd, dd: Fd, M: Fd, MM: Fd, y: Fd, yy: Fd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("it", { months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"), monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"), weekdays: "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"), weekdaysShort: "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"), weekdaysMin: "Do_Lu_Ma_Me_Gi_Ve_Sa".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Oggi alle] LT", nextDay: "[Domani alle] LT", nextWeek: "dddd [alle] LT", lastDay: "[Ieri alle] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:
                              return "[la scorsa] dddd [alle] LT";default:
                              return "[lo scorso] dddd [alle] LT";}
               }, sameElse: "L" }, relativeTime: { future: function future(a) {
                    return (/^[0-9].+$/.test(a) ? "tra" : "in") + " " + a;
               }, past: "%s fa", s: "alcuni secondi", m: "un minuto", mm: "%d minuti", h: "un'ora", hh: "%d ore", d: "un giorno", dd: "%d giorni", M: "un mese", MM: "%d mesi", y: "un anno", yy: "%d anni" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("ja", { months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"), weekdaysShort: "日_月_火_水_木_金_土".split("_"), weekdaysMin: "日_月_火_水_木_金_土".split("_"), longDateFormat: { LT: "Ah時m分", LTS: "Ah時m分s秒", L: "YYYY/MM/DD", LL: "YYYY年M月D日", LLL: "YYYY年M月D日Ah時m分", LLLL: "YYYY年M月D日Ah時m分 dddd" }, meridiemParse: /午前|午後/i, isPM: function isPM(a) {
               return "午後" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "午前" : "午後";
          }, calendar: { sameDay: "[今日] LT", nextDay: "[明日] LT", nextWeek: "[来週]dddd LT", lastDay: "[昨日] LT", lastWeek: "[前週]dddd LT", sameElse: "L" }, ordinalParse: /\d{1,2}日/, ordinal: function ordinal(a, b) {
               switch (b) {case "d":case "D":case "DDD":
                         return a + "日";default:
                         return a;}
          }, relativeTime: { future: "%s後", past: "%s前", s: "数秒", m: "1分", mm: "%d分", h: "1時間", hh: "%d時間", d: "1日", dd: "%d日", M: "1ヶ月", MM: "%dヶ月", y: "1年", yy: "%d年" } }), kg.defineLocale("jv", { months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"), monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"), weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"), weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"), weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /enjing|siyang|sonten|ndalu/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "enjing" === b ? a : "siyang" === b ? a >= 11 ? a : a + 12 : "sonten" === b || "ndalu" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 11 ? "enjing" : a < 15 ? "siyang" : a < 19 ? "sonten" : "ndalu";
          }, calendar: { sameDay: "[Dinten puniko pukul] LT", nextDay: "[Mbenjang pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kala wingi pukul] LT", lastWeek: "dddd [kepengker pukul] LT", sameElse: "L" }, relativeTime: { future: "wonten ing %s", past: "%s ingkang kepengker", s: "sawetawis detik", m: "setunggal menit", mm: "%d menit", h: "setunggal jam", hh: "%d jam", d: "sedinten", dd: "%d dinten", M: "sewulan", MM: "%d wulan", y: "setaun", yy: "%d taun" }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("ka", { months: { standalone: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"), format: "იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს".split("_") }, monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"), weekdays: { standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"), format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"), isFormat: /(წინა|შემდეგ)/ }, weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"), weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"), longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[დღეს] LT[-ზე]", nextDay: "[ხვალ] LT[-ზე]", lastDay: "[გუშინ] LT[-ზე]", nextWeek: "[შემდეგ] dddd LT[-ზე]", lastWeek: "[წინა] dddd LT-ზე", sameElse: "L" }, relativeTime: { future: function future(a) {
                    return (/(წამი|წუთი|საათი|წელი)/.test(a) ? a.replace(/ი$/, "ში") : a + "ში"
                    );
               }, past: function past(a) {
                    return (/(წამი|წუთი|საათი|დღე|თვე)/.test(a) ? a.replace(/(ი|ე)$/, "ის წინ") : /წელი/.test(a) ? a.replace(/წელი$/, "წლის წინ") : void 0
                    );
               }, s: "რამდენიმე წამი", m: "წუთი", mm: "%d წუთი", h: "საათი", hh: "%d საათი", d: "დღე", dd: "%d დღე", M: "თვე", MM: "%d თვე", y: "წელი", yy: "%d წელი" }, ordinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/, ordinal: function ordinal(a) {
               return 0 === a ? a : 1 === a ? a + "-ლი" : a < 20 || a <= 100 && a % 20 === 0 || a % 100 === 0 ? "მე-" + a : a + "-ე";
          }, week: { dow: 1, doy: 7 } }), { 0: "-ші", 1: "-ші", 2: "-ші", 3: "-ші", 4: "-ші", 5: "-ші", 6: "-шы", 7: "-ші", 8: "-ші", 9: "-шы", 10: "-шы", 20: "-шы", 30: "-шы", 40: "-шы", 50: "-ші", 60: "-шы", 70: "-ші", 80: "-ші", 90: "-шы", 100: "-ші" }),
         $g = (kg.defineLocale("kk", { months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"), monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"), weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"), weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"), weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Бүгін сағат] LT", nextDay: "[Ертең сағат] LT", nextWeek: "dddd [сағат] LT", lastDay: "[Кеше сағат] LT", lastWeek: "[Өткен аптаның] dddd [сағат] LT", sameElse: "L" }, relativeTime: { future: "%s ішінде", past: "%s бұрын", s: "бірнеше секунд", m: "бір минут", mm: "%d минут", h: "бір сағат", hh: "%d сағат", d: "бір күн", dd: "%d күн", M: "бір ай", MM: "%d ай", y: "бір жыл", yy: "%d жыл" }, ordinalParse: /\d{1,2}-(ші|шы)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = a >= 100 ? 100 : null;return a + (Zg[a] || Zg[b] || Zg[c]);
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("km", { months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"), weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[ថ្ងៃនេះ ម៉ោង] LT", nextDay: "[ស្អែក ម៉ោង] LT", nextWeek: "dddd [ម៉ោង] LT", lastDay: "[ម្សិលមិញ ម៉ោង] LT", lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT", sameElse: "L" }, relativeTime: { future: "%sទៀត", past: "%sមុន", s: "ប៉ុន្មានវិនាទី", m: "មួយនាទី", mm: "%d នាទី", h: "មួយម៉ោង", hh: "%d ម៉ោង", d: "មួយថ្ងៃ", dd: "%d ថ្ងៃ", M: "មួយខែ", MM: "%d ខែ", y: "មួយឆ្នាំ", yy: "%d ឆ្នាំ" }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("ko", { months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"), weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"), weekdaysShort: "일_월_화_수_목_금_토".split("_"), weekdaysMin: "일_월_화_수_목_금_토".split("_"), longDateFormat: { LT: "A h시 m분", LTS: "A h시 m분 s초", L: "YYYY.MM.DD", LL: "YYYY년 MMMM D일", LLL: "YYYY년 MMMM D일 A h시 m분", LLLL: "YYYY년 MMMM D일 dddd A h시 m분" }, calendar: { sameDay: "오늘 LT", nextDay: "내일 LT", nextWeek: "dddd LT", lastDay: "어제 LT", lastWeek: "지난주 dddd LT", sameElse: "L" }, relativeTime: { future: "%s 후", past: "%s 전", s: "몇 초", ss: "%d초", m: "일분", mm: "%d분", h: "한 시간", hh: "%d시간", d: "하루", dd: "%d일", M: "한 달", MM: "%d달", y: "일 년", yy: "%d년" }, ordinalParse: /\d{1,2}일/, ordinal: "%d일", meridiemParse: /오전|오후/, isPM: function isPM(a) {
               return "오후" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "오전" : "오후";
          } }), { 0: "-чү", 1: "-чи", 2: "-чи", 3: "-чү", 4: "-чү", 5: "-чи", 6: "-чы", 7: "-чи", 8: "-чи", 9: "-чу", 10: "-чу", 20: "-чы", 30: "-чу", 40: "-чы", 50: "-чү", 60: "-чы", 70: "-чи", 80: "-чи", 90: "-чу", 100: "-чү" }),
         _g = (kg.defineLocale("ky", { months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"), monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"), weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"), weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"), weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Бүгүн саат] LT", nextDay: "[Эртең саат] LT", nextWeek: "dddd [саат] LT", lastDay: "[Кече саат] LT", lastWeek: "[Өткен аптанын] dddd [күнү] [саат] LT", sameElse: "L" }, relativeTime: { future: "%s ичинде", past: "%s мурун", s: "бирнече секунд", m: "бир мүнөт", mm: "%d мүнөт", h: "бир саат", hh: "%d саат", d: "бир күн", dd: "%d күн", M: "бир ай", MM: "%d ай", y: "бир жыл", yy: "%d жыл" }, ordinalParse: /\d{1,2}-(чи|чы|чү|чу)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = a >= 100 ? 100 : null;return a + ($g[a] || $g[b] || $g[c]);
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("lb", { months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"), monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"), monthsParseExact: !0, weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"), weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"), weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm [Auer]", LTS: "H:mm:ss [Auer]", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm [Auer]", LLLL: "dddd, D. MMMM YYYY H:mm [Auer]" }, calendar: { sameDay: "[Haut um] LT", sameElse: "L", nextDay: "[Muer um] LT", nextWeek: "dddd [um] LT", lastDay: "[Gëschter um] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 2:case 4:
                              return "[Leschten] dddd [um] LT";default:
                              return "[Leschte] dddd [um] LT";}
               } }, relativeTime: { future: Hd, past: Id, s: "e puer Sekonnen", m: Gd, mm: "%d Minutten", h: Gd, hh: "%d Stonnen", d: Gd, dd: "%d Deeg", M: Gd, MM: "%d Méint", y: Gd, yy: "%d Joer" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("lo", { months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"), monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"), weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"), weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"), weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "ວັນdddd D MMMM YYYY HH:mm" }, meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/, isPM: function isPM(a) {
               return "ຕອນແລງ" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "ຕອນເຊົ້າ" : "ຕອນແລງ";
          }, calendar: { sameDay: "[ມື້ນີ້ເວລາ] LT", nextDay: "[ມື້ອື່ນເວລາ] LT", nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT", lastDay: "[ມື້ວານນີ້ເວລາ] LT", lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT", sameElse: "L" }, relativeTime: { future: "ອີກ %s", past: "%sຜ່ານມາ", s: "ບໍ່ເທົ່າໃດວິນາທີ", m: "1 ນາທີ", mm: "%d ນາທີ", h: "1 ຊົ່ວໂມງ", hh: "%d ຊົ່ວໂມງ", d: "1 ມື້", dd: "%d ມື້", M: "1 ເດືອນ", MM: "%d ເດືອນ", y: "1 ປີ", yy: "%d ປີ" }, ordinalParse: /(ທີ່)\d{1,2}/, ordinal: function ordinal(a) {
               return "ທີ່" + a;
          } }), { m: "minutė_minutės_minutę", mm: "minutės_minučių_minutes", h: "valanda_valandos_valandą", hh: "valandos_valandų_valandas", d: "diena_dienos_dieną", dd: "dienos_dienų_dienas", M: "mėnuo_mėnesio_mėnesį", MM: "mėnesiai_mėnesių_mėnesius", y: "metai_metų_metus", yy: "metai_metų_metus" }),
         ah = (kg.defineLocale("lt", { months: { format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"), standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"), isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/ }, monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"), weekdays: { format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"), standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"), isFormat: /dddd HH:mm/ }, weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"), weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "YYYY [m.] MMMM D [d.]", LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]", LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]", l: "YYYY-MM-DD", ll: "YYYY [m.] MMMM D [d.]", lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]", llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]" }, calendar: { sameDay: "[Šiandien] LT", nextDay: "[Rytoj] LT", nextWeek: "dddd LT", lastDay: "[Vakar] LT", lastWeek: "[Praėjusį] dddd LT", sameElse: "L" }, relativeTime: { future: "po %s", past: "prieš %s", s: Kd, m: Ld, mm: Od, h: Ld, hh: Od, d: Ld, dd: Od, M: Ld, MM: Od, y: Ld, yy: Od }, ordinalParse: /\d{1,2}-oji/, ordinal: function ordinal(a) {
               return a + "-oji";
          }, week: { dow: 1,
               doy: 4 } }), { m: "minūtes_minūtēm_minūte_minūtes".split("_"), mm: "minūtes_minūtēm_minūte_minūtes".split("_"), h: "stundas_stundām_stunda_stundas".split("_"), hh: "stundas_stundām_stunda_stundas".split("_"), d: "dienas_dienām_diena_dienas".split("_"), dd: "dienas_dienām_diena_dienas".split("_"), M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"), y: "gada_gadiem_gads_gadi".split("_"), yy: "gada_gadiem_gads_gadi".split("_") }),
         bh = (kg.defineLocale("lv", { months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"), monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"), weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"), weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY.", LL: "YYYY. [gada] D. MMMM", LLL: "YYYY. [gada] D. MMMM, HH:mm", LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm" }, calendar: { sameDay: "[Šodien pulksten] LT", nextDay: "[Rīt pulksten] LT", nextWeek: "dddd [pulksten] LT", lastDay: "[Vakar pulksten] LT", lastWeek: "[Pagājušā] dddd [pulksten] LT", sameElse: "L" }, relativeTime: { future: "pēc %s", past: "pirms %s", s: Sd, m: Rd, mm: Qd, h: Rd, hh: Qd, d: Rd, dd: Qd, M: Rd, MM: Qd, y: Rd, yy: Qd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), { words: {
               m: ["jedan minut", "jednog minuta"], mm: ["minut", "minuta", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mjesec", "mjeseca", "mjeseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function correctGrammaticalCase(a, b) {
               return 1 === a ? b[0] : a >= 2 && a <= 4 ? b[1] : b[2];
          }, translate: function translate(a, b, c) {
               var d = bh.words[c];return 1 === c.length ? b ? d[0] : d[1] : a + " " + bh.correctGrammaticalCase(a, d);
          } }),
         ch = (kg.defineLocale("me", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sjutra u] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[u] [nedjelju] [u] LT";case 3:
                              return "[u] [srijedu] [u] LT";case 6:
                              return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
                              return "[u] dddd [u] LT";}
               }, lastDay: "[juče u] LT", lastWeek: function lastWeek() {
                    var a = ["[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"];return a[this.day()];
               }, sameElse: "L" }, relativeTime: { future: "za %s", past: "prije %s", s: "nekoliko sekundi", m: bh.translate, mm: bh.translate, h: bh.translate, hh: bh.translate, d: "dan", dd: bh.translate, M: "mjesec", MM: bh.translate, y: "godinu", yy: bh.translate }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), kg.defineLocale("mi", { months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"), monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"), monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i, monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i, weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"), weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"), weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [i] HH:mm", LLLL: "dddd, D MMMM YYYY [i] HH:mm" }, calendar: { sameDay: "[i teie mahana, i] LT", nextDay: "[apopo i] LT", nextWeek: "dddd [i] LT", lastDay: "[inanahi i] LT", lastWeek: "dddd [whakamutunga i] LT", sameElse: "L" }, relativeTime: { future: "i roto i %s", past: "%s i mua", s: "te hēkona ruarua", m: "he meneti", mm: "%d meneti", h: "te haora", hh: "%d haora", d: "he ra", dd: "%d ra", M: "he marama", MM: "%d marama", y: "he tau", yy: "%d tau" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("mk", { months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"), monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"), weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"), weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"), weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "D.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[Денес во] LT", nextDay: "[Утре во] LT", nextWeek: "[Во] dddd [во] LT", lastDay: "[Вчера во] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:case 3:case 6:
                              return "[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:
                              return "[Изминатиот] dddd [во] LT";}
               }, sameElse: "L" }, relativeTime: { future: "после %s", past: "пред %s", s: "неколку секунди", m: "минута", mm: "%d минути", h: "час", hh: "%d часа", d: "ден", dd: "%d дена", M: "месец", MM: "%d месеци", y: "година", yy: "%d години" }, ordinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = a % 100;return 0 === a ? a + "-ев" : 0 === c ? a + "-ен" : c > 10 && c < 20 ? a + "-ти" : 1 === b ? a + "-ви" : 2 === b ? a + "-ри" : 7 === b || 8 === b ? a + "-ми" : a + "-ти";
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("ml", { months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"), monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"), monthsParseExact: !0, weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"), weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"), weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"), longDateFormat: { LT: "A h:mm -നു", LTS: "A h:mm:ss -നു", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm -നു", LLLL: "dddd, D MMMM YYYY, A h:mm -നു" }, calendar: { sameDay: "[ഇന്ന്] LT", nextDay: "[നാളെ] LT", nextWeek: "dddd, LT", lastDay: "[ഇന്നലെ] LT", lastWeek: "[കഴിഞ്ഞ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s കഴിഞ്ഞ്", past: "%s മുൻപ്", s: "അൽപ നിമിഷങ്ങൾ", m: "ഒരു മിനിറ്റ്", mm: "%d മിനിറ്റ്", h: "ഒരു മണിക്കൂർ", hh: "%d മണിക്കൂർ", d: "ഒരു ദിവസം", dd: "%d ദിവസം", M: "ഒരു മാസം", MM: "%d മാസം", y: "ഒരു വർഷം", yy: "%d വർഷം" }, meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "രാത്രി" === b && a >= 4 || "ഉച്ച കഴിഞ്ഞ്" === b || "വൈകുന്നേരം" === b ? a + 12 : a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "രാത്രി" : a < 12 ? "രാവിലെ" : a < 17 ? "ഉച്ച കഴിഞ്ഞ്" : a < 20 ? "വൈകുന്നേരം" : "രാത്രി";
          } }), { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }),
         dh = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" },
         eh = (kg.defineLocale("mr", { months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"), monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"), monthsParseExact: !0, weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"), weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"), weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"), longDateFormat: { LT: "A h:mm वाजता", LTS: "A h:mm:ss वाजता", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm वाजता", LLLL: "dddd, D MMMM YYYY, A h:mm वाजता" }, calendar: { sameDay: "[आज] LT", nextDay: "[उद्या] LT", nextWeek: "dddd, LT", lastDay: "[काल] LT", lastWeek: "[मागील] dddd, LT", sameElse: "L" }, relativeTime: { future: "%sमध्ये", past: "%sपूर्वी", s: Td, m: Td, mm: Td, h: Td, hh: Td, d: Td, dd: Td, M: Td, MM: Td, y: Td, yy: Td }, preparse: function preparse(a) {
               return a.replace(/[१२३४५६७८९०]/g, function (a) {
                    return dh[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return ch[a];
               });
          }, meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "रात्री" === b ? a < 4 ? a : a + 12 : "सकाळी" === b ? a : "दुपारी" === b ? a >= 10 ? a : a + 12 : "सायंकाळी" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "रात्री" : a < 10 ? "सकाळी" : a < 17 ? "दुपारी" : a < 20 ? "सायंकाळी" : "रात्री";
          }, week: { dow: 0,
               doy: 6 } }), kg.defineLocale("ms-my", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "pagi" === b ? a : "tengahari" === b ? a >= 11 ? a : a + 12 : "petang" === b || "malam" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 11 ? "pagi" : a < 15 ? "tengahari" : a < 19 ? "petang" : "malam";
          }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("ms", { months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"), weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"), weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"), weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [pukul] HH.mm", LLLL: "dddd, D MMMM YYYY [pukul] HH.mm" }, meridiemParse: /pagi|tengahari|petang|malam/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "pagi" === b ? a : "tengahari" === b ? a >= 11 ? a : a + 12 : "petang" === b || "malam" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 11 ? "pagi" : a < 15 ? "tengahari" : a < 19 ? "petang" : "malam";
          }, calendar: { sameDay: "[Hari ini pukul] LT", nextDay: "[Esok pukul] LT", nextWeek: "dddd [pukul] LT", lastDay: "[Kelmarin pukul] LT", lastWeek: "dddd [lepas pukul] LT", sameElse: "L" }, relativeTime: { future: "dalam %s", past: "%s yang lepas", s: "beberapa saat", m: "seminit", mm: "%d minit", h: "sejam", hh: "%d jam", d: "sehari", dd: "%d hari", M: "sebulan", MM: "%d bulan", y: "setahun", yy: "%d tahun" }, week: { dow: 1,
               doy: 7 } }), { 1: "၁", 2: "၂", 3: "၃", 4: "၄", 5: "၅", 6: "၆", 7: "၇", 8: "၈", 9: "၉", 0: "၀" }),
         fh = { "၁": "1", "၂": "2", "၃": "3", "၄": "4", "၅": "5", "၆": "6", "၇": "7", "၈": "8", "၉": "9", "၀": "0" },
         gh = (kg.defineLocale("my", { months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"), monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"), weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"), weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[ယနေ.] LT [မှာ]", nextDay: "[မနက်ဖြန်] LT [မှာ]", nextWeek: "dddd LT [မှာ]", lastDay: "[မနေ.က] LT [မှာ]", lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]", sameElse: "L" }, relativeTime: { future: "လာမည့် %s မှာ", past: "လွန်ခဲ့သော %s က", s: "စက္ကန်.အနည်းငယ်", m: "တစ်မိနစ်", mm: "%d မိနစ်", h: "တစ်နာရီ", hh: "%d နာရီ", d: "တစ်ရက်", dd: "%d ရက်", M: "တစ်လ", MM: "%d လ", y: "တစ်နှစ်", yy: "%d နှစ်" }, preparse: function preparse(a) {
               return a.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (a) {
                    return fh[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return eh[a];
               });
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("nb", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"), monthsParseExact: !0, weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"), weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"), weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] HH:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[i dag kl.] LT", nextDay: "[i morgen kl.] LT", nextWeek: "dddd [kl.] LT", lastDay: "[i går kl.] LT", lastWeek: "[forrige] dddd [kl.] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s siden", s: "noen sekunder", m: "ett minutt", mm: "%d minutter", h: "en time", hh: "%d timer", d: "en dag", dd: "%d dager", M: "en måned", MM: "%d måneder", y: "ett år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), { 1: "१", 2: "२", 3: "३", 4: "४", 5: "५", 6: "६", 7: "७", 8: "८", 9: "९", 0: "०" }),
         hh = { "१": "1", "२": "2", "३": "3", "४": "4", "५": "5", "६": "6", "७": "7", "८": "8", "९": "9", "०": "0" },
         ih = (kg.defineLocale("ne", { months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"), monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"), monthsParseExact: !0, weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"), weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"), weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "Aको h:mm बजे", LTS: "Aको h:mm:ss बजे", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, Aको h:mm बजे", LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे" }, preparse: function preparse(a) {
               return a.replace(/[१२३४५६७८९०]/g, function (a) {
                    return hh[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return gh[a];
               });
          }, meridiemParse: /राति|बिहान|दिउँसो|साँझ/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "राति" === b ? a < 4 ? a : a + 12 : "बिहान" === b ? a : "दिउँसो" === b ? a >= 10 ? a : a + 12 : "साँझ" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 3 ? "राति" : a < 12 ? "बिहान" : a < 16 ? "दिउँसो" : a < 20 ? "साँझ" : "राति";
          }, calendar: { sameDay: "[आज] LT", nextDay: "[भोलि] LT", nextWeek: "[आउँदो] dddd[,] LT", lastDay: "[हिजो] LT", lastWeek: "[गएको] dddd[,] LT", sameElse: "L" }, relativeTime: { future: "%sमा", past: "%s अगाडि", s: "केही क्षण", m: "एक मिनेट", mm: "%d मिनेट", h: "एक घण्टा", hh: "%d घण्टा", d: "एक दिन", dd: "%d दिन", M: "एक महिना", MM: "%d महिना", y: "एक बर्ष", yy: "%d बर्ष" }, week: { dow: 0,
               doy: 6 } }), "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_")),
         jh = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
         kh = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
         lh = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
         mh = (kg.defineLocale("nl", { months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"), monthsShort: function monthsShort(a, b) {
               return (/-MMM-/.test(b) ? jh[a.month()] : ih[a.month()]
               );
          }, monthsRegex: lh, monthsShortRegex: lh, monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i, monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i, monthsParse: kh, longMonthsParse: kh, shortMonthsParse: kh, weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"), weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"), weekdaysMin: "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD-MM-YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[vandaag om] LT", nextDay: "[morgen om] LT", nextWeek: "dddd [om] LT", lastDay: "[gisteren om] LT", lastWeek: "[afgelopen] dddd [om] LT", sameElse: "L" }, relativeTime: { future: "over %s", past: "%s geleden", s: "een paar seconden", m: "één minuut", mm: "%d minuten", h: "één uur", hh: "%d uur", d: "één dag", dd: "%d dagen", M: "één maand", MM: "%d maanden", y: "één jaar", yy: "%d jaar" }, ordinalParse: /\d{1,2}(ste|de)/, ordinal: function ordinal(a) {
               return a + (1 === a || 8 === a || a >= 20 ? "ste" : "de");
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("nn", { months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"), monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"), weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"), weekdaysShort: "sun_mån_tys_ons_tor_fre_lau".split("_"), weekdaysMin: "su_må_ty_on_to_fr_lø".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY [kl.] H:mm", LLLL: "dddd D. MMMM YYYY [kl.] HH:mm" }, calendar: { sameDay: "[I dag klokka] LT", nextDay: "[I morgon klokka] LT", nextWeek: "dddd [klokka] LT", lastDay: "[I går klokka] LT", lastWeek: "[Føregåande] dddd [klokka] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "%s sidan", s: "nokre sekund", m: "eit minutt", mm: "%d minutt", h: "ein time", hh: "%d timar", d: "ein dag", dd: "%d dagar", M: "ein månad", MM: "%d månader", y: "eit år", yy: "%d år" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), { 1: "੧", 2: "੨", 3: "੩", 4: "੪", 5: "੫", 6: "੬", 7: "੭", 8: "੮", 9: "੯", 0: "੦" }),
         nh = { "੧": "1", "੨": "2", "੩": "3", "੪": "4", "੫": "5", "੬": "6", "੭": "7", "੮": "8", "੯": "9", "੦": "0" },
         oh = (kg.defineLocale("pa-in", {
          months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"), monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"), weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"), weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"), weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"), longDateFormat: { LT: "A h:mm ਵਜੇ", LTS: "A h:mm:ss ਵਜੇ", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm ਵਜੇ", LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ" }, calendar: { sameDay: "[ਅਜ] LT", nextDay: "[ਕਲ] LT", nextWeek: "dddd, LT", lastDay: "[ਕਲ] LT", lastWeek: "[ਪਿਛਲੇ] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s ਵਿੱਚ", past: "%s ਪਿਛਲੇ", s: "ਕੁਝ ਸਕਿੰਟ", m: "ਇਕ ਮਿੰਟ", mm: "%d ਮਿੰਟ", h: "ਇੱਕ ਘੰਟਾ", hh: "%d ਘੰਟੇ", d: "ਇੱਕ ਦਿਨ", dd: "%d ਦਿਨ", M: "ਇੱਕ ਮਹੀਨਾ", MM: "%d ਮਹੀਨੇ", y: "ਇੱਕ ਸਾਲ", yy: "%d ਸਾਲ" }, preparse: function preparse(a) {
               return a.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (a) {
                    return nh[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return mh[a];
               });
          },

          meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "ਰਾਤ" === b ? a < 4 ? a : a + 12 : "ਸਵੇਰ" === b ? a : "ਦੁਪਹਿਰ" === b ? a >= 10 ? a : a + 12 : "ਸ਼ਾਮ" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "ਰਾਤ" : a < 10 ? "ਸਵੇਰ" : a < 17 ? "ਦੁਪਹਿਰ" : a < 20 ? "ਸ਼ਾਮ" : "ਰਾਤ";
          }, week: { dow: 0,
               doy: 6 } }), "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_")),
         ph = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),
         qh = (kg.defineLocale("pl", { months: function months(a, b) {
               return "" === b ? "(" + ph[a.month()] + "|" + oh[a.month()] + ")" : /D MMMM/.test(b) ? ph[a.month()] : oh[a.month()];
          }, monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"), weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"), weekdaysShort: "nie_pon_wt_śr_czw_pt_sb".split("_"), weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Dziś o] LT", nextDay: "[Jutro o] LT", nextWeek: "[W] dddd [o] LT", lastDay: "[Wczoraj o] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:
                              return "[W zeszłą niedzielę o] LT";case 3:
                              return "[W zeszłą środę o] LT";case 6:
                              return "[W zeszłą sobotę o] LT";default:
                              return "[W zeszły] dddd [o] LT";}
               }, sameElse: "L" }, relativeTime: { future: "za %s", past: "%s temu", s: "kilka sekund", m: Vd, mm: Vd, h: Vd, hh: Vd, d: "1 dzień", dd: "%d dni", M: "miesiąc", MM: Vd, y: "rok", yy: Vd }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("pt-br", { months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"), monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"), weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"), weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY [às] HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function lastWeek() {
                    return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
               }, sameElse: "L" }, relativeTime: { future: "em %s", past: "%s atrás", s: "poucos segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº" }), kg.defineLocale("pt", { months: "Janeiro_Fevereiro_Março_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro".split("_"), monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"), weekdays: "Domingo_Segunda-Feira_Terça-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_Sábado".split("_"), weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"), weekdaysMin: "Dom_2ª_3ª_4ª_5ª_6ª_Sáb".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D [de] MMMM [de] YYYY", LLL: "D [de] MMMM [de] YYYY HH:mm", LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm" }, calendar: { sameDay: "[Hoje às] LT", nextDay: "[Amanhã às] LT", nextWeek: "dddd [às] LT", lastDay: "[Ontem às] LT", lastWeek: function lastWeek() {
                    return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT";
               }, sameElse: "L" }, relativeTime: { future: "em %s", past: "há %s", s: "segundos", m: "um minuto", mm: "%d minutos", h: "uma hora", hh: "%d horas", d: "um dia", dd: "%d dias", M: "um mês", MM: "%d meses", y: "um ano", yy: "%d anos" }, ordinalParse: /\d{1,2}º/, ordinal: "%dº", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("ro", { months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"), monthsShort: "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"), weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"), weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY H:mm", LLLL: "dddd, D MMMM YYYY H:mm" }, calendar: { sameDay: "[azi la] LT", nextDay: "[mâine la] LT", nextWeek: "dddd [la] LT", lastDay: "[ieri la] LT", lastWeek: "[fosta] dddd [la] LT", sameElse: "L" }, relativeTime: { future: "peste %s", past: "%s în urmă", s: "câteva secunde", m: "un minut", mm: Wd, h: "o oră", hh: Wd, d: "o zi", dd: Wd, M: "o lună", MM: Wd, y: "un an", yy: Wd }, week: { dow: 1,
               doy: 7 } }), [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i]),
         rh = (kg.defineLocale("ru", { months: { format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"), standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_") }, monthsShort: {
               format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"), standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_") }, weekdays: { standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"), format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"), isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/ }, weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"), monthsParse: qh, longMonthsParse: qh, shortMonthsParse: qh,

          monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

          monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

          monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

          monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY г.", LLL: "D MMMM YYYY г., HH:mm", LLLL: "dddd, D MMMM YYYY г., HH:mm" }, calendar: { sameDay: "[Сегодня в] LT", nextDay: "[Завтра в] LT", lastDay: "[Вчера в] LT", nextWeek: function nextWeek(a) {
                    if (a.week() === this.week()) return 2 === this.day() ? "[Во] dddd [в] LT" : "[В] dddd [в] LT";switch (this.day()) {case 0:
                              return "[В следующее] dddd [в] LT";case 1:case 2:case 4:
                              return "[В следующий] dddd [в] LT";case 3:case 5:case 6:
                              return "[В следующую] dddd [в] LT";}
               }, lastWeek: function lastWeek(a) {
                    if (a.week() === this.week()) return 2 === this.day() ? "[Во] dddd [в] LT" : "[В] dddd [в] LT";switch (this.day()) {case 0:
                              return "[В прошлое] dddd [в] LT";case 1:case 2:case 4:
                              return "[В прошлый] dddd [в] LT";case 3:case 5:case 6:
                              return "[В прошлую] dddd [в] LT";}
               }, sameElse: "L" }, relativeTime: { future: "через %s", past: "%s назад", s: "несколько секунд", m: Yd, mm: Yd, h: "час", hh: Yd, d: "день", dd: Yd, M: "месяц", MM: Yd, y: "год", yy: Yd }, meridiemParse: /ночи|утра|дня|вечера/i, isPM: function isPM(a) {
               return (/^(дня|вечера)$/.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "ночи" : a < 12 ? "утра" : a < 17 ? "дня" : "вечера";
          }, ordinalParse: /\d{1,2}-(й|го|я)/, ordinal: function ordinal(a, b) {
               switch (b) {case "M":case "d":case "DDD":
                         return a + "-й";case "D":
                         return a + "-го";case "w":case "W":
                         return a + "-я";default:
                         return a;}
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("se", { months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"), monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"), weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"), weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"), weekdaysMin: "s_v_m_g_d_b_L".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "MMMM D. [b.] YYYY", LLL: "MMMM D. [b.] YYYY [ti.] HH:mm", LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm" }, calendar: { sameDay: "[otne ti] LT", nextDay: "[ihttin ti] LT", nextWeek: "dddd [ti] LT", lastDay: "[ikte ti] LT", lastWeek: "[ovddit] dddd [ti] LT", sameElse: "L" }, relativeTime: { future: "%s geažes", past: "maŋit %s", s: "moadde sekunddat", m: "okta minuhta", mm: "%d minuhtat", h: "okta diimmu", hh: "%d diimmut", d: "okta beaivi", dd: "%d beaivvit", M: "okta mánnu", MM: "%d mánut", y: "okta jahki", yy: "%d jagit" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("si", { months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"), monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"), weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"), weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"), weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "a h:mm", LTS: "a h:mm:ss", L: "YYYY/MM/DD", LL: "YYYY MMMM D", LLL: "YYYY MMMM D, a h:mm", LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss" }, calendar: { sameDay: "[අද] LT[ට]", nextDay: "[හෙට] LT[ට]", nextWeek: "dddd LT[ට]", lastDay: "[ඊයේ] LT[ට]", lastWeek: "[පසුගිය] dddd LT[ට]", sameElse: "L" }, relativeTime: { future: "%sකින්", past: "%sකට පෙර", s: "තත්පර කිහිපය", m: "මිනිත්තුව", mm: "මිනිත්තු %d", h: "පැය", hh: "පැය %d", d: "දිනය", dd: "දින %d", M: "මාසය", MM: "මාස %d", y: "වසර", yy: "වසර %d" }, ordinalParse: /\d{1,2} වැනි/, ordinal: function ordinal(a) {
               return a + " වැනි";
          }, meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./, isPM: function isPM(a) {
               return "ප.ව." === a || "පස් වරු" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a > 11 ? c ? "ප.ව." : "පස් වරු" : c ? "පෙ.ව." : "පෙර වරු";
          } }), "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_")),
         sh = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_"),
         th = (kg.defineLocale("sk", { months: rh, monthsShort: sh, weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"), weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"), weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"), longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd D. MMMM YYYY H:mm" }, calendar: { sameDay: "[dnes o] LT", nextDay: "[zajtra o] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[v nedeľu o] LT";case 1:case 2:
                              return "[v] dddd [o] LT";case 3:
                              return "[v stredu o] LT";case 4:
                              return "[vo štvrtok o] LT";case 5:
                              return "[v piatok o] LT";case 6:
                              return "[v sobotu o] LT";}
               }, lastDay: "[včera o] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:
                              return "[minulú nedeľu o] LT";case 1:case 2:
                              return "[minulý] dddd [o] LT";case 3:
                              return "[minulú stredu o] LT";case 4:case 5:
                              return "[minulý] dddd [o] LT";case 6:
                              return "[minulú sobotu o] LT";}
               }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pred %s", s: $d, m: $d, mm: $d, h: $d, hh: $d, d: $d, dd: $d, M: $d, MM: $d, y: $d, yy: $d }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("sl", { months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"), monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"), weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"), weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danes ob] LT", nextDay: "[jutri ob] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[v] [nedeljo] [ob] LT";case 3:
                              return "[v] [sredo] [ob] LT";case 6:
                              return "[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:
                              return "[v] dddd [ob] LT";}
               }, lastDay: "[včeraj ob] LT", lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:
                              return "[prejšnjo] [nedeljo] [ob] LT";case 3:
                              return "[prejšnjo] [sredo] [ob] LT";case 6:
                              return "[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:
                              return "[prejšnji] dddd [ob] LT";}
               }, sameElse: "L" }, relativeTime: { future: "čez %s", past: "pred %s", s: _d, m: _d, mm: _d, h: _d, hh: _d, d: _d, dd: _d, M: _d, MM: _d, y: _d, yy: _d }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), kg.defineLocale("sq", { months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"), monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"), weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"), weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"), weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"), weekdaysParseExact: !0, meridiemParse: /PD|MD/, isPM: function isPM(a) {
               return "M" === a.charAt(0);
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "PD" : "MD";
          }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[Sot në] LT", nextDay: "[Nesër në] LT", nextWeek: "dddd [në] LT", lastDay: "[Dje në] LT", lastWeek: "dddd [e kaluar në] LT", sameElse: "L" }, relativeTime: { future: "në %s", past: "%s më parë", s: "disa sekonda", m: "një minutë", mm: "%d minuta", h: "një orë", hh: "%d orë", d: "një ditë", dd: "%d ditë", M: "një muaj", MM: "%d muaj", y: "një vit", yy: "%d vite" }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), { words: {
               m: ["један минут", "једне минуте"], mm: ["минут", "минуте", "минута"], h: ["један сат", "једног сата"], hh: ["сат", "сата", "сати"], dd: ["дан", "дана", "дана"], MM: ["месец", "месеца", "месеци"], yy: ["година", "године", "година"] }, correctGrammaticalCase: function correctGrammaticalCase(a, b) {
               return 1 === a ? b[0] : a >= 2 && a <= 4 ? b[1] : b[2];
          }, translate: function translate(a, b, c) {
               var d = th.words[c];return 1 === c.length ? b ? d[0] : d[1] : a + " " + th.correctGrammaticalCase(a, d);
          } }),
         uh = (kg.defineLocale("sr-cyrl", { months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"), monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"), monthsParseExact: !0, weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"), weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"), weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[данас у] LT", nextDay: "[сутра у] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[у] [недељу] [у] LT";case 3:
                              return "[у] [среду] [у] LT";case 6:
                              return "[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:
                              return "[у] dddd [у] LT";}
               }, lastDay: "[јуче у] LT", lastWeek: function lastWeek() {
                    var a = ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"];return a[this.day()];
               }, sameElse: "L" }, relativeTime: { future: "за %s", past: "пре %s", s: "неколико секунди", m: th.translate, mm: th.translate, h: th.translate, hh: th.translate, d: "дан", dd: th.translate, M: "месец", MM: th.translate, y: "годину", yy: th.translate }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), { words: {
               m: ["jedan minut", "jedne minute"], mm: ["minut", "minute", "minuta"], h: ["jedan sat", "jednog sata"], hh: ["sat", "sata", "sati"], dd: ["dan", "dana", "dana"], MM: ["mesec", "meseca", "meseci"], yy: ["godina", "godine", "godina"] }, correctGrammaticalCase: function correctGrammaticalCase(a, b) {
               return 1 === a ? b[0] : a >= 2 && a <= 4 ? b[1] : b[2];
          }, translate: function translate(a, b, c) {
               var d = uh.words[c];return 1 === c.length ? b ? d[0] : d[1] : a + " " + uh.correctGrammaticalCase(a, d);
          } }),
         vh = (kg.defineLocale("sr", { months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"), monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"), monthsParseExact: !0, weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"), weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"), weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "DD.MM.YYYY", LL: "D. MMMM YYYY", LLL: "D. MMMM YYYY H:mm", LLLL: "dddd, D. MMMM YYYY H:mm" }, calendar: { sameDay: "[danas u] LT", nextDay: "[sutra u] LT", nextWeek: function nextWeek() {
                    switch (this.day()) {case 0:
                              return "[u] [nedelju] [u] LT";case 3:
                              return "[u] [sredu] [u] LT";case 6:
                              return "[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:
                              return "[u] dddd [u] LT";}
               }, lastDay: "[juče u] LT", lastWeek: function lastWeek() {
                    var a = ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"];return a[this.day()];
               }, sameElse: "L" }, relativeTime: { future: "za %s", past: "pre %s", s: "nekoliko sekundi", m: uh.translate, mm: uh.translate, h: uh.translate, hh: uh.translate, d: "dan", dd: uh.translate, M: "mesec", MM: uh.translate, y: "godinu", yy: uh.translate }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 7 } }), kg.defineLocale("ss", { months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"), monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"), weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"), weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"), weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "h:mm A", LTS: "h:mm:ss A", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY h:mm A", LLLL: "dddd, D MMMM YYYY h:mm A" }, calendar: { sameDay: "[Namuhla nga] LT", nextDay: "[Kusasa nga] LT", nextWeek: "dddd [nga] LT", lastDay: "[Itolo nga] LT", lastWeek: "dddd [leliphelile] [nga] LT", sameElse: "L" }, relativeTime: { future: "nga %s", past: "wenteka nga %s", s: "emizuzwana lomcane", m: "umzuzu", mm: "%d emizuzu", h: "lihora", hh: "%d emahora", d: "lilanga", dd: "%d emalanga", M: "inyanga", MM: "%d tinyanga", y: "umnyaka", yy: "%d iminyaka" }, meridiemParse: /ekuseni|emini|entsambama|ebusuku/, meridiem: function meridiem(a, b, c) {
               return a < 11 ? "ekuseni" : a < 15 ? "emini" : a < 19 ? "entsambama" : "ebusuku";
          }, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "ekuseni" === b ? a : "emini" === b ? a >= 11 ? a : a + 12 : "entsambama" === b || "ebusuku" === b ? 0 === a ? 0 : a + 12 : void 0;
          }, ordinalParse: /\d{1,2}/, ordinal: "%d", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("sv", { months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"), monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"), weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"), weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"), weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "YYYY-MM-DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY [kl.] HH:mm", LLLL: "dddd D MMMM YYYY [kl.] HH:mm", lll: "D MMM YYYY HH:mm", llll: "ddd D MMM YYYY HH:mm" }, calendar: { sameDay: "[Idag] LT", nextDay: "[Imorgon] LT", lastDay: "[Igår] LT", nextWeek: "[På] dddd LT", lastWeek: "[I] dddd[s] LT", sameElse: "L" }, relativeTime: { future: "om %s", past: "för %s sedan", s: "några sekunder", m: "en minut", mm: "%d minuter", h: "en timme", hh: "%d timmar", d: "en dag", dd: "%d dagar", M: "en månad", MM: "%d månader", y: "ett år", yy: "%d år" }, ordinalParse: /\d{1,2}(e|a)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === ~~(a % 100 / 10) ? "e" : 1 === b ? "a" : 2 === b ? "a" : "e";return a + c;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("sw", { months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"), monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"), weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"), weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"), weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[leo saa] LT", nextDay: "[kesho saa] LT", nextWeek: "[wiki ijayo] dddd [saat] LT", lastDay: "[jana] LT", lastWeek: "[wiki iliyopita] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s baadaye", past: "tokea %s", s: "hivi punde", m: "dakika moja", mm: "dakika %d", h: "saa limoja", hh: "masaa %d", d: "siku moja", dd: "masiku %d", M: "mwezi mmoja", MM: "miezi %d", y: "mwaka mmoja", yy: "miaka %d" }, week: { dow: 1,
               doy: 7 } }), { 1: "௧", 2: "௨", 3: "௩", 4: "௪", 5: "௫", 6: "௬", 7: "௭", 8: "௮", 9: "௯", 0: "௦" }),
         wh = { "௧": "1", "௨": "2", "௩": "3", "௪": "4", "௫": "5", "௬": "6", "௭": "7", "௮": "8", "௯": "9", "௦": "0" },
         xh = (kg.defineLocale("ta", { months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"), weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"), weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"), weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, HH:mm", LLLL: "dddd, D MMMM YYYY, HH:mm" }, calendar: { sameDay: "[இன்று] LT", nextDay: "[நாளை] LT", nextWeek: "dddd, LT", lastDay: "[நேற்று] LT", lastWeek: "[கடந்த வாரம்] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s இல்", past: "%s முன்", s: "ஒரு சில விநாடிகள்", m: "ஒரு நிமிடம்", mm: "%d நிமிடங்கள்", h: "ஒரு மணி நேரம்", hh: "%d மணி நேரம்", d: "ஒரு நாள்", dd: "%d நாட்கள்", M: "ஒரு மாதம்", MM: "%d மாதங்கள்", y: "ஒரு வருடம்", yy: "%d ஆண்டுகள்" }, ordinalParse: /\d{1,2}வது/, ordinal: function ordinal(a) {
               return a + "வது";
          }, preparse: function preparse(a) {
               return a.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (a) {
                    return wh[a];
               });
          }, postformat: function postformat(a) {
               return a.replace(/\d/g, function (a) {
                    return vh[a];
               });
          },

          meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/, meridiem: function meridiem(a, b, c) {
               return a < 2 ? " யாமம்" : a < 6 ? " வைகறை" : a < 10 ? " காலை" : a < 14 ? " நண்பகல்" : a < 18 ? " எற்பாடு" : a < 22 ? " மாலை" : " யாமம்";
          }, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "யாமம்" === b ? a < 2 ? a : a + 12 : "வைகறை" === b || "காலை" === b ? a : "நண்பகல்" === b && a >= 10 ? a : a + 12;
          }, week: { dow: 0,
               doy: 6 } }), kg.defineLocale("te", { months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"), monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"), monthsParseExact: !0, weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"), weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"), weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"), longDateFormat: { LT: "A h:mm", LTS: "A h:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY, A h:mm", LLLL: "dddd, D MMMM YYYY, A h:mm" }, calendar: { sameDay: "[నేడు] LT", nextDay: "[రేపు] LT", nextWeek: "dddd, LT", lastDay: "[నిన్న] LT", lastWeek: "[గత] dddd, LT", sameElse: "L" }, relativeTime: { future: "%s లో", past: "%s క్రితం", s: "కొన్ని క్షణాలు", m: "ఒక నిమిషం", mm: "%d నిమిషాలు", h: "ఒక గంట", hh: "%d గంటలు", d: "ఒక రోజు", dd: "%d రోజులు", M: "ఒక నెల", MM: "%d నెలలు", y: "ఒక సంవత్సరం", yy: "%d సంవత్సరాలు" }, ordinalParse: /\d{1,2}వ/, ordinal: "%dవ", meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "రాత్రి" === b ? a < 4 ? a : a + 12 : "ఉదయం" === b ? a : "మధ్యాహ్నం" === b ? a >= 10 ? a : a + 12 : "సాయంత్రం" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "రాత్రి" : a < 10 ? "ఉదయం" : a < 17 ? "మధ్యాహ్నం" : a < 20 ? "సాయంత్రం" : "రాత్రి";
          }, week: { dow: 0,
               doy: 6 } }), kg.defineLocale("th", { months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"), monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"), monthsParseExact: !0, weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"), weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),
          weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "H:mm", LTS: "H:mm:ss", L: "YYYY/MM/DD", LL: "D MMMM YYYY", LLL: "D MMMM YYYY เวลา H:mm", LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm" }, meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/, isPM: function isPM(a) {
               return "หลังเที่ยง" === a;
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง";
          }, calendar: { sameDay: "[วันนี้ เวลา] LT", nextDay: "[พรุ่งนี้ เวลา] LT", nextWeek: "dddd[หน้า เวลา] LT", lastDay: "[เมื่อวานนี้ เวลา] LT", lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT", sameElse: "L" }, relativeTime: { future: "อีก %s", past: "%sที่แล้ว", s: "ไม่กี่วินาที", m: "1 นาที", mm: "%d นาที", h: "1 ชั่วโมง", hh: "%d ชั่วโมง", d: "1 วัน", dd: "%d วัน", M: "1 เดือน", MM: "%d เดือน", y: "1 ปี", yy: "%d ปี" } }), kg.defineLocale("tl-ph", { months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"), monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"), weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"), weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"), weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "MM/D/YYYY", LL: "MMMM D, YYYY", LLL: "MMMM D, YYYY HH:mm", LLLL: "dddd, MMMM DD, YYYY HH:mm" }, calendar: { sameDay: "[Ngayon sa] LT", nextDay: "[Bukas sa] LT", nextWeek: "dddd [sa] LT", lastDay: "[Kahapon sa] LT", lastWeek: "dddd [huling linggo] LT", sameElse: "L" }, relativeTime: { future: "sa loob ng %s", past: "%s ang nakalipas", s: "ilang segundo", m: "isang minuto", mm: "%d minuto", h: "isang oras", hh: "%d oras", d: "isang araw", dd: "%d araw", M: "isang buwan", MM: "%d buwan", y: "isang taon", yy: "%d taon" }, ordinalParse: /\d{1,2}/, ordinal: function ordinal(a) {
               return a;
          }, week: { dow: 1,
               doy: 4 } }), "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_")),
         yh = (kg.defineLocale("tlh", { months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"), monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"), monthsParseExact: !0, weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[DaHjaj] LT", nextDay: "[wa’leS] LT", nextWeek: "LLL", lastDay: "[wa’Hu’] LT", lastWeek: "LLL", sameElse: "L" }, relativeTime: { future: ae, past: be, s: "puS lup", m: "wa’ tup", mm: ce, h: "wa’ rep", hh: ce, d: "wa’ jaj", dd: ce, M: "wa’ jar", MM: ce, y: "wa’ DIS", yy: ce }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), { 1: "'inci", 5: "'inci", 8: "'inci", 70: "'inci", 80: "'inci", 2: "'nci", 7: "'nci", 20: "'nci", 50: "'nci", 3: "'üncü", 4: "'üncü", 100: "'üncü", 6: "'ncı", 9: "'uncu", 10: "'uncu", 30: "'uncu", 60: "'ıncı", 90: "'ıncı" }),
         zh = (kg.defineLocale("tr", { months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"), monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"), weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"), weekdaysShort: "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"), weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[bugün saat] LT", nextDay: "[yarın saat] LT", nextWeek: "[haftaya] dddd [saat] LT", lastDay: "[dün] LT", lastWeek: "[geçen hafta] dddd [saat] LT", sameElse: "L" }, relativeTime: { future: "%s sonra", past: "%s önce", s: "birkaç saniye", m: "bir dakika", mm: "%d dakika", h: "bir saat", hh: "%d saat", d: "bir gün", dd: "%d gün", M: "bir ay", MM: "%d ay", y: "bir yıl", yy: "%d yıl" }, ordinalParse: /\d{1,2}'(inci|nci|üncü|ncı|uncu|ıncı)/, ordinal: function ordinal(a) {
               if (0 === a) return a + "'ıncı";var b = a % 10,
                   c = a % 100 - b,
                   d = a >= 100 ? 100 : null;return a + (yh[b] || yh[c] || yh[d]);
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("tzl", { months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"), monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"), weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"), weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"), weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"), longDateFormat: { LT: "HH.mm", LTS: "HH.mm.ss", L: "DD.MM.YYYY", LL: "D. MMMM [dallas] YYYY", LLL: "D. MMMM [dallas] YYYY HH.mm", LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm" }, meridiemParse: /d\'o|d\'a/i, isPM: function isPM(a) {
               return "d'o" === a.toLowerCase();
          }, meridiem: function meridiem(a, b, c) {
               return a > 11 ? c ? "d'o" : "D'O" : c ? "d'a" : "D'A";
          }, calendar: { sameDay: "[oxhi à] LT", nextDay: "[demà à] LT", nextWeek: "dddd [à] LT", lastDay: "[ieiri à] LT", lastWeek: "[sür el] dddd [lasteu à] LT", sameElse: "L" }, relativeTime: { future: "osprei %s", past: "ja%s", s: ee, m: ee, mm: ee, h: ee, hh: ee, d: ee, dd: ee, M: ee, MM: ee, y: ee, yy: ee }, ordinalParse: /\d{1,2}\./, ordinal: "%d.", week: { dow: 1,
               doy: 4 } }), kg.defineLocale("tzm-latn", { months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"), weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[asdkh g] LT", nextDay: "[aska g] LT", nextWeek: "dddd [g] LT", lastDay: "[assant g] LT", lastWeek: "dddd [g] LT", sameElse: "L" }, relativeTime: { future: "dadkh s yan %s", past: "yan %s", s: "imik", m: "minuḍ", mm: "%d minuḍ", h: "saɛa", hh: "%d tassaɛin", d: "ass", dd: "%d ossan", M: "ayowr", MM: "%d iyyirn", y: "asgas", yy: "%d isgasn" }, week: { dow: 6,
               doy: 12 } }), kg.defineLocale("tzm", { months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"), weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd D MMMM YYYY HH:mm" }, calendar: { sameDay: "[ⴰⵙⴷⵅ ⴴ] LT", nextDay: "[ⴰⵙⴽⴰ ⴴ] LT", nextWeek: "dddd [ⴴ] LT", lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT", lastWeek: "dddd [ⴴ] LT", sameElse: "L" }, relativeTime: { future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s", past: "ⵢⴰⵏ %s", s: "ⵉⵎⵉⴽ", m: "ⵎⵉⵏⵓⴺ", mm: "%d ⵎⵉⵏⵓⴺ", h: "ⵙⴰⵄⴰ", hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ", d: "ⴰⵙⵙ", dd: "%d oⵙⵙⴰⵏ", M: "ⴰⵢoⵓⵔ", MM: "%d ⵉⵢⵢⵉⵔⵏ", y: "ⴰⵙⴳⴰⵙ", yy: "%d ⵉⵙⴳⴰⵙⵏ" }, week: { dow: 6,
               doy: 12 } }), kg.defineLocale("uk", { months: { format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"), standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_") }, monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"), weekdays: he, weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"), weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD.MM.YYYY", LL: "D MMMM YYYY р.", LLL: "D MMMM YYYY р., HH:mm", LLLL: "dddd, D MMMM YYYY р., HH:mm" }, calendar: { sameDay: ie("[Сьогодні "), nextDay: ie("[Завтра "), lastDay: ie("[Вчора "), nextWeek: ie("[У] dddd ["), lastWeek: function lastWeek() {
                    switch (this.day()) {case 0:case 3:case 5:case 6:
                              return ie("[Минулої] dddd [").call(this);case 1:case 2:case 4:
                              return ie("[Минулого] dddd [").call(this);}
               }, sameElse: "L" }, relativeTime: { future: "за %s", past: "%s тому", s: "декілька секунд", m: ge, mm: ge, h: "годину", hh: ge, d: "день", dd: ge, M: "місяць", MM: ge, y: "рік", yy: ge },

          meridiemParse: /ночі|ранку|дня|вечора/, isPM: function isPM(a) {
               return (/^(дня|вечора)$/.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 4 ? "ночі" : a < 12 ? "ранку" : a < 17 ? "дня" : "вечора";
          }, ordinalParse: /\d{1,2}-(й|го)/, ordinal: function ordinal(a, b) {
               switch (b) {case "M":case "d":case "DDD":case "w":case "W":
                         return a + "-й";case "D":
                         return a + "-го";default:
                         return a;}
          }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("uz", { months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"), monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"), weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"), weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"), weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"), longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "D MMMM YYYY, dddd HH:mm" }, calendar: { sameDay: "[Бугун соат] LT [да]", nextDay: "[Эртага] LT [да]", nextWeek: "dddd [куни соат] LT [да]", lastDay: "[Кеча соат] LT [да]", lastWeek: "[Утган] dddd [куни соат] LT [да]", sameElse: "L" }, relativeTime: { future: "Якин %s ичида", past: "Бир неча %s олдин", s: "фурсат", m: "бир дакика", mm: "%d дакика", h: "бир соат", hh: "%d соат", d: "бир кун", dd: "%d кун", M: "бир ой", MM: "%d ой", y: "бир йил", yy: "%d йил" }, week: { dow: 1,
               doy: 7 } }), kg.defineLocale("vi", { months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"), monthsShort: "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"), monthsParseExact: !0, weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"), weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"), weekdaysParseExact: !0, meridiemParse: /sa|ch/i, isPM: function isPM(a) {
               return (/^ch$/i.test(a)
               );
          }, meridiem: function meridiem(a, b, c) {
               return a < 12 ? c ? "sa" : "SA" : c ? "ch" : "CH";
          }, longDateFormat: { LT: "HH:mm", LTS: "HH:mm:ss", L: "DD/MM/YYYY", LL: "D MMMM [năm] YYYY", LLL: "D MMMM [năm] YYYY HH:mm", LLLL: "dddd, D MMMM [năm] YYYY HH:mm", l: "DD/M/YYYY", ll: "D MMM YYYY", lll: "D MMM YYYY HH:mm", llll: "ddd, D MMM YYYY HH:mm" }, calendar: { sameDay: "[Hôm nay lúc] LT", nextDay: "[Ngày mai lúc] LT", nextWeek: "dddd [tuần tới lúc] LT", lastDay: "[Hôm qua lúc] LT", lastWeek: "dddd [tuần rồi lúc] LT", sameElse: "L" }, relativeTime: { future: "%s tới", past: "%s trước", s: "vài giây", m: "một phút", mm: "%d phút", h: "một giờ", hh: "%d giờ", d: "một ngày", dd: "%d ngày", M: "một tháng", MM: "%d tháng", y: "một năm", yy: "%d năm" }, ordinalParse: /\d{1,2}/, ordinal: function ordinal(a) {
               return a;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("x-pseudo", { months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"), monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"), monthsParseExact: !0, weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"), weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"), weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"), weekdaysParseExact: !0, longDateFormat: { LT: "HH:mm", L: "DD/MM/YYYY", LL: "D MMMM YYYY", LLL: "D MMMM YYYY HH:mm", LLLL: "dddd, D MMMM YYYY HH:mm" }, calendar: { sameDay: "[T~ódá~ý át] LT", nextDay: "[T~ómó~rró~w át] LT", nextWeek: "dddd [át] LT", lastDay: "[Ý~ést~érdá~ý át] LT", lastWeek: "[L~ást] dddd [át] LT", sameElse: "L" }, relativeTime: { future: "í~ñ %s", past: "%s á~gó", s: "á ~féw ~sécó~ñds", m: "á ~míñ~úté", mm: "%d m~íñú~tés", h: "á~ñ hó~úr", hh: "%d h~óúrs", d: "á ~dáý", dd: "%d d~áýs", M: "á ~móñ~th", MM: "%d m~óñt~hs", y: "á ~ýéár", yy: "%d ý~éárs" }, ordinalParse: /\d{1,2}(th|st|nd|rd)/, ordinal: function ordinal(a) {
               var b = a % 10,
                   c = 1 === ~~(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th";return a + c;
          }, week: { dow: 1,
               doy: 4 } }), kg.defineLocale("zh-cn", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "Ah点mm分", LTS: "Ah点m分s秒", L: "YYYY-MM-DD", LL: "YYYY年MMMD日", LLL: "YYYY年MMMD日Ah点mm分", LLLL: "YYYY年MMMD日ddddAh点mm分", l: "YYYY-MM-DD", ll: "YYYY年MMMD日", lll: "YYYY年MMMD日Ah点mm分", llll: "YYYY年MMMD日ddddAh点mm分" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "凌晨" === b || "早上" === b || "上午" === b ? a : "下午" === b || "晚上" === b ? a + 12 : a >= 11 ? a : a + 12;
          }, meridiem: function meridiem(a, b, c) {
               var d = 100 * a + b;return d < 600 ? "凌晨" : d < 900 ? "早上" : d < 1130 ? "上午" : d < 1230 ? "中午" : d < 1800 ? "下午" : "晚上";
          }, calendar: { sameDay: function sameDay() {
                    return 0 === this.minutes() ? "[今天]Ah[点整]" : "[今天]LT";
               }, nextDay: function nextDay() {
                    return 0 === this.minutes() ? "[明天]Ah[点整]" : "[明天]LT";
               }, lastDay: function lastDay() {
                    return 0 === this.minutes() ? "[昨天]Ah[点整]" : "[昨天]LT";
               }, nextWeek: function nextWeek() {
                    var a, b;return a = kg().startOf("week"), b = this.diff(a, "days") >= 7 ? "[下]" : "[本]", 0 === this.minutes() ? b + "dddAh点整" : b + "dddAh点mm";
               }, lastWeek: function lastWeek() {
                    var a, b;return a = kg().startOf("week"), b = this.unix() < a.unix() ? "[上]" : "[本]", 0 === this.minutes() ? b + "dddAh点整" : b + "dddAh点mm";
               }, sameElse: "LL" }, ordinalParse: /\d{1,2}(日|月|周)/, ordinal: function ordinal(a, b) {
               switch (b) {case "d":case "D":case "DDD":
                         return a + "日";case "M":
                         return a + "月";case "w":case "W":
                         return a + "周";default:
                         return a;}
          }, relativeTime: { future: "%s内", past: "%s前", s: "几秒", m: "1 分钟", mm: "%d 分钟", h: "1 小时", hh: "%d 小时", d: "1 天", dd: "%d 天", M: "1 个月", MM: "%d 个月", y: "1 年", yy: "%d 年" }, week: {
               dow: 1,
               doy: 4 } }), kg.defineLocale("zh-hk", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "Ah點mm分", LTS: "Ah點m分s秒", L: "YYYY年MMMD日", LL: "YYYY年MMMD日", LLL: "YYYY年MMMD日Ah點mm分", LLLL: "YYYY年MMMD日ddddAh點mm分", l: "YYYY年MMMD日", ll: "YYYY年MMMD日", lll: "YYYY年MMMD日Ah點mm分", llll: "YYYY年MMMD日ddddAh點mm分" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "凌晨" === b || "早上" === b || "上午" === b ? a : "中午" === b ? a >= 11 ? a : a + 12 : "下午" === b || "晚上" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               var d = 100 * a + b;return d < 600 ? "凌晨" : d < 900 ? "早上" : d < 1130 ? "上午" : d < 1230 ? "中午" : d < 1800 ? "下午" : "晚上";
          }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: "[下]ddddLT", lastDay: "[昨天]LT", lastWeek: "[上]ddddLT", sameElse: "L" }, ordinalParse: /\d{1,2}(日|月|週)/, ordinal: function ordinal(a, b) {
               switch (b) {case "d":case "D":case "DDD":
                         return a + "日";case "M":
                         return a + "月";case "w":case "W":
                         return a + "週";default:
                         return a;}
          }, relativeTime: { future: "%s內", past: "%s前", s: "幾秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }), kg.defineLocale("zh-tw", { months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"), monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"), weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"), weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"), weekdaysMin: "日_一_二_三_四_五_六".split("_"), longDateFormat: { LT: "Ah點mm分", LTS: "Ah點m分s秒", L: "YYYY年MMMD日", LL: "YYYY年MMMD日", LLL: "YYYY年MMMD日Ah點mm分", LLLL: "YYYY年MMMD日ddddAh點mm分", l: "YYYY年MMMD日", ll: "YYYY年MMMD日", lll: "YYYY年MMMD日Ah點mm分", llll: "YYYY年MMMD日ddddAh點mm分" }, meridiemParse: /凌晨|早上|上午|中午|下午|晚上/, meridiemHour: function meridiemHour(a, b) {
               return 12 === a && (a = 0), "凌晨" === b || "早上" === b || "上午" === b ? a : "中午" === b ? a >= 11 ? a : a + 12 : "下午" === b || "晚上" === b ? a + 12 : void 0;
          }, meridiem: function meridiem(a, b, c) {
               var d = 100 * a + b;return d < 600 ? "凌晨" : d < 900 ? "早上" : d < 1130 ? "上午" : d < 1230 ? "中午" : d < 1800 ? "下午" : "晚上";
          }, calendar: { sameDay: "[今天]LT", nextDay: "[明天]LT", nextWeek: "[下]ddddLT", lastDay: "[昨天]LT", lastWeek: "[上]ddddLT", sameElse: "L" }, ordinalParse: /\d{1,2}(日|月|週)/, ordinal: function ordinal(a, b) {
               switch (b) {case "d":case "D":case "DDD":
                         return a + "日";case "M":
                         return a + "月";case "w":case "W":
                         return a + "週";default:
                         return a;}
          }, relativeTime: { future: "%s內", past: "%s前", s: "幾秒", m: "1 分鐘", mm: "%d 分鐘", h: "1 小時", hh: "%d 小時", d: "1 天", dd: "%d 天", M: "1 個月", MM: "%d 個月", y: "1 年", yy: "%d 年" } }), kg);return zh.locale("en"), zh;
});
}, 502, null, "moment/min/moment-with-locales.min.js");
__d(/* YrcnAppProject/src/common/RNLunarCalendar.js */function(global, require, module, exports) {
'use strict';

var LunarCalendar = require(504             ); // 504 = lunar-calendar

var RNLunarCalendar = function () {
    function RNLunarCalendar() {
        babelHelpers.classCallCheck(this, RNLunarCalendar);
    }

    babelHelpers.createClass(RNLunarCalendar, null, [{
        key: 'solarToLunar',
        value: function solarToLunar(year, month, day) {
            return LunarCalendar.solarToLunar(year, month, day);
        }
    }]);
    return RNLunarCalendar;
}();

module.exports = RNLunarCalendar;
}, 503, null, "YrcnAppProject/src/common/RNLunarCalendar.js");
__d(/* lunar-calendar/lib/LunarCalendar.js */function(global, require, module, exports) {

(function () {
	var extend = function extend(o, c) {
		if (o && c && typeof c == "object") {
			for (var p in c) {
				o[p] = c[p];
			}
		}
		return o;
	};

	var creatLenArr = function creatLenArr(year, month, len, start) {
		var arr = [];
		start = start || 0;
		if (len < 1) return arr;
		var k = start;
		for (var i = 0; i < len; i++) {
			arr.push({ year: year, month: month, day: k });
			k++;
		}
		return arr;
	};

	var errorCode = {
		100: '输入的年份超过了可查询范围，仅支持1891至2100年',
		101: '参数输入错误，请查阅文档'
	};

	var cache = null;
	var cacheUtil = {
		current: '',
		setCurrent: function setCurrent(year) {
			if (this.current != year) {
				this.current = year;
				this.clear();
			}
		},
		set: function set(key, value) {
			if (!cache) cache = {};
			cache[key] = value;
			return cache[key];
		},
		get: function get(key) {
			if (!cache) cache = {};
			return cache[key];
		},
		clear: function clear() {
			cache = null;
		}
	};

	var formateDayD4 = function formateDayD4(month, day) {
		month = month + 1;
		month = month < 10 ? '0' + month : month;
		day = day < 10 ? '0' + day : day;
		return 'd' + month + day;
	};

	var minYear = 1890;
	var maxYear = 2100;
	var DATA = {
		heavenlyStems: ['甲', '乙', '丙', '丁', '戊', '己', '庚', '辛', '壬', '癸'],
		earthlyBranches: ['子', '丑', '寅', '卯', '辰', '巳', '午', '未', '申', '酉', '戌', '亥'],
		zodiac: ['鼠', '牛', '虎', '兔', '龙', '蛇', '马', '羊', '猴', '鸡', '狗', '猪'],
		solarTerm: ['小寒', '大寒', '立春', '雨水', '惊蛰', '春分', '清明', '谷雨', '立夏', '小满', '芒种', '夏至', '小暑', '大暑', '立秋', '处暑', '白露', '秋分', '寒露', '霜降', '立冬', '小雪', '大雪', '冬至'],
		monthCn: ['正', '二', '三', '四', '五', '六', '七', '八', '九', '十', '十一', '十二'],
		dateCn: ['初一', '初二', '初三', '初四', '初五', '初六', '初七', '初八', '初九', '初十', '十一', '十二', '十三', '十四', '十五', '十六', '十七', '十八', '十九', '二十', '廿一', '廿二', '廿三', '廿四', '廿五', '廿六', '廿七', '廿八', '廿九', '三十', '卅一']
	};

	var worktime = {};

	worktime.y2013 = { "d0101": 2, "d0102": 2, "d0103": 2, "d0105": 1, "d0106": 1, "d0209": 2, "d0210": 2, "d0211": 2, "d0212": 2, "d0213": 2, "d0214": 2, "d0215": 2, "d0216": 1, "d0217": 1, "d0404": 2, "d0405": 2, "d0406": 2, "d0407": 1, "d0427": 1, "d0428": 1, "d0429": 2, "d0430": 2, "d0501": 2, "d0608": 1, "d0609": 1, "d0610": 2, "d0611": 2, "d0612": 2, "d0919": 2, "d0920": 2, "d0921": 2, "d0922": 1, "d0929": 1, "d1001": 2, "d1002": 2, "d1003": 2, "d1004": 2, "d1005": 2, "d1006": 2, "d1007": 2, "d1012": 1 };
	worktime.y2014 = { "d0101": 2, "d0126": 1, "d0131": 2, "d0201": 2, "d0202": 2, "d0203": 2, "d0204": 2, "d0205": 2, "d0206": 2, "d0208": 1, "d0405": 2, "d0407": 2, "d0501": 2, "d0502": 2, "d0503": 2, "d0504": 1, "d0602": 2, "d0908": 2, "d0928": 1, "d1001": 2, "d1002": 2, "d1003": 2, "d1004": 2, "d1005": 2, "d1006": 2, "d1007": 2, "d1011": 1 };

	var solarFestival = {
		'd0101': '元旦节',
		'd0202': '世界湿地日',
		'd0210': '国际气象节',
		'd0214': '情人节',
		'd0301': '国际海豹日',
		'd0303': '全国爱耳日',
		'd0305': '学雷锋纪念日',
		'd0308': '妇女节',
		'd0312': '植树节 孙中山逝世纪念日',
		'd0314': '国际警察日',
		'd0315': '消费者权益日',
		'd0317': '中国国医节 国际航海日',
		'd0321': '世界森林日 消除种族歧视国际日 世界儿歌日',
		'd0322': '世界水日',
		'd0323': '世界气象日',
		'd0324': '世界防治结核病日',
		'd0325': '全国中小学生安全教育日',
		'd0330': '巴勒斯坦国土日',
		'd0401': '愚人节 全国爱国卫生运动月(四月) 税收宣传月(四月)',
		'd0407': '世界卫生日',
		'd0422': '世界地球日',
		'd0423': '世界图书和版权日',
		'd0424': '亚非新闻工作者日',
		'd0501': '劳动节',
		'd0504': '青年节',
		'd0505': '碘缺乏病防治日',
		'd0508': '世界红十字日',
		'd0512': '国际护士节',
		'd0515': '国际家庭日',
		'd0517': '世界电信日',
		'd0518': '国际博物馆日',
		'd0520': '全国学生营养日',
		'd0522': '国际生物多样性日',
		'd0523': '国际牛奶日',
		'd0531': '世界无烟日',
		'd0601': '国际儿童节',
		'd0605': '世界环境日',
		'd0606': '全国爱眼日',
		'd0617': '防治荒漠化和干旱日',
		'd0623': '国际奥林匹克日',
		'd0625': '全国土地日',
		'd0626': '国际禁毒日',
		'd0701': '香港回归纪念日 中共诞辰 世界建筑日',
		'd0702': '国际体育记者日',
		'd0707': '抗日战争纪念日',
		'd0711': '世界人口日',
		'd0730': '非洲妇女日',
		'd0801': '建军节',
		'd0808': '中国男子节(爸爸节)',
		'd0815': '抗日战争胜利纪念',
		'd0908': '国际扫盲日 国际新闻工作者日',
		'd0909': '毛泽东逝世纪念',
		'd0910': '中国教师节',
		'd0914': '世界清洁地球日',
		'd0916': '国际臭氧层保护日',
		'd0918': '九一八事变纪念日',
		'd0920': '国际爱牙日',
		'd0927': '世界旅游日',
		'd0928': '孔子诞辰',
		'd1001': '国庆节 世界音乐日 国际老人节',
		'd1002': '国际和平与民主自由斗争日',
		'd1004': '世界动物日',
		'd1006': '老人节',
		'd1008': '全国高血压日 世界视觉日',
		'd1009': '世界邮政日 万国邮联日',
		'd1010': '辛亥革命纪念日 世界精神卫生日',
		'd1013': '世界保健日 国际教师节',
		'd1014': '世界标准日',
		'd1015': '国际盲人节(白手杖节)',
		'd1016': '世界粮食日',
		'd1017': '世界消除贫困日',
		'd1022': '世界传统医药日',
		'd1024': '联合国日 世界发展信息日',
		'd1031': '世界勤俭日',
		'd1107': '十月社会主义革命纪念日',
		'd1108': '中国记者日',
		'd1109': '全国消防安全宣传教育日',
		'd1110': '世界青年节',
		'd1111': '国际科学与和平周(本日所属的一周)',
		'd1112': '孙中山诞辰纪念日',
		'd1114': '世界糖尿病日',
		'd1117': '国际大学生节 世界学生节',
		'd1121': '世界问候日 世界电视日',
		'd1129': '国际声援巴勒斯坦人民国际日',
		'd1201': '世界艾滋病日',
		'd1203': '世界残疾人日',
		'd1205': '国际经济和社会发展志愿人员日',
		'd1208': '国际儿童电视日',
		'd1209': '世界足球日',
		'd1210': '世界人权日',
		'd1212': '西安事变纪念日',
		'd1213': '南京大屠杀(1937年)纪念日！紧记血泪史！',
		'd1220': '澳门回归纪念',
		'd1221': '国际篮球日',
		'd1224': '平安夜',
		'd1225': '圣诞节',
		'd1226': '毛泽东诞辰纪念'
	};

	var lunarFestival = {
		'd0101': '春节',
		'd0115': '元宵节',
		'd0202': '龙抬头节',
		'd0323': '妈祖生辰',
		'd0505': '端午节',
		'd0707': '七夕情人节',
		'd0715': '中元节',
		'd0815': '中秋节',
		'd0909': '重阳节',
		'd1015': '下元节',
		'd1208': '腊八节',
		'd1223': '小年',
		'd0100': '除夕'
	};

	var lunarInfo = [[2, 1, 21, 22184], [0, 2, 9, 21936], [6, 1, 30, 9656], [0, 2, 17, 9584], [0, 2, 6, 21168], [5, 1, 26, 43344], [0, 2, 13, 59728], [0, 2, 2, 27296], [3, 1, 22, 44368], [0, 2, 10, 43856], [8, 1, 30, 19304], [0, 2, 19, 19168], [0, 2, 8, 42352], [5, 1, 29, 21096], [0, 2, 16, 53856], [0, 2, 4, 55632], [4, 1, 25, 27304], [0, 2, 13, 22176], [0, 2, 2, 39632], [2, 1, 22, 19176], [0, 2, 10, 19168], [6, 1, 30, 42200], [0, 2, 18, 42192], [0, 2, 6, 53840], [5, 1, 26, 54568], [0, 2, 14, 46400], [0, 2, 3, 54944], [2, 1, 23, 38608], [0, 2, 11, 38320], [7, 2, 1, 18872], [0, 2, 20, 18800], [0, 2, 8, 42160], [5, 1, 28, 45656], [0, 2, 16, 27216], [0, 2, 5, 27968], [4, 1, 24, 44456], [0, 2, 13, 11104], [0, 2, 2, 38256], [2, 1, 23, 18808], [0, 2, 10, 18800], [6, 1, 30, 25776], [0, 2, 17, 54432], [0, 2, 6, 59984], [5, 1, 26, 27976], [0, 2, 14, 23248], [0, 2, 4, 11104], [3, 1, 24, 37744], [0, 2, 11, 37600], [7, 1, 31, 51560], [0, 2, 19, 51536], [0, 2, 8, 54432], [6, 1, 27, 55888], [0, 2, 15, 46416], [0, 2, 5, 22176], [4, 1, 25, 43736], [0, 2, 13, 9680], [0, 2, 2, 37584], [2, 1, 22, 51544], [0, 2, 10, 43344], [7, 1, 29, 46248], [0, 2, 17, 27808], [0, 2, 6, 46416], [5, 1, 27, 21928], [0, 2, 14, 19872], [0, 2, 3, 42416], [3, 1, 24, 21176], [0, 2, 12, 21168], [8, 1, 31, 43344], [0, 2, 18, 59728], [0, 2, 8, 27296], [6, 1, 28, 44368], [0, 2, 15, 43856], [0, 2, 5, 19296], [4, 1, 25, 42352], [0, 2, 13, 42352], [0, 2, 2, 21088], [3, 1, 21, 59696], [0, 2, 9, 55632], [7, 1, 30, 23208], [0, 2, 17, 22176], [0, 2, 6, 38608], [5, 1, 27, 19176], [0, 2, 15, 19152], [0, 2, 3, 42192], [4, 1, 23, 53864], [0, 2, 11, 53840], [8, 1, 31, 54568], [0, 2, 18, 46400], [0, 2, 7, 46752], [6, 1, 28, 38608], [0, 2, 16, 38320], [0, 2, 5, 18864], [4, 1, 25, 42168], [0, 2, 13, 42160], [10, 2, 2, 45656], [0, 2, 20, 27216], [0, 2, 9, 27968], [6, 1, 29, 44448], [0, 2, 17, 43872], [0, 2, 6, 38256], [5, 1, 27, 18808], [0, 2, 15, 18800], [0, 2, 4, 25776], [3, 1, 23, 27216], [0, 2, 10, 59984], [8, 1, 31, 27432], [0, 2, 19, 23232], [0, 2, 7, 43872], [5, 1, 28, 37736], [0, 2, 16, 37600], [0, 2, 5, 51552], [4, 1, 24, 54440], [0, 2, 12, 54432], [0, 2, 1, 55888], [2, 1, 22, 23208], [0, 2, 9, 22176], [7, 1, 29, 43736], [0, 2, 18, 9680], [0, 2, 7, 37584], [5, 1, 26, 51544], [0, 2, 14, 43344], [0, 2, 3, 46240], [4, 1, 23, 46416], [0, 2, 10, 44368], [9, 1, 31, 21928], [0, 2, 19, 19360], [0, 2, 8, 42416], [6, 1, 28, 21176], [0, 2, 16, 21168], [0, 2, 5, 43312], [4, 1, 25, 29864], [0, 2, 12, 27296], [0, 2, 1, 44368], [2, 1, 22, 19880], [0, 2, 10, 19296], [6, 1, 29, 42352], [0, 2, 17, 42208], [0, 2, 6, 53856], [5, 1, 26, 59696], [0, 2, 13, 54576], [0, 2, 3, 23200], [3, 1, 23, 27472], [0, 2, 11, 38608], [11, 1, 31, 19176], [0, 2, 19, 19152], [0, 2, 8, 42192], [6, 1, 28, 53848], [0, 2, 15, 53840], [0, 2, 4, 54560], [5, 1, 24, 55968], [0, 2, 12, 46496], [0, 2, 1, 22224], [2, 1, 22, 19160], [0, 2, 10, 18864], [7, 1, 30, 42168], [0, 2, 17, 42160], [0, 2, 6, 43600], [5, 1, 26, 46376], [0, 2, 14, 27936], [0, 2, 2, 44448], [3, 1, 23, 21936], [0, 2, 11, 37744], [8, 2, 1, 18808], [0, 2, 19, 18800], [0, 2, 8, 25776], [6, 1, 28, 27216], [0, 2, 15, 59984], [0, 2, 4, 27424], [4, 1, 24, 43872], [0, 2, 12, 43744], [0, 2, 2, 37600], [3, 1, 21, 51568], [0, 2, 9, 51552], [7, 1, 29, 54440], [0, 2, 17, 54432], [0, 2, 5, 55888], [5, 1, 26, 23208], [0, 2, 14, 22176], [0, 2, 3, 42704], [4, 1, 23, 21224], [0, 2, 11, 21200], [8, 1, 31, 43352], [0, 2, 19, 43344], [0, 2, 7, 46240], [6, 1, 27, 46416], [0, 2, 15, 44368], [0, 2, 5, 21920], [4, 1, 24, 42448], [0, 2, 12, 42416], [0, 2, 2, 21168], [3, 1, 22, 43320], [0, 2, 9, 26928], [7, 1, 29, 29336], [0, 2, 17, 27296], [0, 2, 6, 44368], [5, 1, 26, 19880], [0, 2, 14, 19296], [0, 2, 3, 42352], [4, 1, 24, 21104], [0, 2, 10, 53856], [8, 1, 30, 59696], [0, 2, 18, 54560], [0, 2, 7, 55968], [6, 1, 27, 27472], [0, 2, 15, 22224], [0, 2, 5, 19168], [4, 1, 25, 42216], [0, 2, 12, 42192], [0, 2, 1, 53584], [2, 1, 21, 55592], [0, 2, 9, 54560]];

	var termInfo = [0, 21208, 42467, 63836, 85337, 107014, 128867, 150921, 173149, 195551, 218072, 240693, 263343, 285989, 308563, 331033, 353350, 375494, 397447, 419210, 440795, 462224, 483532, 504758];

	function getLunarLeapYear(year) {
		var yearData = lunarInfo[year - minYear];
		return yearData[0];
	};

	function getLunarYearDays(year) {
		var yearData = lunarInfo[year - minYear];
		var leapMonth = yearData[0];
		var monthData = yearData[3].toString(2);
		var monthDataArr = monthData.split('');

		for (var i = 0; i < 16 - monthDataArr.length; i++) {
			monthDataArr.unshift(0);
		}

		var len = leapMonth ? 13 : 12;
		var yearDays = 0;
		var monthDays = [];
		for (var i = 0; i < len; i++) {
			if (monthDataArr[i] == 0) {
				yearDays += 29;
				monthDays.push(29);
			} else {
				yearDays += 30;
				monthDays.push(30);
			}
		}

		return {
			yearDays: yearDays,
			monthDays: monthDays
		};
	};

	function getLunarDateByBetween(year, between) {
		var lunarYearDays = getLunarYearDays(year);
		var end = between > 0 ? between : lunarYearDays.yearDays - Math.abs(between);
		var monthDays = lunarYearDays.monthDays;
		var tempDays = 0;
		var month = 0;
		for (var i = 0; i < monthDays.length; i++) {
			tempDays += monthDays[i];
			if (tempDays > end) {
				month = i;
				tempDays = tempDays - monthDays[i];
				break;
			}
		}

		return [year, month, end - tempDays + 1];
	};

	function getLunarByBetween(year, month, day) {
		var yearData = lunarInfo[year - minYear];
		var zenMonth = yearData[1];
		var zenDay = yearData[2];
		var between = getDaysBetweenSolar(year, zenMonth - 1, zenDay, year, month, day);
		if (between == 0) {
			return [year, 0, 1];
		} else {
			var lunarYear = between > 0 ? year : year - 1;
			return getLunarDateByBetween(lunarYear, between);
		}
	};

	function getDaysBetweenSolar(year, month, day, year1, month1, day1) {
		var date = new Date(year, month, day).getTime();
		var date1 = new Date(year1, month1, day1).getTime();
		return (date1 - date) / 86400000;
	};

	function getDaysBetweenZheng(year, month, day) {
		var lunarYearDays = getLunarYearDays(year);
		var monthDays = lunarYearDays.monthDays;
		var days = 0;
		for (var i = 0; i < monthDays.length; i++) {
			if (i < month) {
				days += monthDays[i];
			} else {
				break;
			}
		};
		return days + day - 1;
	};

	function getTerm(y, n) {
		var offDate = new Date(31556925974.7 * (y - 1890) + termInfo[n] * 60000 + Date.UTC(1890, 0, 5, 16, 2, 31));
		return offDate.getUTCDate();
	};

	function getYearTerm(year) {
		var res = {};
		var month = 0;
		for (var i = 0; i < 24; i++) {
			var day = getTerm(year, i);
			if (i % 2 == 0) month++;
			res[formateDayD4(month - 1, day)] = DATA.solarTerm[i];
		}
		return res;
	};

	function getYearZodiac(year) {
		var num = year - 1890 + 25;
		return DATA.zodiac[num % 12];
	};

	function cyclical(num) {
		return DATA.heavenlyStems[num % 10] + DATA.earthlyBranches[num % 12];
	}

	function getLunarYearName(year, offset) {
		offset = offset || 0;

		return cyclical(year - 1890 + 25 + offset);
	};

	function getLunarMonthName(year, month, offset) {
		offset = offset || 0;

		return cyclical((year - 1890) * 12 + month + 12 + offset);
	};

	function getLunarDayName(year, month, day) {
		var dayCyclical = Date.UTC(year, month, day) / 86400000 + 29219 + 18;
		return cyclical(dayCyclical);
	};

	function getSolarMonthDays(year, month) {
		var monthDays = [31, isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
		return monthDays[month];
	};

	function isLeapYear(year) {
		return year % 4 == 0 && year % 100 != 0 || year % 400 == 0;
	};

	function formateDate(year, month, day, _minYear) {
		var argsLen = arguments.length;
		var now = new Date();
		year = argsLen ? parseInt(year, 10) : now.getFullYear();
		month = argsLen ? parseInt(month - 1, 10) : now.getMonth();
		day = argsLen ? parseInt(day, 10) || now.getDate() : now.getDate();
		if (year < (_minYear ? _minYear : minYear + 1) || year > maxYear) return { error: 100, msg: errorCode[100] };
		return {
			year: year,
			month: month,
			day: day
		};
	};

	function lunarToSolar(_year, _month, _day) {
		var inputDate = formateDate(_year, _month, _day);
		if (inputDate.error) return inputDate;
		var year = inputDate.year;
		var month = inputDate.month;
		var day = inputDate.day;

		var between = getDaysBetweenZheng(year, month, day);
		var yearData = lunarInfo[year - minYear];
		var zenMonth = yearData[1];
		var zenDay = yearData[2];

		var offDate = new Date(year, zenMonth - 1, zenDay).getTime() + between * 86400000;
		offDate = new Date(offDate);
		return {
			year: offDate.getFullYear(),
			month: offDate.getMonth() + 1,
			day: offDate.getDate()
		};
	};

	function solarToLunar(_year, _month, _day) {
		var inputDate = formateDate(_year, _month, _day, minYear);
		if (inputDate.error) return inputDate;
		var year = inputDate.year;
		var month = inputDate.month;
		var day = inputDate.day;

		cacheUtil.setCurrent(year);

		var term2 = cacheUtil.get('term2') ? cacheUtil.get('term2') : cacheUtil.set('term2', getTerm(year, 2));

		var termList = cacheUtil.get('termList') ? cacheUtil.get('termList') : cacheUtil.set('termList', getYearTerm(year));

		var firstTerm = getTerm(year, month * 2);
		var GanZhiYear = month > 1 || month == 1 && day >= term2 ? year + 1 : year;
		var GanZhiMonth = day >= firstTerm ? month + 1 : month;

		var lunarDate = getLunarByBetween(year, month, day);
		var lunarLeapMonth = getLunarLeapYear(lunarDate[0]);
		var lunarMonthName = '';
		if (lunarLeapMonth > 0 && lunarLeapMonth == lunarDate[1]) {
			lunarMonthName = '闰' + DATA.monthCn[lunarDate[1] - 1] + '月';
		} else if (lunarLeapMonth > 0 && lunarDate[1] > lunarLeapMonth) {
			lunarMonthName = DATA.monthCn[lunarDate[1] - 1] + '月';
		} else {
			lunarMonthName = DATA.monthCn[lunarDate[1]] + '月';
		}

		var lunarFtv = '';
		var lunarMonthDays = getLunarYearDays(lunarDate[0]).monthDays;

		if (lunarDate[1] == lunarMonthDays.length - 1 && lunarDate[2] == lunarMonthDays[lunarMonthDays.length - 1]) {
			lunarFtv = lunarFestival['d0100'];
		} else if (lunarLeapMonth > 0 && lunarDate[1] > lunarLeapMonth) {
			lunarFtv = lunarFestival[formateDayD4(lunarDate[1] - 1, lunarDate[2])];
		} else {
			lunarFtv = lunarFestival[formateDayD4(lunarDate[1], lunarDate[2])];
		}

		var res = {
			zodiac: getYearZodiac(GanZhiYear),
			GanZhiYear: getLunarYearName(GanZhiYear),
			GanZhiMonth: getLunarMonthName(year, GanZhiMonth),
			GanZhiDay: getLunarDayName(year, month, day),

			worktime: worktime['y' + year] && worktime['y' + year][formateDayD4(month, day)] ? worktime['y' + year][formateDayD4(month, day)] : 0,
			term: termList[formateDayD4(month, day)],

			lunarYear: lunarDate[0],
			lunarMonth: lunarDate[1] + 1,
			lunarDay: lunarDate[2],
			lunarMonthName: lunarMonthName,
			lunarDayName: DATA.dateCn[lunarDate[2] - 1],
			lunarLeapMonth: lunarLeapMonth,

			solarFestival: solarFestival[formateDayD4(month, day)],
			lunarFestival: lunarFtv
		};

		return res;
	};

	function calendar(_year, _month, fill) {
		var inputDate = formateDate(_year, _month);
		if (inputDate.error) return inputDate;
		var year = inputDate.year;
		var month = inputDate.month;

		var calendarData = solarCalendar(year, month + 1, fill);
		for (var i = 0; i < calendarData.monthData.length; i++) {
			var cData = calendarData.monthData[i];
			var lunarData = solarToLunar(cData.year, cData.month, cData.day);
			extend(calendarData.monthData[i], lunarData);
		}
		return calendarData;
	};

	function solarCalendar(_year, _month, fill) {
		var inputDate = formateDate(_year, _month);
		if (inputDate.error) return inputDate;
		var year = inputDate.year;
		var month = inputDate.month;

		var firstDate = new Date(year, month, 1);
		var preMonthDays, preMonthData, nextMonthData;

		var res = {
			firstDay: firstDate.getDay(),
			monthDays: getSolarMonthDays(year, month),
			monthData: []
		};

		res.monthData = creatLenArr(year, month + 1, res.monthDays, 1);

		if (fill) {
			if (res.firstDay > 0) {
				var preYear = month - 1 < 0 ? year - 1 : year;
				var preMonth = month - 1 < 0 ? 11 : month - 1;
				preMonthDays = getSolarMonthDays(preYear, preMonth);
				preMonthData = creatLenArr(preYear, preMonth + 1, res.firstDay, preMonthDays - res.firstDay + 1);
				res.monthData = preMonthData.concat(res.monthData);
			}

			if (7 * 6 - res.monthData.length != 0) {
				var nextYear = month + 1 > 11 ? year + 1 : year;
				var nextMonth = month + 1 > 11 ? 0 : month + 1;
				var fillLen = 7 * 6 - res.monthData.length;
				nextMonthData = creatLenArr(nextYear, nextMonth + 1, fillLen, 1);
				res.monthData = res.monthData.concat(nextMonthData);
			}
		}

		return res;
	};

	function setWorktime(workData) {
		extend(worktime, workData);
	};

	var LunarCalendar = {
		solarToLunar: solarToLunar,
		lunarToSolar: lunarToSolar,
		calendar: calendar,
		solarCalendar: solarCalendar,
		setWorktime: setWorktime,
		getSolarMonthDays: getSolarMonthDays
	};

	if (typeof define === 'function') {
		define(function () {
			return LunarCalendar;
		});
	} else if (typeof exports === 'object') {
		module.exports = LunarCalendar;
	} else {
		window.LunarCalendar = LunarCalendar;
	};
})();
}, 504, null, "lunar-calendar/lib/LunarCalendar.js");
__d(/* YrcnAppProject/src/component/ACViewBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/ACViewBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js

var ACViewBox = _react2.default.createClass({
    displayName: 'ACViewBox',

    getDefaultProps: function getDefaultProps() {
        return {
            height: _reactNative.Dimensions.get('window').height,
            textViewTop: _reactNative.Dimensions.get('window').height / 2 + 20,
            backgroundColor: '#ffffff',
            color: '#000000'
        };
    },
    getInitialState: function getInitialState() {
        return {
            loadingText: '' };
    },
    renderText: function renderText() {
        if (this.props.loadingText && this.props.loadingText != '') {
            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.container_text, { top: this.props.textViewTop }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 39
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.text, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 40
                        }
                    },
                    this.state.loadingText
                )
            );
        }
    },
    render: function render() {
        if (this.props.loadingText && this.props.loadingText != '') {
            this.state.loadingText = this.props.loadingText;
        }

        return _react2.default.createElement(
            _reactNative.View,
            {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            },
            _react2.default.createElement(_reactNative.ActivityIndicator, {
                animating: true,
                style: [styles.container, { height: this.props.height, backgroundColor: this.props.backgroundColor }],
                hidesWhenStopped: true,
                color: this.props.color,
                size: 'small', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            }),
            this.renderText()
        );
    }
});

module.exports = ACViewBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        alignItems: 'center',
        justifyContent: 'center'
    },
    container_text: {
        position: 'absolute',
        width: _reactNative.Dimensions.get('window').width
    },
    text: {
        textAlign: 'center',
        color: '#aaaaaa',
        fontSize: 14
    }
});
}, 505, null, "YrcnAppProject/src/component/ACViewBox.js");
__d(/* YrcnAppProject/src/component/TitleIntroduceBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/TitleIntroduceBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TitleIntroduceBox = function (_Component) {
    babelHelpers.inherits(TitleIntroduceBox, _Component);

    function TitleIntroduceBox() {
        babelHelpers.classCallCheck(this, TitleIntroduceBox);
        return babelHelpers.possibleConstructorReturn(this, (TitleIntroduceBox.__proto__ || Object.getPrototypeOf(TitleIntroduceBox)).apply(this, arguments));
    }

    babelHelpers.createClass(TitleIntroduceBox, [{
        key: 'render',
        value: function render() {
            var titleProps = {
                numberOfLines: 1
            };
            var introduceProps = {
                numberOfLines: 3
            };
            if (this.props.noNumberOfLines) {
                delete titleProps.numberOfLines;
                delete introduceProps.numberOfLines;
            }
            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.container, { borderBottomColor: this.props.borderBottomColor }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 40
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.title_container, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 41
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        babelHelpers.extends({ style: [styles.titleText, { color: this.props.titleColor }] }, titleProps, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 42
                            }
                        }),
                        this.props.title
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.introduce_container, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 44
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        babelHelpers.extends({ style: styles.introduceText }, introduceProps, {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 45
                            }
                        }),
                        this.props.introduce
                    )
                )
            );
        }
    }]);
    return TitleIntroduceBox;
}(_react.Component);

TitleIntroduceBox.defaultProps = {
    titleColor: '#4c566c',
    borderBottomColor: '#e7e7e7'
};

module.exports = TitleIntroduceBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        borderBottomWidth: 1,
        borderColor: '#e7e7e7',
        backfaceVisibility: 'hidden',
        paddingTop: 10,
        paddingBottom: 10
    },
    title_container: {
        paddingLeft: 10
    },
    titleText: {
        fontSize: 16,
        fontWeight: '600',
        color: '#4c566c'
    },
    introduce_container: {
        paddingTop: 10,
        paddingLeft: 10,
        paddingRight: 10
    },
    introduceText: {
        fontSize: 14,
        fontWeight: '100',
        lineHeight: 20,
        textAlign: 'justify',
        color: '#444444'
    }
});
}, 506, null, "YrcnAppProject/src/component/TitleIntroduceBox.js");
__d(/* YrcnAppProject/src/component/LineButtonsBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/LineButtonsBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var LineButtonsBoxButton = require(508                        ); // 508 = ./LineButtonsBoxButton.js

var LineButtonsBox = _react2.default.createClass({
    displayName: 'LineButtonsBox',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            boxStyle: {}
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {
        Button: LineButtonsBoxButton
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, this.props.boxStyle], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            },
            this.props.children
        );
    }
});

module.exports = LineButtonsBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        height: 44
    }
});
}, 507, null, "YrcnAppProject/src/component/LineButtonsBox.js");
__d(/* YrcnAppProject/src/component/LineButtonsBoxButton.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/LineButtonsBoxButton.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var LineButtonsBoxButton = _react2.default.createClass({
    displayName: 'LineButtonsBoxButton',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            isPressing: false,
            color: '#343434'
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        if (this.props.isPressing) {
            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: [styles.container_pressing], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 51
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.btnText, { color: this.props.color }], numberOfLines: 1, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 52
                        }
                    },
                    this.props.btnText + '...'
                )
            );
        } else {
            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: [styles.container], onPress: this.props.onPress, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 57
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.btnText, { color: this.props.color }], numberOfLines: 1, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 58
                        }
                    },
                    this.props.btnText
                )
            );
        }
    }
});

module.exports = LineButtonsBoxButton;

var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        paddingTop: 10,
        paddingBottom: 10
    },
    container_pressing: {
        flex: 1,
        paddingTop: 10,
        paddingBottom: 10
    },
    btnText: {
        fontSize: 13,
        fontWeight: '900',
        textAlign: 'center'
    }
});
}, 508, null, "YrcnAppProject/src/component/LineButtonsBoxButton.js");
__d(/* YrcnAppProject/src/component/ListViewLi.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/ListViewLi.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js

var ListViewLi = _react2.default.createClass({
    displayName: 'ListViewLi',

    getDefaultProps: function getDefaultProps() {
        return {
            smallText: '',
            color: '#444444',
            rightColor: '#aaaaaa'
        };
    },
    render: function render() {
        var navigator = this.props.navigator;
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            { onPress: this.props.onPress, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 40
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: styles.container, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 41
                    }
                },
                this._renderIconView(),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.titleView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 43
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.title, { color: this.props.color }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 44
                            }
                        },
                        this.props.title
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.gtView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 46
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.gt, { color: this.props.rightColor }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 47
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.smallText], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 47
                                }
                            },
                            this.props.smallText
                        ),
                        '>'
                    )
                )
            )
        );
    },
    _renderIconView: function _renderIconView() {
        if (this.props.icon) {
            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.iconView, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 56
                    }
                },
                _react2.default.createElement(_reactNative.Image, { source: this.props.icon, style: styles.icon, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 57
                    }
                })
            );
        }
    }
});

module.exports = ListViewLi;

var styles = _reactNative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        justifyContent: 'center',
        borderBottomWidth: 1,
        borderBottomColor: '#eeeeee',
        height: 50
    },
    iconView: {
        flex: 1,
        alignItems: 'center',
        paddingTop: 15
    },
    icon: {
        width: 20,
        height: 20
    },
    titleView: {
        flex: 3,
        paddingTop: 17,
        paddingLeft: 15
    },
    title: {
        fontSize: 16
    },
    gtView: {
        width: 40,
        paddingTop: 17,
        paddingRight: 15
    },
    gt: {
        fontSize: 16,
        textAlign: 'right'
    },
    smallText: {
        fontSize: 14,
        color: '#aaaaaa'
    }
});
}, 509, null, "YrcnAppProject/src/component/ListViewLi.js");
__d(/* YrcnAppProject/src/component/FloatButtonsBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FloatButtonsBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var FloatButtonsBoxButton = require(511                         ); // 511 = ./FloatButtonsBoxButton.js

var FloatButtonsBox = _react2.default.createClass({
    displayName: 'FloatButtonsBox',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            backgroundColor: '#ffffff',
            marginTop: 10
        };
    },
    getInitialState: function getInitialState() {
        return {
            top: new _reactNative.Animated.Value(0),
            hideOrShowText: "∧"
        };
    },

    statics: {
        Button: FloatButtonsBoxButton
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.Animated.View,
            { style: [styles.container, { top: this.state.top, marginTop: this.props.marginTop }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                }
            },
            this.props.children,
            _react2.default.createElement(FloatButtonsBoxButton, { btnText: this.state.hideOrShowText, onPress: this._onPress, backgroundColor: this.props.backgroundColor, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            })
        );
    },
    _onPress: function _onPress() {
        var oneRowHeight = 36;
        var childrenNum = 0;
        if (this.props.children.length) {
            childrenNum = this.props.children.length;
        } else {
            childrenNum = 1;
        }
        if (this.state.top._value >= -10 && this.state.top._value <= 10) {
            _reactNative.Animated.spring(this.state.top, {
                toValue: -1 * oneRowHeight * (childrenNum + 1) + 10,
                friction: 1 }).start();
            this.setState({
                hideOrShowText: "∨"
            });
        } else {
            _reactNative.Animated.spring(this.state.top, {
                toValue: 0,
                friction: 1 }).start();
            this.setState({
                hideOrShowText: "∧"
            });
        }
    }
});

module.exports = FloatButtonsBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        position: 'absolute',
        left: _reactNative.Dimensions.get('window').width - 56,
        width: 54,
        marginTop: 10,
        marginLeft: 0,
        marginRight: 10,
        paddingTop: 10,
        paddingBottom: 10,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        borderWidth: 1,
        borderColor: '#eeeeee',
        borderBottomLeftRadius: 54,
        borderBottomRightRadius: 54
    }

});
}, 510, null, "YrcnAppProject/src/component/FloatButtonsBox.js");
__d(/* YrcnAppProject/src/component/FloatButtonsBoxButton.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FloatButtonsBoxButton.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js

var FloatButtonsBoxButton = _react2.default.createClass({
    displayName: 'FloatButtonsBoxButton',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            isPressing: false,
            backgroundColor: '#ffffff'
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        if (this.props.isPressing) {
            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: [styles.container_pressing], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 52
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.btnText], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 53
                        }
                    },
                    this.props.btnText + '...'
                )
            );
        } else {
            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: [styles.container, { backgroundColor: this.props.backgroundColor }], onPress: this.props.onPress, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 58
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.btnText], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 59
                        }
                    },
                    this.props.btnText
                )
            );
        }
    }
});

module.exports = FloatButtonsBoxButton;

var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        paddingTop: 10,
        paddingBottom: 10,
        borderRadius: 6,
        borderWidth: 0,
        width: 44
    },
    container_pressing: {
        flex: 1,
        paddingTop: 10,
        paddingBottom: 10,
        borderRadius: 6,
        backgroundColor: '#efefef',
        borderWidth: 0,
        width: 44
    },
    btnText: {
        textAlign: 'center',
        fontSize: 16,
        fontWeight: '800',
        color: '#01bbfc'
    }
});
}, 511, null, "YrcnAppProject/src/component/FloatButtonsBoxButton.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewYesterday.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewYesterday.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js

var ScrollViewToday = _react2.default.createClass({
    displayName: 'ScrollViewToday',

    _vars: {},
    getInitialState: function getInitialState() {
        var _this = this;

        this._vars.contentDay = global.YrcnApp.utils.yesterdayDate();
        this._vars.backgroundColor = "#f1f1f1";

        var now = moment(_this._vars.contentDay);
        _this._vars.title = now.format("YYYY年MM月DD日 dddd 第wo 第DDDo");
        var lunarCalendar = RNLunarCalendar.solarToLunar(now.year(), now.month() + 1, now.date());
        _this._vars.introduce = "生肖【" + lunarCalendar.zodiac + "】";
        _this._vars.introduce += "农历【" + lunarCalendar.lunarMonthName + lunarCalendar.lunarDayName + "】";
        if (lunarCalendar.lunarFestival) {
            _this._vars.introduce += lunarCalendar.lunarFestival;
        }
        if (lunarCalendar.term) {
            _this._vars.introduce += lunarCalendar.term;
        }

        return {
            isShowLoadingView: true,
            typeArray: [],
            typeRightColorArray: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            _this.setState({
                typeArray: todayContentTypesObj.list
            });
        });
        RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
            _this._vars.contentObj = contentObj;
            var typeArray = _this.state.typeArray;
            for (var key in contentObj) {
                for (var _iterator = typeArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                    var _ref;

                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref = _i.value;
                    }

                    var typeObj = _ref;

                    if (typeObj.typeCode == key && (contentObj[key].content || contentObj[key].oneImages && contentObj[key].oneImages.length > 0)) {
                        typeObj.rightColor = '#01bbfc';
                        break;
                    }
                }
            }
            _this.setState({
                typeArray: typeArray
            });
        });

        YrcnApp.services.getJson_today_getContentInfo({ day: _this._vars.contentDay }, function (getJson_today_getContentInfoObj) {});
    },
    render: function render() {
        var _this = this;
        global.YrcnApp.now[_this._vars.scrollView] = this;
        return _react2.default.createElement(
            _reactNative.ScrollView,
            {
                style: [styles.scrollViewContainer, { backgroundColor: _this._vars.backgroundColor }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 97
                }
            },
            _react2.default.createElement(TitleIntroduceBox, { title: _this._vars.title, introduce: _this._vars.introduce, noNumberOfLines: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                }
            }),
            function () {
                return _this.state.typeArray.map(function (d, i) {
                    return _react2.default.createElement(ListViewLi, { title: d.typeContent, onPress: function onPress() {
                            _this._onPressLi(i);
                        }, key: i, color: '#000000', rightColor: d.rightColor || '#aaaaaa', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 104
                        }
                    });
                });
            }()
        );
    },
    _onPressLi: function _onPressLi(liIndex) {
        var _this = this;

        var indexTitle = this.state.typeArray[liIndex].typeContent;

        var coreObj = _this._vars.contentObj[this.state.typeArray[liIndex].typeCode];
        if (coreObj && coreObj.oneImages && coreObj.oneImages.length > 0) {
            for (var _iterator2 = coreObj.oneImages, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref2;

                if (_isArray2) {
                    if (_i2 >= _iterator2.length) break;
                    _ref2 = _iterator2[_i2++];
                } else {
                    _i2 = _iterator2.next();
                    if (_i2.done) break;
                    _ref2 = _i2.value;
                }

                var oneImage = _ref2;

                oneImage.uri = RNUtils.getSandboxFileLongPath(oneImage.uri);
            }
        }
        global.YrcnApp.now[_this._vars.scrollView] = this;

        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewEditYesterdayContent', viewTitle: indexTitle, type: this.state.typeArray[liIndex], coreObj: coreObj });
    },
    refreshView: function refreshView() {
        var _this = this;
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            _this.setState({
                typeArray: todayContentTypesObj.list
            });
        });
        RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
            _this._vars.contentObj = contentObj;

            for (var key in contentObj) {
                if (contentObj[key] && contentObj[key].content) {
                    RNAllService.getJson_today_synchronizeContentInfo(contentObj[key], function (getJson_today_synchronizeContentInfoObj) {});
                }
            }

            var typeArray = _this.state.typeArray;
            for (var key in contentObj) {
                for (var _iterator3 = typeArray, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                    var _ref3;

                    if (_isArray3) {
                        if (_i3 >= _iterator3.length) break;
                        _ref3 = _iterator3[_i3++];
                    } else {
                        _i3 = _iterator3.next();
                        if (_i3.done) break;
                        _ref3 = _i3.value;
                    }

                    var typeObj = _ref3;

                    if (typeObj.typeCode == key && (contentObj[key].content || contentObj[key].oneImages && contentObj[key].oneImages.length > 0)) {
                        typeObj.rightColor = '#01bbfc';
                        break;
                    }
                }
            }
            _this.setState({
                typeArray: typeArray
            });
        });
    }
});

var styles = _reactNative.StyleSheet.create({
    scrollViewContainer: {
        marginTop: YrcnApp.Platform.isIOS ? 0 : 25
    }
});

module.exports = ScrollViewToday;
}, 512, null, "YrcnAppProject/src/scrollview/ScrollViewYesterday.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewLlg.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewLlg.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var NoRecordViewBox = require(514                              ); // 514 = ../component/NoRecordViewBox.js

var ScrollViewLlg = _react2.default.createClass({
    displayName: 'ScrollViewLlg',

    _vars: {},
    getInitialState: function getInitialState() {
        var _this = this;

        return {
            isShowLoadingView: true,
            title: "已记录...天",
            introduce: "忍耐和坚持虽是痛苦的事情，但却能渐渐地为你带来好处。",
            keys: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNUtils.getKeysTodayContent(function (keys) {
            _this.setState({
                title: "已记录" + keys.length + "天",
                keys: keys,
                isShowLoadingView: false
            });
        });
    },
    render: function render() {
        var _this = this;
        global.YrcnApp.now.scrollViewLlg = _this;
        return _react2.default.createElement(
            _reactNative.ScrollView,
            {
                style: styles.scrollViewContainer, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 66
                }
            },
            _react2.default.createElement(TitleIntroduceBox, { title: _this.state.title, introduce: _this.state.introduce, noNumberOfLines: true, titleColor: '#01bbfc', borderBottomColor: '#01bbfc', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 68
                }
            }),
            _react2.default.createElement(
                LineButtonsBox,
                { boxStyle: { borderBottomWidth: 0.5, borderBottomColor: '#01bbfc' }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 69
                    }
                },
                _react2.default.createElement(LineButtonsBox.Button, { btnText: "七天", onPress: _this._onPressDays7, color: '#01bbfc', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 70
                    }
                }),
                _react2.default.createElement(LineButtonsBox.Button, { btnText: "半月", onPress: _this._onPressDays14, color: '#01bbfc', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 71
                    }
                }),
                _react2.default.createElement(LineButtonsBox.Button, { btnText: "一月", onPress: _this._onPressMonths1, color: '#01bbfc', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 72
                    }
                }),
                _react2.default.createElement(LineButtonsBox.Button, { btnText: "三月", onPress: _this._onPressMonths3, color: '#01bbfc', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 73
                    }
                }),
                _react2.default.createElement(LineButtonsBox.Button, { btnText: "搜索", onPress: _this._onPressSearch, color: '#01bbfc', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 74
                    }
                })
            ),
            function () {
                if (_this.state.isShowLoadingView) {
                    return _react2.default.createElement(ACViewBox, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 80
                        }
                    });
                } else if (_this.state.keys.length == 0) {
                    return _react2.default.createElement(NoRecordViewBox, { backgroundColor: '#ffffff', height: 100, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 84
                        }
                    });
                }
                return _this.state.keys.map(function (d, i) {
                    return _react2.default.createElement(ListViewLi, { title: d, onPress: function onPress() {
                            _this._onPressLi(i);
                        }, key: i, color: '#000000', __source: {
                            fileName: _jsxFileName,
                            lineNumber: 89
                        }
                    });
                });
            }()
        );
    },
    _onPressLi: function _onPressLi(liIndex) {
        var _this = this;
        var day = this.state.keys[liIndex];

        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewShowTodayContent', day: day, viewTitle: day });
    },
    refreshView: function refreshView() {
        var _this = this;
        RNUtils.getKeysTodayContent(function (keys) {
            _this.setState({
                title: "已记录" + keys.length + "天",
                keys: keys
            });
        });
    },
    _onPressDays7: function _onPressDays7() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewShowTodayLlgBetweenContent', between: "7", viewTitle: "最近七日" });
    },
    _onPressDays14: function _onPressDays14() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewShowTodayLlgBetweenContent', between: "14", viewTitle: "最近半月" });
    },
    _onPressMonths1: function _onPressMonths1() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewShowTodayLlgBetweenContent', between: "1", viewTitle: "最近一月" });
    },
    _onPressMonths3: function _onPressMonths3() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewShowTodayLlgBetweenContent', between: "3", viewTitle: "最近三月" });
    },
    _onPressSearch: function _onPressSearch() {
        var _this = this;
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSearchTodayContent', between: "3", viewTitle: "搜索" });
    }
});

var styles = _reactNative.StyleSheet.create({
    scrollViewContainer: {
        backgroundColor: '#ffffff',
        marginTop: YrcnApp.Platform.isIOS ? 0 : 25
    }
});

module.exports = ScrollViewLlg;
}, 513, null, "YrcnAppProject/src/scrollview/ScrollViewLlg.js");
__d(/* YrcnAppProject/src/component/NoRecordViewBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/NoRecordViewBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js

var NoRecordViewBox = _react2.default.createClass({
    displayName: 'NoRecordViewBox',

    getDefaultProps: function getDefaultProps() {
        return {
            noRecordText: "暂无记录",
            height: _reactNative.Dimensions.get('window').height,
            backgroundColor: '#ffffff'
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },
    render: function render() {
        if (this.props.loadingText && this.props.loadingText != '') {
            this.state.loadingText = this.props.loadingText;
        }

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { height: this.props.height, backgroundColor: this.props.backgroundColor }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 39
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: [styles.text], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 40
                    }
                },
                this.props.noRecordText
            )
        );
    }
});

module.exports = NoRecordViewBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        alignItems: 'center',
        justifyContent: 'center'
    },
    text: {
        textAlign: 'center',
        color: '#aaaaaa',
        fontSize: 14
    }
});
}, 514, null, "YrcnAppProject/src/component/NoRecordViewBox.js");
__d(/* YrcnAppProject/src/view/ViewSettings.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewSettings.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtilsModule = _reactNative.NativeModules.RNUtilsModule;

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var SettingsView = _react2.default.createClass({
    displayName: 'SettingsView',

    mixins: [],
    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        var _this = this;

        var ds = new _reactNative.ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
                return r1 !== r2;
            } });

        var dsArray = [{
            title: "特别声明", onPressFn: function onPressFn() {
                _this._onPressSpecialStatement();
            }
        }, {
            title: "使用帮助", onPressFn: function onPressFn() {
                _this._onPressUseHelp();
            }
        }, {
            title: "显示设置", onPressFn: function onPressFn() {
                _this._onPressTypeShow();
            }
        }];
        console.log(YrcnApp.Platform.OS);
        if (YrcnApp.Platform.OS == "ios") {
            dsArray.push({
                title: "智能提醒", onPressFn: function onPressFn() {
                    _this._onPressTimeShow();
                }
            });
            dsArray.push({
                title: "给我评分", onPressFn: function onPressFn() {
                    _this._onPressMarkScore();
                }
            });
        }

        return {
            ds: ds,
            dataSource: ds.cloneWithRows(dsArray),
            appBundleV: ""
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNUtils.getAppInfo(function (appInfo) {
            _this.setState({
                appBundleV: appInfo.appV
            });
        });
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 95
                }
            },
            _react2.default.createElement(ViewHeader, { title: '', leftText: '', rightText: '\u6CE8\u9500', onPressRight: this._onPressLogout, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 96
                }
            }),
            _react2.default.createElement(
                _reactNative.View,
                { style: styles.topView, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 97
                    }
                },
                _react2.default.createElement(_reactNative.Image, { source: require(518                   ), style: styles.logo, resizeMode: 'cover', __source: { // 518 = ../images/MyLogo.png
                        fileName: _jsxFileName,
                        lineNumber: 98
                    }
                }),
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.topText, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 99
                        }
                    },
                    global.YrcnApp.configs.AppName,
                    ' For ',
                    _reactNative.Platform.OS,
                    ' V',
                    this.state.appBundleV
                )
            ),
            _react2.default.createElement(_reactNative.ListView, {
                dataSource: this.state.dataSource,
                renderRow: this._renderRow,
                style: styles.centerView,
                name: '', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 101
                }
            }),
            _react2.default.createElement(
                _reactNative.View,
                { style: styles.bottomView, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 107
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.bottomText, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 108
                        }
                    },
                    '\xA9\u6021\u7136\u57CE\u5357'
                )
            )
        );
    },
    _renderRow: function _renderRow(rowData, sectionID, rowID) {
        var key = Math.uuidFast();
        return _react2.default.createElement(
            _reactNative.View,
            { key: key, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 116
                }
            },
            _react2.default.createElement(ListViewLi, { title: rowData.title, onPress: rowData.onPressFn, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 117
                }
            })
        );
    },
    _onPressSpecialStatement: function _onPressSpecialStatement() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewSpecialStatement' });
    },
    _onPressUseHelp: function _onPressUseHelp() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewUseHelp' });
    },
    _onPressClearCache: function _onPressClearCache() {},
    _onPressTypeShow: function _onPressTypeShow() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingTodayType' });
    },
    _onPressMarkScore: function _onPressMarkScore() {
        RNUtilsModule.appUpgrade([global.YrcnApp.configs.IOS_APP_URL]);
    },
    _onPressTimeShow: function _onPressTimeShow() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewTime' });
    },
    _onPressLogout: function _onPressLogout() {
        YrcnApp.utils.removeLoginInfo(function () {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'GuideIndexView' });
        });
    }
});

module.exports = SettingsView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    },
    topView: {
        width: _reactNative.Dimensions.get('window').width,
        marginTop: 30,
        alignItems: 'center'
    },
    topText: {
        textAlign: 'center',
        fontSize: 13
    },
    centerView: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height - 160 - 100,
        borderTopWidth: 1,
        borderTopColor: '#dddddd',
        marginTop: 10
    },
    bottomView: {
        width: _reactNative.Dimensions.get('window').width,
        position: 'absolute',
        bottom: 60,
        left: 0
    },
    bottomText: {
        textAlign: 'center',
        fontSize: 12
    },
    logo: {
        width: _reactNative.Dimensions.get('window').width / 4.5,
        height: _reactNative.Dimensions.get('window').width / 4.5,
        borderRadius: 10,
        marginBottom: 20
    },
    erweima: {
        width: 200,
        height: 200
    }
});
}, 515, null, "YrcnAppProject/src/view/ViewSettings.js");
__d(/* YrcnAppProject/src/component/ViewHeader.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/ViewHeader.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ButtonsBoxButton = require(517                    ); // 517 = ./ButtonsBoxButton.js

var ViewHeader = _react2.default.createClass({
    displayName: 'ViewHeader',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            leftText: '返回',
            onPressLeft: function onPressLeft() {},
            onPressRight: function onPressRight() {}
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.header, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            },
            _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: styles.header_left, onPress: this._onPressComplete, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 50
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.header_left_text, { color: '#01bbfc' }], numberOfLines: 1, onPress: this._onPressComplete, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 51
                        }
                    },
                    this.props.leftText
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: styles.header_center, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 53
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.header_center_text, numberOfLines: 1, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 53
                        }
                    },
                    this.props.title
                )
            ),
            _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { onPress: this._onPressRight, style: styles.header_right, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 54
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.header_right_text, { color: '#01bbfc' }], numberOfLines: 1, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 55
                        }
                    },
                    this.props.rightText
                )
            )
        );
    },
    _onPressComplete: function _onPressComplete() {
        this.props.onPressLeft();
    },
    _onPressRight: function _onPressRight() {
        this.props.onPressRight();
    }
});

module.exports = ViewHeader;

var styles = _reactNative.StyleSheet.create({
    header: {
        width: _reactNative.Dimensions.get('window').width,
        height: 60,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: '#ffffff',
        borderBottomWidth: 1,
        borderBottomColor: '#eeeeee'
    },
    header_left: {
        flex: 1,
        borderWidth: 0,
        paddingTop: 30,
        paddingBottom: 10
    },
    header_left_text: {
        textAlign: 'left',
        fontSize: 16,
        fontWeight: '700',
        paddingLeft: 10
    },
    header_center: {
        flex: 4,
        paddingTop: 30,
        paddingBottom: 10
    },
    header_center_text: {
        textAlign: 'center',
        fontSize: 16,
        fontWeight: '700'
    },
    header_right: {
        flex: 1,
        paddingTop: 30,
        paddingBottom: 10
    },
    header_right_text: {
        textAlign: 'right',
        fontSize: 16,
        fontWeight: '700',
        paddingRight: 10
    }
});
}, 516, null, "YrcnAppProject/src/component/ViewHeader.js");
__d(/* YrcnAppProject/src/component/ButtonsBoxButton.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/ButtonsBoxButton.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ButtonsBoxButton = _react2.default.createClass({
    displayName: 'ButtonsBoxButton',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            isPressing: false,
            backgroundColor_pressing: '#efefef',
            backgroundColor: '#ffffff',
            btnColor: '#01bbfc'
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        if (this.props.isPressing) {
            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: [styles.container_pressing, { backgroundColor: this.props.backgroundColor_pressing }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 53
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.btnText, { color: this.props.btnColor }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 54
                        }
                    },
                    this.props.btnText + '...'
                )
            );
        } else {
            return _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: [styles.container, { backgroundColor: this.props.backgroundColor }], onPress: this.props.onPress, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 59
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.btnText, { color: this.props.btnColor }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 60
                        }
                    },
                    this.props.btnText
                )
            );
        }
    }
});

module.exports = ButtonsBoxButton;

var styles = _reactNative.StyleSheet.create({
    container: {
        flex: 1,
        paddingTop: 10,
        paddingBottom: 10,
        borderRadius: 6,
        backgroundColor: '#ffffff'
    },
    container_pressing: {
        flex: 1,
        paddingTop: 10,
        paddingBottom: 10,
        borderRadius: 6,
        backgroundColor: '#efefef'
    },
    btnText: {
        textAlign: 'center',
        fontSize: 16,
        fontWeight: '800',
        color: '#01bbfc'
    }
});
}, 517, null, "YrcnAppProject/src/component/ButtonsBoxButton.js");
__d(/* YrcnAppProject/src/images/MyLogo.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/src/images","width":60,"height":60,"scales":[1,2,3],"hash":"91884ea9727755f96b0315f595566668","name":"MyLogo","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 518, null, "YrcnAppProject/src/images/MyLogo.png");
__d(/* YrcnAppProject/src/images/hotLife.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/src/images","width":20,"height":20,"scales":[1,2,3],"hash":"1326a79565f7372c5d441b83c5eff73e","name":"hotLife","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 519, null, "YrcnAppProject/src/images/hotLife.png");
__d(/* YrcnAppProject/src/images/yesterdayIcon.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/src/images","width":20,"height":20,"scales":[1,2,3],"hash":"25e300c35b966ffb7ed4c5c154c0d59f","name":"yesterdayIcon","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 520, null, "YrcnAppProject/src/images/yesterdayIcon.png");
__d(/* YrcnAppProject/src/images/llgIcon.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/src/images","width":20,"height":20,"scales":[1,2,3],"hash":"5c5be56435c7bfe64c835bb1fa4572d2","name":"llgIcon","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 521, null, "YrcnAppProject/src/images/llgIcon.png");
__d(/* YrcnAppProject/src/images/myLife.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/src/images","width":20,"height":20,"scales":[1,2,3],"hash":"606908371fe1c518659a4e9994a7f4d8","name":"myLife","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 522, null, "YrcnAppProject/src/images/myLife.png");
__d(/* YrcnAppProject/src/view/guide/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _GuideIndexView = require(524                  ); // 524 = ./GuideIndexView.js

Object.defineProperty(exports, 'GuideIndexView', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_GuideIndexView).default;
  }
});
}, 523, null, "YrcnAppProject/src/view/guide/index.js");
__d(/* YrcnAppProject/src/view/guide/GuideIndexView.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/guide/GuideIndexView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ButtonsBox = require(525                            ); // 525 = ../../component/ButtonsBox.js
var ACViewBox = require(505                           ); // 505 = ../../component/ACViewBox.js

var GuideIndexView = function (_React$Component) {
    babelHelpers.inherits(GuideIndexView, _React$Component);

    function GuideIndexView(props) {
        babelHelpers.classCallCheck(this, GuideIndexView);

        var _this2 = babelHelpers.possibleConstructorReturn(this, (GuideIndexView.__proto__ || Object.getPrototypeOf(GuideIndexView)).call(this, props));

        _this2._vars = {};
        _this2.state = {
            isPressingWelcome: false,
            isPressingStart: false,
            isPressingLogin: false,
            isPressingYouke: false,
            isLogined: "0"
        };

        _this2._onPressWelcome = _this2._onPressWelcome.bind(_this2);
        _this2._onPressYouke = _this2._onPressYouke.bind(_this2);
        return _this2;
    }

    babelHelpers.createClass(GuideIndexView, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this = this;
            global.YrcnApp.utils.getLoginInfo(function (loginInfo) {
                if (loginInfo && loginInfo.userLogin) {
                    _this.setState({
                        isLogined: "1"
                    });
                } else {
                    _this.setState({
                        isLogined: "2"
                    });
                }
            });
        }
    }, {
        key: 'componentWillUnmount',
        value: function componentWillUnmount() {
            var _this = this;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this = this;
            global.YrcnApp.components.StatusBar.setHidden(false, 'slide');
            global.YrcnApp.components.StatusBar.setBarStyle('light-content', false, '#01bbfc');

            return _react2.default.createElement(
                _reactNative.View,
                { style: [styles.container], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 76
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.centerView], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 77
                        }
                    },
                    _react2.default.createElement(_reactNative.Image, { source: require(526                              ), style: styles.guideIndexImage, resizeMode: 'contain', __source: { // 526 = ../../images/guide_index_01.png
                            fileName: _jsxFileName,
                            lineNumber: 78
                        }
                    })
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.bottomView], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 80
                        }
                    },
                    function () {
                        if (_this.state.isLogined == "1") {
                            return _react2.default.createElement(
                                ButtonsBox,
                                { marginBottom: 0, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 85
                                    }
                                },
                                _react2.default.createElement(ButtonsBox.Button, { btnText: "欢迎回来，" + global.YrcnApp.loginUser.userInfo.niCheng,
                                    onPress: _this._onPressWelcome,
                                    isPressing: _this.state.isPressingWelcome, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 86
                                    }
                                })
                            );
                        } else if (_this.state.isLogined == "2") {
                            return _react2.default.createElement(
                                _reactNative.View,
                                {
                                    __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 93
                                    }
                                },
                                _react2.default.createElement(
                                    ButtonsBox,
                                    { marginBottom: 0, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 94
                                        }
                                    },
                                    _react2.default.createElement(ButtonsBox.Button, { btnText: "注册", onPress: _this._onPressStart, isPressing: _this.state.isPressingStart, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 95
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    ButtonsBox,
                                    { marginTop: 0, marginBottom: 0, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 97
                                        }
                                    },
                                    _react2.default.createElement(ButtonsBox.Button, { btnText: "已注册？登录", onPress: _this._onPressLogin, isPressing: _this.state.isPressingLogin, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 98
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    ButtonsBox,
                                    { marginTop: 0, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 100
                                        }
                                    },
                                    _react2.default.createElement(ButtonsBox.Button, { btnText: "游客登录", onPress: _this._onPressYouke, isPressing: _this.state.isPressingYouke, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 101
                                        }
                                    })
                                )
                            );
                        }
                    }()
                )
            );
        }
    }, {
        key: '_onPressWelcome',
        value: function _onPressWelcome() {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex' });
        }
    }, {
        key: '_onPressStart',
        value: function _onPressStart() {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'RegisterIndexView' });
        }
    }, {
        key: '_onPressLogin',
        value: function _onPressLogin() {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'LoginIndexView' });
        }
    }, {
        key: '_onPressYouke',
        value: function _onPressYouke() {
            var _this = this;
            _this.setState({
                isPressingYouke: true
            });
            YrcnApp.utils.getYoukeLoginInfo(function (getYoukeLoginInfoObj) {
                if (getYoukeLoginInfoObj && getYoukeLoginInfoObj.userLogin) {
                    YrcnApp.utils.pushLoginInfo(getYoukeLoginInfoObj, function () {
                        YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex' });
                    });
                } else {
                    YrcnApp.services.youkeLogin({}, function (registerObj) {
                        YrcnApp.utils.pushLoginInfo(registerObj, function () {
                            YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex' });
                        });
                        YrcnApp.utils.pushYoukeLoginInfo(registerObj, function () {});
                    }, function (msg) {
                        _this.setState({
                            isPressingYouke: false
                        });
                        YrcnApp.utils.alert(msg);
                    });
                }
            });
        }
    }]);
    return GuideIndexView;
}(_react2.default.Component);

GuideIndexView.navigationOptions = {
    drawerLabel: 'Home'
};
GuideIndexView.defaultProps = {};

module.exports = GuideIndexView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#01bbfc',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 4,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerViewColumnChild: {
        flex: 1,
        borderWidth: 1,
        margin: 5,
        borderRadius: 20,
        borderColor: '#eeeeee',
        padding: 20
    },
    centerViewColumnChildText: {
        fontSize: 22,
        fontWeight: '800',
        textAlign: 'center',
        color: '#666666'
    },
    bottomView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 2.0
    },
    guideIndexImage: {
        width: _reactNative.Dimensions.get('window').width - 40
    }
});
}, 524, null, "YrcnAppProject/src/view/guide/GuideIndexView.js");
__d(/* YrcnAppProject/src/component/ButtonsBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/ButtonsBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ButtonsBoxButton = require(517                    ); // 517 = ./ButtonsBoxButton.js

var ButtonsBox = _react2.default.createClass({
    displayName: 'ButtonsBox',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            marginTop: 10,
            marginBottom: 10
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {
        Button: ButtonsBoxButton
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { marginTop: this.props.marginTop, marginBottom: this.props.marginBottom }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            },
            this.props.children
        );
    }
});

module.exports = ButtonsBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        marginTop: 10,
        marginBottom: 10,
        marginLeft: 20,
        marginRight: 20,
        paddingTop: 10,
        paddingBottom: 10,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    }

});
}, 525, null, "YrcnAppProject/src/component/ButtonsBox.js");
__d(/* YrcnAppProject/src/images/guide_index_01.png */function(global, require, module, exports) {module.exports = require(177                                         ).registerAsset({"__packager_asset":true,"httpServerLocation":"/assets/src/images","width":512,"height":439,"scales":[1],"hash":"f69bf7cfdb50b1535a81191c16510903","name":"guide_index_01","type":"png"}); // 177 = react-native/Libraries/Image/AssetRegistry
}, 526, null, "YrcnAppProject/src/images/guide_index_01.png");
__d(/* YrcnAppProject/src/navigator/NavigatorGuidePages.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorGuidePages.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactNavigation = require(406               ); // 406 = react-navigation

var _guide = require(523            ); // 523 = ../view/guide

var _login = require(528            ); // 528 = ../view/login

var _register = require(540               ); // 540 = ../view/register

var StackNavigatorRoot = (0, _reactNavigation.StackNavigator)({
    Home: { screen: _guide.GuideIndexView }
});

var navigationBarRouteMapper = {
    titleStr: "Today",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 31
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 36
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 41
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {
        navigationBarRouteMapper.navigator.pop();
    },
    _onPressRightButton: function _onPressRightButton() {
        global.YrcnApp.now.rootNavigator.push({
            name: "NavigatorCardPwdInner",
            title: "添加",
            indexName: "CardPwdAddView"
        });
    }
};

var NavigatorGuidePages = _react2.default.createClass({
    displayName: 'NavigatorGuidePages',

    getInitialState: function getInitialState() {
        return {
            isShowNavigationBarLeftButton: false,
            isChange: false
        };
    },
    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", onPress: this._onPressLeftButton, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 78
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 85
                }
            });
        };
    },
    showRightButton: function showRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 92
                }
            });
        };
        this.setState({
            isChange: true
        });
    },
    hideRightButton: function hideRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 102
                }
            });
        };
    },
    render: function render() {
        console.log("render NavigatorGuidePages");
        var _this = this;

        return _react2.default.createElement(StackNavigatorRoot, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 120
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;
        var Component = null;
        switch (route.name) {
            case "LoginIndexView":
                navigationBarRouteMapper.isShowNavigationBarLeftButton = true;
                Component = _login.LoginIndexView;
                break;
            case "LoginEmailView":
                navigationBarRouteMapper.isShowNavigationBarLeftButton = true;
                Component = _login.LoginEmailView;
                break;
            case "RegisterIndexView":
                navigationBarRouteMapper.isShowNavigationBarLeftButton = true;
                Component = _register.RegisterIndexView;
                break;
            case "RegisterEmailView":
                navigationBarRouteMapper.isShowNavigationBarLeftButton = true;
                Component = _register.RegisterEmailView;
                break;
            case "GuideProfessionView":
                navigationBarRouteMapper.isShowNavigationBarLeftButton = true;
                Component = GuideProfessionView;
                break;
            case "GuidePersonalInfoView":
                navigationBarRouteMapper.isShowNavigationBarLeftButton = true;
                Component = GuidePersonalInfoView;
                break;
            default:
                navigationBarRouteMapper.isShowNavigationBarLeftButton = false;
                Component = _guide.GuideIndexView;
        }
        return _react2.default.createElement(Component, {
            parent_route: route,
            parent_navigator: navigator,
            parent: this, __source: {
                fileName: _jsxFileName,
                lineNumber: 156
            }
        });
    }
});

module.exports = NavigatorGuidePages;
}, 527, null, "YrcnAppProject/src/navigator/NavigatorGuidePages.js");
__d(/* YrcnAppProject/src/view/login/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _LoginIndexView = require(529                  ); // 529 = ./LoginIndexView.js

Object.defineProperty(exports, 'LoginIndexView', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_LoginIndexView).default;
  }
});

var _LoginEmailView = require(531                  ); // 531 = ./LoginEmailView.js

Object.defineProperty(exports, 'LoginEmailView', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_LoginEmailView).default;
  }
});
}, 528, null, "YrcnAppProject/src/view/login/index.js");
__d(/* YrcnAppProject/src/view/login/LoginIndexView.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/login/LoginIndexView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ButtonsBox = require(525                            ); // 525 = ../../component/ButtonsBox.js
var ACViewBox = require(505                           ); // 505 = ../../component/ACViewBox.js
var BottomCancelBtn = require(530                                 ); // 530 = ../../component/BottomCancelBtn.js

var LoginView = _react2.default.createClass({
    displayName: 'LoginView',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {
            isPressingLogin: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        var _this = this;
        global.YrcnApp.components.StatusBar.setHidden(false, 'slide');
        global.YrcnApp.components.StatusBar.setBarStyle('light-content', false, '#01bbfc');

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.topView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 62
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 63
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 64
                            }
                        },
                        '\u6B22\u8FCE\u56DE\u6765'
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 66
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 67
                            }
                        },
                        '\u8BF7\u767B\u5F55\u6765\u6062\u590D\u60A8\u7684\u5386\u53F2'
                    )
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.centerView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 70
                    }
                },
                _react2.default.createElement(
                    ButtonsBox,
                    { marginBottom: 0, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 71
                        }
                    },
                    _react2.default.createElement(ButtonsBox.Button, { btnText: "邮箱登录", onPress: this._onPressLogin, isPressing: this.state.isPressingLogin, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 72
                        }
                    })
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.bottomView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 75
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.bottomViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 76
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.bottomViewColumnText], numberOfLines: 3, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 77
                            }
                        },
                        '\u4F7F\u7528WeChat\u6CE8\u518C\u7684\u7528\u6237\u8BF7\u653E\u5FC3\uFF0C\u672A\u7ECF\u8BB8\u53EF\uFF0C\u6211\u4EEC\u6C38\u8FDC\u4E0D\u4F1A\u64C5\u81EA\u516C\u5F00\u60A8\u7684\u4FE1\u606F\u3002\u6211\u4EEC\u90FD\u662F\u5584\u826F\u3001\u53EF\u9760\u7684\u5C0F\u4F19\u4F34\u3002'
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.bottomViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 79
                        }
                    },
                    _react2.default.createElement(_reactNative.Text, { style: [styles.bottomViewColumnText], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 80
                        }
                    })
                )
            ),
            _react2.default.createElement(BottomCancelBtn, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 83
                }
            })
        );
    },
    _onPressLogin: function _onPressLogin() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'LoginEmailView' });
    }
});

module.exports = LoginView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#01bbfc',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    topView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        paddingTop: 80
    },
    topViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    topViewColumnText: {
        fontSize: 15,
        fontWeight: '400',
        textAlign: 'center',
        color: '#ffffff'
    },
    centerView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 3,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerViewColumnChild: {
        flex: 1,
        borderWidth: 1,
        margin: 5,
        borderRadius: 20,
        borderColor: '#eeeeee',
        padding: 20
    },
    centerViewColumnChildText: {
        fontSize: 22,
        fontWeight: '800',
        textAlign: 'center',
        color: '#666666'
    },
    bottomView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1
    },
    bottomViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    bottomViewColumnText: {
        fontSize: 12,
        fontWeight: '300',
        textAlign: 'center',
        color: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 20,
        paddingRight: 20
    }
});
}, 529, null, "YrcnAppProject/src/view/login/LoginIndexView.js");
__d(/* YrcnAppProject/src/component/BottomCancelBtn.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/BottomCancelBtn.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var BottomCancelBtn = _react2.default.createClass({
    displayName: 'BottomCancelBtn',

    getDefaultProps: function getDefaultProps() {
        return {
            onPress: function onPress() {

                YrcnApp.now.$ViewRoot.setState({ viewName: YrcnApp.now.$ViewRoot._vars.prevViewName });
            }
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            { style: [styles.bottomCancelView], onPress: this.props.onPress, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 37
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: [styles.bottomCancelText], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 38
                    }
                },
                '\u53D6\u6D88'
            )
        );
    }
});

module.exports = BottomCancelBtn;

var styles = _reactNative.StyleSheet.create({
    bottomCancelView: {
        width: 60,
        height: 40,
        borderWidth: 0,
        position: 'absolute',
        left: 0,
        bottom: 0,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    bottomCancelText: {
        fontSize: 16,
        textAlign: 'center',
        color: '#ffffff',
        fontWeight: '700'
    }

});
}, 530, null, "YrcnAppProject/src/component/BottomCancelBtn.js");
__d(/* YrcnAppProject/src/view/login/LoginEmailView.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/login/LoginEmailView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                      ); // 475 = ../../common/RNUtils.js
var RNValidateUtils = require(532                              ); // 532 = ../../common/RNValidateUtils.js
var RNAllService = require(477                           ); // 477 = ../../common/RNAllService.js
var ButtonsBox = require(525                            ); // 525 = ../../component/ButtonsBox.js
var ACViewBox = require(505                           ); // 505 = ../../component/ACViewBox.js
var FormBox = require(533                         ); // 533 = ../../component/FormBox.js
var BottomCancelBtn = require(530                                 ); // 530 = ../../component/BottomCancelBtn.js

var LoginEmailView = _react2.default.createClass({
    displayName: 'LoginEmailView',

    _vars: {
        param: {
            method: "POST",
            userName: "",
            pwd: ""
        }
    },
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {
            isPressingLogin: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        _this._vars = {
            param: {
                method: "POST",
                userName: "",
                pwd: ""
            }
        };
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
        _this._vars = {
            param: {
                method: "POST",
                userName: "",
                pwd: ""
            }
        };
    },

    render: function render() {
        var _this = this;
        global.YrcnApp.components.StatusBar.setHidden(false, 'slide');
        global.YrcnApp.components.StatusBar.setBarStyle('light-content', false, '#01bbfc');

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 85
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.topView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 86
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 87
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 88
                            }
                        },
                        '\u767B\u5F55'
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 90
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 91
                            }
                        },
                        '\u8BF7\u8F93\u5165\u60A8\u7684Today\u8D26\u53F7'
                    )
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.centerView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 94
                    }
                },
                _react2.default.createElement(
                    FormBox,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 95
                        }
                    },
                    _react2.default.createElement(FormBox.Input, { placeholder: "邮箱", keyboardType: "email-address", maxLength: 50,
                        parent: this, paramName: "userName", __source: {
                            fileName: _jsxFileName,
                            lineNumber: 96
                        }
                    }),
                    _react2.default.createElement(FormBox.Password, { placeholder: "密码", keyboardType: "default", maxLength: 20,
                        parent: this, paramName: "pwd", __source: {
                            fileName: _jsxFileName,
                            lineNumber: 98
                        }
                    })
                ),
                _react2.default.createElement(
                    ButtonsBox,
                    { marginBottom: 0, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 101
                        }
                    },
                    _react2.default.createElement(ButtonsBox.Button, { btnText: "登录", onPress: this._onPressLogin, isPressing: this.state.isPressingLogin, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 102
                        }
                    })
                )
            ),
            _react2.default.createElement(_reactNative.View, { style: [styles.bottomView], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 105
                }
            }),
            _react2.default.createElement(BottomCancelBtn, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 107
                }
            })
        );
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue;
    },
    _onPressLogin: function _onPressLogin() {
        var _this = this;

        var param = this._vars.param;
        if (!RNValidateUtils.email(param.userName)) {
            RNUtils.alert("请输入正确格式的邮箱");
            return;
        }
        if (!RNValidateUtils.password(param.pwd)) {
            RNUtils.alert("请输入正确格式的密码");
            return;
        }
        param.address = "";
        param.email = param.userName;
        param.requestFlag = "0";
        _this.setState({
            isPressingLogin: true
        });
        RNAllService.login(param, function (registerObj) {
            RNUtils.pushLoginInfo(registerObj, function () {
                YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex' });
            });
        }, function (msg) {
            _this.setState({
                isPressingLogin: false
            });
            RNUtils.alert(msg);
        });
    }
});

module.exports = LoginEmailView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#01bbfc',
        flexDirection: 'column',
        justifyContent: 'flex-end',
        alignItems: 'center'
    },
    topView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'flex-end',
        alignItems: 'center',
        paddingTop: 50
    },
    topViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'flex-end',
        alignItems: 'flex-end'
    },
    topViewColumnText: {
        fontSize: 15,
        fontWeight: '400',
        textAlign: 'center',
        color: '#ffffff'
    },
    centerView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 3,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    bottomView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1
    },
    bottomViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    bottomViewColumnText: {
        fontSize: 12,
        fontWeight: '300',
        textAlign: 'center',
        color: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 20,
        paddingRight: 20
    }
});
}, 531, null, "YrcnAppProject/src/view/login/LoginEmailView.js");
__d(/* YrcnAppProject/src/common/RNValidateUtils.js */function(global, require, module, exports) {
'use strict';

var RNValidateUtils = function () {
    function RNValidateUtils() {
        babelHelpers.classCallCheck(this, RNValidateUtils);
    }

    babelHelpers.createClass(RNValidateUtils, null, [{
        key: 'email',
        value: function email(str) {
            var reyx = /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+(.[a-zA-Z0-9_-])+/;
            return reyx.test(str);
        }
    }, {
        key: 'password',
        value: function password(str) {
            if (str.length < 6 || str.length > 20) {
                return false;
            }
            return true;
        }
    }, {
        key: 'niCheng',
        value: function niCheng(str) {
            if (str.length < 2 || str.length > 10) {
                return false;
            }
            return true;
        }
    }, {
        key: 'vc',
        value: function vc(str) {
            if (str.length != 4) {
                return false;
            }
            return true;
        }
    }]);
    return RNValidateUtils;
}();

module.exports = RNValidateUtils;
}, 532, null, "YrcnAppProject/src/common/RNValidateUtils.js");
__d(/* YrcnAppProject/src/component/FormBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FormBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var FormBoxInput = require(534             ); // 534 = ./FormBoxInput
var FormBoxInputArea = require(535                 ); // 535 = ./FormBoxInputArea
var FormBoxPassword = require(536                ); // 536 = ./FormBoxPassword
var FormBoxInputImage = require(537                  ); // 537 = ./FormBoxInputImage
var FormBoxSwitch = require(538                 ); // 538 = ./FormBoxSwitch.js
var FormBoxRadio = require(539                ); // 539 = ./FormBoxRadio.js

var FormBox = _react2.default.createClass({
    displayName: 'FormBox',

    _vars: {
        y: 0,
        bottom: 0,
        viewHeaderHeight: 60
    },
    getDefaultProps: function getDefaultProps() {
        return {
            paddingLeft: 0,
            paddingRight: 0,
            heightStyle: {}
        };
    },
    getInitialState: function getInitialState() {
        return {
            keyboardSpace: 0,
            visibleHeight: _reactNative.Dimensions.get('window').height - this._vars.viewHeaderHeight
        };
    },

    statics: {
        Input: FormBoxInput,
        InputArea: FormBoxInputArea,
        InputImage: FormBoxInputImage,
        Password: FormBoxPassword,
        Switch: FormBoxSwitch,
        Radio: FormBoxRadio
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        if (YrcnApp.Platform.isIOS && this.props.handleKeyboard == '2') {}
    },
    componentWillMount: function componentWillMount() {
        if (this.props.handleKeyboard == '1') {
            _reactNative.Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);
            _reactNative.Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
        if (this.props.handleKeyboard == '2') {}
        if (this.props.handleKeyboard == '1') {
            _reactNative.Keyboard.removeAllListeners('keyboardDidShow');
            _reactNative.Keyboard.removeAllListeners('keyboardDidHide');
        }
    },

    render: function render() {
        if (this.props.handleKeyboard == '1') {
            YrcnApp.utils.logObj("YrcnApp.utils.appVersonGe 2.1.0", YrcnApp.utils.appVersonGe("2.1.0"));
            if (YrcnApp.utils.appVersonGe("2.1.0")) {
                return _react2.default.createElement(
                    _reactNative.View,
                    { behavior: 'height', keyboardVerticalOffset: 0,
                        style: [styles.contentContainerStyle, { height: this.state.visibleHeight }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 97
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.ScrollView,
                        { style: [styles.container, this.props.heightStyle, { paddingLeft: this.props.paddingLeft, paddingRight: this.props.paddingRight }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 100
                            }
                        },
                        this.props.children
                    )
                );
            } else {
                return _react2.default.createElement(
                    _reactNative.View,
                    { behavior: 'height', keyboardVerticalOffset: 0,
                        style: [styles.contentContainerStyle, { height: _reactNative.Dimensions.get('window').height - 276 }],
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 107
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.ScrollView,
                        { style: [styles.container, this.props.heightStyle, { paddingLeft: this.props.paddingLeft, paddingRight: this.props.paddingRight }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 110
                            }
                        },
                        this.props.children
                    )
                );
            }
        } else {
            return _react2.default.createElement(
                _reactNative.ScrollView,
                { style: [styles.container, this.props.heightStyle, { paddingLeft: this.props.paddingLeft, paddingRight: this.props.paddingRight }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 118
                    }
                },
                this.props.children
            );
        }
    },
    updateKeyboardSpace: function updateKeyboardSpace(frames) {},
    resetKeyboardSpace: function resetKeyboardSpace() {},
    _keyboardDidShow: function _keyboardDidShow(frames) {
        YrcnApp.utils.logObj("FormBox.js _keyboardDidShow", frames);
        if (frames && frames.end) {
            this.setState({ visibleHeight: _reactNative.Dimensions.get('window').height - this._vars.viewHeaderHeight - frames.end.height });
        } else if (frames && frames.endCoordinates) {
            this.setState({ visibleHeight: _reactNative.Dimensions.get('window').height - this._vars.viewHeaderHeight - frames.endCoordinates.height });
        }
    },
    _keyboardDidHide: function _keyboardDidHide(e) {
        YrcnApp.utils.logObj("FormBox.js _keyboardDidHide", e);
        this.setState({ visibleHeight: _reactNative.Dimensions.get('window').height - this._vars.viewHeaderHeight });
    },
    _onScroll: function _onScroll(e) {},
    _relativeKeyboardHeight: function _relativeKeyboardHeight(keyboardFrame) {
        YrcnApp.utils.logObj("FormBox.js _relativeKeyboardHeight", keyboardFrame);
    },
    _onKeyboardChange: function _onKeyboardChange(e) {
        YrcnApp.utils.logObj("FormBox.js _onKeyboardChange", e.nativeEvent);
    },
    _onLayout: function _onLayout(e) {
        YrcnApp.utils.logObj("FormBox.js _onLayout", e.nativeEvent);
    }
});

module.exports = FormBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        marginTop: 10,
        marginBottom: 10,
        paddingTop: 10,
        paddingBottom: 10,
        borderRadius: 10,
        borderWidth: 0,
        borderColor: '#cccccc'
    },
    contentContainerStyle: {
        borderBottomWidth: 3,
        borderBottomColor: '#eeeeee'
    }
});
}, 533, null, "YrcnAppProject/src/component/FormBox.js");
__d(/* YrcnAppProject/src/component/FormBoxInput.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FormBoxInput.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js

var FormBoxInput = _react2.default.createClass({
    displayName: 'FormBoxInput',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: "",
            borderBottomWidth: YrcnApp.Platform.isIOS ? 0.5 : 0,
            multiline: false,
            height: YrcnApp.Platform.isIOS ? 20 : 40,
            maxLength: 50,
            placeholderTextColor: '#fefefe',
            keyboardType: 'default',
            defaultValue: '',
            inputColor: '#ffffff'
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { borderBottomWidth: this.props.borderBottomWidth }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                }
            },
            _react2.default.createElement(_reactNative.TextInput, {
                style: [styles.textInput, { height: this.props.height, borderBottomWidth: YrcnApp.Platform.isIOS ? 1 : 0, color: this.props.inputColor, fontSize: 16 }],
                onChangeText: this._onChangeText,
                autoCorrect: false,
                autoFocus: false,
                maxLength: this.props.maxLength,
                keyboardType: this.props.keyboardType,
                placeholder: this.props.placeholder,
                defaultValue: this.props.defaultValue,
                multiline: this.props.multiline,
                placeholderTextColor: this.props.placeholderTextColor,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            })
        );
    },
    _onChangeText: function _onChangeText(text) {
        this._vars.text = text.trim();
        this.props.parent.changeParam(this.props.paramName, text);
    }
});

module.exports = FormBoxInput;

var styles = _reactNative.StyleSheet.create({
    container: {
        borderBottomWidth: 0,
        borderBottomColor: '#dddddd',
        marginLeft: 0,
        marginBottom: 10,
        paddingTop: 10,
        paddingBottom: 3,
        paddingLeft: 10,
        paddingRight: 10
    },
    textInput: {
        width: _reactNative.Dimensions.get('window').width - 50,
        color: '#ffffff'
    }
});
}, 534, null, "YrcnAppProject/src/component/FormBoxInput.js");
__d(/* YrcnAppProject/src/component/FormBoxInputArea.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FormBoxInputArea.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js

var FormBoxInputArea = _react2.default.createClass({
    displayName: 'FormBoxInputArea',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: "",
            borderBottomWidth: 0.5,
            multiline: true,
            height: 20,
            maxLength: 50,
            placeholderTextColor: '#fefefe',
            keyboardType: 'default',
            defaultValue: '',
            inputColor: '#ffffff'
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { borderBottomWidth: this.props.borderBottomWidth }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            },
            _react2.default.createElement(_reactNative.TextInput, {
                style: [styles.textInput, { height: this.props.height, borderBottomWidth: 0, color: this.props.inputColor }],
                onChangeText: this._onChangeText,
                autoCorrect: false,
                autoFocus: false,
                maxLength: this.props.maxLength,
                keyboardType: this.props.keyboardType,
                placeholder: this.props.placeholder,
                defaultValue: this.props.defaultValue,
                multiline: this.props.multiline,
                placeholderTextColor: this.props.placeholderTextColor,
                onFocus: this._onFocus,
                onLayout: this._onLayout,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                }
            })
        );
    },
    _onChangeText: function _onChangeText(text) {
        this._vars.text = text.trim();
        this.props.parent.changeParam(this.props.paramName, text);
    },
    _downloadLayout: function _downloadLayout(e) {
        this.setState({
            downloadY: e.nativeEvent.layout.y
        });
    },
    _downLoadFocus: function _downLoadFocus() {
        var _this2 = this;

        var scroller = this.refs.scroller;
        YrcnApp.Platform.isIOS && setTimeout(function () {
            var y = _this2.state.downloadY - 1 / 3 * _reactNative.Dimensions.get('window').height;
            scroller && scroller.scrollTo({ x: 0, y: y, animated: true });
        }, 50);
    },
    _onFocus: function _onFocus(e) {},
    _onLayout: function _onLayout(e) {}
});

module.exports = FormBoxInputArea;

var styles = _reactNative.StyleSheet.create({
    container: {
        borderBottomWidth: 0,
        borderBottomColor: '#dddddd',
        marginLeft: 0,
        marginBottom: 10,
        paddingTop: 10,
        paddingLeft: 10,
        paddingRight: 10
    },
    textInput: {
        width: _reactNative.Dimensions.get('window').width - 20,
        color: '#ffffff',
        fontSize: 18
    }
});
}, 535, null, "YrcnAppProject/src/component/FormBoxInputArea.js");
__d(/* YrcnAppProject/src/component/FormBoxPassword.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FormBoxPassword.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var FormBoxInput = _react2.default.createClass({
    displayName: 'FormBoxInput',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: "",
            borderBottomWidth: YrcnApp.Platform.isIOS ? 0.5 : 0,
            multiline: false,
            height: YrcnApp.Platform.isIOS ? 20 : 50,
            maxLength: 50,
            placeholderTextColor: '#fefefe',
            keyboardType: 'default',
            defaultValue: '',
            value: ""
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
        _this._vars = {};
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
        _this._vars = {};
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { borderBottomWidth: this.props.borderBottomWidth }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                }
            },
            _react2.default.createElement(_reactNative.TextInput, {
                style: { height: this.props.height, borderWidth: 0, color: '#ffffff', fontSize: 16 },
                onChangeText: this._onChangeText,
                autoCorrect: false,
                autoFocus: false,
                maxLength: this.props.maxLength,
                keyboardType: this.props.keyboardType,
                placeholder: this.props.placeholder,
                placeholderTextColor: this.props.placeholderTextColor,
                value: this.state.value,
                secureTextEntry: true,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 63
                }
            })
        );
    },
    _onChangeText: function _onChangeText(text) {
        this.setState({
            value: text
        });
        this.props.parent.changeParam(this.props.paramName, text);
    }
});

module.exports = FormBoxInput;

var styles = _reactNative.StyleSheet.create({
    container: {
        borderBottomWidth: 1,
        borderBottomColor: '#efefef',
        marginLeft: 0,
        marginBottom: 10,
        paddingTop: 10,
        paddingBottom: 3,
        paddingLeft: 10,
        paddingRight: 10
    }

});
}, 536, null, "YrcnAppProject/src/component/FormBoxPassword.js");
__d(/* YrcnAppProject/src/component/FormBoxInputImage.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FormBoxInputImage.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var FormBoxInput = _react2.default.createClass({
    displayName: 'FormBoxInput',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: "",
            borderBottomWidth: 0.5,
            multiline: false,
            height: 20,
            maxLength: 50,
            placeholderTextColor: '#fefefe',
            keyboardType: 'default',
            defaultValue: ''
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        var _this = this;

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { borderBottomWidth: this.props.borderBottomWidth }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            },
            _react2.default.createElement(_reactNative.TextInput, {
                style: [styles.textInput, { borderWidth: 0, flex: 1 }],
                onChangeText: this._onChangeText,
                autoCorrect: false,
                autoFocus: false,
                maxLength: this.props.maxLength,
                keyboardType: this.props.keyboardType,
                placeholder: this.props.placeholder,
                defaultValue: this.props.defaultValue,
                multiline: this.props.multiline,
                placeholderTextColor: this.props.placeholderTextColor,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 58
                }
            }),
            _react2.default.createElement(_reactNative.Image, { source: { uri: this.props.imageUri }, style: styles.image, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            })
        );
    },
    _onChangeText: function _onChangeText(text) {
        this._vars.text = text.trim();
        this.props.parent.changeParam(this.props.paramName, text);
    }
});

module.exports = FormBoxInput;

var styles = _reactNative.StyleSheet.create({
    container: {
        borderBottomWidth: 0,
        borderBottomColor: '#efefef',
        paddingLeft: 0,
        paddingBottom: 1,
        paddingTop: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    image: {
        width: 90,
        height: 22,
        marginRight: 5
    },
    textInput: {
        color: '#ffffff',
        paddingTop: 0,
        paddingBottom: 6,
        marginTop: 0,
        marginBottom: 0
    }
});
}, 537, null, "YrcnAppProject/src/component/FormBoxInputImage.android.js");
__d(/* YrcnAppProject/src/component/FormBoxSwitch.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FormBoxSwitch.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var FormBoxInput = _react2.default.createClass({
    displayName: 'FormBoxInput',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: "",
            borderBottomWidth: 1,
            multiline: false,
            height: 20,
            textColor: '#444444'
        };
    },
    getInitialState: function getInitialState() {
        return {
            falseSwitchIsOn: this.props.is || false
        };
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { borderBottomWidth: this.props.borderBottomWidth }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.controlLeftView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 57
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.controlText, { color: this.props.textColor }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 58
                        }
                    },
                    this.props.text
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.controlRightView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 60
                    }
                },
                _react2.default.createElement(_reactNative.Switch, {
                    onValueChange: this._onValueChange,
                    style: [styles.controlSwitch],
                    value: this.state.falseSwitchIsOn, tintColor: '#01bbfc', onTintColor: '#01bbfc', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 61
                    }
                })
            )
        );
    },
    _onValueChange: function _onValueChange(value) {
        this.props.parent.changeParam(this.props.paramName, value);
        this.setState({ falseSwitchIsOn: value });
    }
});

module.exports = FormBoxInput;

var styles = _reactNative.StyleSheet.create({
    container: {
        borderBottomWidth: 1,
        borderBottomColor: '#efefef',
        paddingLeft: 10,
        paddingBottom: 10,
        paddingTop: 10,
        width: _reactNative.Dimensions.get('window').width,
        backgroundColor: '#ffffff',
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    controlSwitch: {},
    controlLeftView: {
        flex: 4
    },
    controlRightView: {
        flex: 1,
        borderWidth: 0
    },
    controlText: {
        fontSize: 16
    }
});
}, 538, null, "YrcnAppProject/src/component/FormBoxSwitch.js");
__d(/* YrcnAppProject/src/component/FormBoxRadio.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/FormBoxRadio.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var FormBoxRadio = _react2.default.createClass({
    displayName: 'FormBoxRadio',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        console.log("render FormBoxRadio");
        var _this = this;

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            },
            this.props.textArray.map(function (d, i) {
                return _react2.default.createElement(FormBoxRadioItem, { text: d.text, isSelected: d.isSelected, parent: _this.props.parent, index: i, key: i, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 54
                    }
                });
            })
        );
    }
});
var FormBoxRadioItem = _react2.default.createClass({
    displayName: 'FormBoxRadioItem',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            { style: styles.textView, onPress: this._onPress, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 76
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: [styles.text, { fontWeight: this.props.isSelected ? '900' : '100' }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 77
                    }
                },
                this.props.text
            )
        );
    },
    _onPress: function _onPress() {
        this.props.parent.rerenderRadio(this.props.index);
    }
});

module.exports = FormBoxRadio;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    textView: {
        flex: 1
    },
    text: {
        fontSize: 13,
        textAlign: 'center',
        color: '#ffffff'
    }
});
}, 539, null, "YrcnAppProject/src/component/FormBoxRadio.js");
__d(/* YrcnAppProject/src/view/register/index.js */function(global, require, module, exports) {Object.defineProperty(exports, "__esModule", {
  value: true
});

var _RegisterIndexView = require(541                     ); // 541 = ./RegisterIndexView.js

Object.defineProperty(exports, 'RegisterIndexView', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_RegisterIndexView).default;
  }
});

var _RegisterEmailView = require(542                     ); // 542 = ./RegisterEmailView.js

Object.defineProperty(exports, 'RegisterEmailView', {
  enumerable: true,
  get: function get() {
    return babelHelpers.interopRequireDefault(_RegisterEmailView).default;
  }
});
}, 540, null, "YrcnAppProject/src/view/register/index.js");
__d(/* YrcnAppProject/src/view/register/RegisterIndexView.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/register/RegisterIndexView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ButtonsBox = require(525                            ); // 525 = ../../component/ButtonsBox.js
var ACViewBox = require(505                           ); // 505 = ../../component/ACViewBox.js
var BottomCancelBtn = require(530                                 ); // 530 = ../../component/BottomCancelBtn.js

var RegisterIndexView = _react2.default.createClass({
    displayName: 'RegisterIndexView',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {
            isPressingLogin: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        var _this = this;
        global.YrcnApp.components.StatusBar.setHidden(false, 'slide');
        global.YrcnApp.components.StatusBar.setBarStyle('light-content', false, '#01bbfc');

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.topView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 63
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 64
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 65
                            }
                        },
                        '\u521B\u5EFAToday\u8D26\u53F7'
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 67
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 68
                            }
                        },
                        '\u6CE8\u518CToday\u8D26\u53F7\u6765\u8BB0\u5F55\u4ECA\u5929\u3001\u6628\u5929\u3001\u4EE5\u524D\u53D1\u751F\u7684\u4E8B\u60C5\u3002'
                    )
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.centerView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 71
                    }
                },
                _react2.default.createElement(
                    ButtonsBox,
                    { marginBottom: 0, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 72
                        }
                    },
                    _react2.default.createElement(ButtonsBox.Button, { btnText: "用邮箱注册", onPress: this._onPressRegister, isPressing: this.state.isPressingLogin, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 73
                        }
                    })
                ),
                _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    { style: [styles.centerViewDesp], onPress: _this._onPressLogin, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 75
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.centerViewDespText], numberOfLines: 3, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 76
                            }
                        },
                        "已拥有Today账号？\r\n登录"
                    )
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.bottomView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 79
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.bottomViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 80
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.bottomViewColumnText], numberOfLines: 3, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 81
                            }
                        },
                        '\u4F7F\u7528WeChat\u6CE8\u518C\u7684\u7528\u6237\u8BF7\u653E\u5FC3\uFF0C\u672A\u7ECF\u8BB8\u53EF\uFF0C\u6211\u4EEC\u6C38\u8FDC\u4E0D\u4F1A\u64C5\u81EA\u516C\u5F00\u60A8\u7684\u4FE1\u606F\u3002\u6211\u4EEC\u90FD\u662F\u5584\u826F\u3001\u53EF\u9760\u7684\u5C0F\u4F19\u4F34\u3002'
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.bottomViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 83
                        }
                    },
                    _react2.default.createElement(_reactNative.Text, { style: [styles.bottomViewColumnText], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 84
                        }
                    })
                )
            ),
            _react2.default.createElement(BottomCancelBtn, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                }
            })
        );
    },
    _onPressRegister: function _onPressRegister() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'RegisterEmailView' });
    },
    _onPressLogin: function _onPressLogin() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'LoginIndexView' });
    }
});

module.exports = RegisterIndexView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#01bbfc',
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    topView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center',
        paddingTop: 80
    },
    topViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    topViewColumnText: {
        fontSize: 13,
        fontWeight: '400',
        textAlign: 'center',
        color: '#ffffff'
    },
    centerView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 3,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerViewColumnChild: {
        flex: 1,
        borderWidth: 1,
        margin: 5,
        borderRadius: 20,
        borderColor: '#eeeeee',
        padding: 20
    },
    centerViewColumnChildText: {
        fontSize: 22,
        fontWeight: '800',
        textAlign: 'center',
        color: '#666666'
    },
    centerViewDesp: {
        paddingTop: 20
    },
    centerViewDespText: {
        fontSize: 12,
        fontWeight: '300',
        textAlign: 'center',
        color: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 20,
        paddingRight: 20
    },
    bottomView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1
    },
    bottomViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    bottomViewColumnText: {
        fontSize: 12,
        fontWeight: '300',
        textAlign: 'center',
        color: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 20,
        paddingRight: 20
    }
});
}, 541, null, "YrcnAppProject/src/view/register/RegisterIndexView.js");
__d(/* YrcnAppProject/src/view/register/RegisterEmailView.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/register/RegisterEmailView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                      ); // 475 = ../../common/RNUtils.js
var RNValidateUtils = require(532                              ); // 532 = ../../common/RNValidateUtils.js
var RNAllService = require(477                           ); // 477 = ../../common/RNAllService.js
var ButtonsBox = require(525                            ); // 525 = ../../component/ButtonsBox.js
var ACViewBox = require(505                           ); // 505 = ../../component/ACViewBox.js
var FormBox = require(533                         ); // 533 = ../../component/FormBox.js
var BottomCancelBtn = require(530                                 ); // 530 = ../../component/BottomCancelBtn.js

var RegisterEmailView = _react2.default.createClass({
    displayName: 'RegisterEmailView',

    _vars: {
        param: {
            method: "POST",
            userName: "",
            pwd: "",
            vc: "",
            niCheng: ""
        }
    },
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {
            isPressingRegister: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        _this._vars = {
            param: {
                method: "POST",
                userName: "",
                pwd: "",
                vc: "",
                niCheng: ""
            }
        };
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
        _this._vars = {
            param: {
                method: "POST",
                userName: "",
                pwd: "",
                vc: "",
                niCheng: ""
            }
        };
    },

    render: function render() {
        var _this = this;
        global.YrcnApp.components.StatusBar.setHidden(false, 'slide');
        global.YrcnApp.components.StatusBar.setBarStyle('light-content', false, '#01bbfc');

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 92
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.topView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 93
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 94
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 95
                            }
                        },
                        '\u6CE8\u518C'
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.topViewColumn], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 97
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.topViewColumnText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 98
                            }
                        },
                        '\u514D\u8D39\u6CE8\u518CToday\u8D26\u53F7\u6765\u8BB0\u5F55\u4ECA\u5929\u3001\u6628\u5929\u3001\u4EE5\u524D\u53D1\u751F\u7684\u4E8B\u60C5\u3002'
                    )
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.centerView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 101
                    }
                },
                _react2.default.createElement(
                    FormBox,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 102
                        }
                    },
                    _react2.default.createElement(FormBox.Input, { placeholder: "邮箱", keyboardType: "email-address", maxLength: 50,
                        parent: this, paramName: "userName", __source: {
                            fileName: _jsxFileName,
                            lineNumber: 103
                        }
                    }),
                    _react2.default.createElement(FormBox.Password, { placeholder: "密码", keyboardType: "default", maxLength: 20,
                        parent: this, paramName: "pwd", __source: {
                            fileName: _jsxFileName,
                            lineNumber: 105
                        }
                    }),
                    _react2.default.createElement(FormBox.Input, { placeholder: "昵称", keyboardType: "default", maxLength: 10,
                        parent: this, paramName: "niCheng", __source: {
                            fileName: _jsxFileName,
                            lineNumber: 107
                        }
                    })
                ),
                _react2.default.createElement(
                    ButtonsBox,
                    { marginBottom: 0, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 110
                        }
                    },
                    _react2.default.createElement(ButtonsBox.Button, { btnText: "注册", onPress: this._onPressRegister, isPressing: this.state.isPressingRegister, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 111
                        }
                    })
                ),
                _react2.default.createElement(
                    _reactNative.TouchableOpacity,
                    { style: [styles.centerViewDesp], onPress: _this._onPressLogin, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 113
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.centerViewDespText], numberOfLines: 3, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 114
                            }
                        },
                        "已拥有Today账号？\r\n登录"
                    )
                )
            ),
            _react2.default.createElement(_reactNative.View, { style: [styles.bottomView], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 117
                }
            }),
            _react2.default.createElement(BottomCancelBtn, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 119
                }
            })
        );
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue;
    },
    _onPressLogin: function _onPressLogin() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'LoginIndexView' });
    },
    _onPressRegister: function _onPressRegister() {
        var _this = this;

        var param = this._vars.param;
        if (!RNValidateUtils.email(param.userName)) {
            RNUtils.alert("请输入正确格式的邮箱");
            return;
        }
        if (!RNValidateUtils.password(param.pwd)) {
            RNUtils.alert("请输入正确格式的密码");
            return;
        }
        if (!RNValidateUtils.niCheng(param.niCheng)) {
            RNUtils.alert("请输入正确格式的昵称");
            return;
        }

        param.address = "";
        param.email = param.userName;
        param.requestFlag = "0";
        param.profession = encodeURI(encodeURI(global.YrcnApp.now.profession || ''));
        param.sex = global.YrcnApp.now.sex || '1';
        param.age = global.YrcnApp.now.age || '0';
        _this.setState({
            isPressingRegister: true
        });
        RNAllService.register(param, function (registerObj) {
            _this.setState({
                isPressingRegister: false
            });
            RNUtils.pushLoginInfo(registerObj, function () {
                RNUtils.alert("恭喜您注册成功。", function () {
                    YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex' });
                });
            });
        }, function (msg) {
            _this.setState({
                isPressingRegister: false
            });
            RNUtils.alert(msg);
        });
    }
});

module.exports = RegisterEmailView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#01bbfc',
        flexDirection: 'column',
        justifyContent: 'flex-end',
        alignItems: 'center'
    },
    topView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1,
        flexDirection: 'column',
        justifyContent: 'flex-end',
        alignItems: 'center',
        paddingTop: 50
    },
    topViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'flex-end',
        alignItems: 'flex-end'
    },
    topViewColumnText: {
        fontSize: 13,
        fontWeight: '400',
        textAlign: 'center',
        color: '#ffffff'
    },
    centerView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 3,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    centerViewDesp: {
        paddingTop: 20
    },
    centerViewDespText: {
        fontSize: 12,
        fontWeight: '300',
        textAlign: 'center',
        color: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 20,
        paddingRight: 20
    },
    bottomView: {
        width: _reactNative.Dimensions.get('window').width,
        flex: 1
    },
    bottomViewColumn: {
        flex: 1,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    },
    bottomViewColumnText: {
        fontSize: 12,
        fontWeight: '300',
        textAlign: 'center',
        color: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 20,
        paddingRight: 20
    }
});
}, 542, null, "YrcnAppProject/src/view/register/RegisterEmailView.js");
__d(/* YrcnAppProject/src/view/ViewNewFunc.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewNewFunc.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ViewNewFunc = _react2.default.createClass({
    displayName: 'ViewNewFunc',

    mixins: [],
    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    componentDidMount: function componentDidMount() {},

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            },
            _react2.default.createElement(_reactNative.View, { style: [styles.rightBtn], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }),
            _react2.default.createElement(_reactNative.View, { style: [styles.lineToBtn], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }),
            _react2.default.createElement(_reactNative.View, { style: [styles.lineRow], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            }),
            _react2.default.createElement(
                _reactNative.TouchableOpacity,
                { style: [styles.iKnowBtn], onPress: this.props.onPress, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 55
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.iKnowBtnText], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 56
                        }
                    },
                    '\u8FD9\u4E9B\u663E\u793A\u5185\u5BB9\u90FD\u53EF\u4EE5\u7F16\u8F91\u54E6\uFF0C\u6211\u77E5\u9053\u4E86(\u70B9\u6211)'
                )
            )
        );
    }
});

module.exports = ViewNewFunc;

var styles = _reactNative.StyleSheet.create({
    container: {
        position: 'absolute',
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#000000',
        top: 0,
        left: 0,
        opacity: 0.6
    },
    rightBtn: {
        position: 'absolute',
        backgroundColor: '#ffffff',
        top: 20,
        left: _reactNative.Dimensions.get('window').width - 50,
        width: 50,
        height: 30,
        borderWidth: 2,
        borderColor: '#ffffff',
        borderRadius: 10
    },
    lineToBtn: {
        position: 'absolute',
        backgroundColor: '#ffffff',
        top: 80,
        left: 0,
        width: _reactNative.Dimensions.get('window').width - 40,
        height: 3,
        borderWidth: 2,
        borderColor: '#ffffff',
        borderRadius: 10,
        transform: [{ rotateZ: '-13deg' }]
    },
    lineRow: {
        position: 'absolute',
        backgroundColor: '#ffffff',
        top: 125,
        left: 0,
        width: _reactNative.Dimensions.get('window').width,
        height: 50,
        borderWidth: 2,
        borderColor: '#ffffff',
        borderRadius: 0
    },
    iKnowBtn: {
        position: 'absolute',
        bottom: 60,
        left: _reactNative.Dimensions.get('window').width - 320,
        width: 300,
        height: 30,
        borderWidth: 2,
        borderColor: '#fefefe',
        borderRadius: 5
    },
    iKnowBtnText: {
        color: '#ffffff',
        lineHeight: 23,
        textAlign: 'center'
    }
});
}, 543, null, "YrcnAppProject/src/view/ViewNewFunc.android.js");
__d(/* YrcnAppProject/src/navigator/StackNavigatorRoot.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/StackNavigatorRoot.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNavigation = require(406               ); // 406 = react-navigation

var _reactNative = require(46            ); // 46 = react-native

var ViewEditTodayContent = require(545                             ); // 545 = ./../view/ViewEditTodayContent
var _StackNavigatorRoot = (0, _reactNavigation.StackNavigator)({
    Home: { screen: ViewEditTodayContent }
});

var StackNavigatorRoot = function (_Component) {
    babelHelpers.inherits(StackNavigatorRoot, _Component);

    function StackNavigatorRoot() {
        babelHelpers.classCallCheck(this, StackNavigatorRoot);
        return babelHelpers.possibleConstructorReturn(this, (StackNavigatorRoot.__proto__ || Object.getPrototypeOf(StackNavigatorRoot)).apply(this, arguments));
    }

    babelHelpers.createClass(StackNavigatorRoot, [{
        key: 'componentDidMount',
        value: function componentDidMount() {}
    }, {
        key: 'render',
        value: function render() {
            var title = this.props.title;

            YrcnApp.utils.log("", this.props.title);

            return _react2.default.createElement(_StackNavigatorRoot, { screenProps: { title: title }, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            });
        }
    }]);
    return StackNavigatorRoot;
}(_react.Component);

module.exports = StackNavigatorRoot;
}, 544, null, "YrcnAppProject/src/navigator/StackNavigatorRoot.js");
__d(/* YrcnAppProject/src/view/ViewEditTodayContent.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewEditTodayContent.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var FloatButtonsBox = require(510                              ); // 510 = ../component/FloatButtonsBox.js
var NineImagesBox = require(546                            ); // 546 = ../component/NineImagesBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js
var ImagePicker = require(547                        ); // 547 = react-native-image-picker

var WebViewEditTodayContent = function (_Component) {
    babelHelpers.inherits(WebViewEditTodayContent, _Component);

    function WebViewEditTodayContent(props) {
        babelHelpers.classCallCheck(this, WebViewEditTodayContent);

        var _this2 = babelHelpers.possibleConstructorReturn(this, (WebViewEditTodayContent.__proto__ || Object.getPrototypeOf(WebViewEditTodayContent)).call(this, props));

        _this2._vars = {
            contentDay: RNUtils.nowDate()
        };
        _this2.state = {
            textInputHeight: 120,
            oneImages: []
        };

        _this2._onChangeText = _this2._onChangeText.bind(_this2);
        _this2._onPressImage = _this2._onPressImage.bind(_this2);
        _this2._onPressComplete = _this2._onPressComplete.bind(_this2);
        return _this2;
    }

    babelHelpers.createClass(WebViewEditTodayContent, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this = this;
            var oneImages = [];
            if (this.props.coreObj && this.props.coreObj.oneImages && Array.isArray(this.props.coreObj.oneImages)) {
                oneImages = this.props.coreObj.oneImages;
            }
            this.setState({
                oneImages: oneImages
            });
        }
    }, {
        key: 'render',
        value: function render() {
            var _this = this;

            console.log(this.props.coreObj);
            var coreObj = this.props.coreObj || {};
            var val = coreObj.content || "";
            this._vars.text = val.trim();
            return _react2.default.createElement(
                _reactNative.View,
                { style: [global.YrcnApp.styles.common.container, { backgroundColor: '#f0f0f0' }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 76
                    }
                },
                _react2.default.createElement(ViewHeader, { title: _this.props.title, onPressLeft: this._onPressComplete, leftText: '\u5B8C\u6210', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 77
                    }
                }),
                _react2.default.createElement(_reactNative.TextInput, {
                    style: [styles.textInput, { height: _this.state.textInputHeight }],
                    onChangeText: this._onChangeText,
                    onFocus: this._onFocusText,
                    onBlur: this._onBlurText,
                    autoCorrect: false,
                    autoFocus: false,
                    maxLength: this.props.maxLength,
                    keyboardType: this.props.keyboardType,
                    placeholder: this.props.placeholder,
                    defaultValue: val,
                    multiline: this.props.multiline,
                    placeholderTextColor: this.props.placeholderTextColor,
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 78
                    }
                }),
                _react2.default.createElement(NineImagesBox, { oneImages: this.state.oneImages, parent: _this, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 92
                    }
                }),
                _react2.default.createElement(
                    FloatButtonsBox,
                    { marginTop: 30, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 93
                        }
                    },
                    _react2.default.createElement(FloatButtonsBox.Button, { btnText: "图片", onPress: this._onPressImage, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 94
                        }
                    })
                )
            );
        }
    }, {
        key: '_onChangeText',
        value: function _onChangeText(text) {
            var _this = this;
            this._vars.text = text.trim();
            var contentOneObj = {
                typeCode: this.props.type.typeCode,
                day: _this._vars.contentDay,
                content: this._vars.text,
                oneImages: this.state.oneImages
            };
            RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
                contentObj[_this.props.type.typeCode] = contentOneObj;
                RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {});
            });
        }
    }, {
        key: '_onFocusText',
        value: function _onFocusText(text) {
            var _this = this;
        }
    }, {
        key: '_onBlurText',
        value: function _onBlurText(text) {
            var _this = this;
        }
    }, {
        key: '_onPressImage',
        value: function _onPressImage() {
            var _this = this;

            if (_this.state.oneImages && _this.state.oneImages.length >= 9) {
                RNUtils.alert("对不起，最多只支持9个图片...");
                return;
            }
            var options = {
                storageOptions: {
                    skipBackup: true,
                    path: 'images'
                }
            };
            ImagePicker.launchImageLibrary(options, function (response) {
                RNUtils.logObj("ViewEditTodayContent.ios.js _onPressImage", response);
                if (response.error && response.error.indexOf("permissions") > -1) {
                    RNUtils.alert("访问您设备照片的权限被禁用了，请到“设置-隐私-照片-今天做了啥”中打开再做此操作，谢谢。");
                    return;
                }
                if (response.uri) {
                    var ext = RNUtils.getImageExt(YrcnApp.Platform.isIOS ? response.origURL : response.path, response.fileName);

                    if (RNUtils.getSandboxFileUri(response.uri)) {
                        _this.state.oneImages.push({ uri: RNUtils.getSandboxFileUri(response.uri), index: _this.state.oneImages.length });
                    } else {
                        _this.state.oneImages.push({ uri: 'data:image/' + ext + ';base64,' + response.data, index: _this.state.oneImages.length });
                    }
                    _this.setState({
                        oneImages: _this.state.oneImages
                    });
                }

                RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
                    RNUtils.getJsonTodayContent(_this._vars.contentDay, function (getJsonTodayContentObj) {
                        var shortPathOneImages = [];
                        for (var _iterator = _this.state.oneImages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                            var _ref;

                            if (_isArray) {
                                if (_i >= _iterator.length) break;
                                _ref = _iterator[_i++];
                            } else {
                                _i = _iterator.next();
                                if (_i.done) break;
                                _ref = _i.value;
                            }

                            var oneImage = _ref;

                            var newOneImage = RNUtils.deepCopy(oneImage);
                            newOneImage.uri = RNUtils.getSandboxFileShortPath(oneImage.uri);
                            shortPathOneImages.push(newOneImage);
                        }
                        if (getJsonTodayContentObj[_this.props.type.typeCode]) {
                            getJsonTodayContentObj[_this.props.type.typeCode].oneImages = shortPathOneImages;
                        } else {
                            getJsonTodayContentObj[_this.props.type.typeCode] = { oneImages: shortPathOneImages };
                        }
                        contentObj[_this.props.type.typeCode] = getJsonTodayContentObj[_this.props.type.typeCode];
                        contentObj[_this.props.type.typeCode].day = _this._vars.contentDay;

                        RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {});
                    });
                });
            });
        }
    }, {
        key: '_lookImage',
        value: function _lookImage(index) {
            global.YrcnApp.now.$NavigatorRoot.lookImage(this.state.oneImages[index], this, index);
        }
    }, {
        key: 'deleteImage',
        value: function deleteImage(index) {
            var _this = this;
            _this.state.oneImages.splice(index, 1);
            RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
                contentObj[_this.props.type.typeCode].oneImages = _this.state.oneImages;
                RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {});
            });
            _this.setState({
                oneImages: _this.state.oneImages
            });
        }
    }, {
        key: '_onPressComplete',
        value: function _onPressComplete() {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'todayIcon' });

            var _this = this;
            var contentOneObj = {
                typeCode: this.props.type.typeCode,
                day: _this._vars.contentDay,
                content: this._vars.text,
                oneImages: this.state.oneImages
            };
            RNAllService.getJson_today_synchronizeContentInfo(contentOneObj);
        }
    }]);
    return WebViewEditTodayContent;
}(_react.Component);

WebViewEditTodayContent.defaultProps = {
    placeholder: "请输入...",
    multiline: true,
    maxLength: 50000,
    placeholderTextColor: '#4e4e4e',
    keyboardType: 'default',
    defaultValue: ''
};

var styles = _reactNative.StyleSheet.create({
    textInput: {
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 15,
        paddingRight: 15,
        paddingTop: 15,
        paddingBottom: 15,
        fontSize: 16,
        color: '#444444',
        borderBottomWidth: 3,
        borderBottomColor: '#eeeeee',
        backgroundColor: '#ffffff',
        marginTop: 3,
        textAlignVertical: 'top'
    }
});

module.exports = WebViewEditTodayContent;
}, 545, null, "YrcnAppProject/src/view/ViewEditTodayContent.js");
__d(/* YrcnAppProject/src/component/NineImagesBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/NineImagesBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var NineImagesBox = _react2.default.createClass({
    displayName: 'NineImagesBox',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        var _this = this;

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            },
            function () {
                if (_this.props.oneImages && _this.props.oneImages.length > 0) {
                    if (_this.props.oneImages.length <= 3) {
                        var maxIndex = _this.props.oneImages.length - 1;
                        return _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.imagesContainer, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 53
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.rowImages, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 54
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(0);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 55
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: _this.props.oneImages[0], style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 56
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(1);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 58
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[1] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 59
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: [styles.oneImageView, { marginRight: 0 }], onPress: function onPress() {
                                            _this._lookImage(2);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 61
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[2] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 62
                                        }
                                    })
                                )
                            )
                        );
                    } else if (_this.props.oneImages.length <= 6) {
                        var maxIndex = _this.props.oneImages.length - 1;
                        return _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.imagesContainer, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 70
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.rowImages, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 71
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(0);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 72
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: _this.props.oneImages[0], style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 73
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(1);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 75
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[1] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 76
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: [styles.oneImageView, { marginRight: 0 }], onPress: function onPress() {
                                            _this._lookImage(2);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 78
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[2] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 79
                                        }
                                    })
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.rowImages, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 82
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(3);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 83
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: _this.props.oneImages[3], style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 84
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(4);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 86
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[4] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 87
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: [styles.oneImageView, { marginRight: 0 }], onPress: function onPress() {
                                            _this._lookImage(5);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 89
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[5] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 90
                                        }
                                    })
                                )
                            )
                        );
                    } else if (_this.props.oneImages.length <= 9) {
                        var maxIndex = _this.props.oneImages.length - 1;
                        return _react2.default.createElement(
                            _reactNative.View,
                            { style: styles.imagesContainer, __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 98
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.rowImages, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 99
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(0);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 100
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: _this.props.oneImages[0], style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 101
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(1);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 103
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[1] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 104
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: [styles.oneImageView, { marginRight: 0 }], onPress: function onPress() {
                                            _this._lookImage(2);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 106
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[2] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 107
                                        }
                                    })
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.rowImages, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 110
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(3);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 111
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: _this.props.oneImages[3], style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 112
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(4);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 114
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[4] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 115
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: [styles.oneImageView, { marginRight: 0 }], onPress: function onPress() {
                                            _this._lookImage(5);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 117
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[5] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 118
                                        }
                                    })
                                )
                            ),
                            _react2.default.createElement(
                                _reactNative.View,
                                { style: styles.rowImages, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 121
                                    }
                                },
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(6);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 122
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: _this.props.oneImages[6], style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 123
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: styles.oneImageView, onPress: function onPress() {
                                            _this._lookImage(7);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 125
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[7] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 126
                                        }
                                    })
                                ),
                                _react2.default.createElement(
                                    _reactNative.TouchableOpacity,
                                    { style: [styles.oneImageView, { marginRight: 0 }], onPress: function onPress() {
                                            _this._lookImage(8);
                                        }, __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 128
                                        }
                                    },
                                    _react2.default.createElement(_reactNative.Image, { source: 1 <= maxIndex ? _this.props.oneImages[8] : null, style: styles.oneImage, resizeMode: 'cover', __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 129
                                        }
                                    })
                                )
                            )
                        );
                    }
                }
            }()
        );
    },
    _lookImage: function _lookImage(index) {
        YrcnApp.now.$ViewRoot.lookImage(this.props.oneImages, this, index, this.props.isHideDelete);
    },
    deleteImage: function deleteImage(index) {
        this.props.parent.deleteImage(index);
    }
});

module.exports = NineImagesBox;

var styles = _reactNative.StyleSheet.create({
    container: {},
    imagesContainer: {
        width: _reactNative.Dimensions.get('window').width,
        flexDirection: 'column',
        justifyContent: 'center',
        alignItems: 'center'
    },
    rowImages: {
        width: _reactNative.Dimensions.get('window').width,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        paddingLeft: 15,
        paddingRight: 15,
        paddingTop: 10,
        paddingBottom: 10
    },
    oneImageView: {
        flex: 1,
        marginRight: 15,
        width: (_reactNative.Dimensions.get('window').width - 15 - 15 - 15 - 15) / 3,
        height: (_reactNative.Dimensions.get('window').width - 15 - 15 - 15 - 15) / 3
    },
    oneImage: {
        width: (_reactNative.Dimensions.get('window').width - 15 - 15 - 15 - 15) / 3,
        height: (_reactNative.Dimensions.get('window').width - 15 - 15 - 15 - 15) / 3
    }
});
}, 546, null, "YrcnAppProject/src/component/NineImagesBox.js");
__d(/* react-native-image-picker/index.js */function(global, require, module, exports) {'use strict';

var _require = require(46            ), // 46 = react-native
    NativeModules = _require.NativeModules;

var ImagePickerManager = NativeModules.ImagePickerManager;


var DEFAULT_OPTIONS = {
  title: 'Select a Photo',
  cancelButtonTitle: 'Cancel',
  takePhotoButtonTitle: 'Take Photo…',
  chooseFromLibraryButtonTitle: 'Choose from Library…',
  quality: 1.0,
  allowsEditing: false,
  permissionDenied: {
    title: 'Permission denied',
    text: 'To be able to take pictures with your camera and choose images from your library.',
    reTryTitle: 're-try',
    okTitle: 'I\'m sure'
  }
};

module.exports = babelHelpers.extends({}, ImagePickerManager, {
  showImagePicker: function showImagePicker(options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = {};
    }
    return ImagePickerManager.showImagePicker(babelHelpers.extends({}, DEFAULT_OPTIONS, options), callback);
  }
});
}, 547, null, "react-native-image-picker/index.js");
__d(/* YrcnAppProject/src/navigator/NavigatorToday.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorToday.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ScrollViewToday = require(501                                 ); // 501 = ./../scrollview/ScrollViewToday.js

var navigationBarRouteMapper = {
    titleStr: "今天",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 15
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 20
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "显设", onPress: this._onPressRightButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 25
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {},
    _onPressRightButton: function _onPressRightButton() {
        global.YrcnApp.now.rootNavigator.push({ name: "NavigatorSettingsInner", indexName: "ScrollViewSettingTodayType", indexTitle: '显示设置' });
    }
};

var NavigatorToday = _react2.default.createClass({
    displayName: 'NavigatorToday',

    getInitialState: function getInitialState() {
        return {
            isShowNavigationBarLeftButton: false,
            isChange: false
        };
    },
    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 47
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 54
                }
            });
        };
    },
    showRightButton: function showRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "显设", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            });
        };
        this.setState({
            isChange: true
        });
    },
    hideRightButton: function hideRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            });
        };
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(_reactNative.Navigator, {
            initialRoute: { name: 'ScrollViewToday', index: 0, title: "今天" },
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                }
            }),
            renderScene: this._renderScene,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 78
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;
        var Component = null;
        var props = {};
        switch (route.name) {
            default:
                navigationBarRouteMapper.isShowNavigationBarLeftButton = false;
                props.contentDay = global.YrcnApp.utils.nowDate();
                props.ViewEdit = "ViewEditTodayContent";
                props.NavigatorInner = "NavigatorTodayInner";
                props.scrollView = "scrollViewToday";
                props.backgroundColor = "#ffffff";
                Component = ScrollViewToday;
        }
        return _react2.default.createElement(Component, babelHelpers.extends({
            parent_route: route,
            parent_navigator: navigator,
            parent: this }, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 105
            }
        }));
    }
});

module.exports = NavigatorToday;
}, 548, null, "YrcnAppProject/src/navigator/NavigatorToday.js");
__d(/* YrcnAppProject/src/navigator/NavigatorTodayInner.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorTodayInner.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ViewEditTodayContent = require(545                             ); // 545 = ./../view/ViewEditTodayContent
var ViewEditWorkingLog = require(550                           ); // 550 = ./../view/ViewEditWorkingLog
var ScrollViewShowTodayContent = require(551                                            ); // 551 = ./../scrollview/ScrollViewShowTodayContent.js
var ScrollViewShowTodayLlgBetweenContent = require(553                                                      ); // 553 = ./../scrollview/ScrollViewShowTodayLlgBetweenContent.js
var ScrollViewSearchTodayContent = require(554                                              ); // 554 = ./../scrollview/ScrollViewSearchTodayContent.js
var ScrollViewShowTodaysContent = require(558                                             ); // 558 = ./../scrollview/ScrollViewShowTodaysContent.js
var CameraRollView = require(559                             ); // 559 = ../component/CameraRollView.js

var navigationBarRouteMapper = {
    titleStr: "",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 30
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", onPress: this._onPressLeftButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 35
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "完成", onPress: this._onPressRightButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 40
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {
        if (navigationBarRouteMapper.route.name == "ViewEditTodayContent") {
            global.YrcnApp.now.rootNavigator.pop();
            global.YrcnApp.now.scrollViewToday.refreshView();
        } else if (navigationBarRouteMapper.route.name == "ViewEditWorkingLog") {
            global.YrcnApp.utils.confirm("是否提交", function () {}, "温馨提示", function () {
                global.YrcnApp.now.rootNavigator.pop();
            });
        }
    },
    _onPressRightButton: function _onPressRightButton() {
        if (navigationBarRouteMapper.route.name == "ViewEditTodayContent") {
            global.YrcnApp.now.rootNavigator.pop();
            global.YrcnApp.now.scrollViewToday.refreshView();
        } else if (navigationBarRouteMapper.route.name == "ViewEditWorkingLog") {
            global.YrcnApp.utils.confirm("是否提交", function () {}, "温馨提示", function () {
                global.YrcnApp.now.rootNavigator.pop();
            });
        }
    }
};

var NavigatorTodayInner = _react2.default.createClass({
    displayName: 'NavigatorTodayInner',

    getInitialState: function getInitialState() {
        return {};
    },
    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", onPress: this._onPressLeftButton, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 82
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 89
                }
            });
        };
    },
    showRightButton: function showRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "完成", onPress: this._onPressRightButton, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 96
                }
            });
        };
    },
    hideRightButton: function hideRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 103
                }
            });
        };
    },
    render: function render() {
        var _this = this;
        var initRoute = { name: this.props.indexName, index: 0, title: this.props.indexTitle };
        return _react2.default.createElement(_reactNative.Navigator, {
            initialRoute: initRoute,
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 115
                }
            }),
            renderScene: this._renderScene,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 112
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;
        navigationBarRouteMapper.route = route;
        var Component = null;
        var props = {};
        switch (route.name) {
            case "ViewEditTodayContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                props.type = this.props.type;
                props.coreObj = this.props.coreObj;
                Component = ViewEditTodayContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "ViewEditWorkingLog":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                Component = ViewEditWorkingLog;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "ScrollViewShowTodayContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                props.day = this.props.day;
                Component = ScrollViewShowTodayContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "ScrollViewShowTodayLlgBetweenContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                props.between = this.props.between;
                Component = ScrollViewShowTodayLlgBetweenContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "CameraRollView":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                Component = CameraRollView;
                break;
            case "ScrollViewSearchTodayContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                Component = ScrollViewSearchTodayContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "ScrollViewShowTodaysContent":
                props.contentObjArray = route.contentObjArray;
                Component = ScrollViewShowTodaysContent;
                break;
        }

        return _react2.default.createElement(Component, babelHelpers.extends({
            parent_route: route,
            parent_navigator: navigator,
            parent: this }, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 177
            }
        }));
    }
});

module.exports = NavigatorTodayInner;
}, 549, null, "YrcnAppProject/src/navigator/NavigatorTodayInner.js");
__d(/* YrcnAppProject/src/view/ViewEditWorkingLog.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewEditWorkingLog.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var FormBox = require(533                   ); // 533 = ../component/FormBox
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var WebViewEditTodayContent = _react2.default.createClass({
    displayName: 'WebViewEditTodayContent',

    _vars: {
        param: {},
        contentDay: YrcnApp.utils.nowDate()
    },
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        var _this = this;
        this._vars.param = {
            content: this.props.coreObj.content || "",
            overtime: this.props.coreObj.overtime || false,
            overtimeDesp: this.props.coreObj.overtimeDesp || "",
            qingjia: this.props.coreObj.qingjia || false,
            qingjiaDesp: this.props.coreObj.qingjiaDesp || ""
        };

        return {
            overtime: this.props.coreObj.overtime || false,
            qingjia: this.props.coreObj.qingjia || false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 56
                }
            },
            _react2.default.createElement(ViewHeader, { title: this.props.title, onPressLeft: this._onPressLeft, leftText: '\u5B8C\u6210', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            }),
            _react2.default.createElement(
                FormBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 58
                    }
                },
                _react2.default.createElement(FormBox.InputArea, { placeholder: "请输入工作内容...", keyboardType: "default", maxLength: 2000,
                    parent: this, paramName: "content", height: 140, multiline: true, inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e', defaultValue: this.props.coreObj.content, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 59
                    }
                }),
                _react2.default.createElement(FormBox.Switch, { parent: this, paramName: "overtime", textColor: '#01bbfc', text: '\u662F\u5426\u52A0\u73ED', is: this.props.coreObj.overtime, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 61
                    }
                }),
                function () {
                    if (_this.state.overtime) {
                        return _react2.default.createElement(FormBox.InputArea, { placeholder: "请输入加班描述...", keyboardType: "default", maxLength: 2000,
                            parent: _this, paramName: "overtimeDesp", height: 80, multiline: true, inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e',
                            defaultValue: _this.props.coreObj.overtimeDesp, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 65
                            }
                        });
                    }
                }(),
                _react2.default.createElement(FormBox.Switch, { parent: this, paramName: "qingjia", textColor: '#01bbfc', text: '\u662F\u5426\u8BF7\u5047/\u8C03\u4F11', is: this.props.coreObj.qingjia, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 71
                    }
                }),
                function () {
                    if (_this.state.qingjia) {
                        return _react2.default.createElement(FormBox.InputArea, { placeholder: "请输入请假/调休描述...", keyboardType: "default", maxLength: 2000,
                            parent: _this, paramName: "qingjiaDesp", height: 80, multiline: true, inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e',
                            defaultValue: _this.props.coreObj.qingjiaDesp, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 75
                            }
                        });
                    }
                }()
            )
        );
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue;
        if (paramName == "overtime") {
            this.setState({ overtime: paramValue });
        } else if (paramName == "qingjia") {
            this.setState({ qingjia: paramValue });
        }
    },
    _onPressLeft: function _onPressLeft() {
        var _this = this;
        YrcnApp.utils.confirm("您确认要提交么？", function () {
            var contentOneObj = {
                day: _this._vars.contentDay,
                content: _this._vars.param['content'],
                overtime: _this._vars.param['overtime'],
                overtimeDesp: _this._vars.param['overtimeDesp'],
                qingjia: _this._vars.param['qingjia'],
                qingjiaDesp: _this._vars.param['qingjiaDesp'],
                $key: _this.props.coreObj.$key,
                typeCode: _this.props.coreObj.$key
            };
            RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
                contentObj[YrcnApp.configs.AS_KEY_WORKING_LOG] = contentOneObj;
                RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {
                    YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'todayIcon' });
                });
            });

            RNAllService.getJson_today_synchronizeContentInfo(contentOneObj);
        }, "温馨提示", function () {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'todayIcon' });
        });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    }
});

module.exports = WebViewEditTodayContent;
}, 550, null, "YrcnAppProject/src/view/ViewEditWorkingLog.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewShowTodayContent.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewShowTodayContent.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var NineImagesBox = require(546                            ); // 546 = ../component/NineImagesBox.js
var NoRecordViewBox = require(514                              ); // 514 = ../component/NoRecordViewBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js
var ViewContent = require(552                          ); // 552 = ../component/ViewContent.js

var ScrollViewShowTodayContent = _react2.default.createClass({
    displayName: 'ScrollViewShowTodayContent',

    _vars: {
        contentObj: null
    },
    getInitialState: function getInitialState() {
        var _this = this;
        var now = moment(this.props.day);
        _this._vars.title = now.format("YYYY年MM月DD日 dddd 第wo 第DDDo");
        var lunarCalendar = RNLunarCalendar.solarToLunar(now.year(), now.month() + 1, now.date());
        _this._vars.introduce = "生肖【" + lunarCalendar.zodiac + "】";
        _this._vars.introduce += "农历【" + lunarCalendar.lunarMonthName + lunarCalendar.lunarDayName + "】";
        if (lunarCalendar.lunarFestival) {
            _this._vars.introduce += lunarCalendar.lunarFestival;
        }
        if (lunarCalendar.term) {
            _this._vars.introduce += lunarCalendar.term;
        }

        return {
            isShowLoadingView: true,
            fontSize: 13,
            lineHeight: 10,
            paragraphBackgroundColor: '#ffffff',
            paragraphColor: '#444444'
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNUtils.getJsonTodayContent(this.props.day, function (contentObj) {
            YrcnApp.utils.logObj("ScrollViewShowTodayContent componentDidMount", contentObj);
            _this._vars.contentObj = contentObj;
            _this.setState({
                isShowLoadingView: false
            });
        });
    },

    shouldComponentUpdate: function shouldComponentUpdate() {
        if (this.state.isShowLoadingView) {
            return true;
        } else {
            return false;
        }
    },
    render: function render() {
        var _this = this;
        console.log("ScrollViewShowTodayContent render");
        return _react2.default.createElement(
            _reactNative.ScrollView,
            {
                style: styles.scrollViewContainer, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 92
                }
            },
            _react2.default.createElement(ViewHeader, { title: this.props.title, onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 94
                }
            }),
            _react2.default.createElement(TitleIntroduceBox, { title: _this._vars.title, introduce: _this._vars.introduce, noNumberOfLines: true, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 95
                }
            }),
            function () {
                if (_this.state.isShowLoadingView) {
                    return _react2.default.createElement(ACViewBox, {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 99
                        }
                    });
                } else {
                    return _this._renderContent();
                }
            }()
        );
    },
    _renderContent: function _renderContent() {
        var _this = this;
        var contentArray = [];
        for (var e in this._vars.contentObj) {
            console.log(e);
            if (RNUtils.isTrueContentObj(e, this._vars.contentObj)) {
                this._vars.contentObj[e].e = e;
                contentArray.push(this._vars.contentObj[e]);
            }
        }
        if (contentArray.length == 0) {
            return _react2.default.createElement(NoRecordViewBox, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 120
                }
            });
        }
        var retArray = contentArray.map(function (d, i) {
            if (d.e == YrcnApp.configs.AS_KEY_WORKING_LOG) {
                d.type = "workingLog";
            } else if (d.e == YrcnApp.configs.AS_KEY_STUDY) {
                d.type = "study";
            } else if (d.e == YrcnApp.configs.AS_KEY_SPORT) {
                d.type = "sport";
            } else {
                d.type = "sectionContent";
            }
            return _this._renderRow(d);
        });

        return retArray;
    },
    _onPressLi: function _onPressLi(liIndex) {
        var _this = this;
    },
    refreshView: function refreshView() {
        var _this = this;
    },

    _renderRow: function _renderRow(rowData, sectionID, rowID) {
        var _this = this;
        var key = Math.uuidFast();
        if (rowData.type == "sectionContent") {
            return _react2.default.createElement(
                _reactNative.View,
                { key: key, style: [styles.paragraphView, { backgroundColor: '#ffffff' }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 154
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.text, { color: '#444444' }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 155
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 156
                            }
                        },
                        rowData.content
                    )
                ),
                function () {
                    if (rowData.oneImages) {
                        if (Array.isArray(rowData.oneImages)) {
                            for (var _iterator = rowData.oneImages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator']();;) {
                                var _ref;

                                if (_isArray) {
                                    if (_i >= _iterator.length) break;
                                    _ref = _iterator[_i++];
                                } else {
                                    _i = _iterator.next();
                                    if (_i.done) break;
                                    _ref = _i.value;
                                }

                                var oneImage = _ref;

                                oneImage.uri = RNUtils.getSandboxFileLongPath(oneImage.uri);
                            }
                        } else {
                            var newOneImages = [];
                            for (var oneImagekey in rowData.oneImages) {
                                var oneImage = rowData.oneImages[oneImagekey];
                                oneImage.uri = RNUtils.getSandboxFileLongPath(oneImage.uri);
                                newOneImages.push(oneImage);
                            }
                            rowData.oneImages = newOneImages;
                        }
                        return _react2.default.createElement(NineImagesBox, { oneImages: rowData.oneImages, isHideDelete: true, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 174
                            }
                        });
                    }
                }()
            );
        } else if (rowData.type == "workingLog") {
            return _react2.default.createElement(
                _reactNative.View,
                { key: key, style: [styles.paragraphView, { backgroundColor: '#db432a' }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 182
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.text, { color: '#ffffff' }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 183
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 184
                            }
                        },
                        rowData.content
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 185
                            }
                        },
                        rowData.overtime ? '\r\n加班：' + rowData.overtimeDesp : ''
                    ),
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 186
                            }
                        },
                        rowData.qingjia ? '\r\n请假：' + rowData.qingjiaDesp : ''
                    )
                )
            );
        } else if (rowData.type == "study") {
            return _react2.default.createElement(
                _reactNative.View,
                { key: key, style: [styles.paragraphView, { backgroundColor: '#25c20b' }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 192
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: [styles.text, { color: '#ffffff' }], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 193
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        {
                            __source: {
                                fileName: _jsxFileName,
                                lineNumber: 194
                            }
                        },
                        rowData.content
                    )
                )
            );
        } else if (rowData.type == "sport") {
            var contetnA = [];
            for (var e in rowData) {
                if (e.indexOf('Desp') == -1 && rowData[e] && e != 'day' && e != 'content' && e != 'e' && e != 'type' && e != '$key' && e != 'typeCode') {
                    contetnA.push({
                        content: e + ' : ' + rowData[e + 'Desp']
                    });
                }
            }
            return _react2.default.createElement(
                _reactNative.View,
                { key: key, style: [styles.paragraphView, { backgroundColor: '#1c9c07' }], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 208
                    }
                },
                contetnA.map(function (d) {
                    return _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.text, { color: '#ffffff' }], key: d.content, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 212
                            }
                        },
                        d.content
                    );
                })
            );
        }
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'llgIcon' });
    }
});

var styles = _reactNative.StyleSheet.create({
    scrollViewContainer: {
        backgroundColor: '#ffffff'
    },
    paragraphView: {
        paddingLeft: 0,
        paddingRight: 0
    },
    paragraphText: {
        fontSize: 13
    },
    text: {
        fontSize: 13,
        lineHeight: 30,
        textAlignVertical: 'bottom',
        marginTop: 0,
        textAlign: 'left',
        letterSpacing: 0,
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 15,
        paddingRight: 15,
        marginBottom: 0,
        color: '#333333',
        borderWidth: 0
    }
});

module.exports = ScrollViewShowTodayContent;
}, 551, null, "YrcnAppProject/src/scrollview/ScrollViewShowTodayContent.js");
__d(/* YrcnAppProject/src/component/ViewContent.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/ViewContent.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactTimerMixin = require(253                ); // 253 = react-timer-mixin

var _reactTimerMixin2 = babelHelpers.interopRequireDefault(_reactTimerMixin);

var ReactPropTypes = require(39                        ); // 39 = react/lib/ReactPropTypes
var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var NoRecordViewBox = require(514                              ); // 514 = ../component/NoRecordViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var NineImagesBox = require(546                            ); // 546 = ../component/NineImagesBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js
var ViewContent = require(552                          ); // 552 = ../component/ViewContent.js

var ViewContent = _react2.default.createClass({
    displayName: 'ViewContent',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        var _this = this;
        var key = Math.uuidFast();
        var contentObj = this.props.contentObj;
        var day = moment(contentObj.day);
        return _react2.default.createElement(
            _reactNative.View,
            { key: key, style: styles.paragraphView, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: styles.paragraphViewWeek, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 71
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.paragraphViewWeekText, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 72
                        }
                    },
                    day.format("dddd")
                )
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: styles.paragraphViewDay, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 74
                    }
                },
                _react2.default.createElement(
                    _reactNative.Text,
                    { style: styles.paragraphViewDayText, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 75
                        }
                    },
                    contentObj.day
                )
            ),
            function () {
                if (contentObj.contentArray && contentObj.contentArray.length > 0) {
                    return contentObj.contentArray.map(function (d, i) {
                        if (d.value.content || d.value.oneImages || d.value.overtime || d.value.qingjia) {
                            if (d.value.oneImages && Array.isArray(d.value.oneImages) && d.value.oneImages.length > 0) {
                                d.value.oneImages = d.value.oneImages || [];
                                for (var _iterator = d.value.oneImages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? typeof Symbol === 'function' ? Symbol.iterator : '@@iterator' : '@@iterator']();;) {
                                    var _ref;

                                    if (_isArray) {
                                        if (_i >= _iterator.length) break;
                                        _ref = _iterator[_i++];
                                    } else {
                                        _i = _iterator.next();
                                        if (_i.done) break;
                                        _ref = _i.value;
                                    }

                                    var oneImage = _ref;

                                    oneImage.uri = RNUtils.getSandboxFileLongPath(oneImage.uri);
                                }
                            } else if (d.value.oneImages) {
                                var newOneImages = [];
                                for (var oneImagekey in d.value.oneImages) {
                                    var oneImage = d.value.oneImages[oneImagekey];
                                    oneImage.uri = RNUtils.getSandboxFileLongPath(oneImage.uri);
                                    newOneImages.push(oneImage);
                                }
                                d.value.oneImages = newOneImages;
                            }
                            var innerHtml = [];
                            if (d.value.content) {
                                if (d.value.$key == YrcnApp.configs.AS_KEY_STUDY) {
                                    innerHtml.push(_react2.default.createElement(
                                        _reactNative.Text,
                                        { key: 'content_' + key, style: [styles.text, { backgroundColor: '#ffffff', color: '#01bbfc' }], __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 100
                                            }
                                        },
                                        d.value.content
                                    ));
                                } else if (d.value.$key == YrcnApp.configs.AS_KEY_SPORT) {
                                    for (var e in d.value) {
                                        if (e != 'content' && e != 'day' && e != '$key' && e != 'typeCode' && e.indexOf('Desp') == -1) {
                                            innerHtml.push(_react2.default.createElement(
                                                _reactNative.Text,
                                                { key: 'content_' + key + e, style: [styles.text, { backgroundColor: '#ffffff', color: '#00aa00' }], __source: {
                                                        fileName: _jsxFileName,
                                                        lineNumber: 106
                                                    }
                                                },
                                                e + ' : ' + d.value[e + 'Desp']
                                            ));
                                        }
                                    }
                                } else {
                                    innerHtml.push(_react2.default.createElement(
                                        _reactNative.Text,
                                        { key: 'content_' + key, style: [styles.text, { backgroundColor: '#ffffff', color: '#333333' }], __source: {
                                                fileName: _jsxFileName,
                                                lineNumber: 112
                                            }
                                        },
                                        d.value.content
                                    ));
                                }
                            }
                            if (d.value.overtime) {
                                innerHtml.push(_react2.default.createElement(
                                    _reactNative.Text,
                                    { key: key, style: [styles.text, { backgroundColor: '#ffffff', color: '#000000' }], __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 118
                                        }
                                    },
                                    '加班：' + d.value.overtimeDesp
                                ));
                            }
                            if (d.value.qingjia) {
                                innerHtml.push(_react2.default.createElement(
                                    _reactNative.Text,
                                    { key: key, style: [styles.text, { backgroundColor: '#ffffff', color: '#aaaaaa' }], __source: {
                                            fileName: _jsxFileName,
                                            lineNumber: 123
                                        }
                                    },
                                    '请假：' + d.value.qingjiaDesp
                                ));
                            }
                            return _react2.default.createElement(
                                _reactNative.View,
                                { key: i, style: styles.textAndImageView, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 127
                                    }
                                },
                                innerHtml,
                                _react2.default.createElement(NineImagesBox, { oneImages: d.value.oneImages, isHideDelete: true, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 129
                                    }
                                })
                            );
                        }
                    });
                }
            }()
        );
    }
});

module.exports = ViewContent;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    },
    scrollViewContainer: {
        backgroundColor: '#ffffff'
    },
    paragraphView: {
        paddingLeft: 0,
        paddingRight: 0,
        borderBottomColor: '#eeeeee',
        borderBottomWidth: 1.5,
        paddingTop: 50
    },
    paragraphViewWeek: {
        position: 'absolute',
        top: 20,
        left: 15
    },
    paragraphViewWeekText: {
        color: '#01bbfc'
    },
    paragraphViewDay: {
        position: 'absolute',
        top: 20,
        right: 10,
        transform: [{ rotate: '16deg' }],
        borderWidth: 0.5,
        borderColor: '#01bbfc'
    },
    paragraphViewDayText: {
        color: '#01bbfc'
    },
    paragraphText: {
        fontSize: 13
    },
    textAndImageView: {
        paddingTop: 0
    },
    text: {
        fontSize: 13,
        lineHeight: 30,
        textAlignVertical: 'bottom',
        marginTop: 0,
        textAlign: 'left',
        letterSpacing: 0,
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 15,
        paddingRight: 15,
        marginBottom: 0,
        color: '#333333',
        borderWidth: 0
    }
});
}, 552, null, "YrcnAppProject/src/component/ViewContent.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewShowTodayLlgBetweenContent.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewShowTodayLlgBetweenContent.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactTimerMixin = require(253                ); // 253 = react-timer-mixin

var _reactTimerMixin2 = babelHelpers.interopRequireDefault(_reactTimerMixin);

var ReactPropTypes = require(39                        ); // 39 = react/lib/ReactPropTypes
var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var NoRecordViewBox = require(514                              ); // 514 = ../component/NoRecordViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var NineImagesBox = require(546                            ); // 546 = ../component/NineImagesBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js
var ViewContent = require(552                          ); // 552 = ../component/ViewContent.js

var ScrollViewShowTodayLlgBetweenContent = _react2.default.createClass({
    displayName: 'ScrollViewShowTodayLlgBetweenContent',

    _vars: {
        contentObjArray: [],
        ds: new _reactNative.ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
                return r1 !== r2;
            } })
    },
    mixins: [_reactTimerMixin2.default],
    getInitialState: function getInitialState() {
        var _this = this;

        return {
            isShowLoadingView: "-1",
            fontSize: 13,
            lineHeight: 10,
            paragraphBackgroundColor: '#ffffff',
            paragraphColor: '#444444',
            dataSource: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        this.setTimeout(function () {
            var daysArray = [RNUtils.nowDate()];
            if (this.props.between == "7") {
                for (var i = 1; i < 7; i++) {
                    daysArray.push(moment().subtract(i, 'days').format("YYYY-MM-DD"));
                }
            } else if (this.props.between == "14") {
                for (var i = 1; i < 14; i++) {
                    daysArray.push(moment().subtract(i, 'days').format("YYYY-MM-DD"));
                }
            } else if (this.props.between == "1") {
                for (var i = 1; i < 30; i++) {
                    daysArray.push(moment().subtract(i, 'days').format("YYYY-MM-DD"));
                }
            } else if (this.props.between == "3") {
                for (var i = 1; i < 90; i++) {
                    daysArray.push(moment().subtract(i, 'days').format("YYYY-MM-DD"));
                }
            }
            console.log(daysArray);
            var count = 0;

            var _loop = function _loop(d) {
                RNUtils.getJsonTodayContent(d, function (contentObj) {
                    if (contentObj) {
                        var contentArray = [];
                        for (var e in contentObj) {
                            if (RNUtils.isTrueContentObj(e, contentObj)) {
                                contentArray.push({
                                    key: e,
                                    value: contentObj[e]
                                });
                            }
                        }

                        contentObj.day = d;
                        contentObj.contentArray = contentArray;
                        if (contentArray.length > 0) {
                            _this._vars.contentObjArray.push(contentObj);
                        }
                    }
                    count++;
                    innerFunc();
                });
            };

            for (var _iterator = daysArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var d = _ref;

                _loop(d);
            }
            function innerFunc() {
                if (daysArray.length == count) {
                    if (_this._vars.contentObjArray.length == 0) {
                        _this.setState({
                            isShowLoadingView: "0",
                            dataSource: _this._vars.ds.cloneWithRows(_this._vars.contentObjArray)
                        });
                    } else {
                        _this.setState({
                            isShowLoadingView: "1",
                            dataSource: _this._vars.ds.cloneWithRows(_this._vars.contentObjArray)
                        });
                    }
                }
            }
        }, 10);
    },

    componentWillUnmount: function componentWillUnmount() {
        this._vars.contentObjArray = [];
    },
    render: function render() {
        var _this = this;
        var innerView = _this.state.isShowLoadingView == "-1" ? _react2.default.createElement(ACViewBox, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 146
            }
        }) : _this.state.isShowLoadingView == "0" ? _react2.default.createElement(NoRecordViewBox, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 148
            }
        }) : _react2.default.createElement(_reactNative.ListView, {
            dataSource: _this.state.dataSource,
            style: styles.scrollViewContainer,
            renderRow: _this._renderRow,
            enableEmptySections: true,
            initialListSize: 10,
            pageSize: 10,
            onEndReachedThreshold: 0,
            onEndReached: _this._onEndReached,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 149
            }
        });
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 161
                }
            },
            _react2.default.createElement(ViewHeader, { title: this.props.title, onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 162
                }
            }),
            innerView
        );
    },
    _onPressLi: function _onPressLi(liIndex) {
        var _this = this;
    },
    refreshView: function refreshView() {
        var _this = this;
    },
    _onEndReached: function _onEndReached() {
        console.log("_onEndReached");
    },

    _renderRow: function _renderRow(contentObj, sectionID, rowID) {
        console.log(contentObj);
        return _react2.default.createElement(ViewContent, { contentObj: contentObj, __source: {
                fileName: _jsxFileName,
                lineNumber: 182
            }
        });
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'llgIcon' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    },
    scrollViewContainer: {
        backgroundColor: '#ffffff'
    },
    paragraphView: {
        paddingLeft: 0,
        paddingRight: 0,
        borderBottomColor: '#eeeeee',
        borderBottomWidth: 1.5,
        paddingTop: 50
    },
    paragraphViewWeek: {
        position: 'absolute',
        top: 20,
        left: 15
    },
    paragraphViewWeekText: {
        color: '#01bbfc'
    },
    paragraphViewDay: {
        position: 'absolute',
        top: 20,
        right: 10,
        transform: [{ rotate: '16deg' }],
        borderWidth: 0.5,
        borderColor: '#01bbfc'
    },
    paragraphViewDayText: {
        color: '#01bbfc'
    },
    paragraphText: {
        fontSize: 13
    },
    textAndImageView: {
        paddingTop: 0
    },
    text: {
        fontSize: 13,
        lineHeight: 30,
        textAlignVertical: 'bottom',
        marginTop: 0,
        textAlign: 'justify',
        letterSpacing: 0,
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 15,
        paddingRight: 15,
        marginBottom: 0,
        color: '#333333',
        borderWidth: 0
    }
});

module.exports = ScrollViewShowTodayLlgBetweenContent;
}, 553, null, "YrcnAppProject/src/scrollview/ScrollViewShowTodayLlgBetweenContent.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewSearchTodayContent.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewSearchTodayContent.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var CustomActionSheet = require(555                               ); // 555 = react-native-custom-action-sheet

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var NineImagesBox = require(546                            ); // 546 = ../component/NineImagesBox.js
var ButtonsBox = require(525                         ); // 525 = ../component/ButtonsBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ScrollViewSearchTodayContent = function (_Component) {
    babelHelpers.inherits(ScrollViewSearchTodayContent, _Component);

    function ScrollViewSearchTodayContent(props) {
        babelHelpers.classCallCheck(this, ScrollViewSearchTodayContent);

        var _this2 = babelHelpers.possibleConstructorReturn(this, (ScrollViewSearchTodayContent.__proto__ || Object.getPrototypeOf(ScrollViewSearchTodayContent)).call(this, props));

        _this2._vars = {
            contentObjArray: [],
            ds: new _reactNative.ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
                    return r1 !== r2;
                } })
        };
        _this2.state = {
            searchKey: '',
            beginDateVal: RNUtils.lastMonth3Date(),
            endDateVal: RNUtils.nowDate(),
            isPressingSearch: false,
            datePickerModalVisible: false,
            showDate: 'begin'
        };

        _this2._onPressSearch = _this2._onPressSearch.bind(_this2);
        _this2._showDatePicker = _this2._showDatePicker.bind(_this2);
        _this2._onDateChange = _this2._onDateChange.bind(_this2);
        _this2._onSubmitEditingSearch = _this2._onSubmitEditingSearch.bind(_this2);
        return _this2;
    }

    babelHelpers.createClass(ScrollViewSearchTodayContent, [{
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _this = this;
        }
    }, {
        key: 'render',
        value: function render() {
            var _this3 = this;

            var _this = this;

            var datePickerModal = this.state.datePickerModalVisible && YrcnApp.Platform.isIOS ? _react2.default.createElement(
                CustomActionSheet,
                {
                    modalVisible: this.state.datePickerModalVisible,
                    onCancel: function onCancel() {
                        return _this3._showDatePicker();
                    }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 73
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.datePickerContainer, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 76
                        }
                    },
                    _react2.default.createElement(_reactNative.DatePickerIOS, {
                        mode: "date",
                        date: new Date(this.state.showDate == 'begin' ? this.state.beginDateVal : this.state.endDateVal),
                        onDateChange: this._onDateChange,
                        style: { borderWidth: 0, width: _reactNative.Dimensions.get('window').width - 20 },
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 77
                        }
                    })
                )
            ) : null;

            return _react2.default.createElement(
                _reactNative.ScrollView,
                {
                    style: styles.scrollViewContainer, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 88
                    }
                },
                _react2.default.createElement(ViewHeader, { title: this.props.title, onPressLeft: this._onPressLeft, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 90
                    }
                }),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.searchInputView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 91
                        }
                    },
                    _react2.default.createElement(_reactNative.TextInput, { keyboardType: "default", returnKeyType: 'search', placeholder: "请输入关键字...", style: styles.search_textInput,
                        onChangeText: function onChangeText(text) {
                            return _this3.state.searchKey = text;
                        }, onSubmitEditing: this._onSubmitEditingSearch, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 92
                        }
                    })
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.dateInputView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 95
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: [styles.dateInputOneView], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 96
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this._showDatePicker('begin');
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 97
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: [styles.date_textInput, { textAlign: 'right' }], __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 99
                                    }
                                },
                                _this.state.beginDateVal
                            )
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.dateInputCenterView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 101
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [{ textAlign: 'center', paddingBottom: 3 }], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 102
                                }
                            },
                            '\u81F3'
                        )
                    ),
                    _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.dateInputOneView, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 104
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.TouchableOpacity,
                            {
                                onPress: function onPress() {
                                    return _this._showDatePicker('end');
                                },
                                __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 105
                                }
                            },
                            _react2.default.createElement(
                                _reactNative.Text,
                                { style: styles.date_textInput, __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 107
                                    }
                                },
                                _this.state.endDateVal
                            )
                        )
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.searchBtnView], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 110
                        }
                    },
                    _react2.default.createElement(
                        ButtonsBox,
                        { marginBottom: 0, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 111
                            }
                        },
                        _react2.default.createElement(ButtonsBox.Button, { btnText: "开始搜索", onPress: this._onPressSearch, isPressing: this.state.isPressingSearch, backgroundColor: '#01bbfc', btnColor: '#ffffff', __source: {
                                fileName: _jsxFileName,
                                lineNumber: 112
                            }
                        })
                    )
                ),
                datePickerModal
            );
        }
    }, {
        key: '_onPressSearch',
        value: function _onPressSearch() {
            var _this = this;
            _this._vars.contentObjArray = [];

            if (!_this.state.beginDateVal.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
                RNUtils.alert("开始时间不能为空且格式必须为0000-00-00");
                return;
            }
            if (!_this.state.endDateVal.match(/^[0-9]{4}-[0-9]{2}-[0-9]{2}$/)) {
                RNUtils.alert("结束时间不能为空且格式必须为0000-00-00");
                return;
            }

            RNUtils.getKeysTodayContent(function (keys) {
                console.log(keys);
                var searchKeys = [];
                for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                    var _ref;

                    if (_isArray) {
                        if (_i >= _iterator.length) break;
                        _ref = _iterator[_i++];
                    } else {
                        _i = _iterator.next();
                        if (_i.done) break;
                        _ref = _i.value;
                    }

                    var key = _ref;

                    if (key == _this.state.beginDateVal || key == _this.state.endDateVal) {
                        searchKeys.push(key);
                        continue;
                    }
                    if (RNUtils.isAfter(key, _this.state.endDateVal)) {
                        continue;
                    } else if (RNUtils.isBefore(key, _this.state.endDateVal)) {
                        if (RNUtils.isAfter(key, _this.state.beginDateVal)) {
                            searchKeys.push(key);
                        } else {
                            break;
                        }
                    }
                }
                console.log(searchKeys);
                var count = 0;
                if (_this.state.searchKey) {
                    for (var _iterator2 = searchKeys, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                        var _ref2;

                        if (_isArray2) {
                            if (_i2 >= _iterator2.length) break;
                            _ref2 = _iterator2[_i2++];
                        } else {
                            _i2 = _iterator2.next();
                            if (_i2.done) break;
                            _ref2 = _i2.value;
                        }

                        var day = _ref2;

                        RNUtils.getJsonTodayContent(day, function (contentObj) {
                            if (contentObj) {
                                var contentArray = [];
                                var aDay = day;
                                for (var e in contentObj) {
                                    if (contentObj[e].day) {
                                        aDay = contentObj[e].day;
                                    }
                                    if (RNUtils.isTrueContentObj(e, contentObj)) {
                                        contentArray.push({
                                            key: e,
                                            value: contentObj[e]
                                        });
                                    }
                                }

                                contentObj.contentArray = contentArray;
                                if (contentArray.length > 0 && RNUtils.toString(contentArray).indexOf(_this.state.searchKey) > -1) {
                                    _this._vars.contentObjArray.push(contentObj);
                                }
                            }
                            count++;
                            innerFunc();
                        });
                    }

                    if (searchKeys.length == 0) {
                        RNUtils.alert("没有搜索到任何信息");
                    }
                } else {
                    for (var _iterator3 = searchKeys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                        var _ref3;

                        if (_isArray3) {
                            if (_i3 >= _iterator3.length) break;
                            _ref3 = _iterator3[_i3++];
                        } else {
                            _i3 = _iterator3.next();
                            if (_i3.done) break;
                            _ref3 = _i3.value;
                        }

                        var day = _ref3;

                        RNUtils.getJsonTodayContent(day, function (contentObj) {
                            if (contentObj) {
                                var contentArray = [];
                                var aDay = day;
                                for (var e in contentObj) {
                                    if (contentObj[e].day) {
                                        aDay = contentObj[e].day;
                                    }
                                    if (RNUtils.isTrueContentObj(e, contentObj)) {
                                        contentArray.push({
                                            key: e,
                                            value: contentObj[e]
                                        });
                                    }
                                }

                                console.log("aDay=" + aDay);
                                contentObj.contentArray = contentArray;
                                if (contentArray.length > 0) {
                                    _this._vars.contentObjArray.push(contentObj);
                                }
                            }
                            count++;
                            innerFunc();
                        });
                    }

                    if (searchKeys.length == 0) {
                        RNUtils.alert("没有搜索到任何信息");
                    }
                }
                function innerFunc() {
                    if (searchKeys.length == count) {
                        if (_this._vars.contentObjArray.length == 0) {
                            RNUtils.alert("没有搜索到任何信息");
                            return;
                        }

                        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewShowTodaysContent', contentObjArray: _this._vars.contentObjArray, viewTitle: "搜索" });
                    }
                }
            });
        }
    }, {
        key: '_showDatePicker',
        value: function _showDatePicker(showDate) {
            var date, _ref4, action, year, month, day, d;

            return regeneratorRuntime.async(function _showDatePicker$(_context) {
                while (1) {
                    switch (_context.prev = _context.next) {
                        case 0:
                            if (!YrcnApp.Platform.isIOS) {
                                _context.next = 4;
                                break;
                            }

                            this.setState({
                                datePickerModalVisible: !this.state.datePickerModalVisible,
                                showDate: showDate
                            });
                            _context.next = 20;
                            break;

                        case 4:
                            _context.prev = 4;
                            date = null;

                            if (showDate == "begin") {
                                date = moment(this.state.beginDateVal).toDate();
                            } else {
                                date = moment(this.state.endDateVal).toDate();
                            }
                            _context.next = 9;
                            return regeneratorRuntime.awrap(_reactNative.DatePickerAndroid.open({
                                date: date
                            }));

                        case 9:
                            _ref4 = _context.sent;
                            action = _ref4.action;
                            year = _ref4.year;
                            month = _ref4.month;
                            day = _ref4.day;

                            if (action !== _reactNative.DatePickerAndroid.dismissedAction) {
                                console.log(year);
                                console.log(month);
                                console.log(day);
                                d = moment(new Date(year, month, day));

                                if (showDate == "begin") {
                                    this.setState({ beginDateVal: d.format("YYYY-MM-DD") });
                                } else {
                                    this.setState({ endDateVal: d.format("YYYY-MM-DD") });
                                }
                            }
                            _context.next = 20;
                            break;

                        case 17:
                            _context.prev = 17;
                            _context.t0 = _context['catch'](4);

                            console.warn('Cannot open date picker', _context.t0);

                        case 20:
                        case 'end':
                            return _context.stop();
                    }
                }
            }, null, this, [[4, 17]]);
        }
    }, {
        key: '_onDateChange',
        value: function _onDateChange(date) {
            if (this.state.showDate == "begin") {
                this.setState({ beginDateVal: moment(date).format("YYYY-MM-DD") });
            } else {
                this.setState({ endDateVal: moment(date).format("YYYY-MM-DD") });
            }
        }
    }, {
        key: '_onPressLeft',
        value: function _onPressLeft() {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'llgIcon' });
        }
    }, {
        key: '_onSubmitEditingSearch',
        value: function _onSubmitEditingSearch() {
            this._onPressSearch();
        }
    }]);
    return ScrollViewSearchTodayContent;
}(_react.Component);

var styles = _reactNative.StyleSheet.create({
    scrollViewContainer: {
        backgroundColor: '#ffffff'
    },
    searchInputView: {
        width: _reactNative.Dimensions.get('window').width,
        borderBottomWidth: 1,
        borderBottomColor: '#eeeeee'
    },
    dateInputView: {
        width: _reactNative.Dimensions.get('window').width,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        borderBottomWidth: 1,
        borderBottomColor: '#eeeeee',
        marginTop: 20,
        paddingBottom: 10
    },
    dateInputOneView: {
        flex: 3,
        borderWidth: 0
    },
    dateInputCenterView: {
        flex: 1
    },
    search_textInput: {
        width: _reactNative.Dimensions.get('window').width,
        height: 60,
        paddingLeft: 15,
        paddingRight: 15,
        paddingTop: 15,
        paddingBottom: 0,
        fontSize: 16,
        color: '#01bbfc'
    },
    date_textInput: {
        paddingLeft: 10,
        paddingRight: 15,
        fontSize: 16,
        color: '#01bbfc',
        borderBottomWidth: 3,
        borderBottomColor: '#444444'
    },
    searchBtnView: {
        width: _reactNative.Dimensions.get('window').width
    },
    datePickerContainer: {
        flex: 1,
        borderRadius: 5,
        justifyContent: 'center',
        alignItems: 'center',
        backgroundColor: 'white',
        marginBottom: 10
    }
});

module.exports = ScrollViewSearchTodayContent;
}, 554, null, "YrcnAppProject/src/scrollview/ScrollViewSearchTodayContent.js");
__d(/* react-native-custom-action-sheet/index.js */function(global, require, module, exports) {'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-custom-action-sheet/index.js';
var React = require(12     ); // 12 = react
var ReactNative = require(46            ); // 46 = react-native
var Button = require(556       ); // 556 = ./button
var FadeInView = require(557             ); // 557 = ./fade_in_view
var Modal = ReactNative.Modal,
    StyleSheet = ReactNative.StyleSheet,
    TouchableOpacity = ReactNative.TouchableOpacity,
    View = ReactNative.View;


var ActionModal = React.createClass({
  displayName: 'ActionModal',

  render: function render() {
    return React.createElement(
      FadeInView,
      { visible: this.props.modalVisible, backgroundColor: this.props.backgroundColor, __source: {
          fileName: _jsxFileName,
          lineNumber: 12
        }
      },
      React.createElement(
        Modal,
        {
          animationType: 'slide',
          transparent: true,
          visible: this.props.modalVisible,
          onRequestClose: this.props.onCancel, __source: {
            fileName: _jsxFileName,
            lineNumber: 13
          }
        },
        React.createElement(
          View,
          { style: styles.modalContainer, __source: {
              fileName: _jsxFileName,
              lineNumber: 18
            }
          },
          React.createElement(TouchableOpacity, { style: styles.container, onPress: this.props.onCancel, __source: {
              fileName: _jsxFileName,
              lineNumber: 19
            }
          }),
          this.props.children,
          React.createElement(Button, { onPress: this.props.onCancel, text: this.props.buttonText || "Cancel", __source: {
              fileName: _jsxFileName,
              lineNumber: 21
            }
          })
        )
      )
    );
  }
});

var styles = StyleSheet.create({
  container: {
    flex: 1
  },
  modalContainer: {
    flex: 1,
    padding: 8,
    paddingBottom: 0,
    justifyContent: "flex-end"
  }
});

module.exports = ActionModal;
}, 555, null, "react-native-custom-action-sheet/index.js");
__d(/* react-native-custom-action-sheet/button.js */function(global, require, module, exports) {'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-custom-action-sheet/button.js';
var React = require(12     ); // 12 = react
var ReactNative = require(46            ); // 46 = react-native
var StyleSheet = ReactNative.StyleSheet,
    Text = ReactNative.Text,
    TouchableOpacity = ReactNative.TouchableOpacity,
    View = ReactNative.View;


var Button = React.createClass({
  displayName: 'Button',

  render: function render() {
    return React.createElement(
      TouchableOpacity,
      { style: styles.button, onPress: this.props.onPress, __source: {
          fileName: _jsxFileName,
          lineNumber: 10
        }
      },
      React.createElement(
        Text,
        { style: styles.buttonText, __source: {
            fileName: _jsxFileName,
            lineNumber: 11
          }
        },
        this.props.text
      )
    );
  }
});

var styles = StyleSheet.create({
  buttonText: {
    color: '#0069d5',
    alignSelf: 'center',
    fontSize: 18
  },
  button: {
    height: 36,
    backgroundColor: 'white',
    borderColor: 'white',
    borderWidth: 1,
    borderRadius: 6,
    marginBottom: 10,
    alignSelf: 'stretch',
    justifyContent: 'center'
  }
});

module.exports = Button;
}, 556, null, "react-native-custom-action-sheet/button.js");
__d(/* react-native-custom-action-sheet/fade_in_view.js */function(global, require, module, exports) {'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/node_modules/react-native-custom-action-sheet/fade_in_view.js';
var React = require(12     ); // 12 = react
var ReactNative = require(46            ); // 46 = react-native
var Animated = ReactNative.Animated,
    Dimensions = ReactNative.Dimensions,
    StyleSheet = ReactNative.StyleSheet,
    View = ReactNative.View;

var window = Dimensions.get('window');

var FadeInView = React.createClass({
  displayName: 'FadeInView',

  getInitialState: function getInitialState() {
    return {
      fadeAnim: new Animated.Value(0)
    };
  },

  componentDidMount: function componentDidMount() {
    this._animate(this.props);
  },


  componentWillReceiveProps: function componentWillReceiveProps(newProps) {
    this._animate(newProps);
  },

  _animate: function _animate(newProps) {
    return Animated.timing(this.state.fadeAnim, {
      toValue: newProps.visible ? 0.7 : 0,
      duration: 300
    }).start();
  },


  render: function render() {
    return React.createElement(
      Animated.View,
      { style: [styles.overlay, { opacity: this.state.fadeAnim }, { backgroundColor: this.props.backgroundColor || 'black' }], __source: {
          fileName: _jsxFileName,
          lineNumber: 32
        }
      },
      this.props.children
    );
  }
});

var styles = StyleSheet.create({
  overlay: {
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    height: window.height,
    width: window.width,
    position: 'absolute'
  }
});

module.exports = FadeInView;
}, 557, null, "react-native-custom-action-sheet/fade_in_view.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewShowTodaysContent.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewShowTodaysContent.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _reactTimerMixin = require(253                ); // 253 = react-timer-mixin

var _reactTimerMixin2 = babelHelpers.interopRequireDefault(_reactTimerMixin);

var ReactPropTypes = require(39                        ); // 39 = react/lib/ReactPropTypes
var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var NoRecordViewBox = require(514                              ); // 514 = ../component/NoRecordViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLi = require(509                         ); // 509 = ../component/ListViewLi.js
var NineImagesBox = require(546                            ); // 546 = ../component/NineImagesBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js
var ViewContent = require(552                          ); // 552 = ../component/ViewContent.js

var ScrollViewShowTodaysContent = _react2.default.createClass({
    displayName: 'ScrollViewShowTodaysContent',

    _vars: {
        contentObjArray: [],
        ds: new _reactNative.ListView.DataSource({ rowHasChanged: function rowHasChanged(r1, r2) {
                return r1 !== r2;
            } })
    },
    mixins: [_reactTimerMixin2.default],
    getInitialState: function getInitialState() {
        var _this = this;

        console.log("ScrollViewShowTodaysContent");
        console.log(this.props.contentObjArray);
        return {
            isShowLoadingView: "1",
            fontSize: 13,
            lineHeight: 10,
            paragraphBackgroundColor: '#ffffff',
            paragraphColor: '#444444',
            dataSource: _this._vars.ds.cloneWithRows(this.props.contentObjArray)
        };
    },

    getDefaultProps: function getDefaultProps() {
        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        this._vars.contentObjArray = [];
    },
    render: function render() {
        var _this = this;

        var innerView = _this.state.isShowLoadingView == "-1" ? _react2.default.createElement(ACViewBox, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 83
            }
        }) : _this.state.isShowLoadingView == "0" ? _react2.default.createElement(NoRecordViewBox, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 85
            }
        }) : _react2.default.createElement(_reactNative.ListView, {
            dataSource: _this.state.dataSource,
            style: styles.scrollViewContainer,
            renderRow: _this._renderRow,
            enableEmptySections: true,
            initialListSize: 10,
            pageSize: 10,
            onEndReachedThreshold: 0,
            onEndReached: _this._onEndReached,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 86
            }
        });
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 98
                }
            },
            _react2.default.createElement(ViewHeader, { title: this.props.title, onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 99
                }
            }),
            innerView
        );
    },
    _onPressLi: function _onPressLi(liIndex) {
        var _this = this;
    },
    refreshView: function refreshView() {
        var _this = this;
    },
    _onEndReached: function _onEndReached() {
        console.log("_onEndReached");
    },

    _renderRow: function _renderRow(contentObj, sectionID, rowID) {
        console.log(contentObj);
        var _this = this;
        var day = null;
        if (contentObj) {
            for (var key in contentObj) {
                if (contentObj[key] && contentObj[key].day) {
                    day = contentObj[key].day;
                }
            }
        }
        if (!day) {
            return;
        }
        contentObj.day = day;
        return _react2.default.createElement(ViewContent, { contentObj: contentObj, __source: {
                fileName: _jsxFileName,
                lineNumber: 132
            }
        });
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSearchTodayContent', selectedTab: 'llgIcon' });
    }
});

var styles = _reactNative.StyleSheet.create({
    scrollViewContainer: {
        backgroundColor: '#ffffff'
    },
    paragraphView: {
        paddingLeft: 0,
        paddingRight: 0,
        borderBottomColor: '#eeeeee',
        borderBottomWidth: 1.5
    },
    paragraphViewWeek: {
        position: 'absolute',
        top: 20,
        left: 15
    },
    paragraphViewWeekText: {
        color: '#01bbfc'
    },
    paragraphViewDay: {
        position: 'absolute',
        top: 20,
        right: 10,
        transform: [{ rotate: '16deg' }],
        borderWidth: 0.5,
        borderColor: '#01bbfc'
    },
    paragraphViewDayText: {
        color: '#01bbfc'
    },
    paragraphText: {
        fontSize: 13
    },
    textAndImageView: {},
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    }
});

module.exports = ScrollViewShowTodaysContent;
}, 558, null, "YrcnAppProject/src/scrollview/ScrollViewShowTodaysContent.js");
__d(/* YrcnAppProject/src/component/CameraRollView.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/CameraRollView.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var CameraRollView = _react2.default.createClass({
    displayName: 'CameraRollView',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {
            marginTop: 10,
            marginBottom: 10
        };
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container, { marginTop: this.props.marginTop, marginBottom: this.props.marginBottom }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 52
                }
            },
            _react2.default.createElement(_reactNative.CameraRoll, {
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            })
        );
    }
});

module.exports = CameraRollView;

var styles = _reactNative.StyleSheet.create({
    container: {
        marginTop: 10,
        marginBottom: 10,
        marginLeft: 20,
        marginRight: 20,
        paddingTop: 10,
        paddingBottom: 10,
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center'
    }

});
}, 559, null, "YrcnAppProject/src/component/CameraRollView.js");
__d(/* YrcnAppProject/src/navigator/NavigatorYesterday.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorYesterday.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ScrollViewYesterday = require(512                                     ); // 512 = ./../scrollview/ScrollViewYesterday.js

var navigationBarRouteMapper = {
    titleStr: "昨天",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 15
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 20
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 25
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {},
    _onPressRightButton: function _onPressRightButton() {}
};

var NavigatorYesterday = _react2.default.createClass({
    displayName: 'NavigatorYesterday',

    getInitialState: function getInitialState() {
        return {
            isShowNavigationBarLeftButton: false,
            isChange: false
        };
    },
    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            });
        };
    },
    showRightButton: function showRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            });
        };
        this.setState({
            isChange: true
        });
    },
    hideRightButton: function hideRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            });
        };
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(_reactNative.Navigator, {
            initialRoute: { name: 'ScrollViewToday', index: 0, title: "昨天" },
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                }
            }),
            renderScene: this._renderScene,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 77
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;
        var Component = null;
        var props = {};
        switch (route.name) {
            default:
                navigationBarRouteMapper.isShowNavigationBarLeftButton = false;
                props.contentDay = global.YrcnApp.utils.yesterdayDate();
                props.ViewEdit = "ViewEditYesterdayContent";
                props.NavigatorInner = "NavigatorYesterdayInner";
                props.scrollView = "scrollViewYesterday";
                props.backgroundColor = "#eeeeee";
                Component = ScrollViewYesterday;
        }
        return _react2.default.createElement(Component, babelHelpers.extends({
            parent_route: route,
            parent_navigator: navigator,
            parent: this }, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 104
            }
        }));
    }
});

module.exports = NavigatorYesterday;
}, 560, null, "YrcnAppProject/src/navigator/NavigatorYesterday.js");
__d(/* YrcnAppProject/src/navigator/NavigatorYesterdayInner.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorYesterdayInner.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ViewEditYesterdayContent = require(562                               ); // 562 = ../view/ViewEditYesterdayContent

var navigationBarRouteMapper = {
    titleStr: "",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 24
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", onPress: this._onPressLeftButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 29
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "完成", onPress: this._onPressRightButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 34
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {
        global.YrcnApp.now.rootNavigator.pop();
        global.YrcnApp.now.scrollViewYesterday.refreshView();
    },
    _onPressRightButton: function _onPressRightButton() {
        global.YrcnApp.now.rootNavigator.pop();
        global.YrcnApp.now.scrollViewYesterday.refreshView();
    }
};

var NavigatorYesterdayInner = _react2.default.createClass({
    displayName: 'NavigatorYesterdayInner',

    getInitialState: function getInitialState() {
        return {};
    },
    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", onPress: this._onPressLeftButton, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 57
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                }
            });
        };
    },
    showRightButton: function showRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "完成", onPress: this._onPressRightButton, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            });
        };
    },
    hideRightButton: function hideRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 78
                }
            });
        };
    },
    render: function render() {
        var _this = this;
        var initRoute = { name: this.props.indexName, index: 0, title: this.props.indexTitle };
        return _react2.default.createElement(_reactNative.Navigator, {
            initialRoute: initRoute,
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 90
                }
            }),
            renderScene: this._renderScene,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 87
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        console.log(route.name);

        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;
        navigationBarRouteMapper.route = route;
        var Component = null;
        var props = {};
        switch (route.name) {
            case "ViewEditYesterdayContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                props.type = this.props.type;
                props.coreObj = this.props.coreObj;
                Component = ViewEditYesterdayContent;
                break;
        }
        console.log(props);
        return _react2.default.createElement(Component, babelHelpers.extends({
            parent_route: route,
            parent_navigator: navigator,
            parent: this }, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 116
            }
        }));
    }
});

module.exports = NavigatorYesterdayInner;
}, 561, null, "YrcnAppProject/src/navigator/NavigatorYesterdayInner.js");
__d(/* YrcnAppProject/src/view/ViewEditYesterdayContent.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewEditYesterdayContent.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var FloatButtonsBox = require(510                              ); // 510 = ../component/FloatButtonsBox.js
var NineImagesBox = require(546                            ); // 546 = ../component/NineImagesBox.js
var ImagePicker = require(547                        ); // 547 = react-native-image-picker
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var WebViewEditTodayContent = _react2.default.createClass({
    displayName: 'WebViewEditTodayContent',

    _vars: {
        contentDay: RNUtils.yesterdayDate()
    },
    getDefaultProps: function getDefaultProps() {
        return {
            placeholder: "请输入...",
            multiline: true,
            maxLength: 50000,
            placeholderTextColor: '#4e4e4e',
            keyboardType: 'default',
            defaultValue: ''
        };
    },
    getInitialState: function getInitialState() {
        var _this = this;

        return {
            textInputHeight: 120,
            oneImages: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        var oneImages = [];
        if (this.props.coreObj && this.props.coreObj.oneImages && Array.isArray(this.props.coreObj.oneImages)) {
            oneImages = this.props.coreObj.oneImages;
        }
        this.setState({
            oneImages: oneImages
        });
    },
    render: function render() {
        var _this = this;

        console.log(this.props.coreObj);
        var coreObj = this.props.coreObj || {};
        var val = coreObj.content || "";
        this._vars.text = val.trim();
        return _react2.default.createElement(
            _reactNative.View,
            { style: [global.YrcnApp.styles.common.container, { backgroundColor: '#f0f0f0' }], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 69
                }
            },
            _react2.default.createElement(ViewHeader, { title: _this.props.title, onPressLeft: this._onPressComplete, leftText: '\u5B8C\u6210', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            }),
            _react2.default.createElement(_reactNative.TextInput, {
                style: [styles.textInput, { height: _this.state.textInputHeight }],
                onChangeText: this._onChangeText,
                onFocus: this._onFocusText,
                onBlur: this._onBlurText,
                autoCorrect: false,
                autoFocus: false,
                maxLength: this.props.maxLength,
                keyboardType: this.props.keyboardType,
                placeholder: this.props.placeholder,
                defaultValue: val,
                multiline: this.props.multiline,
                placeholderTextColor: this.props.placeholderTextColor,
                __source: {
                    fileName: _jsxFileName,
                    lineNumber: 71
                }
            }),
            _react2.default.createElement(NineImagesBox, { oneImages: this.state.oneImages, parent: _this, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 85
                }
            }),
            _react2.default.createElement(
                FloatButtonsBox,
                { marginTop: 30, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 86
                    }
                },
                _react2.default.createElement(FloatButtonsBox.Button, { btnText: "图片", onPress: this._onPressImage, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 87
                    }
                })
            )
        );
    },
    _onChangeText: function _onChangeText(text) {
        var _this = this;
        this._vars.text = text.trim();
        var contentOneObj = {
            typeCode: this.props.type.typeCode,
            day: _this._vars.contentDay,
            content: this._vars.text,
            oneImages: this.state.oneImages
        };
        RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
            contentObj[_this.props.type.typeCode] = contentOneObj;
            RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {});
        });
    },
    _onFocusText: function _onFocusText(text) {
        var _this = this;
    },
    _onBlurText: function _onBlurText(text) {
        var _this = this;
    },
    _onPressImage: function _onPressImage() {
        var _this = this;

        var options = {
            storageOptions: {
                skipBackup: true,
                path: 'images'
            }
        };
        ImagePicker.launchImageLibrary(options, function (response) {
            if (response.uri) {
                var ext = RNUtils.getImageExt(YrcnApp.Platform.isIOS ? response.origURL : response.path, response.fileName);

                if (RNUtils.getSandboxFileUri(response.uri)) {
                    _this.state.oneImages.push({ uri: RNUtils.getSandboxFileUri(response.uri), index: _this.state.oneImages.length });
                } else {
                    _this.state.oneImages.push({ uri: 'data:image/' + ext + ';base64,' + response.data, index: _this.state.oneImages.length });
                }
                _this.setState({
                    oneImages: _this.state.oneImages
                });
            }

            RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
                RNUtils.getJsonTodayContent(_this._vars.contentDay, function (getJsonTodayContentObj) {
                    var shortPathOneImages = [];
                    for (var _iterator = _this.state.oneImages, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var oneImage = _ref;

                        var newOneImage = RNUtils.deepCopy(oneImage);
                        newOneImage.uri = RNUtils.getSandboxFileShortPath(oneImage.uri);
                        shortPathOneImages.push(newOneImage);
                    }
                    if (getJsonTodayContentObj[_this.props.type.typeCode]) {
                        getJsonTodayContentObj[_this.props.type.typeCode].oneImages = shortPathOneImages;
                    } else {
                        getJsonTodayContentObj[_this.props.type.typeCode] = { oneImages: shortPathOneImages };
                    }
                    contentObj[_this.props.type.typeCode] = getJsonTodayContentObj[_this.props.type.typeCode];
                    contentObj[_this.props.type.typeCode].day = _this._vars.contentDay;

                    RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {});
                });
            });
        });
    },
    _lookImage: function _lookImage(index) {
        global.YrcnApp.now.$NavigatorRoot.lookImage(this.state.oneImages[index], this, index);
    },
    deleteImage: function deleteImage(index) {
        var _this = this;
        _this.state.oneImages.splice(index, 1);
        RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
            contentObj[_this.props.type.typeCode].oneImages = _this.state.oneImages;
            RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {});
        });
        _this.setState({
            oneImages: _this.state.oneImages
        });
    },
    _onPressComplete: function _onPressComplete() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'yesterdayIcon' });

        var _this = this;
        var contentOneObj = {
            typeCode: this.props.type.typeCode,
            day: _this._vars.contentDay,
            content: this._vars.text,
            oneImages: this.state.oneImages
        };
        RNAllService.getJson_today_synchronizeContentInfo(contentOneObj);
    }
});

var styles = _reactNative.StyleSheet.create({
    textInput: {
        width: _reactNative.Dimensions.get('window').width,
        paddingLeft: 15,
        paddingRight: 15,
        paddingTop: 15,
        paddingBottom: 15,
        fontSize: 16,
        color: '#444444',
        borderBottomWidth: 3,
        borderBottomColor: '#eeeeee',
        backgroundColor: '#ffffff',
        marginTop: 3,
        textAlignVertical: 'top'
    }
});

module.exports = WebViewEditTodayContent;
}, 562, null, "YrcnAppProject/src/view/ViewEditYesterdayContent.js");
__d(/* YrcnAppProject/src/navigator/NavigatorLlg.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorLlg.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ScrollViewLlg = require(513                               ); // 513 = ./../scrollview/ScrollViewLlg.js

var navigationBarRouteMapper = {
    titleStr: "以前",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 15
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 20
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 25
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {},
    _onPressRightButton: function _onPressRightButton() {}
};

var NavigatorLlg = _react2.default.createClass({
    displayName: 'NavigatorLlg',

    getInitialState: function getInitialState() {
        return {
            isShowNavigationBarLeftButton: false,
            isChange: false
        };
    },
    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 53
                }
            });
        };
    },
    showRightButton: function showRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            });
        };
        this.setState({
            isChange: true
        });
    },
    hideRightButton: function hideRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 70
                }
            });
        };
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(_reactNative.Navigator, {
            initialRoute: { name: 'ScrollViewToday', index: 0, title: "以前" },
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 80
                }
            }),
            renderScene: this._renderScene,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 77
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;
        var Component = null;
        switch (route.name) {
            default:
                navigationBarRouteMapper.isShowNavigationBarLeftButton = false;
                Component = ScrollViewLlg;
        }
        return _react2.default.createElement(Component, {
            parent_route: route,
            parent_navigator: navigator,
            parent: this, __source: {
                fileName: _jsxFileName,
                lineNumber: 98
            }
        });
    }
});

module.exports = NavigatorLlg;
}, 563, null, "YrcnAppProject/src/navigator/NavigatorLlg.js");
__d(/* YrcnAppProject/src/navigator/NavigatorLlgInner.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorLlgInner.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var ViewEditTodayContent = require(545                             ); // 545 = ./../view/ViewEditTodayContent
var ScrollViewShowTodayContent = require(551                                            ); // 551 = ./../scrollview/ScrollViewShowTodayContent.js
var ScrollViewShowTodayLlgBetweenContent = require(553                                                      ); // 553 = ./../scrollview/ScrollViewShowTodayLlgBetweenContent.js
var ScrollViewSearchTodayContent = require(554                                              ); // 554 = ./../scrollview/ScrollViewSearchTodayContent.js
var ScrollViewShowTodaysContent = require(558                                             ); // 558 = ./../scrollview/ScrollViewShowTodaysContent.js
var CameraRollView = require(559                             ); // 559 = ../component/CameraRollView.js

var navigationBarRouteMapper = {
    titleStr: "",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 29
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", onPress: this._onPressLeftButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 34
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "完成", onPress: this._onPressRightButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 39
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {
        navigationBarRouteMapper.navigator.pop();
        if (navigationBarRouteMapper.route.name == "ViewEditTodayContent") {
            global.YrcnApp.now.scrollViewToday.refreshView();
        }
    },
    _onPressRightButton: function _onPressRightButton() {
        global.YrcnApp.now.rootNavigator.pop();
        if (navigationBarRouteMapper.route.name == "ViewEditTodayContent") {
            global.YrcnApp.now.scrollViewToday.refreshView();
        }
    }
};

var NavigatorLlgInner = _react2.default.createClass({
    displayName: 'NavigatorLlgInner',

    getInitialState: function getInitialState() {
        return {};
    },
    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", onPress: this._onPressLeftButton, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 67
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 74
                }
            });
        };
    },
    showRightButton: function showRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "完成", onPress: this._onPressRightButton, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 81
                }
            });
        };
    },
    hideRightButton: function hideRightButton() {
        navigationBarRouteMapper.RightButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 88
                }
            });
        };
    },
    render: function render() {
        var _this = this;
        var initRoute = { name: this.props.indexName, index: 0, title: this.props.indexTitle };
        return _react2.default.createElement(_reactNative.Navigator, {
            initialRoute: initRoute,
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 100
                }
            }),
            renderScene: this._renderScene,
            __source: {
                fileName: _jsxFileName,
                lineNumber: 97
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;
        navigationBarRouteMapper.route = route;
        var Component = null;
        var props = {};
        switch (route.name) {
            case "ViewEditTodayContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                props.type = this.props.type;
                props.coreObj = this.props.coreObj;
                Component = ViewEditTodayContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "ScrollViewShowTodayContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                props.day = this.props.day;
                Component = ScrollViewShowTodayContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "ScrollViewShowTodayLlgBetweenContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                props.between = this.props.between;
                Component = ScrollViewShowTodayLlgBetweenContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "CameraRollView":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                Component = CameraRollView;
                break;
            case "ScrollViewSearchTodayContent":
                props.indexName = this.props.indexName;
                props.indexTitle = this.props.indexTitle;
                Component = ScrollViewSearchTodayContent;
                navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
                break;
            case "ScrollViewShowTodaysContent":
                props.contentObjArray = route.contentObjArray;
                Component = ScrollViewShowTodaysContent;
                break;
        }

        return _react2.default.createElement(Component, babelHelpers.extends({
            parent_route: route,
            parent_navigator: navigator,
            parent: this }, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 156
            }
        }));
    }
});

module.exports = NavigatorLlgInner;
}, 564, null, "YrcnAppProject/src/navigator/NavigatorLlgInner.js");
__d(/* YrcnAppProject/src/navigator/NavigatorSettings.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorSettings.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var SettingsView = require(515                        ); // 515 = ./../view/ViewSettings.js

var navigationBarRouteMapper = {
    titleStr: "设置",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 15
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                fileName: _jsxFileName,
                lineNumber: 20
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, { text: "注销", onPress: this._onPressRightButton, __source: {
                fileName: _jsxFileName,
                lineNumber: 25
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {
        navigationBarRouteMapper.navigator.pop();
    },
    _onPressRightButton: function _onPressRightButton() {
        global.YrcnApp.utils.confirm("您确定要注销当前账户么？", function () {
            global.YrcnApp.utils.removeLoginInfo(function () {
                global.YrcnApp.now.rootNavigator.replace({ name: 'NavigatorGuidePages' });
            });
        });
    }
};

var NavigatorBookSettings = _react2.default.createClass({
    displayName: 'NavigatorBookSettings',

    render: function render() {
        return _react2.default.createElement(_reactNative.Navigator, {
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            }),
            initialRoute: { name: 'SettingsView', index: 0, title: '设置' },
            renderScene: this._renderScene, __source: {
                fileName: _jsxFileName,
                lineNumber: 44
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = navigator;
        navigationBarRouteMapper.titleStr = route.title;

        var Component = null;
        switch (route.name) {
            default:
                {
                    Component = SettingsView;
                }
        }

        return _react2.default.createElement(Component, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 66
            }
        });
    }
});
var styles = _reactNative.StyleSheet.create({
    navBar: {
        height: 50,
        backgroundColor: '#4ab854',
        borderBottomColor: '#4ab854',
        borderBottomWidth: 1,
        position: 'absolute'
    },
    leftButton: {
        width: 22,
        top: -8,
        marginLeft: 5
    },
    rightButton: {
        width: 22,
        top: -20,
        marginRight: 5
    }
});

module.exports = NavigatorBookSettings;
}, 565, null, "YrcnAppProject/src/navigator/NavigatorSettings.js");
__d(/* YrcnAppProject/src/navigator/NavigatorSettingsInner.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/navigator/NavigatorSettingsInner.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var SpecialStatementView = require(567                                ); // 567 = ./../view/ViewSpecialStatement.js
var UseHelpView = require(571                       ); // 571 = ./../view/ViewUseHelp.js
var ScrollViewSettingTodayType = require(572                                            ); // 572 = ./../scrollview/ScrollViewSettingTodayType.js
var ScrollViewAddTodayType = require(574                                        ); // 574 = ./../scrollview/ScrollViewAddTodayType.js
var ScrollViewUpdTodayType = require(575                                        ); // 575 = ./../scrollview/ScrollViewUpdTodayType.js
var ViewTime = require(576                 ); // 576 = ./../view/ViewTime
var navigationBarRouteMapper = {
    titleStr: "书房",
    Title: function Title() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorTitleView, { title: this.titleStr, __source: {
                fileName: _jsxFileName,
                lineNumber: 37
            }
        });
    },
    LeftButton: function LeftButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "<返回", __source: {
                fileName: _jsxFileName,
                lineNumber: 42
            }
        });
    },
    RightButton: function RightButton() {
        return _react2.default.createElement(global.YrcnApp.components.NavigatorRightBtnView, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 47
            }
        });
    },
    _onPressLeftButton: function _onPressLeftButton() {
        navigationBarRouteMapper.navigator.pop();
    }
};

var NavigatorSettingsInner = _react2.default.createClass({
    displayName: 'NavigatorSettingsInner',

    showLeftButton: function showLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { onPress: this._onPressLeftButton, text: "<返回", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            });
        };
    },
    hideLeftButton: function hideLeftButton() {
        navigationBarRouteMapper.LeftButton = function () {
            return _react2.default.createElement(global.YrcnApp.components.NavigatorLeftBtnView, { text: "", __source: {
                    fileName: _jsxFileName,
                    lineNumber: 67
                }
            });
        };
    },
    render: function render() {
        return _react2.default.createElement(_reactNative.Navigator, {
            navigationBar: _react2.default.createElement(_reactNative.Navigator.NavigationBar, {
                routeMapper: navigationBarRouteMapper,
                style: global.YrcnApp.styles.common.navBar, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 77
                }
            }),
            initialRoute: { name: global.YrcnApp.now.rootRoute.indexName, index: 0, title: global.YrcnApp.now.rootRoute.indexTitle },
            renderScene: this._renderScene, __source: {
                fileName: _jsxFileName,
                lineNumber: 75
            }
        });
    },
    _renderScene: function _renderScene(route, navigator) {
        navigationBarRouteMapper.navigator = global.YrcnApp.now.rootNavigator;
        navigationBarRouteMapper.titleStr = route.title;

        var Component = null;
        var props = {};
        switch (route.name) {
            case "SpecialStatementView":
                Component = SpecialStatementView;
                break;
            case "UseHelpView":
                Component = UseHelpView;
                break;
            case "ViewTime":
                Component = ViewTime;
                break;
            case "ScrollViewSettingTodayType":
                Component = ScrollViewSettingTodayType;
                break;
            case "ScrollViewAddTodayType":
                props.prevView = route.prevView;
                navigationBarRouteMapper.navigator = navigator;
                Component = ScrollViewAddTodayType;
                break;
            case "ScrollViewUpdTodayType":
                props.prevView = route.prevView;
                props.typeObj = route.typeObj;
                navigationBarRouteMapper.navigator = navigator;
                Component = ScrollViewUpdTodayType;
                break;
        }

        return _react2.default.createElement(Component, babelHelpers.extends({ parent: this, parent_navigator: navigator }, props, {
            __source: {
                fileName: _jsxFileName,
                lineNumber: 119
            }
        }));
    }
});
var styles = _reactNative.StyleSheet.create({
    navBar: {
        height: 50,
        backgroundColor: '#4ab854',
        borderBottomColor: '#4ab854',
        borderBottomWidth: 1,
        position: 'absolute'
    },
    leftView: {
        width: 40,
        paddingTop: 9
    },
    leftText: {
        textAlign: 'center',
        color: '#ffffff',
        fontSize: 14
    },
    rightButton: {
        width: 22,
        top: -20,
        marginRight: 5
    }
});

module.exports = NavigatorSettingsInner;
}, 566, null, "YrcnAppProject/src/navigator/NavigatorSettingsInner.js");
__d(/* YrcnAppProject/src/view/ViewSpecialStatement.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewSpecialStatement.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TextBox = require(568                      ); // 568 = ../component/TextBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var SpecialStatementView = _react2.default.createClass({
    displayName: 'SpecialStatementView',

    mixins: [],
    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u7279\u522B\u58F0\u660E', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }),
            _react2.default.createElement(
                TextBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 52
                    }
                },
                _react2.default.createElement(TextBox.Title, { text: "联系我们", __source: {
                        fileName: _jsxFileName,
                        lineNumber: 53
                    }
                }),
                _react2.default.createElement(TextBox.Text, { text: "联系邮箱：weichuang950@163.com", __source: {
                        fileName: _jsxFileName,
                        lineNumber: 54
                    }
                })
            ),
            _react2.default.createElement(
                TextBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 56
                    }
                },
                _react2.default.createElement(TextBox.Title, { text: "相关技术", __source: {
                        fileName: _jsxFileName,
                        lineNumber: 57
                    }
                }),
                _react2.default.createElement(TextBox.Text, { text: "此APP是使用React Native开发，热烈欢迎其他爱好者与我们共同学习和探讨；", __source: {
                        fileName: _jsxFileName,
                        lineNumber: 58
                    }
                })
            )
        );
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'myLife' });
    }
});

module.exports = SpecialStatementView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    }
});
}, 567, null, "YrcnAppProject/src/view/ViewSpecialStatement.js");
__d(/* YrcnAppProject/src/component/TextBox.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/TextBox.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TextBoxTitle = require(569                ); // 569 = ./TextBoxTitle.js
var TextBoxText = require(570               ); // 570 = ./TextBoxText.js

var TextBox = _react2.default.createClass({
    displayName: 'TextBox',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {
        Title: TextBoxTitle,
        Text: TextBoxText
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 55
                }
            },
            this.props.children
        );
    }
});

module.exports = TextBox;

var styles = _reactNative.StyleSheet.create({
    container: {
        margin: 10,
        backgroundColor: '#ffffff'
    }

});
}, 568, null, "YrcnAppProject/src/component/TextBox.js");
__d(/* YrcnAppProject/src/component/TextBoxTitle.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/TextBoxTitle.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TextBoxTitle = _react2.default.createClass({
    displayName: 'TextBoxTitle',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: [styles.text], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 52
                    }
                },
                this.props.text
            )
        );
    }
});

module.exports = TextBoxTitle;

var styles = _reactNative.StyleSheet.create({
    container: {
        padding: 5
    },
    text: {
        color: '#444444',
        fontSize: 16
    }
});
}, 569, null, "YrcnAppProject/src/component/TextBoxTitle.js");
__d(/* YrcnAppProject/src/component/TextBoxText.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/TextBoxText.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TextBoxText = _react2.default.createClass({
    displayName: 'TextBoxText',

    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    statics: {},

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            },
            _react2.default.createElement(
                _reactNative.Text,
                { style: [styles.text], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 52
                    }
                },
                this.props.text
            )
        );
    }
});

module.exports = TextBoxText;

var styles = _reactNative.StyleSheet.create({
    container: {
        padding: 5
    },
    text: {
        color: '#444444',
        fontSize: 13,
        lineHeight: 20
    }
});
}, 570, null, "YrcnAppProject/src/component/TextBoxText.js");
__d(/* YrcnAppProject/src/view/ViewUseHelp.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewUseHelp.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var TextBox = require(568                      ); // 568 = ../component/TextBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var UseHelpView = _react2.default.createClass({
    displayName: 'UseHelpView',

    mixins: [],
    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 48
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u4F7F\u7528\u5E2E\u52A9', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 49
                }
            }),
            _react2.default.createElement(
                TextBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 50
                    }
                },
                _react2.default.createElement(TextBox.Title, { text: "如何注销当前登录用户", __source: {
                        fileName: _jsxFileName,
                        lineNumber: 51
                    }
                }),
                _react2.default.createElement(TextBox.Text, { text: "设置页面右上侧按钮“注销”", __source: {
                        fileName: _jsxFileName,
                        lineNumber: 52
                    }
                })
            )
        );
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'myLife' });
    }
});

module.exports = UseHelpView;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    }
});
}, 571, null, "YrcnAppProject/src/view/ViewUseHelp.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewSettingTodayType.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewSettingTodayType.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLiSelected = require(573                                 ); // 573 = ../component/ListViewLiSelected.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ScrollViewToday = _react2.default.createClass({
    displayName: 'ScrollViewToday',

    _vars: {},
    getInitialState: function getInitialState() {
        var _this = this;

        return {
            isShowLoadingView: true,
            typeArray: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            _this.setState({
                typeArray: todayContentTypesObj.list
            });
        });
    },
    render: function render() {
        var _this = this;

        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 63
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u663E\u793A\u8BBE\u7F6E', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 64
                }
            }),
            _react2.default.createElement(
                _reactNative.ScrollView,
                { style: styles.scrollViewContainer, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 65
                    }
                },
                function () {
                    return _this.state.typeArray.map(function (d, i) {
                        var key = Math.uuidFast();
                        return _react2.default.createElement(ListViewLiSelected, { title: d.typeContent, onPress: function onPress(r) {
                                _this._onPressLi(i, r);
                            }, key: key, color: '#000000', __source: {
                                fileName: _jsxFileName,
                                lineNumber: 71
                            }
                        });
                    });
                }()
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.bottomView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 77
                    }
                },
                _react2.default.createElement(
                    LineButtonsBox,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 78
                        }
                    },
                    _react2.default.createElement(LineButtonsBox.Button, { btnText: "新增", onPress: this._onPressAdd, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 79
                        }
                    }),
                    _react2.default.createElement(LineButtonsBox.Button, { btnText: "编辑", onPress: this._onPressUpd, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 80
                        }
                    }),
                    _react2.default.createElement(LineButtonsBox.Button, { btnText: "删除", onPress: this._onPressDel, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 81
                        }
                    })
                )
            )
        );
    },
    _onPressLi: function _onPressLi(liIndex, result) {
        var _this = this;
        this.state.typeArray[liIndex].isSelected = result;
    },
    refreshView: function refreshView() {
        var _this = this;
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            _this.setState({
                typeArray: todayContentTypesObj.list
            });
            if (global.YrcnApp.now.scrollViewToday) {
                global.YrcnApp.now.scrollViewToday.refreshView();
            }
            if (global.YrcnApp.now.scrollViewYesterday) {
                global.YrcnApp.now.scrollViewYesterday.refreshView();
            }
        });
    },
    _onPressAdd: function _onPressAdd() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewAddTodayType', viewTitle: '新增', prevView: this });
    },
    _onPressUpd: function _onPressUpd() {
        var _this = this;
        var typeArray = this.state.typeArray;
        var selectedArray = [];
        var newTypeArray = [];
        for (var _iterator = typeArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var item = _ref;

            if (item.isSelected == "1") {
                selectedArray.push(item);
            }
        }
        if (selectedArray.length == 0) {
            RNUtils.alert("请至少选择一项");
            return;
        }
        if (selectedArray.length > 1) {
            RNUtils.alert("只能选择一项");
            return;
        }
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewUpdTodayType', viewTitle: '编辑', prevView: this, typeObj: selectedArray[0] });
    },
    _onPressDel: function _onPressDel() {
        var _this = this;
        var typeArray = this.state.typeArray;
        var selectedArray = [];
        var newTypeArray = [];
        for (var _iterator2 = typeArray, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var item = _ref2;

            if (item.isSelected == "1") {
                selectedArray.push(item);
            }
        }
        if (typeArray.length == selectedArray.length) {
            RNUtils.alert("请至少保留一项吧");
            return;
        }
        if (selectedArray.length == 0) {
            RNUtils.alert("请至少选择一项");
            return;
        }
        RNUtils.confirm("确定要删除么？", function () {
            for (var _iterator3 = typeArray, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref3;

                if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                }

                var item = _ref3;

                if (item.isSelected != "1") {
                    newTypeArray.push(item);
                }
            }
            RNUtils.setJsonTodayContentTypes({ list: newTypeArray }, function () {
                _this.refreshView();
            });
        });
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'myLife' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {},
    scrollViewContainer: {
        backgroundColor: '#ffffff',
        height: _reactNative.Dimensions.get('window').height - 120
    },
    bottomView: {
        position: 'absolute',
        top: _reactNative.Dimensions.get('window').height - 44,
        left: 0,
        height: 44,
        borderTopWidth: 2,
        borderTopColor: '#aaaaaa',
        backgroundColor: '#ffffff'
    }
});

module.exports = ScrollViewToday;
}, 572, null, "YrcnAppProject/src/scrollview/ScrollViewSettingTodayType.js");
__d(/* YrcnAppProject/src/component/ListViewLiSelected.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/component/ListViewLiSelected.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js

var ListViewLi = _react2.default.createClass({
    displayName: 'ListViewLi',

    getDefaultProps: function getDefaultProps() {
        return {
            smallText: ''
        };
    },

    getInitialState: function getInitialState() {
        return {
            isSelected: "0",
            selectedText: '☉',
            rightColor: '#aaaaaa'
        };
    },
    render: function render() {
        var navigator = this.props.navigator;
        return _react2.default.createElement(
            _reactNative.TouchableOpacity,
            { onPress: this._onPress, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: styles.container, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 47
                    }
                },
                this._renderIconView(),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.titleView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 49
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.title, { color: this.props.color }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 50
                            }
                        },
                        this.props.title
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: styles.gtView, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 52
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.gt, { color: this.state.rightColor }], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 53
                            }
                        },
                        _react2.default.createElement(
                            _reactNative.Text,
                            { style: [styles.smallText], __source: {
                                    fileName: _jsxFileName,
                                    lineNumber: 53
                                }
                            },
                            this.props.smallText
                        ),
                        this.state.selectedText
                    )
                )
            )
        );
    },
    _renderIconView: function _renderIconView() {
        if (this.props.icon) {
            return _react2.default.createElement(
                _reactNative.View,
                { style: styles.iconView, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 62
                    }
                },
                _react2.default.createElement(_reactNative.Image, { source: this.props.icon, style: styles.icon, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 63
                    }
                })
            );
        }
    },
    _onPress: function _onPress() {
        if (this.state.isSelected == "0") {
            this.props.onPress("1");
            this.setState({
                isSelected: "1",
                rightColor: '#01bbfc'
            });
        } else {
            this.props.onPress("0");
            this.setState({
                isSelected: "0",
                rightColor: '#aaaaaa'
            });
        }
    }
});

module.exports = ListViewLi;

var styles = _reactNative.StyleSheet.create({
    container: {
        flexDirection: 'row',
        justifyContent: 'center',
        borderBottomWidth: 1,
        borderBottomColor: '#eeeeee',
        height: 50
    },
    iconView: {
        flex: 1,
        alignItems: 'center',
        paddingTop: 15
    },
    icon: {
        width: 20,
        height: 20
    },
    titleView: {
        flex: 3,
        paddingTop: 17,
        paddingLeft: 15
    },
    title: {
        fontSize: 16
    },
    gtView: {
        width: 40,
        paddingTop: 17,
        paddingRight: 15
    },
    gt: {
        fontSize: 16,
        textAlign: 'right'
    },
    smallText: {
        fontSize: 14,
        color: '#aaaaaa'
    }
});
}, 573, null, "YrcnAppProject/src/component/ListViewLiSelected.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewAddTodayType.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewAddTodayType.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLiSelected = require(573                                 ); // 573 = ../component/ListViewLiSelected.js
var ButtonsBox = require(525                         ); // 525 = ../component/ButtonsBox.js
var FormBox = require(533                      ); // 533 = ../component/FormBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ScrollViewAddTodayType = _react2.default.createClass({
    displayName: 'ScrollViewAddTodayType',

    _vars: {
        param: {
            content: ""
        }
    },
    getInitialState: function getInitialState() {
        var _this = this;

        return {
            isPressingAdd: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },
    render: function render() {
        var _this = this;
        _this._vars.param.content = "";
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u663E\u793A\u8BBE\u7F6E', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                }
            }),
            _react2.default.createElement(
                FormBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 63
                    }
                },
                _react2.default.createElement(FormBox.Input, { placeholder: "请输入...", keyboardType: "default", maxLength: 50,
                    parent: this, paramName: "content", inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 64
                    }
                })
            ),
            _react2.default.createElement(
                ButtonsBox,
                { marginBottom: 0, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 67
                    }
                },
                _react2.default.createElement(ButtonsBox.Button, { btnText: "新增", onPress: this._onPressAdd, isPressing: this.state.isPressingAdd, backgroundColor_pressing: '#01bbfc', backgroundColor: '#01bbfc', btnColor: '#ffffff', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 68
                    }
                })
            )
        );
    },
    _onPressAdd: function _onPressAdd() {
        var _this = this;
        if (this._vars.param.content == "") {
            RNUtils.alert("事件展示内容不能为空");
            return;
        }
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            var typeObj = {
                typeCode: _this._vars.param.content,
                typeContent: _this._vars.param.content
            };
            for (var _iterator = todayContentTypesObj.list, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var item = _ref;

                if (typeObj.typeCode == item.typeCode) {
                    RNUtils.alert("请勿重复新增" + typeObj.typeCode, function () {});
                    return;
                }
            }
            todayContentTypesObj.list.push(typeObj);
            RNUtils.setJsonTodayContentTypes(todayContentTypesObj, function () {
                _this._vars.param.content = "";
                RNUtils.alert("新增成功", function () {
                    YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingTodayType' });
                });
            });
        });
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue.trim();
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingTodayType' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        backgroundColor: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        flexDirection: 'column',
        justifyContent: 'flex-start',
        alignItems: 'center'
    }
});

module.exports = ScrollViewAddTodayType;
}, 574, null, "YrcnAppProject/src/scrollview/ScrollViewAddTodayType.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewUpdTodayType.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewUpdTodayType.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLiSelected = require(573                                 ); // 573 = ../component/ListViewLiSelected.js
var ButtonsBox = require(525                         ); // 525 = ../component/ButtonsBox.js
var FormBox = require(533                      ); // 533 = ../component/FormBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ScrollViewUpdTodayType = _react2.default.createClass({
    displayName: 'ScrollViewUpdTodayType',

    _vars: {
        param: {
            content: ""
        }
    },
    getInitialState: function getInitialState() {
        var _this = this;
        this._vars.param.content = this.props.typeObj.typeCode;

        return {
            isPressingUpd: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u663E\u793A\u8BBE\u7F6E', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                }
            }),
            _react2.default.createElement(
                FormBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 63
                    }
                },
                _react2.default.createElement(FormBox.Input, { placeholder: "事件展示内容", keyboardType: "default", maxLength: 50,
                    parent: this, paramName: "content", defaultValue: this.props.typeObj.typeCode, inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 64
                    }
                })
            ),
            _react2.default.createElement(
                ButtonsBox,
                { marginBottom: 0, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 67
                    }
                },
                _react2.default.createElement(ButtonsBox.Button, { btnText: "编辑", onPress: this._onPressUpd, isPressing: this.state.isPressingUpd,
                    backgroundColor_pressing: '#01bbfc', backgroundColor: '#01bbfc', btnColor: '#ffffff', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 68
                    }
                })
            )
        );
    },
    _onPressUpd: function _onPressUpd() {
        var _this = this;
        if (this._vars.param.content == "") {
            RNUtils.alert("事件展示内容不能为空");
            return;
        }
        RNAllService.getJson_getTodayContentTypes({}, function (todayContentTypesObj) {
            var typeObj = {
                typeCode: _this._vars.param.content,
                typeContent: _this._vars.param.content
            };
            for (var _iterator = todayContentTypesObj.list, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var item = _ref;

                if (_this.props.typeObj.typeCode == item.typeCode) {
                    item.typeCode = _this._vars.param.content;
                    item.typeContent = _this._vars.param.content;
                    RNUtils.setJsonTodayContentTypes(todayContentTypesObj, function () {
                        RNUtils.alert("编辑成功", function () {
                            YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingTodayType' });
                        });
                    });
                    return;
                }
            }
        });
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue.trim();
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingTodayType' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        backgroundColor: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        flexDirection: 'column',
        alignItems: 'center'
    }
});

module.exports = ScrollViewUpdTodayType;
}, 575, null, "YrcnAppProject/src/scrollview/ScrollViewUpdTodayType.js");
__d(/* YrcnAppProject/src/view/ViewTime.android.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewTime.android.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var _today_notifications = require(577                                        ); // 577 = ../common/config/today_notifications.json

var _today_notifications2 = babelHelpers.interopRequireDefault(_today_notifications);

var moment = require(476               ); // 476 = moment/moment.js
moment.locale('zh-cn');
var RNUtils = global.YrcnApp.utils;

var ViewTime = _react2.default.createClass({
    displayName: 'ViewTime',

    mixins: [],
    _vars: {},
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        return {
            date: new Date(),
            timeZoneOffsetInHours: -1 * new Date().getTimezoneOffset() / 60,
            falseSwitchIsOn: false
        };
    },

    componentDidMount: function componentDidMount() {
        var userLogin = global.YrcnApp.loginUser.userLogin;

        if (global.YrcnApp.appInfo.isOpenNotification == "1" && userLogin.appNotificationTime) {
            var hour = userLogin.appNotificationTime.split(":")[0];
            var minute = userLogin.appNotificationTime.split(":")[1];
            var date = moment();
            date.set('hour', hour);
            date.set('minute', minute);
            this.setState({
                date: date.toDate(),
                falseSwitchIsOn: true
            });
        } else {
            var date = moment();
            date.set('hour', 21);
            date.set('minute', 0);
            this.setState({
                date: date.toDate()
            });
        }
    },

    componentWillUnmount: function componentWillUnmount() {
        var _this = this;
    },

    render: function render() {
        this.props.parent.showLeftButton();

        var _DatePickerAndroid$op = _reactNative.DatePickerAndroid.open({
            date: new Date(2020, 4, 25)
        }),
            action = _DatePickerAndroid$op.action,
            year = _DatePickerAndroid$op.year,
            month = _DatePickerAndroid$op.month,
            day = _DatePickerAndroid$op.day;

        return _react2.default.createElement(
            _reactNative.View,
            { style: [styles.container], __source: {
                    fileName: _jsxFileName,
                    lineNumber: 87
                }
            },
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.controlView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 88
                    }
                },
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.controlLeftView], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 89
                        }
                    },
                    _react2.default.createElement(
                        _reactNative.Text,
                        { style: [styles.controlText], __source: {
                                fileName: _jsxFileName,
                                lineNumber: 90
                            }
                        },
                        '\u5F00\u5173\u63A7\u5236'
                    )
                ),
                _react2.default.createElement(
                    _reactNative.View,
                    { style: [styles.controlRightView], __source: {
                            fileName: _jsxFileName,
                            lineNumber: 92
                        }
                    },
                    _react2.default.createElement(_reactNative.Switch, {
                        onValueChange: this._onValueChange,
                        style: [styles.controlSwitch],
                        value: this.state.falseSwitchIsOn, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 93
                        }
                    })
                )
            )
        );
    },
    _onDateChange: function _onDateChange(date) {
        this.setState({
            date: date,
            timeZoneOffsetInHours: -1 * date.getTimezoneOffset() / 60
        });
    },
    _onValueChange: function _onValueChange(value) {
        var time = moment(this.state.date).format("HH:mm");
        console.log(time);
        if (value) {
            if (global.YrcnApp.appInfo.isOpenNotification == "0") {
                YrcnApp.native.RNUtilsModule.getAppInfo([], function (arrayObj) {
                    var appInfo = YrcnApp.utils.parseJSON(arrayObj[0]);
                    global.YrcnApp.appInfo = appInfo;
                    YrcnApp.utils.setAppInfo(appInfo);

                    if (global.YrcnApp.appInfo.isOpenNotification == "0") {
                        YrcnApp.utils.confirm("请允许" + YrcnApp.configs.AppName + "向您发送【通知】", function () {
                            global.YrcnApp.native.RNUtilsModule.gotoAppSystemSetting([]);
                        });
                        return;
                    } else {
                        innerFunc();
                        this.setState({ falseSwitchIsOn: value });
                    }
                });
                return;
            } else {
                innerFunc();
                this.setState({ falseSwitchIsOn: value });
            }
        } else {
            var userLogin = global.YrcnApp.loginUser.userLogin;
            userLogin.appNotificationTime = "";
            YrcnApp.utils.pushLoginInfo(global.YrcnApp.loginUser);
            global.YrcnApp.native.RNUtilsModule.appNotification(["0", time, ""], function () {});

            this.setState({ falseSwitchIsOn: value });
        }
        function innerFunc() {
            var userLogin = global.YrcnApp.loginUser.userLogin;
            userLogin.appNotificationTime = time;
            YrcnApp.utils.pushLoginInfo(global.YrcnApp.loginUser);
            global.YrcnApp.native.RNUtilsModule.appNotification(["1", time, ""], function () {});
        }
    }
});

module.exports = ViewTime;

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff',
        paddingTop: 50
    },
    controlView: {
        width: _reactNative.Dimensions.get('window').width,
        backgroundColor: '#ffffff',
        flexDirection: 'row',
        justifyContent: 'center',
        alignItems: 'center',
        paddingTop: 15,
        paddingBottom: 15,
        paddingLeft: 15,
        paddingRight: 15
    },
    controlLeftView: {
        flex: 4
    },
    controlRightView: {
        flex: 1
    },
    controlText: {
        fontSize: 16
    },
    Switch: {
        alignSelf: 'flex-end'
    },
    DatePickerIOS: {},
    tipsView: {
        width: _reactNative.Dimensions.get('window').width,
        backgroundColor: '#ffffff',
        paddingLeft: 15,
        paddingRight: 15,
        paddingTop: 15,
        paddingBottom: 15,
        marginTop: 20
    },
    tipsText: {
        color: '#444444',
        lineHeight: 20,
        fontSize: 13
    }
});
}, 576, null, "YrcnAppProject/src/view/ViewTime.android.js");
__d(/* YrcnAppProject/src/common/config/today_notifications.json */function(global, require, module, exports) {module.exports = module.exports = {
  "Time01": {
    "content": "这个时间点了，注意休息\r\n今天做了啥。。。"
  },
  "Time02": {
    "content": "这个时间点了，注意休息\r\n今天做了啥。。。"
  },
  "Time03": {
    "content": "这个时间点了，注意休息\r\n今天做了啥。。。"
  },
  "Time04": {
    "content": "这个时间点了，注意休息\r\n今天做了啥。。。"
  },
  "Time05": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time06": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time07": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time08": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time09": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time10": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time11": {
    "content": "这个点，再饿也得忍着。。。\r\n记录一下，今天要吃啥，做了啥吧。。。"
  },
  "Time12": {
    "content": "午饭时间到了，得吃饱饱的。。。\r\n记录一下，今天做了啥，吃了啥吧。。。"
  },
  "Time13": {
    "content": "合理的午休时间，会让下午更精神哦\r\n睡前记录一下，今天做了啥。。。"
  },
  "Time14": {
    "content": "下午时间来了，好好加油。。。\r\n今天上午做了啥，下午要做点啥哦。。。"
  },
  "Time15": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time16": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time17": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time18": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time19": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time20": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time21": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time22": {
    "content": "努力。。。奋斗。。。\r\n今天做了啥。。。"
  },
  "Time23": {
    "content": "该洗洗睡了。。。\r\n今天做了啥。。。"
  },
  "Time24": {
    "content": "尽量不要熬夜哦。。。\r\n今天做了啥。。。"
  }
};
}, 577, null, "YrcnAppProject/src/common/config/today_notifications.json");
__d(/* YrcnAppProject/src/view/ViewEditStudy.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewEditStudy.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var FormBox = require(533                   ); // 533 = ../component/FormBox
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ViewEditStudy = _react2.default.createClass({
    displayName: 'ViewEditStudy',

    _vars: {
        param: {},
        contentDay: YrcnApp.utils.nowDate()
    },
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        var _this = this;
        this._vars.param = {
            content: this.props.coreObj.content || ""
        };

        return {};
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 50
                }
            },
            _react2.default.createElement(ViewHeader, { title: this.props.title, onPressLeft: this._onPressLeft, leftText: '\u5B8C\u6210', __source: {
                    fileName: _jsxFileName,
                    lineNumber: 51
                }
            }),
            _react2.default.createElement(
                FormBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 52
                    }
                },
                _react2.default.createElement(FormBox.InputArea, { placeholder: "请输入学习内容...", keyboardType: "default", maxLength: 2000,
                    parent: this, paramName: "content", height: 140, multiline: true, inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e', defaultValue: this.props.coreObj.content, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 53
                    }
                })
            )
        );
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue;
    },
    _onPressLeft: function _onPressLeft() {
        var _this = this;
        YrcnApp.utils.confirm("您确认要提交么？", function () {
            var contentOneObj = {
                day: _this._vars.contentDay,
                content: _this._vars.param['content'],
                $key: _this.props.coreObj.$key,
                typeCode: _this.props.coreObj.$key
            };
            RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
                contentObj[YrcnApp.configs.AS_KEY_STUDY] = contentOneObj;
                RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {
                    YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'todayIcon' });
                });
            });

            RNAllService.getJson_today_synchronizeContentInfo(contentOneObj);
        }, "温馨提示", function () {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'todayIcon' });
        });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    }
});

module.exports = ViewEditStudy;
}, 578, null, "YrcnAppProject/src/view/ViewEditStudy.js");
__d(/* YrcnAppProject/src/view/ViewEditSport.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/view/ViewEditSport.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var FormBox = require(533                   ); // 533 = ../component/FormBox
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ViewEditSport = _react2.default.createClass({
    displayName: 'ViewEditSport',

    _vars: {
        param: {},
        contentDay: YrcnApp.utils.nowDate()
    },
    getDefaultProps: function getDefaultProps() {
        return {};
    },
    getInitialState: function getInitialState() {
        var _this = this;
        this._vars.param = this.props.coreObj || {};
        this._vars.param.content = this.props.coreObj.content || "";
        delete this._vars.param.day;

        return {
            typeArray: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNAllService.getJson_getTodaySportTypes({}, function (getJson_getTodaySportTypesObj) {
            var typeArray = getJson_getTodaySportTypesObj.list;
            for (var e in _this._vars.param) {
                if (e != "content") {
                    for (var _iterator = typeArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                        var _ref;

                        if (_isArray) {
                            if (_i >= _iterator.length) break;
                            _ref = _iterator[_i++];
                        } else {
                            _i = _iterator.next();
                            if (_i.done) break;
                            _ref = _i.value;
                        }

                        var item = _ref;

                        if (item.typeCode == e) {
                            item.isSelected = _this._vars.param[e];
                            break;
                        }
                    }
                }
            }
            _this.setState({ typeArray: typeArray });
        });
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 66
                }
            },
            _react2.default.createElement(ViewHeader, { title: this.props.title, onPressLeft: this._onPressLeft, leftText: '\u5B8C\u6210', rightText: '\u914D\u7F6E', onPressRight: this._onPressSetting, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 67
                }
            }),
            _react2.default.createElement(
                FormBox,
                { handleKeyboard: '1', heightStyle: { height: _reactNative.Dimensions.get('window').height - 74 }, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 68
                    }
                },
                _this.state.typeArray.map(function (d) {
                    return _react2.default.createElement(
                        _reactNative.View,
                        { style: styles.viewRow, key: d.typeCode, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 72
                            }
                        },
                        _react2.default.createElement(FormBox.Switch, { parent: _this, paramName: d.typeCode, textColor: '#01bbfc', text: "？" + d.typeContent, is: d.isSelected, __source: {
                                fileName: _jsxFileName,
                                lineNumber: 73
                            }
                        }),
                        function () {
                            if (d.isSelected) {
                                return _react2.default.createElement(FormBox.InputArea, { placeholder: "请输入" + d.typeContent + "内容...", keyboardType: "default", maxLength: 2000,
                                    parent: _this, paramName: d.typeCode + 'Desp', height: 80, multiline: true, inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e',
                                    defaultValue: _this.props.coreObj[d.typeCode + 'Desp'], __source: {
                                        fileName: _jsxFileName,
                                        lineNumber: 77
                                    }
                                });
                            }
                        }()
                    );
                })
            )
        );
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue;
        var typeArray = [];
        for (var i = 0; i < this.state.typeArray.length; i++) {
            console.log(i);
            var item = this.state.typeArray[i];
            if (item.typeCode == paramName) {
                item.isSelected = paramValue;
            }
            typeArray.push(item);
        }
        this.setState({ typeArray: typeArray });
    },
    _onPressLeft: function _onPressLeft() {
        var _this = this;
        YrcnApp.utils.confirm("您确认要提交么？", function () {
            var contentOneObj = {
                day: _this._vars.contentDay,
                typeCode: _this.props.coreObj.$key
            };
            for (var e in _this._vars.param) {
                contentOneObj[e] = _this._vars.param[e];
            }
            contentOneObj.content = '...';
            RNUtils.getJsonTodayContent(_this._vars.contentDay, function (contentObj) {
                contentObj[YrcnApp.configs.AS_KEY_SPORT] = contentOneObj;
                RNUtils.sycnJsonTodayContent(_this._vars.contentDay, contentObj, function () {
                    YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'todayIcon' });
                });
            });

            RNAllService.getJson_today_synchronizeContentInfo(contentOneObj);
        }, "温馨提示", function () {
            YrcnApp.now.$ViewRoot.setState({ viewName: 'TabBarIndex', selectedTab: 'todayIcon' });
        });
    },
    _onPressSetting: function _onPressSetting() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingSportType' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        backgroundColor: '#ffffff'
    },
    viewRow: {
        width: _reactNative.Dimensions.get('window').width
    }
});

module.exports = ViewEditSport;
}, 579, null, "YrcnAppProject/src/view/ViewEditSport.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewSettingSportType.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewSettingSportType.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLiSelected = require(573                                 ); // 573 = ../component/ListViewLiSelected.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ScrollViewSettingSportType = _react2.default.createClass({
    displayName: 'ScrollViewSettingSportType',

    _vars: {},
    getInitialState: function getInitialState() {
        var _this = this;

        return {
            isShowLoadingView: true,
            typeArray: []
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
        RNAllService.getJson_getTodaySportTypes({}, function (getJson_getTodaySportTypesObj) {
            _this.setState({
                typeArray: getJson_getTodaySportTypesObj.list
            });
        });
    },
    render: function render() {
        var _this = this;

        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u8FD0\u52A8\u914D\u7F6E', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 63
                }
            }),
            _react2.default.createElement(
                _reactNative.ScrollView,
                { style: styles.scrollViewContainer, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 64
                    }
                },
                function () {
                    return _this.state.typeArray.map(function (d, i) {
                        var key = Math.uuidFast();
                        return _react2.default.createElement(ListViewLiSelected, { title: d.typeContent, onPress: function onPress(r) {
                                _this._onPressLi(i, r);
                            }, key: key, color: '#000000', __source: {
                                fileName: _jsxFileName,
                                lineNumber: 70
                            }
                        });
                    });
                }()
            ),
            _react2.default.createElement(
                _reactNative.View,
                { style: [styles.bottomView], __source: {
                        fileName: _jsxFileName,
                        lineNumber: 76
                    }
                },
                _react2.default.createElement(
                    LineButtonsBox,
                    {
                        __source: {
                            fileName: _jsxFileName,
                            lineNumber: 77
                        }
                    },
                    _react2.default.createElement(LineButtonsBox.Button, { btnText: "新增", onPress: this._onPressAdd, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 78
                        }
                    }),
                    _react2.default.createElement(LineButtonsBox.Button, { btnText: "编辑", onPress: this._onPressUpd, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 79
                        }
                    }),
                    _react2.default.createElement(LineButtonsBox.Button, { btnText: "删除", onPress: this._onPressDel, __source: {
                            fileName: _jsxFileName,
                            lineNumber: 80
                        }
                    })
                )
            )
        );
    },
    _onPressLi: function _onPressLi(liIndex, result) {
        var _this = this;
        this.state.typeArray[liIndex].isSelected = result;
    },
    refreshView: function refreshView() {
        var _this = this;
        RNAllService.getJson_getTodaySportTypes({}, function (todayContentTypesObj) {
            _this.setState({
                typeArray: todayContentTypesObj.list
            });
        });
    },
    _onPressAdd: function _onPressAdd() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewAddSportType', viewTitle: '新增', prevView: this });
    },
    _onPressUpd: function _onPressUpd() {
        var _this = this;
        var typeArray = this.state.typeArray;
        var selectedArray = [];
        var newTypeArray = [];
        for (var _iterator = typeArray, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
            var _ref;

            if (_isArray) {
                if (_i >= _iterator.length) break;
                _ref = _iterator[_i++];
            } else {
                _i = _iterator.next();
                if (_i.done) break;
                _ref = _i.value;
            }

            var item = _ref;

            if (item.isSelected == "1") {
                selectedArray.push(item);
            }
        }
        if (selectedArray.length == 0) {
            RNUtils.alert("请至少选择一项");
            return;
        }
        if (selectedArray.length > 1) {
            RNUtils.alert("只能选择一项");
            return;
        }
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewUpdSportType', viewTitle: '编辑', prevView: this, typeObj: selectedArray[0] });
    },
    _onPressDel: function _onPressDel() {
        var _this = this;
        var typeArray = this.state.typeArray;
        var selectedArray = [];
        var newTypeArray = [];
        for (var _iterator2 = typeArray, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
            var _ref2;

            if (_isArray2) {
                if (_i2 >= _iterator2.length) break;
                _ref2 = _iterator2[_i2++];
            } else {
                _i2 = _iterator2.next();
                if (_i2.done) break;
                _ref2 = _i2.value;
            }

            var item = _ref2;

            if (item.isSelected == "1") {
                selectedArray.push(item);
            }
        }
        if (typeArray.length == selectedArray.length) {
            RNUtils.alert("请至少保留一项吧");
            return;
        }
        if (selectedArray.length == 0) {
            RNUtils.alert("请至少选择一项");
            return;
        }
        RNUtils.confirm("确定要删除么？", function () {
            for (var _iterator3 = typeArray, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref3;

                if (_isArray3) {
                    if (_i3 >= _iterator3.length) break;
                    _ref3 = _iterator3[_i3++];
                } else {
                    _i3 = _iterator3.next();
                    if (_i3.done) break;
                    _ref3 = _i3.value;
                }

                var item = _ref3;

                if (item.isSelected != "1") {
                    newTypeArray.push(item);
                }
            }
            RNUtils.setJsonTodaySportTypes({ list: newTypeArray }, function () {
                _this.refreshView();
            });
        });
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ViewEditSport' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {},
    scrollViewContainer: {
        backgroundColor: '#ffffff',
        height: _reactNative.Dimensions.get('window').height - 120
    },
    bottomView: {
        position: 'absolute',
        top: _reactNative.Dimensions.get('window').height - 44,
        left: 0,
        height: 44,
        borderTopWidth: 2,
        borderTopColor: '#aaaaaa',
        backgroundColor: '#ffffff'
    }
});

module.exports = ScrollViewSettingSportType;
}, 580, null, "YrcnAppProject/src/scrollview/ScrollViewSettingSportType.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewAddSportType.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewAddSportType.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLiSelected = require(573                                 ); // 573 = ../component/ListViewLiSelected.js
var ButtonsBox = require(525                         ); // 525 = ../component/ButtonsBox.js
var FormBox = require(533                      ); // 533 = ../component/FormBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ScrollViewAddSportType = _react2.default.createClass({
    displayName: 'ScrollViewAddSportType',

    _vars: {
        param: {
            content: ""
        }
    },
    getInitialState: function getInitialState() {
        var _this = this;

        return {
            isPressingAdd: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 60
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u65B0\u589E\u8FD0\u52A8\u914D\u7F6E', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            }),
            _react2.default.createElement(
                FormBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 62
                    }
                },
                _react2.default.createElement(FormBox.Input, { placeholder: "请输入...", keyboardType: "default", maxLength: 50,
                    parent: this, paramName: "content", inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 63
                    }
                })
            ),
            _react2.default.createElement(
                ButtonsBox,
                { marginBottom: 0, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 66
                    }
                },
                _react2.default.createElement(ButtonsBox.Button, { btnText: "新增", onPress: this._onPressAdd, isPressing: this.state.isPressingAdd, backgroundColor_pressing: '#01bbfc', backgroundColor: '#01bbfc', btnColor: '#ffffff', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 67
                    }
                })
            )
        );
    },
    _onPressAdd: function _onPressAdd() {
        var _this = this;
        if (this._vars.param.content == "") {
            RNUtils.alert("运动配置内容不能为空");
            return;
        }
        RNAllService.getJson_getTodaySportTypes({}, function (todayContentTypesObj) {
            var typeObj = {
                typeCode: _this._vars.param.content,
                typeContent: _this._vars.param.content
            };
            for (var _iterator = todayContentTypesObj.list, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var item = _ref;

                if (typeObj.typeContent == item.typeContent) {
                    RNUtils.alert("请勿重复新增" + typeObj.typeContent, function () {});
                    return;
                }
            }
            todayContentTypesObj.list.push(typeObj);
            RNUtils.setJsonTodaySportTypes(todayContentTypesObj, function () {
                RNUtils.alert("新增成功", function () {
                    YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingSportType' });
                });
            });
        });
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue.trim();
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingSportType' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        backgroundColor: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        flexDirection: 'column',
        justifyContent: 'flex-start',
        alignItems: 'center'
    }
});

module.exports = ScrollViewAddSportType;
}, 581, null, "YrcnAppProject/src/scrollview/ScrollViewAddSportType.js");
__d(/* YrcnAppProject/src/scrollview/ScrollViewUpdSportType.js */function(global, require, module, exports) {
'use strict';

var _jsxFileName = '/Users/weichuang/Documents/file/workspace/RN/TodayProject/src/scrollview/ScrollViewUpdSportType.js';

var _react = require(12     ); // 12 = react

var _react2 = babelHelpers.interopRequireDefault(_react);

var _reactNative = require(46            ); // 46 = react-native

var moment = require(502                                    ); // 502 = moment/min/moment-with-locales.min.js
moment.locale('zh-cn');
var RNUtils = require(475                   ); // 475 = ../common/RNUtils.js
var RNLunarCalendar = require(503                           ); // 503 = ../common/RNLunarCalendar.js
var RNAllService = require(477                        ); // 477 = ../common/RNAllService.js
var ACViewBox = require(505                        ); // 505 = ../component/ACViewBox.js
var TitleIntroduceBox = require(506                                ); // 506 = ../component/TitleIntroduceBox.js
var LineButtonsBox = require(507                             ); // 507 = ../component/LineButtonsBox.js
var ListViewLiSelected = require(573                                 ); // 573 = ../component/ListViewLiSelected.js
var ButtonsBox = require(525                         ); // 525 = ../component/ButtonsBox.js
var FormBox = require(533                      ); // 533 = ../component/FormBox.js
var ViewHeader = require(516                         ); // 516 = ../component/ViewHeader.js

var ScrollViewUpdSportType = _react2.default.createClass({
    displayName: 'ScrollViewUpdSportType',

    _vars: {
        param: {
            content: ""
        }
    },
    getInitialState: function getInitialState() {
        var _this = this;
        this._vars.param.content = this.props.typeObj.typeCode;

        return {
            isPressingUpd: false
        };
    },

    componentDidMount: function componentDidMount() {
        var _this = this;
    },
    render: function render() {
        var _this = this;
        return _react2.default.createElement(
            _reactNative.View,
            { style: styles.container, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 61
                }
            },
            _react2.default.createElement(ViewHeader, { title: '\u7F16\u8F91\u8FD0\u52A8\u914D\u7F6E', onPressLeft: this._onPressLeft, __source: {
                    fileName: _jsxFileName,
                    lineNumber: 62
                }
            }),
            _react2.default.createElement(
                FormBox,
                {
                    __source: {
                        fileName: _jsxFileName,
                        lineNumber: 63
                    }
                },
                _react2.default.createElement(FormBox.Input, { placeholder: "请输入", keyboardType: "default", maxLength: 50,
                    parent: this, paramName: "content", defaultValue: this.props.typeObj.typeCode, inputColor: '#01bbfc', placeholderTextColor: '#4e4e4e', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 64
                    }
                })
            ),
            _react2.default.createElement(
                ButtonsBox,
                { marginBottom: 0, __source: {
                        fileName: _jsxFileName,
                        lineNumber: 67
                    }
                },
                _react2.default.createElement(ButtonsBox.Button, { btnText: "编辑", onPress: this._onPressUpd, isPressing: this.state.isPressingUpd,
                    backgroundColor_pressing: '#01bbfc', backgroundColor: '#01bbfc', btnColor: '#ffffff', __source: {
                        fileName: _jsxFileName,
                        lineNumber: 68
                    }
                })
            )
        );
    },
    _onPressUpd: function _onPressUpd() {
        var _this = this;
        if (this._vars.param.content == "") {
            RNUtils.alert("事件展示内容不能为空");
            return;
        }
        RNAllService.getJson_getTodaySportTypes({}, function (todayContentTypesObj) {
            var typeObj = {
                typeCode: _this._vars.param.content,
                typeContent: _this._vars.param.content
            };
            for (var _iterator = todayContentTypesObj.list, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === 'function' ? Symbol.iterator : '@@iterator']();;) {
                var _ref;

                if (_isArray) {
                    if (_i >= _iterator.length) break;
                    _ref = _iterator[_i++];
                } else {
                    _i = _iterator.next();
                    if (_i.done) break;
                    _ref = _i.value;
                }

                var item = _ref;

                if (_this.props.typeObj.typeCode == item.typeCode) {
                    item.typeCode = _this._vars.param.content;
                    item.typeContent = _this._vars.param.content;
                    RNUtils.setJsonTodaySportTypes(todayContentTypesObj, function () {
                        RNUtils.alert("编辑成功", function () {
                            YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingSportType' });
                        });
                    });
                    return;
                }
            }
        });
    },
    changeParam: function changeParam(paramName, paramValue) {
        this._vars.param[paramName] = paramValue.trim();
    },
    _onPressLeft: function _onPressLeft() {
        YrcnApp.now.$ViewRoot.setState({ viewName: 'ScrollViewSettingSportType' });
    }
});

var styles = _reactNative.StyleSheet.create({
    container: {
        backgroundColor: '#ffffff',
        width: _reactNative.Dimensions.get('window').width,
        height: _reactNative.Dimensions.get('window').height,
        flexDirection: 'column',
        alignItems: 'center'
    }
});

module.exports = ScrollViewUpdSportType;
}, 582, null, "YrcnAppProject/src/scrollview/ScrollViewUpdSportType.js");
;require(198);
;require(0);